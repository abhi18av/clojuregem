s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require_relative,
    s(:str, "rss-testcase")),
  s(:send, nil, :require,
    s(:str, "rss/atom")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestAtomCore),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@uri,
              s(:str, "http://www.w3.org/2005/Atom")),
            s(:ivasgn, :@xhtml_uri,
              s(:str, "http://www.w3.org/1999/xhtml")))),
        s(:def, :test_feed,
          s(:args),
          s(:begin,
            s(:lvasgn, :version,
              s(:str, "1.0")),
            s(:lvasgn, :encoding,
              s(:str, "UTF-8")),
            s(:lvasgn, :standalone,
              s(:false)),
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :new,
                s(:lvar, :version),
                s(:lvar, :encoding),
                s(:lvar, :standalone))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:lvasgn, :author,
              s(:send,
                s(:const,
                  s(:send,
                    s(:lvar, :feed), :class), :Author), :new)),
            s(:lvasgn, :name,
              s(:send,
                s(:const,
                  s(:const,
                    s(:send,
                      s(:lvar, :feed), :class), :Author), :Name), :new)),
            s(:send,
              s(:lvar, :name), :content=,
              s(:str, "an author")),
            s(:send,
              s(:lvar, :author), :name=,
              s(:lvar, :name)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :author), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :feed), :authors), :<<,
              s(:lvar, :author)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:lvasgn, :id,
              s(:send,
                s(:const,
                  s(:send,
                    s(:lvar, :feed), :class), :Id), :new)),
            s(:send,
              s(:lvar, :id), :content=,
              s(:str, "http://example.com/atom.xml")),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :id), :to_s)),
            s(:send,
              s(:lvar, :feed), :id=,
              s(:lvar, :id)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:lvasgn, :title,
              s(:send,
                s(:const,
                  s(:send,
                    s(:lvar, :feed), :class), :Title), :new)),
            s(:send,
              s(:lvar, :title), :content=,
              s(:str, "a title")),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :title), :to_s)),
            s(:send,
              s(:lvar, :feed), :title=,
              s(:lvar, :title)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:lvasgn, :updated,
              s(:send,
                s(:const,
                  s(:send,
                    s(:lvar, :feed), :class), :Updated), :new)),
            s(:send,
              s(:lvar, :updated), :content=,
              s(:send,
                s(:const, nil, :Time), :now)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :updated), :to_s)),
            s(:send,
              s(:lvar, :feed), :updated=,
              s(:lvar, :updated)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :feed), :authors), :clear),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:lvasgn, :entry,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :new)),
            s(:send, nil, :setup_entry,
              s(:lvar, :entry)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :entry), :to_s)),
            s(:lvasgn, :author,
              s(:send,
                s(:send,
                  s(:lvar, :entry), :authors), :first)),
            s(:send,
              s(:send,
                s(:lvar, :entry), :authors), :clear),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :entry), :to_s)),
            s(:send,
              s(:lvar, :entry), :parent=,
              s(:lvar, :feed)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :entry), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :feed), :authors), :<<,
              s(:lvar, :author)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :entry), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :feed), :authors), :clear),
            s(:send,
              s(:send,
                s(:lvar, :feed), :entries), :<<,
              s(:lvar, :entry)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :entry), :authors), :<<,
              s(:lvar, :author)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :entry), :to_s)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :feed), :to_s))),
            s(:lvasgn, :xmldecl,
              s(:send,
                s(:lvar, :doc), :xml_decl)),
            s(:send, nil, :assert_equal,
              s(:lvar, :version),
              s(:send,
                s(:lvar, :xmldecl), :version)),
            s(:send, nil, :assert_equal,
              s(:lvar, :encoding),
              s(:send,
                s(:send,
                  s(:lvar, :xmldecl), :encoding), :to_s)),
            s(:send, nil, :assert_equal,
              s(:lvar, :standalone),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :xmldecl), :standalone), :nil?), :!)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@uri),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :namespace)))),
        s(:def, :test_entry,
          s(:args),
          s(:begin,
            s(:lvasgn, :version,
              s(:str, "1.0")),
            s(:lvasgn, :encoding,
              s(:str, "UTF-8")),
            s(:lvasgn, :standalone,
              s(:false)),
            s(:lvasgn, :entry,
              s(:send,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :new,
                s(:lvar, :version),
                s(:lvar, :encoding),
                s(:lvar, :standalone))),
            s(:send, nil, :setup_entry,
              s(:lvar, :entry)),
            s(:lvasgn, :author,
              s(:send,
                s(:send,
                  s(:lvar, :entry), :authors), :first)),
            s(:send,
              s(:send,
                s(:lvar, :entry), :authors), :clear),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :entry), :to_s)),
            s(:lvasgn, :source,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :new)),
            s(:send,
              s(:send,
                s(:lvar, :source), :authors), :<<,
              s(:lvar, :author)),
            s(:send,
              s(:lvar, :entry), :source=,
              s(:lvar, :source)),
            s(:send, nil, :assert_not_equal,
              s(:str, ""),
              s(:send,
                s(:lvar, :entry), :to_s)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :entry), :to_s))),
            s(:lvasgn, :xmldecl,
              s(:send,
                s(:lvar, :doc), :xml_decl)),
            s(:send, nil, :assert_equal,
              s(:lvar, :version),
              s(:send,
                s(:lvar, :xmldecl), :version)),
            s(:send, nil, :assert_equal,
              s(:lvar, :encoding),
              s(:send,
                s(:send,
                  s(:lvar, :xmldecl), :encoding), :to_s)),
            s(:send, nil, :assert_equal,
              s(:lvar, :standalone),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :xmldecl), :standalone), :nil?), :!)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@uri),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :namespace)))),
        s(:def, :test_not_displayed_xml_stylesheets,
          s(:args),
          s(:begin,
            s(:lvasgn, :feed,
              s(:send,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :new)),
            s(:lvasgn, :plain_feed,
              s(:send,
                s(:lvar, :feed), :to_s)),
            s(:block,
              s(:send,
                s(:int, 3), :times),
              s(:args),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :feed), :xml_stylesheets), :push,
                  s(:send,
                    s(:const, nil, :XMLStyleSheet), :new)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :plain_feed),
                  s(:send,
                    s(:lvar, :feed), :to_s)))))),
        s(:def, :test_atom_author,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Author)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Author)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Author)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Author)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Author)))),
        s(:def, :test_atom_category,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_category_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Category)),
            s(:send, nil, :assert_atom_category_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Category)),
            s(:send, nil, :assert_atom_category_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Category)),
            s(:send, nil, :assert_atom_category_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Category)),
            s(:send, nil, :assert_atom_category_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Category)))),
        s(:def, :test_atom_contributor,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Contributor)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Contributor)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Contributor)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Contributor)),
            s(:send, nil, :assert_atom_person_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Contributor)))),
        s(:def, :test_atom_generator,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_generator_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Generator)),
            s(:send, nil, :assert_atom_generator_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Generator)),
            s(:send, nil, :assert_atom_generator_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Generator)))),
        s(:def, :test_atom_icon,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_icon_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Icon)),
            s(:send, nil, :assert_atom_icon_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Icon)),
            s(:send, nil, :assert_atom_icon_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Icon)))),
        s(:def, :test_atom_id,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_id_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Id)),
            s(:send, nil, :assert_atom_id_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Id)),
            s(:send, nil, :assert_atom_id_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Id)),
            s(:send, nil, :assert_atom_id_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Id)),
            s(:send, nil, :assert_atom_id_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Id)))),
        s(:def, :test_atom_link,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_link_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Link)),
            s(:send, nil, :assert_atom_link_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Link)),
            s(:send, nil, :assert_atom_link_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Link)),
            s(:send, nil, :assert_atom_link_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Link)),
            s(:send, nil, :assert_atom_link_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Link)))),
        s(:def, :test_atom_logo,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_logo_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Logo)),
            s(:send, nil, :assert_atom_logo_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Logo)),
            s(:send, nil, :assert_atom_logo_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Logo)))),
        s(:def, :test_atom_rights,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Rights)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Rights)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Rights)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Rights)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Rights)))),
        s(:def, :test_atom_subtitle,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Subtitle)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Subtitle)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Subtitle)))),
        s(:def, :test_atom_title,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Title)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Title)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Title)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Title)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Title)))),
        s(:def, :test_atom_updated,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_date_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Feed), :Updated)),
            s(:send, nil, :assert_atom_date_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Updated)),
            s(:send, nil, :assert_atom_date_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Updated)),
            s(:send, nil, :assert_atom_date_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Atom), :Feed), :Entry), :Source), :Updated)),
            s(:send, nil, :assert_atom_date_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Entry), :Source), :Updated)))),
        s(:def, :test_atom_content,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_content_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Content)),
            s(:send, nil, :assert_atom_content_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Content)))),
        s(:def, :test_atom_published,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_date_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Published)),
            s(:send, nil, :assert_atom_date_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Published)))),
        s(:def, :test_atom_summary,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Atom), :Feed), :Entry), :Summary)),
            s(:send, nil, :assert_atom_text_construct_to_s,
              s(:const,
                s(:const,
                  s(:const, nil, :Atom), :Entry), :Summary)))),
        s(:def, :test_to_xml,
          s(:args,
            s(:optarg, :with_convenience_way,
              s(:true))),
          s(:begin,
            s(:lvasgn, :atom,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_feed))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :atom), :to_s),
              s(:send,
                s(:lvar, :atom), :to_xml)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :atom), :to_s),
              s(:send,
                s(:lvar, :atom), :to_xml,
                s(:str, "atom"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :atom), :to_s),
              s(:send,
                s(:lvar, :atom), :to_xml,
                s(:str, "atom1.0"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :atom), :to_s),
              s(:send,
                s(:lvar, :atom), :to_xml,
                s(:str, "atom1.0:feed"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :atom), :to_s),
              s(:send,
                s(:lvar, :atom), :to_xml,
                s(:str, "atom:feed"))),
            s(:lvasgn, :rss09_xml,
              s(:block,
                s(:send,
                  s(:lvar, :atom), :to_xml,
                  s(:str, "0.91")),
                s(:args,
                  s(:arg, :maker)),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :language=,
                    s(:str, "en-us")),
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :link=,
                    s(:str, "http://example.com/")),
                  s(:if,
                    s(:lvar, :with_convenience_way),
                    s(:send,
                      s(:send,
                        s(:lvar, :maker), :channel), :description=,
                      s(:send,
                        s(:send,
                          s(:lvar, :atom), :title), :content)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :maker), :channel), :description),
                      s(:args,
                        s(:arg, :d)),
                      s(:send,
                        s(:lvar, :d), :content=,
                        s(:send,
                          s(:send,
                            s(:lvar, :atom), :title), :content)))),
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :image), :url=,
                    s(:str, "http://example.com/logo.png")),
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :image), :title=,
                    s(:str, "Logo"))))),
            s(:lvasgn, :rss09,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:lvar, :rss09_xml))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "rss"),
                s(:str, "0.91"),
                s(:nil)),
              s(:send,
                s(:lvar, :rss09), :feed_info)),
            s(:lvasgn, :rss20_xml,
              s(:block,
                s(:send,
                  s(:lvar, :atom), :to_xml,
                  s(:str, "2.0")),
                s(:args,
                  s(:arg, :maker)),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :link=,
                    s(:str, "http://example.com/")),
                  s(:if,
                    s(:lvar, :with_convenience_way),
                    s(:send,
                      s(:send,
                        s(:lvar, :maker), :channel), :description=,
                      s(:send,
                        s(:send,
                          s(:lvar, :atom), :title), :content)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :maker), :channel), :description),
                      s(:args,
                        s(:arg, :d)),
                      s(:send,
                        s(:lvar, :d), :content=,
                        s(:send,
                          s(:send,
                            s(:lvar, :atom), :title), :content))))))),
            s(:lvasgn, :rss20,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:lvar, :rss20_xml))),
            s(:send, nil, :assert_equal,
              s(:str, "2.0"),
              s(:send,
                s(:lvar, :rss20), :rss_version)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "rss"),
                s(:str, "2.0"),
                s(:nil)),
              s(:send,
                s(:lvar, :rss20), :feed_info)))),
        s(:def, :test_to_xml_with_new_api_since_018,
          s(:args),
          s(:send, nil, :test_to_xml,
            s(:false))),
        s(:send, nil, :private),
        s(:def, :setup_entry,
          s(:args,
            s(:arg, :entry)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :entry), :to_s)),
              s(:lvasgn, :author,
                s(:send,
                  s(:const,
                    s(:send,
                      s(:lvar, :entry), :class), :Author), :new)),
              s(:lvasgn, :name,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:send,
                        s(:lvar, :entry), :class), :Author), :Name), :new)),
              s(:send,
                s(:lvar, :name), :content=,
                s(:str, "an author")),
              s(:send,
                s(:lvar, :author), :name=,
                s(:lvar, :name)),
              s(:send, nil, :assert_not_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :author), :to_s)),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :authors), :<<,
                s(:lvar, :author)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :entry), :to_s)),
              s(:lvasgn, :id,
                s(:send,
                  s(:const,
                    s(:send,
                      s(:lvar, :entry), :class), :Id), :new)),
              s(:send,
                s(:lvar, :id), :content=,
                s(:str, "http://example.com/atom.xml")),
              s(:send, nil, :assert_not_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :id), :to_s)),
              s(:send,
                s(:lvar, :entry), :id=,
                s(:lvar, :id)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :entry), :to_s)),
              s(:lvasgn, :title,
                s(:send,
                  s(:const,
                    s(:send,
                      s(:lvar, :entry), :class), :Title), :new)),
              s(:send,
                s(:lvar, :title), :content=,
                s(:str, "a title")),
              s(:send, nil, :assert_not_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :title), :to_s)),
              s(:send,
                s(:lvar, :entry), :title=,
                s(:lvar, :title)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :entry), :to_s)),
              s(:lvasgn, :updated,
                s(:send,
                  s(:const,
                    s(:send,
                      s(:lvar, :entry), :class), :Updated), :new)),
              s(:send,
                s(:lvar, :updated), :content=,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:send, nil, :assert_not_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :updated), :to_s)),
              s(:send,
                s(:lvar, :entry), :updated=,
                s(:lvar, :updated)),
              s(:send, nil, :assert_not_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :entry), :to_s))))),
        s(:def, :assert_atom_person_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :name,
                s(:str, "A person")),
              s(:lvasgn, :uri,
                s(:str, "http://example.com/person/")),
              s(:lvasgn, :email,
                s(:str, "person@example.com")),
              s(:lvasgn, :target,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :target), :to_s)),
              s(:lvasgn, :target,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:lvasgn, :person_name,
                s(:send,
                  s(:const,
                    s(:lvar, :target_class), :Name), :new)),
              s(:send,
                s(:lvar, :person_name), :content=,
                s(:lvar, :name)),
              s(:send,
                s(:lvar, :target), :name=,
                s(:lvar, :person_name)),
              s(:lvasgn, :xml_target,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :target), :to_s)), :root)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "name")),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :xml_target), :elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :name))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:lvar, :name)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :xml_target), :elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :text))),
              s(:lvasgn, :person_uri,
                s(:send,
                  s(:const,
                    s(:lvar, :target_class), :Uri), :new)),
              s(:send,
                s(:lvar, :person_uri), :content=,
                s(:lvar, :uri)),
              s(:send,
                s(:lvar, :target), :uri=,
                s(:lvar, :person_uri)),
              s(:lvasgn, :xml_target,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :target), :to_s)), :root)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "name"),
                  s(:str, "uri")),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :xml_target), :elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :name))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:lvar, :name),
                  s(:lvar, :uri)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :xml_target), :elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :text))),
              s(:lvasgn, :person_email,
                s(:send,
                  s(:const,
                    s(:lvar, :target_class), :Email), :new)),
              s(:send,
                s(:lvar, :person_email), :content=,
                s(:lvar, :email)),
              s(:send,
                s(:lvar, :target), :email=,
                s(:lvar, :person_email)),
              s(:lvasgn, :xml_target,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :target), :to_s)), :root)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "name"),
                  s(:str, "uri"),
                  s(:str, "email")),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :xml_target), :elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :name))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:lvar, :name),
                  s(:lvar, :uri),
                  s(:lvar, :email)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :xml_target), :elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :text)))))),
        s(:def, :assert_atom_category_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :term,
                s(:str, "music")),
              s(:lvasgn, :scheme,
                s(:str, "http://example.com/music")),
              s(:lvasgn, :label,
                s(:str, "Music")),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :category), :to_s)),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :category), :scheme=,
                s(:lvar, :scheme)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :category), :to_s)),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :category), :label=,
                s(:lvar, :label)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :category), :to_s)),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :category), :scheme=,
                s(:lvar, :scheme)),
              s(:send,
                s(:lvar, :category), :label=,
                s(:lvar, :label)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :category), :to_s)),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :category), :term=,
                s(:lvar, :term)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :category), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "term"),
                    s(:lvar, :term))),
                s(:nil),
                s(:lvar, :xml)),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :category), :term=,
                s(:lvar, :term)),
              s(:send,
                s(:lvar, :category), :scheme=,
                s(:lvar, :scheme)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :category), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "term"),
                    s(:lvar, :term)),
                  s(:pair,
                    s(:str, "scheme"),
                    s(:lvar, :scheme))),
                s(:nil),
                s(:lvar, :xml)),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :category), :term=,
                s(:lvar, :term)),
              s(:send,
                s(:lvar, :category), :label=,
                s(:lvar, :label)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :category), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "term"),
                    s(:lvar, :term)),
                  s(:pair,
                    s(:str, "label"),
                    s(:lvar, :label))),
                s(:nil),
                s(:lvar, :xml)),
              s(:lvasgn, :category,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :category), :term=,
                s(:lvar, :term)),
              s(:send,
                s(:lvar, :category), :scheme=,
                s(:lvar, :scheme)),
              s(:send,
                s(:lvar, :category), :label=,
                s(:lvar, :label)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :category), :to_s)), :root)),
              s(:lvasgn, :attrs,
                s(:hash,
                  s(:pair,
                    s(:str, "term"),
                    s(:lvar, :term)),
                  s(:pair,
                    s(:str, "scheme"),
                    s(:lvar, :scheme)),
                  s(:pair,
                    s(:str, "label"),
                    s(:lvar, :label)))),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:lvar, :attrs),
                s(:nil),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_generator_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :content,
                s(:str, "Feed generator")),
              s(:lvasgn, :uri,
                s(:str, "http://example.com/generator")),
              s(:lvasgn, :version,
                s(:str, "0.0.1")),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :generator), :to_s)),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :generator), :uri=,
                s(:lvar, :uri)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :generator), :to_s)),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :generator), :version=,
                s(:lvar, :version)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :generator), :to_s)),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :generator), :uri=,
                s(:lvar, :uri)),
              s(:send,
                s(:lvar, :generator), :version=,
                s(:lvar, :version)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :generator), :to_s)),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :generator), :content=,
                s(:lvar, :content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :generator), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash),
                s(:lvar, :content),
                s(:lvar, :xml)),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :generator), :content=,
                s(:lvar, :content)),
              s(:send,
                s(:lvar, :generator), :uri=,
                s(:lvar, :uri)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :generator), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "uri"),
                    s(:lvar, :uri))),
                s(:lvar, :content),
                s(:lvar, :xml)),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :generator), :content=,
                s(:lvar, :content)),
              s(:send,
                s(:lvar, :generator), :version=,
                s(:lvar, :version)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :generator), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "version"),
                    s(:lvar, :version))),
                s(:lvar, :content),
                s(:lvar, :xml)),
              s(:lvasgn, :generator,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :generator), :content=,
                s(:lvar, :content)),
              s(:send,
                s(:lvar, :generator), :uri=,
                s(:lvar, :uri)),
              s(:send,
                s(:lvar, :generator), :version=,
                s(:lvar, :version)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :generator), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "uri"),
                    s(:lvar, :uri)),
                  s(:pair,
                    s(:str, "version"),
                    s(:lvar, :version))),
                s(:lvar, :content),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_icon_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :content,
                s(:str, "http://example.com/icon.png")),
              s(:lvasgn, :icon,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :icon), :to_s)),
              s(:lvasgn, :icon,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :icon), :content=,
                s(:lvar, :content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :icon), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash),
                s(:lvar, :content),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_id_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :content,
                s(:str, "http://example.com/1")),
              s(:lvasgn, :id,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :id), :to_s)),
              s(:lvasgn, :id,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :id), :content=,
                s(:lvar, :content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :id), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash),
                s(:lvar, :content),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_link_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :href,
                s(:str, "http://example.com/atom.xml")),
              s(:lvasgn, :optvs,
                s(:hash,
                  s(:pair,
                    s(:str, "rel"),
                    s(:str, "self")),
                  s(:pair,
                    s(:str, "type"),
                    s(:str, "application/atom+xml")),
                  s(:pair,
                    s(:str, "hreflang"),
                    s(:str, "ja")),
                  s(:pair,
                    s(:str, "title"),
                    s(:str, "Atom Feed")),
                  s(:pair,
                    s(:str, "length"),
                    s(:str, "801")))),
              s(:lvasgn, :link,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :link), :to_s)),
              s(:lvasgn, :link,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :link), :href=,
                s(:lvar, :href)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :link), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "href"),
                    s(:lvar, :href))),
                s(:nil),
                s(:lvar, :xml)),
              s(:lvasgn, :optional_arguments,
                s(:array,
                  s(:str, "rel"),
                  s(:str, "type"),
                  s(:str, "hreflang"),
                  s(:str, "title"),
                  s(:str, "length"))),
              s(:block,
                s(:send,
                  s(:lvar, :optional_arguments), :each),
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:lvasgn, :rest,
                    s(:block,
                      s(:send,
                        s(:lvar, :optional_arguments), :reject),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:lvar, :x), :==,
                        s(:lvar, :name)))),
                  s(:lvasgn, :link,
                    s(:send,
                      s(:lvar, :target_class), :new)),
                  s(:send,
                    s(:lvar, :link), :__send__,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "=")),
                    s(:send,
                      s(:lvar, :optvs), :[],
                      s(:lvar, :name))),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:lvar, :link), :to_s)),
                  s(:block,
                    s(:send,
                      s(:lvar, :rest), :each),
                    s(:args,
                      s(:arg, :n)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :link), :__send__,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :n)),
                          s(:str, "=")),
                        s(:send,
                          s(:lvar, :optvs), :[],
                          s(:lvar, :n))),
                      s(:send, nil, :assert_equal,
                        s(:str, ""),
                        s(:send,
                          s(:lvar, :link), :to_s)))),
                  s(:lvasgn, :link,
                    s(:send,
                      s(:lvar, :target_class), :new)),
                  s(:send,
                    s(:lvar, :link), :href=,
                    s(:lvar, :href)),
                  s(:send,
                    s(:lvar, :link), :__send__,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "=")),
                    s(:send,
                      s(:lvar, :optvs), :[],
                      s(:lvar, :name))),
                  s(:lvasgn, :attrs,
                    s(:array,
                      s(:array,
                        s(:str, "href"),
                        s(:lvar, :href)),
                      s(:array,
                        s(:lvar, :name),
                        s(:send,
                          s(:lvar, :optvs), :[],
                          s(:lvar, :name))))),
                  s(:lvasgn, :xml,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :link), :to_s)), :root)),
                  s(:send, nil, :assert_rexml_element,
                    s(:array),
                    s(:lvar, :attrs),
                    s(:nil),
                    s(:lvar, :xml)),
                  s(:block,
                    s(:send,
                      s(:lvar, :rest), :each),
                    s(:args,
                      s(:arg, :n)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :link), :__send__,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :n)),
                          s(:str, "=")),
                        s(:send,
                          s(:lvar, :optvs), :[],
                          s(:lvar, :n))),
                      s(:send,
                        s(:lvar, :attrs), :<<,
                        s(:array,
                          s(:lvar, :n),
                          s(:send,
                            s(:lvar, :optvs), :[],
                            s(:lvar, :n)))),
                      s(:lvasgn, :xml,
                        s(:send,
                          s(:send,
                            s(:const,
                              s(:const, nil, :REXML), :Document), :new,
                            s(:send,
                              s(:lvar, :link), :to_s)), :root)),
                      s(:send, nil, :assert_rexml_element,
                        s(:array),
                        s(:lvar, :attrs),
                        s(:nil),
                        s(:lvar, :xml))))))))),
        s(:def, :assert_atom_logo_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :content,
                s(:str, "http://example.com/logo.png")),
              s(:lvasgn, :logo,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :logo), :to_s)),
              s(:lvasgn, :logo,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :logo), :content=,
                s(:lvar, :content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :logo), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash),
                s(:lvar, :content),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_text_construct_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :text_content,
                s(:str, "plain text")),
              s(:lvasgn, :html_content,
                s(:dstr,
                  s(:str, "<em>"),
                  s(:begin,
                    s(:lvar, :text_content)),
                  s(:str, "</em>"))),
              s(:lvasgn, :xhtml_uri,
                s(:str, "http://www.w3.org/1999/xhtml")),
              s(:lvasgn, :xhtml_em,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RSS), :XML), :Element), :new,
                  s(:str, "em"),
                  s(:nil),
                  s(:lvar, :xhtml_uri),
                  s(:hash),
                  s(:lvar, :text_content))),
              s(:lvasgn, :xhtml_content,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RSS), :XML), :Element), :new,
                  s(:str, "div"),
                  s(:nil),
                  s(:lvar, :xhtml_uri),
                  s(:hash,
                    s(:pair,
                      s(:str, "xmlns"),
                      s(:lvar, :xhtml_uri))),
                  s(:array,
                    s(:lvar, :xhtml_em)))),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :text), :to_s)),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :text), :type=,
                s(:str, "text")),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :text), :to_s)),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :text), :content=,
                s(:lvar, :text_content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :text), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash),
                s(:lvar, :text_content),
                s(:lvar, :xml)),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :text), :type=,
                s(:str, "text")),
              s(:send,
                s(:lvar, :text), :content=,
                s(:lvar, :text_content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :text), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:str, "text"))),
                s(:lvar, :text_content),
                s(:lvar, :xml)),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :text), :type=,
                s(:str, "html")),
              s(:send,
                s(:lvar, :text), :content=,
                s(:lvar, :html_content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :text), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:str, "html"))),
                s(:lvar, :html_content),
                s(:lvar, :xml)),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :text), :type=,
                s(:str, "xhtml")),
              s(:send,
                s(:lvar, :text), :content=,
                s(:lvar, :xhtml_content)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :text), :to_s)),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :text), :type=,
                s(:str, "xhtml")),
              s(:send,
                s(:lvar, :text), :__send__,
                s(:send,
                  s(:lvar, :target_class), :xml_setter),
                s(:lvar, :xhtml_content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :text), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array,
                  s(:array,
                    s(:lvar, :xhtml_uri),
                    s(:str, "div"))),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:str, "xhtml"))),
                s(:nil),
                s(:lvar, :xml)),
              s(:send, nil, :assert_rexml_element,
                s(:array,
                  s(:array,
                    s(:lvar, :xhtml_uri),
                    s(:str, "em"))),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:send,
                    s(:lvar, :xml), :elements), :[],
                  s(:int, 1))),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash),
                s(:lvar, :text_content),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :xml), :elements), :[],
                      s(:int, 1)), :elements), :[],
                  s(:int, 1))),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :text), :type=,
                s(:str, "xhtml")),
              s(:send,
                s(:lvar, :text), :__send__,
                s(:send,
                  s(:lvar, :target_class), :xml_setter),
                s(:lvar, :xhtml_em)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :text), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array,
                  s(:array,
                    s(:lvar, :xhtml_uri),
                    s(:str, "div"))),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:str, "xhtml"))),
                s(:nil),
                s(:lvar, :xml)),
              s(:send, nil, :assert_rexml_element,
                s(:array,
                  s(:array,
                    s(:lvar, :xhtml_uri),
                    s(:str, "em"))),
                s(:nil),
                s(:nil),
                s(:send,
                  s(:send,
                    s(:lvar, :xml), :elements), :[],
                  s(:int, 1))),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash),
                s(:lvar, :text_content),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :xml), :elements), :[],
                      s(:int, 1)), :elements), :[],
                  s(:int, 1)))))),
        s(:def, :assert_atom_date_construct_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :date,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :date), :to_s)),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "2003-12-13T18:30:02Z"),
                    s(:str, "2003-12-13T18:30:02.25Z"),
                    s(:str, "2003-12-13T18:30:02+01:00"),
                    s(:str, "2003-12-13T18:30:02.25+01:00")), :each),
                s(:args,
                  s(:arg, :content)),
                s(:begin,
                  s(:lvasgn, :date,
                    s(:send,
                      s(:lvar, :target_class), :new)),
                  s(:send,
                    s(:lvar, :date), :content=,
                    s(:lvar, :content)),
                  s(:lvasgn, :xml,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :date), :to_s)), :root)),
                  s(:send, nil, :assert_rexml_element,
                    s(:array),
                    s(:hash),
                    s(:lvar, :content),
                    s(:lvar, :xml),
                    s(:sym, :time)),
                  s(:lvasgn, :date,
                    s(:send,
                      s(:lvar, :target_class), :new)),
                  s(:send,
                    s(:lvar, :date), :content=,
                    s(:send,
                      s(:const, nil, :Time), :parse,
                      s(:lvar, :content))),
                  s(:lvasgn, :xml,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :date), :to_s)), :root)),
                  s(:send, nil, :assert_rexml_element,
                    s(:array),
                    s(:hash),
                    s(:lvar, :content),
                    s(:lvar, :xml),
                    s(:sym, :time))))))),
        s(:def, :assert_atom_content_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_atom_text_construct_to_s,
                s(:lvar, :target_class)),
              s(:send, nil, :assert_atom_content_inline_other_xml_to_s,
                s(:lvar, :target_class)),
              s(:send, nil, :assert_atom_content_inline_other_text_to_s,
                s(:lvar, :target_class)),
              s(:send, nil, :assert_atom_content_inline_other_base64_to_s,
                s(:lvar, :target_class)),
              s(:send, nil, :assert_atom_content_out_of_line_to_s,
                s(:lvar, :target_class))))),
        s(:def, :assert_atom_content_inline_other_xml_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :content), :type=,
                s(:str, "text/xml")),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :content), :to_s)),
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :content), :type=,
                s(:str, "text/xml")),
              s(:send,
                s(:lvar, :content), :xml=,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RSS), :XML), :Element), :new,
                  s(:str, "em"))),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :content), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array,
                  s(:array,
                    s(:str, ""),
                    s(:str, "em"))),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:str, "text/xml"))),
                s(:nil),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_content_inline_other_text_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :content), :type=,
                s(:str, "text/plain")),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :content), :to_s)),
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :content), :type=,
                s(:str, "text/plain")),
              s(:send,
                s(:lvar, :content), :xml=,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RSS), :XML), :Element), :new,
                  s(:str, "em"))),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:lvar, :content), :to_s)),
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :content), :type=,
                s(:str, "text/plain")),
              s(:send,
                s(:lvar, :content), :content=,
                s(:str, "content")),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :content), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:str, "text/plain"))),
                s(:str, "content"),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_content_inline_other_base64_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :type,
                s(:str, "image/png")),
              s(:lvasgn, :png_file,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:str, "(string)")),
                  s(:str, "dot.png"))),
              s(:lvasgn, :original_content,
                s(:block,
                  s(:send,
                    s(:const, nil, :File), :open,
                    s(:lvar, :png_file),
                    s(:str, "rb")),
                  s(:args,
                    s(:arg, :file)),
                  s(:send,
                    s(:send,
                      s(:lvar, :file), :read), :force_encoding,
                    s(:str, "binary")))),
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send,
                s(:lvar, :content), :type=,
                s(:lvar, :type)),
              s(:send,
                s(:lvar, :content), :content=,
                s(:lvar, :original_content)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :content), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:lvar, :type))),
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :original_content)), :pack,
                    s(:str, "m")), :delete,
                  s(:str, "\n")),
                s(:lvar, :xml))))),
        s(:def, :assert_atom_content_out_of_line_to_s,
          s(:args,
            s(:arg, :target_class)),
          s(:block,
            s(:send, nil, :_wrap_assertion),
            s(:args),
            s(:begin,
              s(:lvasgn, :type,
                s(:str, "application/zip")),
              s(:lvasgn, :src,
                s(:str, "http://example.com/xxx.zip")),
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :content), :out_of_line?), :!)),
              s(:send,
                s(:lvar, :content), :src=,
                s(:lvar, :src)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :content), :out_of_line?)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :content), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "src"),
                    s(:lvar, :src))),
                s(:nil),
                s(:lvar, :xml)),
              s(:lvasgn, :content,
                s(:send,
                  s(:lvar, :target_class), :new)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :content), :out_of_line?), :!)),
              s(:send,
                s(:lvar, :content), :type=,
                s(:lvar, :type)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :content), :out_of_line?), :!)),
              s(:send,
                s(:lvar, :content), :src=,
                s(:lvar, :src)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :content), :out_of_line?)),
              s(:lvasgn, :xml,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :content), :to_s)), :root)),
              s(:send, nil, :assert_rexml_element,
                s(:array),
                s(:hash,
                  s(:pair,
                    s(:str, "type"),
                    s(:lvar, :type)),
                  s(:pair,
                    s(:str, "src"),
                    s(:lvar, :src))),
                s(:nil),
                s(:lvar, :xml)))))))))
