s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require_relative,
    s(:str, "rss-testcase")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestRSS20Core),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:ivasgn, :@rss_version,
            s(:str, "2.0"))),
        s(:def, :test_Rss,
          s(:args),
          s(:begin,
            s(:lvasgn, :version,
              s(:str, "1.0")),
            s(:lvasgn, :encoding,
              s(:str, "UTF-8")),
            s(:lvasgn, :standalone,
              s(:false)),
            s(:lvasgn, :rss,
              s(:send,
                s(:const, nil, :Rss), :new,
                s(:ivar, :@rss_version),
                s(:lvar, :version),
                s(:lvar, :encoding),
                s(:lvar, :standalone))),
            s(:send, nil, :setup_rss20,
              s(:lvar, :rss)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :rss), :to_s,
                  s(:false)))),
            s(:lvasgn, :xmldecl,
              s(:send,
                s(:lvar, :doc), :xml_decl)),
            s(:send, nil, :assert_equal,
              s(:lvar, :version),
              s(:send,
                s(:lvar, :xmldecl), :version)),
            s(:send, nil, :assert_equal,
              s(:lvar, :encoding),
              s(:send,
                s(:send,
                  s(:lvar, :xmldecl), :encoding), :to_s)),
            s(:send, nil, :assert_equal,
              s(:lvar, :standalone),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :xmldecl), :standalone), :nil?), :!)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :namespace)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@rss_version),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "version"))))),
        s(:def, :test_not_displayed_xml_stylesheets,
          s(:args),
          s(:begin,
            s(:lvasgn, :rss,
              s(:send,
                s(:const, nil, :Rss), :new,
                s(:ivar, :@rss_version))),
            s(:lvasgn, :plain_rss,
              s(:send,
                s(:lvar, :rss), :to_s)),
            s(:block,
              s(:send,
                s(:int, 3), :times),
              s(:args),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :rss), :xml_stylesheets), :push,
                  s(:send,
                    s(:const, nil, :XMLStyleSheet), :new)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :plain_rss),
                  s(:send,
                    s(:lvar, :rss), :to_s)))))),
        s(:def, :test_xml_stylesheets,
          s(:args),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:sym, :href),
                      s(:str, "a.xsl")),
                    s(:pair,
                      s(:sym, :type),
                      s(:str, "text/xsl")))),
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:sym, :href),
                      s(:str, "a.xsl")),
                    s(:pair,
                      s(:sym, :type),
                      s(:str, "text/xsl"))),
                  s(:hash,
                    s(:pair,
                      s(:sym, :href),
                      s(:str, "a.css")),
                    s(:pair,
                      s(:sym, :type),
                      s(:str, "text/css"))))), :each),
            s(:args,
              s(:arg, :attrs_ary)),
            s(:begin,
              s(:lvasgn, :rss,
                s(:send,
                  s(:const, nil, :Rss), :new,
                  s(:ivar, :@rss_version))),
              s(:send, nil, :setup_rss20,
                s(:lvar, :rss)),
              s(:send, nil, :assert_xml_stylesheet_pis,
                s(:lvar, :attrs_ary),
                s(:lvar, :rss))))),
        s(:def, :test_channel,
          s(:args),
          s(:begin,
            s(:lvasgn, :h,
              s(:hash,
                s(:pair,
                  s(:str, "title"),
                  s(:str, "fugafuga")),
                s(:pair,
                  s(:str, "link"),
                  s(:str, "http://hoge.com")),
                s(:pair,
                  s(:str, "description"),
                  s(:str, "fugafugafugafuga")),
                s(:pair,
                  s(:str, "language"),
                  s(:str, "en-us")),
                s(:pair,
                  s(:str, "copyright"),
                  s(:str, "Copyright 2002, Spartanburg Herald-Journal")),
                s(:pair,
                  s(:str, "managingEditor"),
                  s(:str, "geo@herald.com (George Matesky)")),
                s(:pair,
                  s(:str, "webMaster"),
                  s(:str, "betty@herald.com (Betty Guernsey)")),
                s(:pair,
                  s(:str, "pubDate"),
                  s(:send,
                    s(:const, nil, :Time), :parse,
                    s(:str, "Sat, 07 Sep 2002 00:00:01 GMT"))),
                s(:pair,
                  s(:str, "lastBuildDate"),
                  s(:send,
                    s(:const, nil, :Time), :parse,
                    s(:str, "Sat, 07 Sep 2002 09:42:31 GMT"))),
                s(:pair,
                  s(:str, "generator"),
                  s(:str, "MightyInHouse Content System v2.3")),
                s(:pair,
                  s(:str, "docs"),
                  s(:str, "http://blogs.law.harvard.edu/tech/rss")),
                s(:pair,
                  s(:str, "ttl"),
                  s(:str, "60")),
                s(:pair,
                  s(:str, "rating"),
                  s(:str, "(PICS-1.1 \"http://www.rsac.org/ratingsv01.html\" l gen true comment \"RSACi North America Server\" for \"http://www.rsac.org\" on \"1996.04.16T08:15-0500\" r (n 0 s 0 v 0 l 0))")))),
            s(:lvasgn, :categories,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:sym, :content),
                    s(:str, "Newspapers"))),
                s(:hash,
                  s(:pair,
                    s(:sym, :domain),
                    s(:str, "Syndic8")),
                  s(:pair,
                    s(:sym, :content),
                    s(:str, "1765"))))),
            s(:lvasgn, :channel,
              s(:send,
                s(:const,
                  s(:const, nil, :Rss), :Channel), :new)),
            s(:lvasgn, :elems,
              s(:array,
                s(:str, "title"),
                s(:str, "link"),
                s(:str, "description"),
                s(:str, "language"),
                s(:str, "copyright"),
                s(:str, "managingEditor"),
                s(:str, "webMaster"),
                s(:str, "pubDate"),
                s(:str, "lastBuildDate"),
                s(:str, "generator"),
                s(:str, "docs"),
                s(:str, "ttl"),
                s(:str, "rating"))),
            s(:block,
              s(:send,
                s(:lvar, :elems), :each),
              s(:args,
                s(:arg, :x)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:lvar, :x))),
                s(:if,
                  s(:send,
                    s(:array,
                      s(:str, "pubDate"),
                      s(:str, "lastBuildDate")), :include?,
                    s(:lvar, :x)),
                  s(:lvasgn, :value,
                    s(:send,
                      s(:lvar, :value), :rfc822)), nil),
                s(:send,
                  s(:lvar, :channel), :__send__,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :x)),
                    s(:str, "=")),
                  s(:lvar, :value)))),
            s(:block,
              s(:send,
                s(:lvar, :categories), :each),
              s(:args,
                s(:arg, :cat)),
              s(:send,
                s(:send,
                  s(:lvar, :channel), :categories), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Rss), :Channel), :Category), :new,
                  s(:send,
                    s(:lvar, :cat), :[],
                    s(:sym, :domain)),
                  s(:send,
                    s(:lvar, :cat), :[],
                    s(:sym, :content))))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send, nil, :make_rss20,
                  s(:send,
                    s(:lvar, :channel), :to_s)))),
            s(:lvasgn, :c,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :[],
                s(:int, 1))),
            s(:block,
              s(:send,
                s(:lvar, :elems), :each),
              s(:args,
                s(:arg, :x)),
              s(:begin,
                s(:lvasgn, :elem,
                  s(:send,
                    s(:send,
                      s(:lvar, :c), :elements), :[],
                    s(:lvar, :x))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :x),
                  s(:send,
                    s(:lvar, :elem), :name)),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:lvar, :elem), :namespace)),
                s(:lvasgn, :expected,
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:lvar, :x))),
                s(:case,
                  s(:lvar, :x),
                  s(:when,
                    s(:str, "pubDate"),
                    s(:str, "lastBuildDate"),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :expected),
                      s(:send,
                        s(:const, nil, :Time), :parse,
                        s(:send,
                          s(:lvar, :elem), :text)))),
                  s(:when,
                    s(:str, "ttl"),
                    s(:begin,
                      s(:lvasgn, :expected,
                        s(:send,
                          s(:lvar, :channel), :__send__,
                          s(:lvar, :x))),
                      s(:send, nil, :assert_equal,
                        s(:lvar, :expected),
                        s(:send,
                          s(:send,
                            s(:lvar, :elem), :text), :to_i)))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :expected),
                    s(:send,
                      s(:lvar, :elem), :text))))),
            s(:block,
              s(:send,
                s(:lvar, :categories), :each_with_index),
              s(:args,
                s(:arg, :cat),
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :cat,
                  s(:send,
                    s(:lvar, :cat), :dup)),
                s(:or_asgn,
                  s(:send,
                    s(:lvar, :cat), :[],
                    s(:sym, :domain)),
                  s(:nil)),
                s(:lvasgn, :category,
                  s(:send,
                    s(:send,
                      s(:lvar, :c), :elements), :[],
                    s(:dstr,
                      s(:str, "category["),
                      s(:begin,
                        s(:send,
                          s(:lvar, :i), :+,
                          s(:int, 1))),
                      s(:str, "]")))),
                s(:lvasgn, :actual,
                  s(:hash,
                    s(:pair,
                      s(:sym, :domain),
                      s(:send,
                        s(:send,
                          s(:lvar, :category), :attributes), :[],
                        s(:str, "domain"))),
                    s(:pair,
                      s(:sym, :content),
                      s(:send,
                        s(:lvar, :category), :text)))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :cat),
                  s(:lvar, :actual)))))),
        s(:def, :test_channel_cloud,
          s(:args),
          s(:begin,
            s(:lvasgn, :cloud_params,
              s(:hash,
                s(:pair,
                  s(:sym, :domain),
                  s(:str, "rpc.sys.com")),
                s(:pair,
                  s(:sym, :port),
                  s(:str, "80")),
                s(:pair,
                  s(:sym, :path),
                  s(:str, "/RPC2")),
                s(:pair,
                  s(:sym, :registerProcedure),
                  s(:str, "myCloud.rssPleaseNotify")),
                s(:pair,
                  s(:sym, :protocol),
                  s(:str, "xml-rpc")))),
            s(:lvasgn, :cloud,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Rss), :Channel), :Cloud), :new,
                s(:send,
                  s(:lvar, :cloud_params), :[],
                  s(:sym, :domain)),
                s(:send,
                  s(:lvar, :cloud_params), :[],
                  s(:sym, :port)),
                s(:send,
                  s(:lvar, :cloud_params), :[],
                  s(:sym, :path)),
                s(:send,
                  s(:lvar, :cloud_params), :[],
                  s(:sym, :registerProcedure)),
                s(:send,
                  s(:lvar, :cloud_params), :[],
                  s(:sym, :protocol)))),
            s(:send,
              s(:lvar, :cloud_params), :[]=,
              s(:sym, :port),
              s(:send,
                s(:lvar, :cloud), :port)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :cloud), :to_s))),
            s(:lvasgn, :cloud_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:lvasgn, :actual,
              s(:hash)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :cloud_elem), :attributes), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :name), :==,
                    s(:str, "port")),
                  s(:lvasgn, :value,
                    s(:send,
                      s(:lvar, :value), :to_i)), nil),
                s(:send,
                  s(:lvar, :actual), :[]=,
                  s(:send,
                    s(:lvar, :name), :intern),
                  s(:lvar, :value)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :cloud_params),
              s(:lvar, :actual)))),
        s(:def, :test_channel_image,
          s(:args),
          s(:begin,
            s(:lvasgn, :image_params,
              s(:hash,
                s(:pair,
                  s(:sym, :url),
                  s(:str, "http://hoge.com/hoge.png")),
                s(:pair,
                  s(:sym, :title),
                  s(:str, "fugafuga")),
                s(:pair,
                  s(:sym, :link),
                  s(:str, "http://hoge.com")),
                s(:pair,
                  s(:sym, :width),
                  s(:str, "144")),
                s(:pair,
                  s(:sym, :height),
                  s(:str, "400")),
                s(:pair,
                  s(:sym, :description),
                  s(:str, "an image")))),
            s(:lvasgn, :image,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Rss), :Channel), :Image), :new,
                s(:send,
                  s(:lvar, :image_params), :[],
                  s(:sym, :url)),
                s(:send,
                  s(:lvar, :image_params), :[],
                  s(:sym, :title)),
                s(:send,
                  s(:lvar, :image_params), :[],
                  s(:sym, :link)),
                s(:send,
                  s(:lvar, :image_params), :[],
                  s(:sym, :width)),
                s(:send,
                  s(:lvar, :image_params), :[],
                  s(:sym, :height)),
                s(:send,
                  s(:lvar, :image_params), :[],
                  s(:sym, :description)))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :image), :to_s))),
            s(:lvasgn, :image_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:block,
              s(:send,
                s(:lvar, :image_params), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send,
                    s(:lvar, :image), :__send__,
                    s(:lvar, :name))),
                s(:lvasgn, :actual,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :image_elem), :elements), :[],
                      s(:send,
                        s(:lvar, :name), :to_s)), :text)),
                s(:if,
                  s(:send,
                    s(:array,
                      s(:sym, :width),
                      s(:sym, :height)), :include?,
                    s(:lvar, :name)),
                  s(:lvasgn, :actual,
                    s(:send,
                      s(:lvar, :actual), :to_i)), nil),
                s(:send, nil, :assert_equal,
                  s(:lvar, :value),
                  s(:lvar, :actual)))))),
        s(:def, :test_channel_textInput,
          s(:args),
          s(:begin,
            s(:lvasgn, :textInput_params,
              s(:hash,
                s(:pair,
                  s(:sym, :title),
                  s(:str, "fugafuga")),
                s(:pair,
                  s(:sym, :description),
                  s(:str, "text hoge fuga")),
                s(:pair,
                  s(:sym, :name),
                  s(:str, "hoge")),
                s(:pair,
                  s(:sym, :link),
                  s(:str, "http://hoge.com")))),
            s(:lvasgn, :textInput,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Rss), :Channel), :TextInput), :new,
                s(:send,
                  s(:lvar, :textInput_params), :[],
                  s(:sym, :title)),
                s(:send,
                  s(:lvar, :textInput_params), :[],
                  s(:sym, :description)),
                s(:send,
                  s(:lvar, :textInput_params), :[],
                  s(:sym, :name)),
                s(:send,
                  s(:lvar, :textInput_params), :[],
                  s(:sym, :link)))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :textInput), :to_s))),
            s(:lvasgn, :input_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:block,
              s(:send,
                s(:lvar, :textInput_params), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:begin,
                s(:lvasgn, :actual,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :input_elem), :elements), :[],
                      s(:send,
                        s(:lvar, :name), :to_s)), :text)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :value),
                  s(:lvar, :actual)))))),
        s(:def, :test_channel_skip_days,
          s(:args),
          s(:begin,
            s(:lvasgn, :skipDays_values,
              s(:array,
                s(:str, "Sunday"),
                s(:str, "Monday"))),
            s(:lvasgn, :skipDays,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Rss), :Channel), :SkipDays), :new)),
            s(:block,
              s(:send,
                s(:lvar, :skipDays_values), :each),
              s(:args,
                s(:arg, :value)),
              s(:send,
                s(:send,
                  s(:lvar, :skipDays), :days), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Rss), :Channel), :SkipDays), :Day), :new,
                  s(:lvar, :value)))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :skipDays), :to_s))),
            s(:lvasgn, :days_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:block,
              s(:send,
                s(:lvar, :skipDays_values), :each_with_index),
              s(:args,
                s(:arg, :value),
                s(:arg, :i)),
              s(:send, nil, :assert_equal,
                s(:lvar, :value),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :days_elem), :elements), :[],
                    s(:send,
                      s(:lvar, :i), :+,
                      s(:int, 1))), :text))))),
        s(:def, :test_channel_skip_hours,
          s(:args),
          s(:begin,
            s(:lvasgn, :skipHours_values,
              s(:array,
                s(:str, "0"),
                s(:str, "13"))),
            s(:lvasgn, :skipHours,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Rss), :Channel), :SkipHours), :new)),
            s(:block,
              s(:send,
                s(:lvar, :skipHours_values), :each),
              s(:args,
                s(:arg, :value)),
              s(:send,
                s(:send,
                  s(:lvar, :skipHours), :hours), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Rss), :Channel), :SkipHours), :Hour), :new,
                  s(:lvar, :value)))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :skipHours), :to_s))),
            s(:lvasgn, :hours_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:block,
              s(:send,
                s(:lvar, :skipHours_values), :each_with_index),
              s(:args,
                s(:arg, :value),
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :expected,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :skipHours), :hours), :[],
                      s(:lvar, :i)), :content)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :hours_elem), :elements), :[],
                        s(:send,
                          s(:lvar, :i), :+,
                          s(:int, 1))), :text), :to_i)))))),
        s(:def, :test_item,
          s(:args),
          s(:begin,
            s(:lvasgn, :h,
              s(:hash,
                s(:pair,
                  s(:str, "title"),
                  s(:str, "fugafuga")),
                s(:pair,
                  s(:str, "link"),
                  s(:str, "http://hoge.com/")),
                s(:pair,
                  s(:str, "description"),
                  s(:str, "text hoge fuga")),
                s(:pair,
                  s(:str, "author"),
                  s(:str, "oprah@oxygen.net")),
                s(:pair,
                  s(:str, "comments"),
                  s(:str, "http://www.myblog.org/cgi-local/mt/mt-comments.cgi?entry_id=290")),
                s(:pair,
                  s(:str, "pubDate"),
                  s(:send,
                    s(:const, nil, :Time), :parse,
                    s(:str, "Sat, 07 Sep 2002 00:00:01 GMT"))))),
            s(:lvasgn, :categories,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:sym, :content),
                    s(:str, "Newspapers"))),
                s(:hash,
                  s(:pair,
                    s(:sym, :domain),
                    s(:str, "Syndic8")),
                  s(:pair,
                    s(:sym, :content),
                    s(:str, "1765"))))),
            s(:lvasgn, :channel,
              s(:send,
                s(:const,
                  s(:const, nil, :Rss), :Channel), :new)),
            s(:send,
              s(:lvar, :channel), :title=,
              s(:str, "title")),
            s(:send,
              s(:lvar, :channel), :link=,
              s(:str, "http://example.com/")),
            s(:send,
              s(:lvar, :channel), :description=,
              s(:str, "description")),
            s(:lvasgn, :item,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Rss), :Channel), :Item), :new)),
            s(:send,
              s(:send,
                s(:lvar, :channel), :items), :<<,
              s(:lvar, :item)),
            s(:lvasgn, :elems,
              s(:array,
                s(:str, "title"),
                s(:str, "link"),
                s(:str, "description"),
                s(:str, "author"),
                s(:str, "comments"),
                s(:str, "pubDate"))),
            s(:block,
              s(:send,
                s(:lvar, :elems), :each),
              s(:args,
                s(:arg, :x)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:lvar, :x))),
                s(:if,
                  s(:send,
                    s(:lvar, :x), :==,
                    s(:str, "pubDate")),
                  s(:lvasgn, :value,
                    s(:send,
                      s(:lvar, :value), :rfc822)), nil),
                s(:send,
                  s(:lvar, :item), :__send__,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :x)),
                    s(:str, "=")),
                  s(:lvar, :value)))),
            s(:block,
              s(:send,
                s(:lvar, :categories), :each),
              s(:args,
                s(:arg, :cat)),
              s(:send,
                s(:send,
                  s(:lvar, :item), :categories), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Rss), :Channel), :Category), :new,
                  s(:send,
                    s(:lvar, :cat), :[],
                    s(:sym, :domain)),
                  s(:send,
                    s(:lvar, :cat), :[],
                    s(:sym, :content))))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :channel), :to_s))),
            s(:lvasgn, :channel_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:lvasgn, :item_elem,
              s(:send,
                s(:send,
                  s(:lvar, :channel_elem), :elements), :[],
                s(:str, "item[1]"))),
            s(:block,
              s(:send,
                s(:lvar, :elems), :each),
              s(:args,
                s(:arg, :x)),
              s(:begin,
                s(:lvasgn, :elem,
                  s(:send,
                    s(:send,
                      s(:lvar, :item_elem), :elements), :[],
                    s(:lvar, :x))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :x),
                  s(:send,
                    s(:lvar, :elem), :name)),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:send,
                    s(:lvar, :elem), :namespace)),
                s(:lvasgn, :expected,
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:lvar, :x))),
                s(:case,
                  s(:lvar, :x),
                  s(:when,
                    s(:str, "pubDate"),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :expected),
                      s(:send,
                        s(:const, nil, :Time), :parse,
                        s(:send,
                          s(:lvar, :elem), :text)))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :expected),
                    s(:send,
                      s(:lvar, :elem), :text))))),
            s(:block,
              s(:send,
                s(:lvar, :categories), :each_with_index),
              s(:args,
                s(:arg, :cat),
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :cat,
                  s(:send,
                    s(:lvar, :cat), :dup)),
                s(:or_asgn,
                  s(:send,
                    s(:lvar, :cat), :[],
                    s(:sym, :domain)),
                  s(:nil)),
                s(:lvasgn, :category,
                  s(:send,
                    s(:send,
                      s(:lvar, :item_elem), :elements), :[],
                    s(:dstr,
                      s(:str, "category["),
                      s(:begin,
                        s(:send,
                          s(:lvar, :i), :+,
                          s(:int, 1))),
                      s(:str, "]")))),
                s(:lvasgn, :actual,
                  s(:hash,
                    s(:pair,
                      s(:sym, :domain),
                      s(:send,
                        s(:send,
                          s(:lvar, :category), :attributes), :[],
                        s(:str, "domain"))),
                    s(:pair,
                      s(:sym, :content),
                      s(:send,
                        s(:lvar, :category), :text)))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :cat),
                  s(:lvar, :actual)))))),
        s(:def, :test_item_enclosure,
          s(:args),
          s(:begin,
            s(:lvasgn, :enclosure_params,
              s(:hash,
                s(:pair,
                  s(:sym, :url),
                  s(:str, "http://www.scripting.com/mp3s/weatherReportSuite.mp3")),
                s(:pair,
                  s(:sym, :length),
                  s(:str, "12216320")),
                s(:pair,
                  s(:sym, :type),
                  s(:str, "audio/mpeg")))),
            s(:lvasgn, :enclosure,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Rss), :Channel), :Item), :Enclosure), :new,
                s(:send,
                  s(:lvar, :enclosure_params), :[],
                  s(:sym, :url)),
                s(:send,
                  s(:lvar, :enclosure_params), :[],
                  s(:sym, :length)),
                s(:send,
                  s(:lvar, :enclosure_params), :[],
                  s(:sym, :type)))),
            s(:send,
              s(:lvar, :enclosure_params), :[]=,
              s(:sym, :length),
              s(:send,
                s(:lvar, :enclosure), :length)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :enclosure), :to_s))),
            s(:lvasgn, :enclosure_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:lvasgn, :actual,
              s(:hash)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :enclosure_elem), :attributes), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :name), :==,
                    s(:str, "length")),
                  s(:lvasgn, :value,
                    s(:send,
                      s(:lvar, :value), :to_i)), nil),
                s(:send,
                  s(:lvar, :actual), :[]=,
                  s(:send,
                    s(:lvar, :name), :intern),
                  s(:lvar, :value)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :enclosure_params),
              s(:lvar, :actual)))),
        s(:def, :test_item_guid,
          s(:args),
          s(:begin,
            s(:lvasgn, :test_params,
              s(:array,
                s(:hash,
                  s(:pair,
                    s(:sym, :content),
                    s(:str, "http://some.server.com/weblogItem3207"))),
                s(:hash,
                  s(:pair,
                    s(:sym, :isPermaLink),
                    s(:str, "true")),
                  s(:pair,
                    s(:sym, :content),
                    s(:str, "http://inessential.com/2002/09/01.php#a2"))))),
            s(:block,
              s(:send,
                s(:lvar, :test_params), :each),
              s(:args,
                s(:arg, :guid_params)),
              s(:begin,
                s(:lvasgn, :guid,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Rss), :Channel), :Item), :Guid), :new,
                    s(:send,
                      s(:lvar, :guid_params), :[],
                      s(:sym, :isPermaLink)),
                    s(:send,
                      s(:lvar, :guid_params), :[],
                      s(:sym, :content)))),
                s(:if,
                  s(:send,
                    s(:lvar, :guid_params), :has_key?,
                    s(:sym, :isPermaLink)),
                  s(:send,
                    s(:lvar, :guid_params), :[]=,
                    s(:sym, :isPermaLink),
                    s(:send,
                      s(:lvar, :guid), :isPermaLink)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :guid), :isPermaLink), :nil?),
                  s(:send, nil, :assert_equal,
                    s(:true),
                    s(:send,
                      s(:lvar, :guid), :PermaLink?)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :guid), :isPermaLink),
                    s(:send,
                      s(:lvar, :guid), :PermaLink?))),
                s(:lvasgn, :doc,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:lvar, :guid), :to_s))),
                s(:lvasgn, :guid_elem,
                  s(:send,
                    s(:lvar, :doc), :root)),
                s(:lvasgn, :actual,
                  s(:hash)),
                s(:if,
                  s(:send,
                    s(:lvar, :guid_elem), :text),
                  s(:send,
                    s(:lvar, :actual), :[]=,
                    s(:sym, :content),
                    s(:send,
                      s(:lvar, :guid_elem), :text)), nil),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :guid_elem), :attributes), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :value)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :name), :==,
                        s(:str, "isPermaLink")),
                      s(:lvasgn, :value,
                        s(:send,
                          s(:lvar, :value), :==,
                          s(:str, "true"))), nil),
                    s(:send,
                      s(:lvar, :actual), :[]=,
                      s(:send,
                        s(:lvar, :name), :intern),
                      s(:lvar, :value)))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :guid_params),
                  s(:lvar, :actual)))))),
        s(:def, :test_item_source,
          s(:args),
          s(:begin,
            s(:lvasgn, :source_params,
              s(:hash,
                s(:pair,
                  s(:sym, :url),
                  s(:str, "http://www.tomalak.org/links2.xml")),
                s(:pair,
                  s(:sym, :content),
                  s(:str, "Tomalak's Realm")))),
            s(:lvasgn, :source,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Rss), :Channel), :Item), :Source), :new,
                s(:send,
                  s(:lvar, :source_params), :[],
                  s(:sym, :url)),
                s(:send,
                  s(:lvar, :source_params), :[],
                  s(:sym, :content)))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :source), :to_s))),
            s(:lvasgn, :source_elem,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:lvasgn, :actual,
              s(:hash)),
            s(:send,
              s(:lvar, :actual), :[]=,
              s(:sym, :content),
              s(:send,
                s(:lvar, :source_elem), :text)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :source_elem), :attributes), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:send,
                s(:lvar, :actual), :[]=,
                s(:send,
                  s(:lvar, :name), :intern),
                s(:lvar, :value))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source_params),
              s(:lvar, :actual)))),
        s(:def, :test_to_xml,
          s(:args),
          s(:begin,
            s(:lvasgn, :rss,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:send, nil, :make_sample_rss20))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :rss), :to_s),
              s(:send,
                s(:lvar, :rss), :to_xml)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :rss), :to_s),
              s(:send,
                s(:lvar, :rss), :to_xml,
                s(:str, "2.0"))),
            s(:lvasgn, :rss09_xml,
              s(:block,
                s(:send,
                  s(:lvar, :rss), :to_xml,
                  s(:str, "0.91")),
                s(:args,
                  s(:arg, :maker)),
                s(:send, nil, :setup_dummy_image,
                  s(:lvar, :maker)))),
            s(:lvasgn, :rss09,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:lvar, :rss09_xml))),
            s(:send, nil, :assert_equal,
              s(:str, "0.91"),
              s(:send,
                s(:lvar, :rss09), :rss_version)),
            s(:lvasgn, :rss10,
              s(:block,
                s(:send,
                  s(:lvar, :rss), :to_xml,
                  s(:str, "1.0")),
                s(:args,
                  s(:arg, :maker)),
                s(:send,
                  s(:send,
                    s(:lvar, :maker), :channel), :about=,
                  s(:str, "http://www.example.com/index.rdf")))),
            s(:lvasgn, :rss10,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:lvar, :rss10))),
            s(:send, nil, :assert_equal,
              s(:str, "1.0"),
              s(:send,
                s(:lvar, :rss10), :rss_version)),
            s(:lvasgn, :atom_xml,
              s(:block,
                s(:send,
                  s(:lvar, :rss), :to_xml,
                  s(:str, "atom1.0")),
                s(:args,
                  s(:arg, :maker)),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :id=,
                    s(:str, "http://www.example.com/atom.xml")),
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :author=,
                    s(:str, "Alice")),
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :updated=,
                    s(:send,
                      s(:const, nil, :Time), :now)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :maker), :items), :each),
                    s(:args,
                      s(:arg, :item)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :item), :author=,
                        s(:str, "Bob")),
                      s(:send,
                        s(:lvar, :item), :updated=,
                        s(:send,
                          s(:const, nil, :Time), :now))))))),
            s(:lvasgn, :atom,
              s(:send,
                s(:const,
                  s(:const, nil, :RSS), :Parser), :parse,
                s(:lvar, :atom_xml))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "atom"),
                s(:str, "1.0"),
                s(:str, "feed")),
              s(:send,
                s(:lvar, :atom), :feed_info))))))))
