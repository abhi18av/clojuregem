s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rss-testcase")),
  s(:send, nil, :require,
    s(:str, "rss/2.0")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :TestParser20),
      s(:const, nil, :TestCase),
      s(:begin,
        s(:def, :test_rss20,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_parse,
              s(:send, nil, :make_rss20,
                s(:dstr)),
              s(:sym, :missing_tag),
              s(:str, "channel"),
              s(:str, "rss")),
            s(:send, nil, :assert_parse,
              s(:send, nil, :make_rss20,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :make_channel20,
                      s(:str, ""))),
                  s(:str, "\n"))),
              s(:sym, :nothing_raised)))),
        s(:def, :test_cloud20,
          s(:args),
          s(:begin,
            s(:lvasgn, :attrs,
              s(:array,
                s(:array,
                  s(:str, "domain"),
                  s(:const, nil, :CLOUD_DOMAIN)),
                s(:array,
                  s(:str, "port"),
                  s(:const, nil, :CLOUD_PORT)),
                s(:array,
                  s(:str, "path"),
                  s(:const, nil, :CLOUD_PATH)),
                s(:array,
                  s(:str, "registerProcedure"),
                  s(:const, nil, :CLOUD_REGISTER_PROCEDURE)),
                s(:array,
                  s(:str, "protocol"),
                  s(:const, nil, :CLOUD_PROTOCOL)))),
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :attrs), :size), :+,
                    s(:int, 1))), :times),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :missing_attr,
                  s(:send,
                    s(:lvar, :attrs), :[],
                    s(:lvar, :i))),
                s(:if,
                  s(:lvar, :missing_attr),
                  s(:begin,
                    s(:lvasgn, :meth,
                      s(:sym, :missing_attribute)),
                    s(:lvasgn, :args,
                      s(:array,
                        s(:str, "cloud"),
                        s(:send,
                          s(:lvar, :missing_attr), :[],
                          s(:int, 0))))),
                  s(:begin,
                    s(:lvasgn, :meth,
                      s(:sym, :nothing_raised)),
                    s(:lvasgn, :args,
                      s(:array)))),
                s(:lvasgn, :cloud_attrs,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:lvar, :attrs), :each_with_index),
                  s(:args,
                    s(:arg, :attr),
                    s(:arg, :j)),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:lvar, :j)), nil,
                    s(:send,
                      s(:lvar, :cloud_attrs), :<<,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :attr), :[],
                            s(:int, 0))),
                        s(:str, "=\""),
                        s(:begin,
                          s(:send,
                            s(:lvar, :attr), :[],
                            s(:int, 1))),
                        s(:str, "\""))))),
                s(:send, nil, :assert_parse,
                  s(:send, nil, :make_rss20,
                    s(:dstr,
                      s(:begin,
                        s(:send, nil, :make_channel20,
                          s(:dstr,
                            s(:str, "<cloud "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :cloud_attrs), :join,
                                s(:str, "\n"))),
                            s(:str, "/>")))),
                      s(:str, "\n"))),
                  s(:lvar, :meth),
                  s(:splat,
                    s(:lvar, :args))))))),
        s(:def, :test_source20,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_parse,
              s(:send, nil, :make_rss20,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :make_channel20,
                      s(:send, nil, :make_item20,
                        s(:str, "<source>Example</source>")))),
                  s(:str, "\n"))),
              s(:sym, :missing_attribute),
              s(:str, "source"),
              s(:str, "url")),
            s(:send, nil, :assert_parse,
              s(:send, nil, :make_rss20,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :make_channel20,
                      s(:send, nil, :make_item20,
                        s(:str, "<source url=\"http://example.com/\" />")))),
                  s(:str, "\n"))),
              s(:sym, :nothing_raised)),
            s(:send, nil, :assert_parse,
              s(:send, nil, :make_rss20,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :make_channel20,
                      s(:send, nil, :make_item20,
                        s(:str, "<source url=\"http://example.com/\">Example</source>")))),
                  s(:str, "\n"))),
              s(:sym, :nothing_raised)))),
        s(:def, :test_enclosure20,
          s(:args),
          s(:begin,
            s(:lvasgn, :attrs,
              s(:array,
                s(:array,
                  s(:str, "url"),
                  s(:const, nil, :ENCLOSURE_URL)),
                s(:array,
                  s(:str, "length"),
                  s(:const, nil, :ENCLOSURE_LENGTH)),
                s(:array,
                  s(:str, "type"),
                  s(:const, nil, :ENCLOSURE_TYPE)))),
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :attrs), :size), :+,
                    s(:int, 1))), :times),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :missing_attr,
                  s(:send,
                    s(:lvar, :attrs), :[],
                    s(:lvar, :i))),
                s(:if,
                  s(:lvar, :missing_attr),
                  s(:begin,
                    s(:lvasgn, :meth,
                      s(:sym, :missing_attribute)),
                    s(:lvasgn, :args,
                      s(:array,
                        s(:str, "enclosure"),
                        s(:send,
                          s(:lvar, :missing_attr), :[],
                          s(:int, 0))))),
                  s(:begin,
                    s(:lvasgn, :meth,
                      s(:sym, :nothing_raised)),
                    s(:lvasgn, :args,
                      s(:array)))),
                s(:lvasgn, :enclosure_attrs,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:lvar, :attrs), :each_with_index),
                  s(:args,
                    s(:arg, :attr),
                    s(:arg, :j)),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:lvar, :j)), nil,
                    s(:send,
                      s(:lvar, :enclosure_attrs), :<<,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :attr), :[],
                            s(:int, 0))),
                        s(:str, "=\""),
                        s(:begin,
                          s(:send,
                            s(:lvar, :attr), :[],
                            s(:int, 1))),
                        s(:str, "\""))))),
                s(:send, nil, :assert_parse,
                  s(:send, nil, :make_rss20,
                    s(:dstr,
                      s(:begin,
                        s(:send, nil, :make_channel20,
                          s(:dstr,
                            s(:str, "\n"),
                            s(:begin,
                              s(:send, nil, :make_item20,
                                s(:dstr,
                                  s(:str, "\n"),
                                  s(:str, "<enclosure\n"),
                                  s(:str, "  "),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :enclosure_attrs), :join,
                                      s(:str, "\n"))),
                                  s(:str, " />\n"),
                                  s(:str, "    ")))),
                            s(:str, "\n"),
                            s(:str, "  ")))),
                      s(:str, "\n"))),
                  s(:lvar, :meth),
                  s(:splat,
                    s(:lvar, :args))))))),
        s(:def, :test_category20,
          s(:args),
          s(:begin,
            s(:lvasgn, :values,
              s(:array,
                s(:nil),
                s(:const, nil, :CATEGORY_DOMAIN))),
            s(:block,
              s(:send,
                s(:lvar, :values), :each),
              s(:args,
                s(:arg, :value)),
              s(:begin,
                s(:lvasgn, :domain,
                  s(:str, "")),
                s(:if,
                  s(:lvar, :value),
                  s(:send,
                    s(:lvar, :domain), :<<,
                    s(:dstr,
                      s(:str, "domain=\""),
                      s(:begin,
                        s(:lvar, :value)),
                      s(:str, "\""))), nil),
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, ""),
                      s(:str, "Example Text")), :each),
                  s(:args,
                    s(:arg, :text)),
                  s(:begin,
                    s(:lvasgn, :rss_src,
                      s(:send, nil, :make_rss20,
                        s(:dstr,
                          s(:begin,
                            s(:send, nil, :make_channel20,
                              s(:dstr,
                                s(:str, "\n"),
                                s(:begin,
                                  s(:send, nil, :make_item20,
                                    s(:dstr,
                                      s(:str, "\n"),
                                      s(:str, "<category "),
                                      s(:begin,
                                        s(:lvar, :domain)),
                                      s(:str, ">"),
                                      s(:begin,
                                        s(:lvar, :text)),
                                      s(:str, "</category>\n"),
                                      s(:str, "    ")))),
                                s(:str, "\n"),
                                s(:str, "  ")))),
                          s(:str, "\n")))),
                    s(:send, nil, :assert_parse,
                      s(:lvar, :rss_src),
                      s(:sym, :nothing_raised)),
                    s(:lvasgn, :rss,
                      s(:send,
                        s(:const,
                          s(:const, nil, :RSS), :Parser), :parse,
                        s(:lvar, :rss_src))),
                    s(:lvasgn, :category,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :rss), :items), :last), :categories), :first)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :value),
                      s(:send,
                        s(:lvar, :category), :domain)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :text),
                      s(:send,
                        s(:lvar, :category), :content))))))))))))
