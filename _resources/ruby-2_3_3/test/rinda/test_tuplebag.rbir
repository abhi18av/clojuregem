s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rinda/tuplespace")),
  s(:class,
    s(:const, nil, :TestTupleBag),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@tb,
          s(:send,
            s(:const,
              s(:const, nil, :Rinda), :TupleBag), :new))),
      s(:def, :test_delete,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised),
            s(:args),
            s(:begin,
              s(:lvasgn, :val,
                s(:send,
                  s(:ivar, :@tb), :delete,
                  s(:send, nil, :tup,
                    s(:sym, :val),
                    s(:int, 1)))),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:lvar, :val)))),
          s(:lvasgn, :t,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t)),
          s(:lvasgn, :val,
            s(:send,
              s(:ivar, :@tb), :delete,
              s(:lvar, :t))),
          s(:send, nil, :assert_equal,
            s(:lvar, :t),
            s(:lvar, :val)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@tb), :find_all,
              s(:send, nil, :tem,
                s(:sym, :val),
                s(:int, 1)))),
          s(:lvasgn, :t1,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 1))),
          s(:lvasgn, :t2,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t1)),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t2)),
          s(:lvasgn, :val,
            s(:send,
              s(:ivar, :@tb), :delete,
              s(:lvar, :t1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :t1),
            s(:lvar, :val)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t2)),
            s(:send,
              s(:ivar, :@tb), :find_all,
              s(:send, nil, :tem,
                s(:sym, :val),
                s(:int, 1)))))),
      s(:def, :test_delete_unless_alive,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@tb), :delete_unless_alive)),
          s(:lvasgn, :t1,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:nil))),
          s(:lvasgn, :t2,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:nil))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t1)),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t2)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@tb), :delete_unless_alive)),
          s(:send,
            s(:lvar, :t1), :cancel),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t1)),
            s(:send,
              s(:ivar, :@tb), :delete_unless_alive),
            s(:str, "canceled")),
          s(:send,
            s(:lvar, :t2), :renew,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t2)),
            s(:send,
              s(:ivar, :@tb), :delete_unless_alive),
            s(:str, "expired")))),
      s(:def, :test_find,
        s(:args),
        s(:begin,
          s(:lvasgn, :template,
            s(:send, nil, :tem,
              s(:sym, :val),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@tb), :find,
              s(:lvar, :template))),
          s(:lvasgn, :t1,
            s(:send, nil, :tup,
              s(:sym, :other),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t1)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@tb), :find,
              s(:lvar, :template))),
          s(:lvasgn, :t2,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :t2),
            s(:send,
              s(:ivar, :@tb), :find,
              s(:lvar, :template))),
          s(:send,
            s(:lvar, :t2), :cancel),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@tb), :find,
              s(:lvar, :template)),
            s(:str, "canceled")),
          s(:lvasgn, :t3,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 3))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t3)),
          s(:send, nil, :assert_equal,
            s(:lvar, :t3),
            s(:send,
              s(:ivar, :@tb), :find,
              s(:lvar, :template))),
          s(:send,
            s(:lvar, :t3), :renew,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@tb), :find,
              s(:lvar, :template)),
            s(:str, "expired")))),
      s(:def, :test_find_all,
        s(:args),
        s(:begin,
          s(:lvasgn, :template,
            s(:send, nil, :tem,
              s(:sym, :val),
              s(:nil))),
          s(:lvasgn, :t1,
            s(:send, nil, :tup,
              s(:sym, :other),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t1)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@tb), :find_all,
              s(:lvar, :template))),
          s(:lvasgn, :t2,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 2))),
          s(:lvasgn, :t3,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 3))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t2)),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t3)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t2),
              s(:lvar, :t3)),
            s(:send,
              s(:ivar, :@tb), :find_all,
              s(:lvar, :template))),
          s(:send,
            s(:lvar, :t2), :cancel),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t3)),
            s(:send,
              s(:ivar, :@tb), :find_all,
              s(:lvar, :template)),
            s(:str, "canceled")),
          s(:send,
            s(:lvar, :t3), :renew,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@tb), :find_all,
              s(:lvar, :template)),
            s(:str, "expired")))),
      s(:def, :test_find_all_template,
        s(:args),
        s(:begin,
          s(:lvasgn, :tuple,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 1))),
          s(:lvasgn, :t1,
            s(:send, nil, :tem,
              s(:sym, :other),
              s(:nil))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t1)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@tb), :find_all_template,
              s(:lvar, :tuple))),
          s(:lvasgn, :t2,
            s(:send, nil, :tem,
              s(:sym, :val),
              s(:nil))),
          s(:lvasgn, :t3,
            s(:send, nil, :tem,
              s(:sym, :val),
              s(:nil))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t2)),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t3)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t2),
              s(:lvar, :t3)),
            s(:send,
              s(:ivar, :@tb), :find_all_template,
              s(:lvar, :tuple))),
          s(:send,
            s(:lvar, :t2), :cancel),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :t3)),
            s(:send,
              s(:ivar, :@tb), :find_all_template,
              s(:lvar, :tuple)),
            s(:str, "canceled")),
          s(:send,
            s(:lvar, :t3), :renew,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:ivar, :@tb), :find_all_template,
              s(:lvar, :tuple)),
            s(:str, "expired")))),
      s(:def, :test_has_expires_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@tb), :has_expires?), :!)),
          s(:lvasgn, :t,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@tb), :has_expires?)),
          s(:send,
            s(:lvar, :t), :renew,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@tb), :has_expires?), :!)))),
      s(:def, :test_push,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send, nil, :tup,
              s(:sym, :val),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@tb), :push,
            s(:lvar, :t)),
          s(:send, nil, :assert_equal,
            s(:lvar, :t),
            s(:send,
              s(:ivar, :@tb), :find,
              s(:send, nil, :tem,
                s(:sym, :val),
                s(:int, 1)))))),
      s(:def, :tup,
        s(:args,
          s(:restarg, :ary)),
        s(:send,
          s(:const,
            s(:const, nil, :Rinda), :TupleEntry), :new,
          s(:lvar, :ary))),
      s(:def, :tem,
        s(:args,
          s(:restarg, :ary)),
        s(:send,
          s(:const,
            s(:const, nil, :Rinda), :TemplateEntry), :new,
          s(:lvar, :ary))))))
