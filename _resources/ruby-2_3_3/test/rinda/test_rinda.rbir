s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "drb/drb")),
  s(:send, nil, :require,
    s(:str, "drb/eq")),
  s(:send, nil, :require,
    s(:str, "rinda/ring")),
  s(:send, nil, :require,
    s(:str, "rinda/tuplespace")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "singleton")),
  s(:module,
    s(:const, nil, :Rinda),
    s(:begin,
      s(:class,
        s(:const, nil, :MockClock), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Singleton)),
          s(:class,
            s(:const, nil, :MyTS),
            s(:const,
              s(:const, nil, :Rinda), :TupleSpace),
            s(:def, :keeper_thread,
              s(:args),
              s(:nil))),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@now,
                s(:int, 2)),
              s(:ivasgn, :@reso,
                s(:int, 1)),
              s(:ivasgn, :@ts,
                s(:send,
                  s(:const, nil, :MyTS), :new)),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:int, 2),
                  s(:sym, :now))),
              s(:ivasgn, :@inf,
                s(:send,
                  s(:send,
                    s(:int, 2), :**,
                    s(:int, 31)), :-,
                  s(:int, 1))))),
          s(:def, :now,
            s(:args),
            s(:send,
              s(:ivar, :@now), :to_f)),
          s(:def, :at,
            s(:args,
              s(:arg, :n)),
            s(:lvar, :n)),
          s(:def, :_forward,
            s(:args,
              s(:optarg, :n,
                s(:nil))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :now)),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:array,
                    s(:nil),
                    s(:sym, :now)))),
              s(:ivasgn, :@now,
                s(:send,
                  s(:lvar, :now), :+,
                  s(:lvar, :n))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:ivar, :@now),
                  s(:sym, :now))))),
          s(:def, :forward,
            s(:args,
              s(:arg, :n)),
            s(:while,
              s(:send,
                s(:lvar, :n), :>,
                s(:int, 0)),
              s(:begin,
                s(:send, nil, :_forward,
                  s(:ivar, :@reso)),
                s(:op_asgn,
                  s(:lvasgn, :n), :-,
                  s(:ivar, :@reso)),
                s(:send,
                  s(:const, nil, :Thread), :pass)))),
          s(:def, :rewind,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@ts), :take,
                s(:array,
                  s(:nil),
                  s(:sym, :now))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:ivar, :@inf),
                  s(:sym, :now))),
              s(:send,
                s(:ivar, :@ts), :take,
                s(:array,
                  s(:nil),
                  s(:sym, :now))),
              s(:ivasgn, :@now,
                s(:int, 2)),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:int, 2),
                  s(:sym, :now))))),
          s(:def, :sleep,
            s(:args,
              s(:optarg, :n,
                s(:nil))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :now)),
                s(:send,
                  s(:ivar, :@ts), :read,
                  s(:array,
                    s(:nil),
                    s(:sym, :now)))),
              s(:send,
                s(:ivar, :@ts), :read,
                s(:array,
                  s(:irange,
                    s(:begin,
                      s(:send,
                        s(:lvar, :now), :+,
                        s(:lvar, :n))),
                    s(:ivar, :@inf)),
                  s(:sym, :now))),
              s(:int, 0))))),
      s(:module,
        s(:const, nil, :Time),
        s(:begin,
          s(:def, :sleep,
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:ivar, :@m), :sleep,
              s(:lvar, :n))),
          s(:send, nil, :module_function,
            s(:sym, :sleep)),
          s(:def, :at,
            s(:args,
              s(:arg, :n)),
            s(:lvar, :n)),
          s(:send, nil, :module_function,
            s(:sym, :at)),
          s(:def, :now,
            s(:args),
            s(:if,
              s(:and,
                s(:defined?,
                  s(:ivar, :@m)),
                s(:ivar, :@m)),
              s(:send,
                s(:ivar, :@m), :now),
              s(:int, 2))),
          s(:send, nil, :module_function,
            s(:sym, :now)),
          s(:def, :rewind,
            s(:args),
            s(:send,
              s(:ivar, :@m), :rewind)),
          s(:send, nil, :module_function,
            s(:sym, :rewind)),
          s(:def, :forward,
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:ivar, :@m), :forward,
              s(:lvar, :n))),
          s(:send, nil, :module_function,
            s(:sym, :forward)),
          s(:ivasgn, :@m,
            s(:send,
              s(:const, nil, :MockClock), :instance)))),
      s(:class,
        s(:const, nil, :TupleSpace), nil,
        s(:def, :sleep,
          s(:args,
            s(:arg, :n)),
          s(:send,
            s(:const, nil, :Kernel), :sleep,
            s(:send,
              s(:lvar, :n), :*,
              s(:float, 0.01))))),
      s(:module,
        s(:const, nil, :TupleSpaceTestModule),
        s(:begin,
          s(:def, :sleep,
            s(:args,
              s(:arg, :n)),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Thread), :current), :==,
                s(:send,
                  s(:const, nil, :Thread), :main)),
              s(:send,
                s(:const, nil, :Time), :forward,
                s(:lvar, :n)),
              s(:send,
                s(:const, nil, :Time), :sleep,
                s(:lvar, :n)))),
          s(:def, :thread_join,
            s(:args,
              s(:arg, :th)),
            s(:begin,
              s(:while,
                s(:send,
                  s(:lvar, :th), :alive?),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Kernel), :sleep,
                    s(:float, 0.1)),
                  s(:send, nil, :sleep,
                    s(:int, 1)))),
              s(:send,
                s(:lvar, :th), :value))),
          s(:def, :test_00_tuple,
            s(:args),
            s(:begin,
              s(:lvasgn, :tuple,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleEntry), :new,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :canceled?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :expired?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tuple), :alive?)))),
          s(:def, :test_00_template,
            s(:args),
            s(:begin,
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)))),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:lvar, :tmpl), :[],
                  s(:int, 2))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:array,
                      s(:int, 1),
                      s(:nil),
                      s(:int, 3))), :!)),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:array,
                    s(:regexp,
                      s(:str, "^rinda"),
                      s(:regopt, :i)),
                    s(:nil),
                    s(:sym, :hello)))),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:array,
                    s(:str, "Rinda"),
                    s(:int, 2),
                    s(:sym, :hello)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:array,
                      s(:str, "Rinda"),
                      s(:int, 2),
                      s(:const, nil, :Symbol))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:array,
                      s(:int, 1),
                      s(:int, 2),
                      s(:sym, :hello))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:array,
                    s(:regexp,
                      s(:str, "^rinda"),
                      s(:regopt, :i)),
                    s(:int, 2),
                    s(:sym, :hello)))),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:array,
                    s(:const, nil, :Symbol)))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:array,
                    s(:sym, :hello)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:array,
                    s(:const, nil, :Symbol)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:array,
                      s(:str, "Symbol"))), :!)),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:const, nil, :String)),
                    s(:pair,
                      s(:str, "name"),
                      s(:const, nil, :String))))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "Hello")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "Foo"))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "1"),
                        s(:int, 2)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hi")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "age"),
                        s(:int, 1)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "no_name"),
                        s(:str, "Foo")))), :!)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :InvalidHashTupleKey)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:hash,
                    s(:pair,
                      s(:sym, :message),
                      s(:const, nil, :String)),
                    s(:pair,
                      s(:str, "name"),
                      s(:const, nil, :String))))),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:hash,
                    s(:pair,
                      s(:str, "name"),
                      s(:const, nil, :String))))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:hash,
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "Foo"))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:sym, :symbol)),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "1"),
                        s(:int, 2)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hi")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "age"),
                        s(:int, 1)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "no_name"),
                        s(:str, "Foo")))), :!)),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:const, nil, :String)),
                    s(:pair,
                      s(:str, "name"),
                      s(:const, nil, :String))))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "Hello")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "Foo"))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "1"),
                        s(:int, 2)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hi")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "age"),
                        s(:int, 1)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "no_name"),
                        s(:str, "Foo")))), :!)),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:const, nil, :String))))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "Hello"))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "1"),
                        s(:int, 2)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hi")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "age"),
                        s(:int, 1)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "no_name"),
                        s(:str, "Foo")))), :!)),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :Template), :new,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:const, nil, :String)),
                    s(:pair,
                      s(:str, "name"),
                      s(:nil))))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :tmpl), :size)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :match,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "Hello")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "Foo"))))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "1"),
                        s(:int, 2)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hi")),
                      s(:pair,
                        s(:str, "name"),
                        s(:str, "Foo")),
                      s(:pair,
                        s(:str, "age"),
                        s(:int, 1)))), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tmpl), :match,
                    s(:hash,
                      s(:pair,
                        s(:str, "message"),
                        s(:str, "Hello")),
                      s(:pair,
                        s(:str, "no_name"),
                        s(:str, "Foo")))), :!)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :InvalidHashTupleKey)),
                s(:args),
                s(:send,
                  s(:ivar, :@ts), :write,
                  s(:hash,
                    s(:pair,
                      s(:sym, :message),
                      s(:const, nil, :String)),
                    s(:pair,
                      s(:str, "name"),
                      s(:const, nil, :String))))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:hash,
                  s(:pair,
                    s(:str, "1"),
                    s(:int, 1)),
                  s(:pair,
                    s(:str, "2"),
                    s(:int, 2)),
                  s(:pair,
                    s(:str, "3"),
                    s(:int, 3)))),
              s(:send, nil, :assert_equal,
                s(:hash,
                  s(:pair,
                    s(:str, "1"),
                    s(:int, 1)),
                  s(:pair,
                    s(:str, "2"),
                    s(:int, 2)),
                  s(:pair,
                    s(:str, "3"),
                    s(:int, 3))),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:hash,
                    s(:pair,
                      s(:str, "1"),
                      s(:int, 1)),
                    s(:pair,
                      s(:str, "2"),
                      s(:int, 2)),
                    s(:pair,
                      s(:str, "3"),
                      s(:int, 3))))),
              s(:lvasgn, :entry,
                s(:send,
                  s(:ivar, :@ts), :write,
                  s(:array,
                    s(:hash,
                      s(:pair,
                        s(:str, "1"),
                        s(:int, 1)),
                      s(:pair,
                        s(:str, "2"),
                        s(:int, 2)),
                      s(:pair,
                        s(:str, "3"),
                        s(:int, 3)))))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :RequestExpiredError)),
                s(:args),
                s(:send, nil, :assert_equal,
                  s(:hash,
                    s(:pair,
                      s(:str, "1"),
                      s(:int, 1)),
                    s(:pair,
                      s(:str, "2"),
                      s(:int, 2)),
                    s(:pair,
                      s(:str, "3"),
                      s(:int, 3))),
                  s(:send,
                    s(:ivar, :@ts), :read,
                    s(:hash,
                      s(:pair,
                        s(:str, "1"),
                        s(:int, 1))),
                    s(:int, 0)))),
              s(:send,
                s(:lvar, :entry), :cancel))),
          s(:def, :test_00_DRbObject,
            s(:args),
            s(:begin,
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new,
                  s(:nil),
                  s(:str, "druby://host:1234"))),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :DRbObjectTemplate), :new)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :===,
                  s(:lvar, :ro))),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :DRbObjectTemplate), :new,
                  s(:str, "druby://host:1234"))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :===,
                  s(:lvar, :ro))),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :DRbObjectTemplate), :new,
                  s(:str, "druby://host:12345"))),
              s(:send, nil, :assert,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :tmpl), :===,
                      s(:lvar, :ro))), :!)),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :DRbObjectTemplate), :new,
                  s(:regexp,
                    s(:str, "^druby://host:"),
                    s(:regopt)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :===,
                  s(:lvar, :ro))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with,
                  s(:int, 12345),
                  s(:int, 1234))),
              s(:send, nil, :assert,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :tmpl), :===,
                      s(:lvar, :ro))), :!)),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with,
                  s(:str, "druby://foo:12345"),
                  s(:int, 1234))),
              s(:send, nil, :assert,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :tmpl), :===,
                      s(:lvar, :ro))), :!)),
              s(:lvasgn, :tmpl,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :DRbObjectTemplate), :new,
                  s(:regexp,
                    s(:str, "^druby://(foo|bar):"),
                    s(:regopt)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :===,
                  s(:lvar, :ro))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with,
                  s(:str, "druby://bar:12345"),
                  s(:int, 1234))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tmpl), :===,
                  s(:lvar, :ro))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRbObject), :new_with,
                  s(:str, "druby://baz:12345"),
                  s(:int, 1234))),
              s(:send, nil, :assert,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :tmpl), :===,
                      s(:lvar, :ro))), :!)))),
          s(:def, :test_inp_rdp,
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :RequestExpiredError)),
                s(:args),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:array,
                    s(:sym, :empty)),
                  s(:int, 0))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :RequestExpiredError)),
                s(:args),
                s(:send,
                  s(:ivar, :@ts), :read,
                  s(:array,
                    s(:sym, :empty)),
                  s(:int, 0))))),
          s(:def, :test_ruby_talk_264062,
            s(:args),
            s(:begin,
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:ivar, :@ts), :take,
                    s(:array,
                      s(:sym, :empty)),
                    s(:int, 1)))),
              s(:send, nil, :sleep,
                s(:int, 10)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :RequestExpiredError)),
                s(:args),
                s(:send, nil, :thread_join,
                  s(:lvar, :th))),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:send,
                    s(:ivar, :@ts), :read,
                    s(:array,
                      s(:sym, :empty)),
                    s(:int, 1)))),
              s(:send, nil, :sleep,
                s(:int, 10)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :RequestExpiredError)),
                s(:args),
                s(:send, nil, :thread_join,
                  s(:lvar, :th))))),
          s(:def, :test_symbol_tuple,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:sym, :symbol),
                  s(:sym, :symbol))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:str, "string"),
                  s(:sym, :string))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :symbol),
                    s(:sym, :symbol))),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:sym, :symbol),
                    s(:nil)))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :symbol),
                    s(:sym, :symbol))),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:const, nil, :Symbol),
                    s(:nil)))),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:sym, :nil),
                    s(:nil)))))),
          s(:def, :test_core_01,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:int, 5), :times),
                s(:args),
                s(:send,
                  s(:ivar, :@ts), :write,
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2)))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2)),
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2)),
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2)),
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2)),
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2))),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))),
              s(:lvasgn, :taker,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new,
                    s(:int, 5)),
                  s(:args,
                    s(:arg, :count)),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:int, 0)),
                    s(:block,
                      s(:send,
                        s(:lvar, :count), :times),
                      s(:args),
                      s(:begin,
                        s(:lvasgn, :tuple,
                          s(:send,
                            s(:ivar, :@ts), :take,
                            s(:array,
                              s(:sym, :req),
                              s(:const, nil, :Integer)))),
                        s(:send, nil, :assert_equal,
                          s(:int, 2),
                          s(:send,
                            s(:lvar, :tuple), :[],
                            s(:int, 1))),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:send,
                            s(:lvar, :tuple), :[],
                            s(:int, 1))))),
                    s(:send,
                      s(:ivar, :@ts), :write,
                      s(:array,
                        s(:sym, :ans),
                        s(:lvar, :s))),
                    s(:lvar, :s)))),
              s(:send, nil, :assert_equal,
                s(:int, 10),
                s(:send, nil, :thread_join,
                  s(:lvar, :taker))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:sym, :ans),
                  s(:int, 10)),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:array,
                    s(:sym, :ans),
                    s(:int, 10)))),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))))),
          s(:def, :test_core_02,
            s(:args),
            s(:begin,
              s(:lvasgn, :taker,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new,
                    s(:int, 5)),
                  s(:args,
                    s(:arg, :count)),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:int, 0)),
                    s(:block,
                      s(:send,
                        s(:lvar, :count), :times),
                      s(:args),
                      s(:begin,
                        s(:lvasgn, :tuple,
                          s(:send,
                            s(:ivar, :@ts), :take,
                            s(:array,
                              s(:sym, :req),
                              s(:const, nil, :Integer)))),
                        s(:send, nil, :assert_equal,
                          s(:int, 2),
                          s(:send,
                            s(:lvar, :tuple), :[],
                            s(:int, 1))),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:send,
                            s(:lvar, :tuple), :[],
                            s(:int, 1))))),
                    s(:send,
                      s(:ivar, :@ts), :write,
                      s(:array,
                        s(:sym, :ans),
                        s(:lvar, :s))),
                    s(:lvar, :s)))),
              s(:block,
                s(:send,
                  s(:int, 5), :times),
                s(:args),
                s(:send,
                  s(:ivar, :@ts), :write,
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2)))),
              s(:send, nil, :assert_equal,
                s(:int, 10),
                s(:send, nil, :thread_join,
                  s(:lvar, :taker))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:sym, :ans),
                  s(:int, 10)),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:array,
                    s(:sym, :ans),
                    s(:int, 10)))),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))))),
          s(:def, :test_core_03_notify,
            s(:args),
            s(:begin,
              s(:lvasgn, :notify1,
                s(:send,
                  s(:ivar, :@ts), :notify,
                  s(:nil),
                  s(:array,
                    s(:sym, :req),
                    s(:const, nil, :Integer)))),
              s(:lvasgn, :notify2,
                s(:send,
                  s(:ivar, :@ts), :notify,
                  s(:nil),
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:const, nil, :String)),
                    s(:pair,
                      s(:str, "name"),
                      s(:const, nil, :String))))),
              s(:block,
                s(:send,
                  s(:int, 5), :times),
                s(:args),
                s(:send,
                  s(:ivar, :@ts), :write,
                  s(:array,
                    s(:sym, :req),
                    s(:int, 2)))),
              s(:block,
                s(:send,
                  s(:int, 5), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :tuple,
                    s(:send,
                      s(:ivar, :@ts), :take,
                      s(:array,
                        s(:sym, :req),
                        s(:const, nil, :Integer)))),
                  s(:send, nil, :assert_equal,
                    s(:int, 2),
                    s(:send,
                      s(:lvar, :tuple), :[],
                      s(:int, 1))))),
              s(:block,
                s(:send,
                  s(:int, 5), :times),
                s(:args),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "write"),
                    s(:array,
                      s(:sym, :req),
                      s(:int, 2))),
                  s(:send,
                    s(:lvar, :notify1), :pop))),
              s(:block,
                s(:send,
                  s(:int, 5), :times),
                s(:args),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "take"),
                    s(:array,
                      s(:sym, :req),
                      s(:int, 2))),
                  s(:send,
                    s(:lvar, :notify1), :pop))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:hash,
                  s(:pair,
                    s(:str, "message"),
                    s(:str, "first")),
                  s(:pair,
                    s(:str, "name"),
                    s(:str, "3")))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:hash,
                  s(:pair,
                    s(:str, "message"),
                    s(:str, "second")),
                  s(:pair,
                    s(:str, "name"),
                    s(:str, "1")))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:hash,
                  s(:pair,
                    s(:str, "message"),
                    s(:str, "third")),
                  s(:pair,
                    s(:str, "name"),
                    s(:str, "0")))),
              s(:send,
                s(:ivar, :@ts), :take,
                s(:hash,
                  s(:pair,
                    s(:str, "message"),
                    s(:str, "third")),
                  s(:pair,
                    s(:str, "name"),
                    s(:str, "0")))),
              s(:send,
                s(:ivar, :@ts), :take,
                s(:hash,
                  s(:pair,
                    s(:str, "message"),
                    s(:str, "first")),
                  s(:pair,
                    s(:str, "name"),
                    s(:str, "3")))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "write"),
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "first")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "3")))),
                s(:send,
                  s(:lvar, :notify2), :pop)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "write"),
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "second")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "1")))),
                s(:send,
                  s(:lvar, :notify2), :pop)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "write"),
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "third")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "0")))),
                s(:send,
                  s(:lvar, :notify2), :pop)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "take"),
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "third")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "0")))),
                s(:send,
                  s(:lvar, :notify2), :pop)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "take"),
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:str, "first")),
                    s(:pair,
                      s(:str, "name"),
                      s(:str, "3")))),
                s(:send,
                  s(:lvar, :notify2), :pop)))),
          s(:def, :test_cancel_01,
            s(:args),
            s(:begin,
              s(:lvasgn, :entry,
                s(:send,
                  s(:ivar, :@ts), :write,
                  s(:array,
                    s(:sym, :removeme),
                    s(:int, 1)))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :removeme),
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))),
              s(:send,
                s(:lvar, :entry), :cancel),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))),
              s(:lvasgn, :template,
                s(:nil)),
              s(:lvasgn, :taker,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:ivar, :@ts), :take,
                      s(:array,
                        s(:sym, :take),
                        s(:nil)),
                      s(:int, 10)),
                    s(:args,
                      s(:arg, :t)),
                    s(:begin,
                      s(:lvasgn, :template,
                        s(:lvar, :t)),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Thread), :new),
                        s(:args),
                        s(:send,
                          s(:lvar, :template), :cancel)))))),
              s(:send, nil, :sleep,
                s(:int, 2)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :RequestCanceledError)),
                s(:args),
                s(:send, nil, :assert_nil,
                  s(:send, nil, :thread_join,
                    s(:lvar, :taker)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :template), :canceled?)),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:sym, :take),
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :take),
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))))),
          s(:def, :test_cancel_02,
            s(:args),
            s(:begin,
              s(:lvasgn, :entry,
                s(:send,
                  s(:ivar, :@ts), :write,
                  s(:array,
                    s(:sym, :removeme),
                    s(:int, 1)))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :removeme),
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))),
              s(:send,
                s(:lvar, :entry), :cancel),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))),
              s(:lvasgn, :template,
                s(:nil)),
              s(:lvasgn, :reader,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:ivar, :@ts), :read,
                      s(:array,
                        s(:sym, :take),
                        s(:nil)),
                      s(:int, 10)),
                    s(:args,
                      s(:arg, :t)),
                    s(:begin,
                      s(:lvasgn, :template,
                        s(:lvar, :t)),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Thread), :new),
                        s(:args),
                        s(:send,
                          s(:lvar, :template), :cancel)))))),
              s(:send, nil, :sleep,
                s(:int, 2)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Rinda), :RequestCanceledError)),
                s(:args),
                s(:send, nil, :assert_nil,
                  s(:send, nil, :thread_join,
                    s(:lvar, :reader)))),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :template), :canceled?)),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:sym, :take),
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:sym, :take),
                    s(:int, 1))),
                s(:send,
                  s(:ivar, :@ts), :read_all,
                  s(:array,
                    s(:nil),
                    s(:nil)))))),
          s(:class,
            s(:const, nil, :SimpleRenewer), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:arg, :sec),
                  s(:optarg, :n,
                    s(:int, 1))),
                s(:begin,
                  s(:ivasgn, :@sec,
                    s(:lvar, :sec)),
                  s(:ivasgn, :@n,
                    s(:lvar, :n)))),
              s(:def, :renew,
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:ivar, :@n), :<=,
                      s(:int, 0)),
                    s(:return,
                      s(:int, -1)), nil),
                  s(:op_asgn,
                    s(:ivasgn, :@n), :-,
                    s(:int, 1)),
                  s(:return,
                    s(:ivar, :@sec)))))),
          s(:def, :test_00_renewer,
            s(:args),
            s(:begin,
              s(:lvasgn, :tuple,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleEntry), :new,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)),
                  s(:true))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :canceled?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tuple), :expired?)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :alive?), :!)),
              s(:lvasgn, :tuple,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleEntry), :new,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)),
                  s(:int, 1))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :canceled?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :expired?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tuple), :alive?)),
              s(:send, nil, :sleep,
                s(:int, 2)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tuple), :expired?)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :alive?), :!)),
              s(:ivasgn, :@renewer,
                s(:send,
                  s(:const, nil, :SimpleRenewer), :new,
                  s(:int, 1),
                  s(:int, 2))),
              s(:lvasgn, :tuple,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleEntry), :new,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)),
                  s(:ivar, :@renewer))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :canceled?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :expired?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tuple), :alive?)),
              s(:send, nil, :sleep,
                s(:int, 1)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :canceled?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :expired?), :!)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tuple), :alive?)),
              s(:send, nil, :sleep,
                s(:int, 2)),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :tuple), :expired?)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :alive?), :!)))))),
      s(:class,
        s(:const, nil, :TupleSpaceTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TupleSpaceTestModule)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:send,
                s(:send,
                  s(:const, nil, :ThreadGroup), :new), :add,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:ivasgn, :@ts,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleSpace), :new,
                  s(:int, 1))))),
          s(:def, :teardown,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@ts), :instance_eval),
              s(:args),
              s(:if,
                s(:lvasgn, :th,
                  s(:ivar, :@keeper)),
                s(:begin,
                  s(:send,
                    s(:lvar, :th), :kill),
                  s(:send,
                    s(:lvar, :th), :join)), nil))))),
      s(:class,
        s(:const, nil, :TupleSpaceProxyTest),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :TupleSpaceTestModule)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:send,
                s(:send,
                  s(:const, nil, :ThreadGroup), :new), :add,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:ivasgn, :@ts_base,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleSpace), :new,
                  s(:int, 1))),
              s(:ivasgn, :@ts,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleSpaceProxy), :new,
                  s(:ivar, :@ts_base))))),
          s(:def, :teardown,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@ts_base), :instance_eval),
              s(:args),
              s(:if,
                s(:lvasgn, :th,
                  s(:ivar, :@keeper)),
                s(:begin,
                  s(:send,
                    s(:lvar, :th), :kill),
                  s(:send,
                    s(:lvar, :th), :join)), nil))),
          s(:def, :test_remote_array_and_hash,
            s(:args),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:send,
                  s(:const, nil, :DRbObject), :new,
                  s(:lvar, :ary))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3)),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2),
                    s(:int, 3)),
                  s(:int, 0))),
              s(:lvasgn, :hsh,
                s(:hash,
                  s(:pair,
                    s(:str, "head"),
                    s(:int, 1)),
                  s(:pair,
                    s(:str, "tail"),
                    s(:int, 2)))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:send,
                  s(:const, nil, :DRbObject), :new,
                  s(:lvar, :hsh))),
              s(:send, nil, :assert_equal,
                s(:hash,
                  s(:pair,
                    s(:str, "head"),
                    s(:int, 1)),
                  s(:pair,
                    s(:str, "tail"),
                    s(:int, 2))),
                s(:send,
                  s(:ivar, :@ts), :take,
                  s(:hash,
                    s(:pair,
                      s(:str, "head"),
                      s(:int, 1)),
                    s(:pair,
                      s(:str, "tail"),
                      s(:int, 2))),
                  s(:int, 0))))),
          s(:def, :test_take_bug_8215,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :service,
                  s(:send,
                    s(:const, nil, :DRb), :start_service,
                    s(:str, "druby://localhost:0"),
                    s(:ivar, :@ts_base))),
                s(:lvasgn, :uri,
                  s(:send,
                    s(:lvar, :service), :uri)),
                s(:lvasgn, :args,
                  s(:array,
                    s(:send,
                      s(:const, nil, :EnvUtil), :rubybin),
                    s(:splat,
                      s(:array,
                        s(:str, "-rdrb/drb"),
                        s(:str, "-rdrb/eq"),
                        s(:str, "-rrinda/ring"),
                        s(:str, "-rrinda/tuplespace"),
                        s(:str, "-e"))))),
                s(:lvasgn, :take,
                  s(:send, nil, :spawn,
                    s(:splat,
                      s(:lvar, :args)),
                    s(:dstr,
                      s(:str, "      uri = ARGV[0]\n"),
                      s(:str, "      DRb.start_service(\"druby://localhost:0\")\n"),
                      s(:str, "      ro = DRbObject.new_with_uri(uri)\n"),
                      s(:str, "      ts = Rinda::TupleSpaceProxy.new(ro)\n"),
                      s(:str, "      th = Thread.new do\n"),
                      s(:str, "        ts.take([:test_take, nil])\n"),
                      s(:str, "      end\n"),
                      s(:str, "      Kernel.sleep(0.1)\n"),
                      s(:str, "      th.raise(Interrupt) # causes loss of the taken tuple\n"),
                      s(:str, "      ts.write([:barrier, :continue])\n"),
                      s(:str, "      Kernel.sleep\n")),
                    s(:lvar, :uri))),
                s(:send,
                  s(:ivar, :@ts_base), :take,
                  s(:array,
                    s(:sym, :barrier),
                    s(:sym, :continue))),
                s(:lvasgn, :write,
                  s(:send, nil, :spawn,
                    s(:splat,
                      s(:lvar, :args)),
                    s(:dstr,
                      s(:str, "      uri = ARGV[0]\n"),
                      s(:str, "      DRb.start_service(\"druby://localhost:0\")\n"),
                      s(:str, "      ro = DRbObject.new_with_uri(uri)\n"),
                      s(:str, "      ts = Rinda::TupleSpaceProxy.new(ro)\n"),
                      s(:str, "      ts.write([:test_take, 42])\n")),
                    s(:lvar, :uri))),
                s(:lvasgn, :status,
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:lvar, :write))),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:array,
                      s(:sym, :test_take),
                      s(:int, 42))),
                  s(:send,
                    s(:ivar, :@ts_base), :read_all,
                    s(:array,
                      s(:sym, :test_take),
                      s(:nil))),
                  s(:str, "[bug:8215] tuple lost"))),
              s(:begin,
                s(:if,
                  s(:lvar, :service),
                  s(:send,
                    s(:lvar, :service), :stop_service), nil),
                s(:lvasgn, :signal,
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "mswin|mingw"),
                        s(:regopt)),
                      s(:const, nil, :RUBY_PLATFORM)),
                    s(:str, "KILL"),
                    s(:str, "TERM"))),
                s(:if,
                  s(:and,
                    s(:lvar, :write),
                    s(:send,
                      s(:lvar, :status), :nil?)),
                  s(:send,
                    s(:const, nil, :Process), :kill,
                    s(:lvar, :signal),
                    s(:lvar, :write)), nil),
                s(:if,
                  s(:lvar, :take),
                  s(:send,
                    s(:const, nil, :Process), :kill,
                    s(:lvar, :signal),
                    s(:lvar, :take)), nil),
                s(:if,
                  s(:and,
                    s(:lvar, :write),
                    s(:send,
                      s(:lvar, :status), :nil?)),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:lvar, :write)), nil),
                s(:if,
                  s(:lvar, :take),
                  s(:send,
                    s(:const, nil, :Process), :wait,
                    s(:lvar, :take)), nil)))),
          s(:ivasgn, :@server,
            s(:or,
              s(:send,
                s(:const, nil, :DRb), :primary_server),
              s(:send,
                s(:const, nil, :DRb), :start_service,
                s(:str, "druby://localhost:0")))))),
      s(:module,
        s(:const, nil, :RingIPv6),
        s(:def, :prepare_ipv6,
          s(:args,
            s(:arg, :r)),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Socket), :getifaddrs), :each),
                  s(:args,
                    s(:arg, :ifaddr)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :ifaddr), :addr), nil,
                      s(:next)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :ifaddr), :addr), :ipv6_linklocal?), nil,
                      s(:next)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :ifaddr), :name), :[],
                          s(:int, 0),
                          s(:int, 2)), :==,
                        s(:str, "lo")),
                      s(:next), nil),
                    s(:send,
                      s(:lvar, :r), :multicast_interface=,
                      s(:send,
                        s(:lvar, :ifaddr), :ifindex)),
                    s(:return,
                      s(:lvar, :ifaddr)))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil,
                  s(:if,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Socket), :ip_address_list), :any?),
                      s(:args,
                        s(:arg, :addrinfo)),
                      s(:and,
                        s(:send,
                          s(:lvar, :addrinfo), :ipv6?),
                        s(:send,
                          s(:send,
                            s(:lvar, :addrinfo), :ipv6_loopback?), :!))),
                    s(:return), nil)), nil)),
            s(:send, nil, :skip,
              s(:str, "IPv6 not available"))))),
      s(:class,
        s(:const, nil, :TestRingServer),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@port,
                s(:const,
                  s(:const, nil, :Rinda), :Ring_PORT)),
              s(:ivasgn, :@ts,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :TupleSpace), :new)),
              s(:ivasgn, :@rs,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :RingServer), :new,
                  s(:ivar, :@ts),
                  s(:array),
                  s(:ivar, :@port))))),
          s(:def, :teardown,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@ts), :instance_eval),
                s(:args),
                s(:if,
                  s(:lvasgn, :th,
                    s(:ivar, :@keeper)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :th), :kill),
                    s(:send,
                      s(:lvar, :th), :join)), nil)),
              s(:send,
                s(:ivar, :@rs), :shutdown))),
          s(:def, :test_do_reply,
            s(:args),
            s(:block,
              s(:send, nil, :with_timeout,
                s(:int, 10)),
              s(:args),
              s(:send, nil, :_test_do_reply))),
          s(:def, :_test_do_reply,
            s(:args),
            s(:begin,
              s(:lvasgn, :called,
                s(:nil)),
              s(:lvasgn, :callback,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :ts)),
                  s(:lvasgn, :called,
                    s(:lvar, :ts)))),
              s(:lvasgn, :callback,
                s(:send,
                  s(:const,
                    s(:const, nil, :DRb), :DRbObject), :new,
                  s(:lvar, :callback))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:sym, :lookup_ring),
                  s(:lvar, :callback))),
              s(:send,
                s(:ivar, :@rs), :do_reply),
              s(:block,
                s(:send, nil, :wait_for,
                  s(:int, 10)),
                s(:args),
                s(:lvar, :called)),
              s(:send, nil, :assert_same,
                s(:ivar, :@ts),
                s(:lvar, :called)))),
          s(:def, :test_do_reply_local,
            s(:args),
            s(:block,
              s(:send, nil, :with_timeout,
                s(:int, 10)),
              s(:args),
              s(:send, nil, :_test_do_reply_local))),
          s(:def, :_test_do_reply_local,
            s(:args),
            s(:begin,
              s(:lvasgn, :called,
                s(:nil)),
              s(:lvasgn, :callback,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :ts)),
                  s(:lvasgn, :called,
                    s(:lvar, :ts)))),
              s(:send,
                s(:ivar, :@ts), :write,
                s(:array,
                  s(:sym, :lookup_ring),
                  s(:lvar, :callback))),
              s(:send,
                s(:ivar, :@rs), :do_reply),
              s(:block,
                s(:send, nil, :wait_for,
                  s(:int, 10)),
                s(:args),
                s(:lvar, :called)),
              s(:send, nil, :assert_same,
                s(:ivar, :@ts),
                s(:lvar, :called)))),
          s(:def, :test_make_socket_unicast,
            s(:args),
            s(:begin,
              s(:lvasgn, :v4,
                s(:send,
                  s(:ivar, :@rs), :make_socket,
                  s(:str, "127.0.0.1"))),
              s(:send, nil, :assert_equal,
                s(:str, "127.0.0.1"),
                s(:send,
                  s(:send,
                    s(:lvar, :v4), :local_address), :ip_address)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@port),
                s(:send,
                  s(:send,
                    s(:lvar, :v4), :local_address), :ip_port)))),
          s(:def, :test_make_socket_ipv4_multicast,
            s(:args),
            s(:begin,
              s(:lvasgn, :v4mc,
                s(:send,
                  s(:ivar, :@rs), :make_socket,
                  s(:str, "239.0.0.1"))),
              s(:kwbegin,
                s(:rescue,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Socket), :const_defined?,
                      s(:sym, :SO_REUSEPORT)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:lvar, :v4mc), :getsockopt,
                          s(:sym, :SOCKET),
                          s(:sym, :SO_REUSEPORT)), :bool)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:lvar, :v4mc), :getsockopt,
                          s(:sym, :SOCKET),
                          s(:sym, :SO_REUSEADDR)), :bool))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :TypeError)), nil,
                    s(:begin,
                      s(:if,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "aix"),
                            s(:regopt)),
                          s(:const, nil, :RUBY_PLATFORM)),
                        s(:send, nil, :skip,
                          s(:str, "Known bug in getsockopt(2) on AIX")), nil),
                      s(:send, nil, :raise,
                        s(:gvar, :$!)))), nil)),
              s(:send, nil, :assert_equal,
                s(:str, "0.0.0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :v4mc), :local_address), :ip_address)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@port),
                s(:send,
                  s(:send,
                    s(:lvar, :v4mc), :local_address), :ip_port)))),
          s(:def, :test_make_socket_ipv6_multicast,
            s(:args),
            s(:begin,
              s(:if,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Socket), :ip_address_list), :any?),
                  s(:args,
                    s(:arg, :addrinfo)),
                  s(:and,
                    s(:send,
                      s(:lvar, :addrinfo), :ipv6?),
                    s(:send,
                      s(:send,
                        s(:lvar, :addrinfo), :ipv6_loopback?), :!))), nil,
                s(:send, nil, :skip,
                  s(:str, "IPv6 not available"))),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :v6mc,
                    s(:send,
                      s(:ivar, :@rs), :make_socket,
                      s(:str, "ff02::1"))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :EADDRNOTAVAIL)), nil,
                    s(:return)), nil)),
              s(:if,
                s(:send,
                  s(:const, nil, :Socket), :const_defined?,
                  s(:sym, :SO_REUSEPORT)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :v6mc), :getsockopt,
                      s(:sym, :SOCKET),
                      s(:sym, :SO_REUSEPORT)), :bool)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :v6mc), :getsockopt,
                      s(:sym, :SOCKET),
                      s(:sym, :SO_REUSEADDR)), :bool))),
              s(:send, nil, :assert_equal,
                s(:str, "::1"),
                s(:send,
                  s(:send,
                    s(:lvar, :v6mc), :local_address), :ip_address)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@port),
                s(:send,
                  s(:send,
                    s(:lvar, :v6mc), :local_address), :ip_port)))),
          s(:def, :test_ring_server_ipv4_multicast,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@rs), :shutdown),
              s(:ivasgn, :@rs,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :RingServer), :new,
                  s(:ivar, :@ts),
                  s(:array,
                    s(:array,
                      s(:str, "239.0.0.1"),
                      s(:str, "0.0.0.0"))),
                  s(:ivar, :@port))),
              s(:lvasgn, :v4mc,
                s(:send,
                  s(:send,
                    s(:ivar, :@rs), :instance_variable_get,
                    s(:str, "@sockets")), :first)),
              s(:kwbegin,
                s(:rescue,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Socket), :const_defined?,
                      s(:sym, :SO_REUSEPORT)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:lvar, :v4mc), :getsockopt,
                          s(:sym, :SOCKET),
                          s(:sym, :SO_REUSEPORT)), :bool)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:lvar, :v4mc), :getsockopt,
                          s(:sym, :SOCKET),
                          s(:sym, :SO_REUSEADDR)), :bool))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :TypeError)), nil,
                    s(:begin,
                      s(:if,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "aix"),
                            s(:regopt)),
                          s(:const, nil, :RUBY_PLATFORM)),
                        s(:send, nil, :skip,
                          s(:str, "Known bug in getsockopt(2) on AIX")), nil),
                      s(:send, nil, :raise,
                        s(:gvar, :$!)))), nil)),
              s(:send, nil, :assert_equal,
                s(:str, "0.0.0.0"),
                s(:send,
                  s(:send,
                    s(:lvar, :v4mc), :local_address), :ip_address)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@port),
                s(:send,
                  s(:send,
                    s(:lvar, :v4mc), :local_address), :ip_port)))),
          s(:def, :test_ring_server_ipv6_multicast,
            s(:args),
            s(:begin,
              s(:if,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Socket), :ip_address_list), :any?),
                  s(:args,
                    s(:arg, :addrinfo)),
                  s(:and,
                    s(:send,
                      s(:lvar, :addrinfo), :ipv6?),
                    s(:send,
                      s(:send,
                        s(:lvar, :addrinfo), :ipv6_loopback?), :!))), nil,
                s(:send, nil, :skip,
                  s(:str, "IPv6 not available"))),
              s(:send,
                s(:ivar, :@rs), :shutdown),
              s(:kwbegin,
                s(:rescue,
                  s(:ivasgn, :@rs,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Rinda), :RingServer), :new,
                      s(:ivar, :@ts),
                      s(:array,
                        s(:array,
                          s(:str, "ff02::1"),
                          s(:str, "::1"),
                          s(:int, 0))),
                      s(:ivar, :@port))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :EADDRNOTAVAIL)), nil,
                    s(:return)), nil)),
              s(:lvasgn, :v6mc,
                s(:send,
                  s(:send,
                    s(:ivar, :@rs), :instance_variable_get,
                    s(:str, "@sockets")), :first)),
              s(:if,
                s(:send,
                  s(:const, nil, :Socket), :const_defined?,
                  s(:sym, :SO_REUSEPORT)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :v6mc), :getsockopt,
                      s(:sym, :SOCKET),
                      s(:sym, :SO_REUSEPORT)), :bool)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :v6mc), :getsockopt,
                      s(:sym, :SOCKET),
                      s(:sym, :SO_REUSEADDR)), :bool))),
              s(:send, nil, :assert_equal,
                s(:str, "::1"),
                s(:send,
                  s(:send,
                    s(:lvar, :v6mc), :local_address), :ip_address)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@port),
                s(:send,
                  s(:send,
                    s(:lvar, :v6mc), :local_address), :ip_port)))),
          s(:def, :test_shutdown,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@rs), :shutdown),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@rs), :do_reply),
                s(:str, "otherwise should hang forever")))),
          s(:send, nil, :private),
          s(:def, :with_timeout,
            s(:args,
              s(:arg, :n)),
            s(:ensure,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :aoe,
                    s(:send,
                      s(:const, nil, :Thread), :abort_on_exception)),
                  s(:send,
                    s(:const, nil, :Thread), :abort_on_exception=,
                    s(:true)),
                  s(:lvasgn, :tl0,
                    s(:send,
                      s(:const, nil, :Thread), :list)),
                  s(:lvasgn, :tl,
                    s(:nil)),
                  s(:lvasgn, :th,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :new,
                        s(:send,
                          s(:const, nil, :Thread), :current)),
                      s(:args,
                        s(:arg, :mth)),
                      s(:begin,
                        s(:send, nil, :sleep,
                          s(:lvar, :n)),
                        s(:block,
                          s(:send,
                            s(:begin,
                              s(:lvasgn, :tl,
                                s(:send,
                                  s(:send,
                                    s(:const, nil, :Thread), :list), :-,
                                  s(:lvar, :tl0)))), :each),
                          s(:args,
                            s(:arg, :t)),
                          s(:send,
                            s(:lvar, :t), :raise,
                            s(:const,
                              s(:const, nil, :Timeout), :Error))),
                        s(:send,
                          s(:lvar, :mth), :raise,
                          s(:const,
                            s(:const, nil, :Timeout), :Error))))),
                  s(:send,
                    s(:lvar, :tl0), :<<,
                    s(:lvar, :th))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Timeout), :Error)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:if,
                      s(:lvar, :tl),
                      s(:begin,
                        s(:lvasgn, :bt,
                          s(:send,
                            s(:lvar, :e), :backtrace)),
                        s(:block,
                          s(:send,
                            s(:lvar, :tl), :each),
                          s(:args,
                            s(:arg, :t)),
                          s(:kwbegin,
                            s(:rescue,
                              s(:send,
                                s(:lvar, :t), :value),
                              s(:resbody,
                                s(:array,
                                  s(:const,
                                    s(:const, nil, :Timeout), :Error)),
                                s(:lvasgn, :e),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :bt), :unshift,
                                    s(:str, "")),
                                  s(:send,
                                    s(:lvar, :bt), :[]=,
                                    s(:int, 0),
                                    s(:int, 0),
                                    s(:send,
                                      s(:lvar, :e), :backtrace)))), nil)))), nil),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Timeout), :Error),
                      s(:str, "timeout"),
                      s(:lvar, :bt)))), nil),
              s(:begin,
                s(:if,
                  s(:lvar, :th),
                  s(:begin,
                    s(:send,
                      s(:lvar, :th), :kill),
                    s(:send,
                      s(:lvar, :th), :join)), nil),
                s(:send,
                  s(:const, nil, :Thread), :abort_on_exception=,
                  s(:lvar, :aoe))))),
          s(:def, :wait_for,
            s(:args,
              s(:arg, :n)),
            s(:begin,
              s(:lvasgn, :t,
                s(:send,
                  s(:lvar, :n), :+,
                  s(:send,
                    s(:const, nil, :Process), :clock_gettime,
                    s(:const,
                      s(:const, nil, :Process), :CLOCK_MONOTONIC),
                    s(:sym, :second)))),
              s(:until,
                s(:yield),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :t), :<,
                      s(:send,
                        s(:const, nil, :Process), :clock_gettime,
                        s(:const,
                          s(:const, nil, :Process), :CLOCK_MONOTONIC),
                        s(:sym, :second))),
                    s(:send, nil, :flunk,
                      s(:str, "timeout during waiting call")), nil),
                  s(:send, nil, :sleep,
                    s(:float, 0.1)))))))),
      s(:class,
        s(:const, nil, :TestRingFinger),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :RingIPv6)),
          s(:def, :setup,
            s(:args),
            s(:ivasgn, :@rf,
              s(:send,
                s(:const,
                  s(:const, nil, :Rinda), :RingFinger), :new))),
          s(:def, :test_make_socket_unicast,
            s(:args),
            s(:ensure,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :v4,
                    s(:send,
                      s(:ivar, :@rf), :make_socket,
                      s(:str, "127.0.0.1"))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:lvar, :v4), :getsockopt,
                        s(:sym, :SOL_SOCKET),
                        s(:sym, :SO_BROADCAST)), :bool))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :TypeError)), nil,
                  s(:begin,
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "aix"),
                          s(:regopt)),
                        s(:const, nil, :RUBY_PLATFORM)),
                      s(:send, nil, :skip,
                        s(:str, "Known bug in getsockopt(2) on AIX")), nil),
                    s(:send, nil, :raise,
                      s(:gvar, :$!)))), nil),
              s(:if,
                s(:lvar, :v4),
                s(:send,
                  s(:lvar, :v4), :close), nil))),
          s(:def, :test_make_socket_ipv4_multicast,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :v4mc,
                  s(:send,
                    s(:ivar, :@rf), :make_socket,
                    s(:str, "239.0.0.1"))),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :v4mc), :getsockopt,
                      s(:sym, :IPPROTO_IP),
                      s(:sym, :IP_MULTICAST_LOOP)), :ipv4_multicast_loop)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :v4mc), :getsockopt,
                      s(:sym, :IPPROTO_IP),
                      s(:sym, :IP_MULTICAST_TTL)), :ipv4_multicast_ttl))),
              s(:if,
                s(:lvar, :v4mc),
                s(:send,
                  s(:lvar, :v4mc), :close), nil))),
          s(:def, :test_make_socket_ipv6_multicast,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ifaddr,
                  s(:send, nil, :prepare_ipv6,
                    s(:ivar, :@rf))),
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :v6mc,
                      s(:send,
                        s(:ivar, :@rf), :make_socket,
                        s(:str, "ff02::1"))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EINVAL)), nil,
                      s(:lvasgn, :v6mc,
                        s(:send,
                          s(:ivar, :@rf), :make_socket,
                          s(:dstr,
                            s(:str, "ff02::1%"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :ifaddr), :name)))))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EADDRNOTAVAIL)), nil,
                      s(:return)), nil)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :v6mc), :getsockopt,
                      s(:sym, :IPPROTO_IPV6),
                      s(:sym, :IPV6_MULTICAST_LOOP)), :int)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:send,
                      s(:lvar, :v6mc), :getsockopt,
                      s(:sym, :IPPROTO_IPV6),
                      s(:sym, :IPV6_MULTICAST_HOPS)), :int))),
              s(:if,
                s(:lvar, :v6mc),
                s(:send,
                  s(:lvar, :v6mc), :close), nil))),
          s(:def, :test_make_socket_ipv4_multicast_hops,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:send,
                  s(:ivar, :@rf), :multicast_hops=,
                  s(:int, 2)),
                s(:lvasgn, :v4mc,
                  s(:send,
                    s(:ivar, :@rf), :make_socket,
                    s(:str, "239.0.0.1"))),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:send,
                      s(:lvar, :v4mc), :getsockopt,
                      s(:sym, :IPPROTO_IP),
                      s(:sym, :IP_MULTICAST_TTL)), :ipv4_multicast_ttl))),
              s(:if,
                s(:lvar, :v4mc),
                s(:send,
                  s(:lvar, :v4mc), :close), nil))),
          s(:def, :test_make_socket_ipv6_multicast_hops,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :ifaddr,
                  s(:send, nil, :prepare_ipv6,
                    s(:ivar, :@rf))),
                s(:send,
                  s(:ivar, :@rf), :multicast_hops=,
                  s(:int, 2)),
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :v6mc,
                      s(:send,
                        s(:ivar, :@rf), :make_socket,
                        s(:str, "ff02::1"))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EINVAL)), nil,
                      s(:lvasgn, :v6mc,
                        s(:send,
                          s(:ivar, :@rf), :make_socket,
                          s(:dstr,
                            s(:str, "ff02::1%"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :ifaddr), :name)))))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EADDRNOTAVAIL)), nil,
                      s(:return)), nil)),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:send,
                      s(:lvar, :v6mc), :getsockopt,
                      s(:sym, :IPPROTO_IPV6),
                      s(:sym, :IPV6_MULTICAST_HOPS)), :int))),
              s(:if,
                s(:lvar, :v6mc),
                s(:send,
                  s(:lvar, :v6mc), :close), nil))))))))
