s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "win32ole")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:if,
    s(:defined?,
      s(:const, nil, :WIN32OLE_METHOD)),
    s(:class,
      s(:const, nil, :TestWIN32OLE_METHOD),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:lvasgn, :ole_type,
              s(:send,
                s(:const, nil, :WIN32OLE_TYPE), :new,
                s(:str, "Microsoft Shell Controls And Automation"),
                s(:str, "Shell"))),
            s(:ivasgn, :@m_open,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "open"))),
            s(:ivasgn, :@m_namespace,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "namespace"))),
            s(:ivasgn, :@m_parent,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "parent"))),
            s(:ivasgn, :@m_invoke,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "invoke"))),
            s(:ivasgn, :@m_browse_for_folder,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "BrowseForFolder"))),
            s(:lvasgn, :ole_type,
              s(:send,
                s(:const, nil, :WIN32OLE_TYPE), :new,
                s(:str, "Microsoft Scripting Runtime"),
                s(:str, "File"))),
            s(:ivasgn, :@m_file_name,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "name"))),
            s(:lvasgn, :ole_type,
              s(:send,
                s(:const, nil, :WIN32OLE_TYPE), :new,
                s(:str, "Microsoft Internet Controls"),
                s(:str, "WebBrowser"))),
            s(:ivasgn, :@m_navigate_complete,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "NavigateComplete"))))),
        s(:def, :test_initialize,
          s(:args),
          s(:begin,
            s(:lvasgn, :ole_type,
              s(:send,
                s(:const, nil, :WIN32OLE_TYPE), :new,
                s(:str, "Microsoft Shell Controls And Automation"),
                s(:str, "Shell"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:int, 1),
                s(:int, 2))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:str, "foo"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :WIN32OLERuntimeError)),
              s(:args),
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "NonExistMethod"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:int, 1))),
            s(:lvasgn, :method,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "Open"))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :WIN32OLE_METHOD),
              s(:lvar, :method)),
            s(:lvasgn, :method,
              s(:send,
                s(:const, nil, :WIN32OLE_METHOD), :new,
                s(:lvar, :ole_type),
                s(:str, "open"))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :WIN32OLE_METHOD),
              s(:lvar, :method)))),
        s(:def, :test_name,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "Open"),
            s(:send,
              s(:ivar, :@m_open), :name))),
        s(:def, :test_return_type,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "VOID"),
              s(:send,
                s(:ivar, :@m_open), :return_type)),
            s(:send, nil, :assert_equal,
              s(:str, "Folder"),
              s(:send,
                s(:ivar, :@m_namespace), :return_type)))),
        s(:def, :test_return_vtype,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 24),
              s(:send,
                s(:ivar, :@m_open), :return_vtype)),
            s(:send, nil, :assert_equal,
              s(:int, 26),
              s(:send,
                s(:ivar, :@m_namespace), :return_vtype)))),
        s(:def, :test_return_type_detail,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "VOID")),
              s(:send,
                s(:ivar, :@m_open), :return_type_detail)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "PTR"),
                s(:str, "USERDEFINED"),
                s(:str, "Folder")),
              s(:send,
                s(:ivar, :@m_namespace), :return_type_detail)))),
        s(:def, :test_invoke_kind,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "FUNC"),
              s(:send,
                s(:ivar, :@m_open), :invoke_kind)),
            s(:send, nil, :assert_equal,
              s(:str, "FUNC"),
              s(:send,
                s(:ivar, :@m_namespace), :invoke_kind)),
            s(:send, nil, :assert_equal,
              s(:str, "PROPERTYGET"),
              s(:send,
                s(:ivar, :@m_parent), :invoke_kind)))),
        s(:def, :test_invkind,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:ivar, :@m_namespace), :invkind)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:ivar, :@m_parent), :invkind)))),
        s(:def, :test_visible?,
          s(:args),
          s(:begin,
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@m_namespace), :visible?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:ivar, :@m_invoke), :visible?), :!)))),
        s(:def, :test_event?,
          s(:args),
          s(:begin,
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@m_navigate_complete), :event?)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:ivar, :@m_namespace), :event?), :!)))),
        s(:def, :test_event_interface,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "DWebBrowserEvents"),
              s(:send,
                s(:ivar, :@m_navigate_complete), :event_interface)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:ivar, :@m_namespace), :event_interface)))),
        s(:def, :test_helpstring,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "Get special folder from ShellSpecialFolderConstants"),
            s(:send,
              s(:ivar, :@m_namespace), :helpstring))),
        s(:def, :test_helpfile,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@m_namespace), :helpfile)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "VBENLR.*\\.CHM$"),
                s(:regopt, :i)),
              s(:send,
                s(:ivar, :@m_file_name), :helpfile)))),
        s(:def, :test_helpcontext,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:ivar, :@m_namespace), :helpcontext)),
            s(:send, nil, :assert_equal,
              s(:int, 2181996),
              s(:send,
                s(:ivar, :@m_file_name), :helpcontext)))),
        s(:def, :test_dispid,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:int, 1610743810),
            s(:send,
              s(:ivar, :@m_namespace), :dispid))),
        s(:def, :is_ruby64?,
          s(:args),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "mswin64|x64-mingw"),
              s(:regopt)),
            s(:const, nil, :RUBY_PLATFORM))),
        s(:def, :test_offset_vtbl,
          s(:args),
          s(:begin,
            s(:lvasgn, :exp,
              s(:if,
                s(:send, nil, :is_ruby64?),
                s(:int, 48),
                s(:int, 24))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp),
              s(:send,
                s(:ivar, :@m_invoke), :offset_vtbl)))),
        s(:def, :test_size_params,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:ivar, :@m_open), :size_params)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:ivar, :@m_browse_for_folder), :size_params)))),
        s(:def, :test_size_opt_params,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:ivar, :@m_open), :size_opt_params)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:ivar, :@m_browse_for_folder), :size_opt_params)))),
        s(:def, :test_params,
          s(:args),
          s(:begin,
            s(:lvasgn, :params,
              s(:send,
                s(:ivar, :@m_browse_for_folder), :params)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Array),
              s(:lvar, :params)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:lvar, :params), :size)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :WIN32OLE_PARAM),
              s(:send,
                s(:lvar, :params), :[],
                s(:int, 0))))),
        s(:def, :test_to_s,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@m_namespace), :name),
            s(:send,
              s(:ivar, :@m_namespace), :to_s))),
        s(:def, :test_inspect,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "#<WIN32OLE_METHOD:NameSpace>"),
            s(:send,
              s(:ivar, :@m_namespace), :inspect))))), nil))
