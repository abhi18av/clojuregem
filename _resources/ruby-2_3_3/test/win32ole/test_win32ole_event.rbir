s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "win32ole")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:def, :ado_installed?,
    s(:args),
    s(:begin,
      s(:lvasgn, :installed,
        s(:false)),
      s(:if,
        s(:defined?,
          s(:const, nil, :WIN32OLE)),
        s(:begin,
          s(:lvasgn, :db,
            s(:nil)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :db,
                  s(:send,
                    s(:const, nil, :WIN32OLE), :new,
                    s(:str, "ADODB.Connection"))),
                s(:send,
                  s(:lvar, :db), :connectionString=,
                  s(:str, "Driver={Microsoft Text Driver (*.txt; *.csv)};DefaultDir=.;")),
                s(:send,
                  s(:lvar, :db), :open),
                s(:send,
                  s(:lvar, :db), :close),
                s(:lvasgn, :db,
                  s(:nil)),
                s(:lvasgn, :installed,
                  s(:true))),
              s(:resbody, nil, nil, nil), nil))), nil),
      s(:lvar, :installed))),
  s(:def, :swbemsink_available?,
    s(:args),
    s(:begin,
      s(:lvasgn, :available,
        s(:false)),
      s(:if,
        s(:defined?,
          s(:const, nil, :WIN32OLE)),
        s(:begin,
          s(:lvasgn, :wmi,
            s(:nil)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :wmi,
                  s(:send,
                    s(:const, nil, :WIN32OLE), :new,
                    s(:str, "WbemScripting.SWbemSink"))),
                s(:lvasgn, :available,
                  s(:true))),
              s(:resbody, nil, nil, nil), nil))), nil),
      s(:lvar, :available))),
  s(:if,
    s(:defined?,
      s(:const, nil, :WIN32OLE_EVENT)),
    s(:begin,
      s(:class,
        s(:const, nil, :TestWIN32OLE_EVENT),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_s_new_exception,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :TypeError)),
              s(:args),
              s(:send,
                s(:const, nil, :WIN32OLE_EVENT), :new,
                s(:str, "A")))),
          s(:def, :test_s_new_non_exist_event,
            s(:args),
            s(:begin,
              s(:lvasgn, :dict,
                s(:send,
                  s(:const, nil, :WIN32OLE), :new,
                  s(:str, "Scripting.Dictionary"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send,
                  s(:const, nil, :WIN32OLE_EVENT), :new,
                  s(:lvar, :dict))))))),
      s(:class,
        s(:const, nil, :TestWIN32OLE_EVENT_SWbemSink),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:if,
          s(:send, nil, :swbemsink_available?),
          s(:begin,
            s(:def, :setup,
              s(:args),
              s(:begin,
                s(:ivasgn, :@wmi,
                  s(:send,
                    s(:const, nil, :WIN32OLE), :connect,
                    s(:str, "winmgmts://localhost/root/cimv2"))),
                s(:ivasgn, :@sws,
                  s(:send,
                    s(:const, nil, :WIN32OLE), :new,
                    s(:str, "WbemScripting.SWbemSink"))),
                s(:ivasgn, :@event,
                  s(:ivasgn, :@event1,
                    s(:ivasgn, :@event2,
                      s(:str, "")))),
                s(:ivasgn, :@sql,
                  s(:str, "SELECT * FROM __InstanceModificationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_LocalTime'")))),
            s(:def, :message_loop,
              s(:args),
              s(:block,
                s(:send,
                  s(:int, 2), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :message_loop),
                  s(:send, nil, :sleep,
                    s(:int, 1))))),
            s(:def, :default_handler,
              s(:args,
                s(:arg, :event),
                s(:restarg, :args)),
              s(:op_asgn,
                s(:ivasgn, :@event), :+,
                s(:lvar, :event))),
            s(:def, :handler1,
              s(:args),
              s(:ivasgn, :@event1,
                s(:str, "handler1"))),
            s(:def, :test_s_new_non_exist_event,
              s(:args),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send,
                  s(:const, nil, :WIN32OLE_EVENT), :new,
                  s(:ivar, :@sws),
                  s(:str, "XXXXX")))),
            s(:def, :test_s_new,
              s(:args),
              s(:begin,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@sws),
                    s(:str, "ISWbemSinkEvents"))),
                s(:send, nil, :assert_instance_of,
                  s(:const, nil, :WIN32OLE_EVENT),
                  s(:lvar, :obj)),
                s(:lvasgn, :obj,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@sws))),
                s(:send, nil, :assert_instance_of,
                  s(:const, nil, :WIN32OLE_EVENT),
                  s(:lvar, :obj)))),
            s(:def, :test_s_new_loop,
              s(:args),
              s(:begin,
                s(:send, nil, :exec_notification_query_async),
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@sws))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :default_handler,
                    s(:splat,
                      s(:lvar, :args)))),
                s(:send, nil, :message_loop),
                s(:block,
                  s(:send,
                    s(:int, 10), :times),
                  s(:args,
                    s(:arg, :i)),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :WIN32OLE_EVENT), :new,
                      s(:ivar, :@sws)),
                    s(:send, nil, :message_loop),
                    s(:send,
                      s(:const, nil, :GC), :start))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "OnObjectReady"),
                    s(:regopt)),
                  s(:ivar, :@event)))),
            s(:def, :test_on_event,
              s(:args),
              s(:begin,
                s(:send, nil, :exec_notification_query_async),
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@sws),
                    s(:str, "ISWbemSinkEvents"))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :default_handler,
                    s(:splat,
                      s(:lvar, :args)))),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "OnObjectReady"),
                    s(:regopt)),
                  s(:ivar, :@event)))),
            s(:def, :test_on_event_symbol,
              s(:args),
              s(:begin,
                s(:send, nil, :exec_notification_query_async),
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@sws))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:sym, :OnObjectReady)),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :handler1)),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:str, "handler1"),
                  s(:ivar, :@event1)))),
            s(:send, nil, :private),
            s(:def, :exec_notification_query_async,
              s(:args),
              s(:rescue,
                s(:send,
                  s(:ivar, :@wmi), :ExecNotificationQueryAsync,
                  s(:ivar, :@sws),
                  s(:ivar, :@sql)),
                s(:resbody, nil,
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "OLE error code:80041008 in SWbemServicesEx"),
                          s(:regopt)),
                        s(:send,
                          s(:lvar, :e), :message)),
                      s(:send, nil, :skip,
                        s(:str, "No administrator privilege?")), nil),
                    s(:send, nil, :raise))), nil))),
          s(:def, :test_dummy_for_skip_message,
            s(:args),
            s(:send, nil, :skip,
              s(:str, "'WbemScripting.SWbemSink' is not available"))))),
      s(:class,
        s(:const, nil, :TestWIN32OLE_EVENT_ADO),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:if,
          s(:send, nil, :ado_installed?),
          s(:begin,
            s(:casgn, nil, :CONNSTR,
              s(:str, "Driver={Microsoft Text Driver (*.txt; *.csv)};DefaultDir=.;")),
            s(:module,
              s(:const, nil, :ADO), nil),
            s(:def, :message_loop,
              s(:args),
              s(:send,
                s(:const, nil, :WIN32OLE_EVENT), :message_loop)),
            s(:def, :default_handler,
              s(:args,
                s(:arg, :event),
                s(:restarg, :args)),
              s(:op_asgn,
                s(:ivasgn, :@event), :+,
                s(:lvar, :event))),
            s(:def, :setup,
              s(:args),
              s(:begin,
                s(:ivasgn, :@db,
                  s(:send,
                    s(:const, nil, :WIN32OLE), :new,
                    s(:str, "ADODB.Connection"))),
                s(:if,
                  s(:send,
                    s(:defined?,
                      s(:const,
                        s(:const, nil, :ADO), :AdStateOpen)), :!),
                  s(:send,
                    s(:const, nil, :WIN32OLE), :const_load,
                    s(:ivar, :@db),
                    s(:const, nil, :ADO)), nil),
                s(:send,
                  s(:ivar, :@db), :connectionString=,
                  s(:const, nil, :CONNSTR)),
                s(:ivasgn, :@event,
                  s(:str, "")),
                s(:ivasgn, :@event2,
                  s(:str, "")),
                s(:ivasgn, :@event3,
                  s(:str, "")))),
            s(:def, :test_on_event2,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db),
                    s(:str, "ConnectionEvents"))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :handler1)),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :handler2)),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:str, "handler2"),
                  s(:ivar, :@event2)))),
            s(:def, :test_on_event4,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db),
                    s(:str, "ConnectionEvents"))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :handler1)),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :handler2)),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :handler3,
                    s(:splat,
                      s(:lvar, :args)))),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:const, nil, :CONNSTR),
                  s(:ivar, :@event3)),
                s(:send, nil, :assert,
                  s(:str, "handler2"),
                  s(:ivar, :@event2)))),
            s(:def, :test_on_event5,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db),
                    s(:str, "ConnectionEvents"))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :default_handler,
                    s(:splat,
                      s(:lvar, :args)))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :handler3,
                    s(:splat,
                      s(:lvar, :args)))),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "ConnectComplete"),
                    s(:regopt)),
                  s(:ivar, :@event)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:regexp,
                      s(:str, "WillConnect"),
                      s(:regopt)), :!~,
                    s(:ivar, :@event))),
                s(:send, nil, :assert_equal,
                  s(:const, nil, :CONNSTR),
                  s(:ivar, :@event3)))),
            s(:def, :test_unadvise,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db),
                    s(:str, "ConnectionEvents"))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :default_handler,
                    s(:splat,
                      s(:lvar, :args)))),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "WillConnect"),
                    s(:regopt)),
                  s(:ivar, :@event)),
                s(:send,
                  s(:lvar, :ev), :unadvise),
                s(:ivasgn, :@event,
                  s(:str, "")),
                s(:send,
                  s(:ivar, :@db), :close),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:ivar, :@event)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :WIN32OLERuntimeError)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :ev), :on_event),
                    s(:args,
                      s(:restarg, :args)),
                    s(:send, nil, :default_handler,
                      s(:splat,
                        s(:lvar, :args))))))),
            s(:def, :test_on_event_with_outargs,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:send,
                  s(:ivar, :@db), :connectionString=,
                  s(:str, "XXX")),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :WIN32OLERuntimeError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@db), :open)),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event_with_outargs,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :last), :[]=,
                    s(:int, 0),
                    s(:const, nil, :CONNSTR))),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert,
                  s(:true)))),
            s(:def, :test_on_event_hash_return,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :return),
                      s(:int, 1)),
                    s(:pair,
                      s(:sym, :ConnectionString),
                      s(:const, nil, :CONNSTR)))),
                s(:send,
                  s(:ivar, :@db), :connectionString=,
                  s(:str, "XXX")),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :assert,
                  s(:true)))),
            s(:def, :test_on_event_hash_return2,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :ConnectionString),
                      s(:const, nil, :CONNSTR)))),
                s(:send,
                  s(:ivar, :@db), :connectionString=,
                  s(:str, "XXX")),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :assert,
                  s(:true)))),
            s(:def, :test_on_event_hash_return3,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:hash,
                    s(:pair,
                      s(:str, "ConnectionString"),
                      s(:const, nil, :CONNSTR)))),
                s(:send,
                  s(:ivar, :@db), :connectionString=,
                  s(:str, "XXX")),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :assert,
                  s(:true)))),
            s(:def, :test_on_event_hash_return4,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:hash,
                    s(:pair,
                      s(:str, "return"),
                      s(:int, 1)),
                    s(:pair,
                      s(:str, "ConnectionString"),
                      s(:const, nil, :CONNSTR)))),
                s(:send,
                  s(:ivar, :@db), :connectionString=,
                  s(:str, "XXX")),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :assert,
                  s(:true)))),
            s(:def, :test_on_event_hash_return5,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args,
                    s(:restarg, :args)),
                  s(:hash,
                    s(:pair,
                      s(:int, 0),
                      s(:const, nil, :CONNSTR)))),
                s(:send,
                  s(:ivar, :@db), :connectionString=,
                  s(:str, "XXX")),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :assert,
                  s(:true)))),
            s(:def, :test_off_event,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event),
                  s(:args),
                  s(:send, nil, :handler1)),
                s(:send,
                  s(:lvar, :ev), :off_event),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:ivar, :@event2)))),
            s(:def, :test_off_event_arg,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args),
                  s(:send, nil, :handler1)),
                s(:send,
                  s(:lvar, :ev), :off_event,
                  s(:str, "WillConnect")),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:ivar, :@event2)))),
            s(:def, :test_off_event_arg2,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args),
                  s(:send, nil, :handler1)),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "ConnectComplete")),
                  s(:args),
                  s(:send, nil, :handler1)),
                s(:send,
                  s(:lvar, :ev), :off_event,
                  s(:str, "WillConnect")),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:str, "handler1"),
                  s(:ivar, :@event2)))),
            s(:def, :test_off_event_sym_arg,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:block,
                  s(:send,
                    s(:lvar, :ev), :on_event,
                    s(:str, "WillConnect")),
                  s(:args),
                  s(:send, nil, :handler1)),
                s(:send,
                  s(:lvar, :ev), :off_event,
                  s(:sym, :WillConnect)),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:str, ""),
                  s(:ivar, :@event2)))),
            s(:def, :handler1,
              s(:args),
              s(:ivasgn, :@event2,
                s(:str, "handler1"))),
            s(:def, :handler2,
              s(:args),
              s(:ivasgn, :@event2,
                s(:str, "handler2"))),
            s(:def, :handler3,
              s(:args,
                s(:restarg, :arg)),
              s(:op_asgn,
                s(:ivasgn, :@event3), :+,
                s(:send,
                  s(:lvar, :arg), :[],
                  s(:int, 0)))),
            s(:def, :teardown,
              s(:args),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:ivar, :@db),
                    s(:send,
                      s(:send,
                        s(:ivar, :@db), :state), :==,
                      s(:const,
                        s(:const, nil, :ADO), :AdStateOpen))),
                  s(:send,
                    s(:ivar, :@db), :close), nil),
                s(:send, nil, :message_loop),
                s(:ivasgn, :@db,
                  s(:nil)))),
            s(:class,
              s(:const, nil, :Handler1), nil,
              s(:begin,
                s(:send, nil, :attr_reader,
                  s(:sym, :val1),
                  s(:sym, :val2),
                  s(:sym, :val3),
                  s(:sym, :val4)),
                s(:def, :initialize,
                  s(:args),
                  s(:begin,
                    s(:ivasgn, :@val1,
                      s(:nil)),
                    s(:ivasgn, :@val2,
                      s(:nil)),
                    s(:ivasgn, :@val3,
                      s(:nil)),
                    s(:ivasgn, :@val4,
                      s(:nil)))),
                s(:def, :onWillConnect,
                  s(:args,
                    s(:arg, :conn),
                    s(:arg, :uid),
                    s(:arg, :pwd),
                    s(:arg, :opts),
                    s(:arg, :stat),
                    s(:arg, :pconn)),
                  s(:ivasgn, :@val1,
                    s(:lvar, :conn))),
                s(:def, :onConnectComplete,
                  s(:args,
                    s(:arg, :err),
                    s(:arg, :stat),
                    s(:arg, :pconn)),
                  s(:begin,
                    s(:ivasgn, :@val2,
                      s(:lvar, :err)),
                    s(:ivasgn, :@val3,
                      s(:lvar, :stat)))),
                s(:def, :onInfoMessage,
                  s(:args,
                    s(:arg, :err),
                    s(:arg, :stat),
                    s(:arg, :pconn)),
                  s(:ivasgn, :@val4,
                    s(:lvar, :stat))))),
            s(:class,
              s(:const, nil, :Handler2), nil,
              s(:begin,
                s(:send, nil, :attr_reader,
                  s(:sym, :ev)),
                s(:def, :initialize,
                  s(:args),
                  s(:ivasgn, :@ev,
                    s(:str, ""))),
                s(:def, :method_missing,
                  s(:args,
                    s(:arg, :ev),
                    s(:restarg, :arg)),
                  s(:op_asgn,
                    s(:ivasgn, :@ev), :+,
                    s(:lvar, :ev))))),
            s(:def, :test_handler1,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:lvasgn, :h1,
                  s(:send,
                    s(:const, nil, :Handler1), :new)),
                s(:send,
                  s(:lvar, :ev), :handler=,
                  s(:lvar, :h1)),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert_equal,
                  s(:const, nil, :CONNSTR),
                  s(:send,
                    s(:lvar, :h1), :val1)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :h1), :val1),
                  s(:send,
                    s(:send,
                      s(:lvar, :ev), :handler), :val1)),
                s(:send, nil, :assert_equal,
                  s(:nil),
                  s(:send,
                    s(:lvar, :h1), :val2)),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :ADO), :AdStateOpen),
                  s(:send,
                    s(:lvar, :h1), :val3)),
                s(:send, nil, :assert_equal,
                  s(:const,
                    s(:const, nil, :ADO), :AdStateOpen),
                  s(:send,
                    s(:lvar, :h1), :val4)))),
            s(:def, :test_handler2,
              s(:args),
              s(:begin,
                s(:lvasgn, :ev,
                  s(:send,
                    s(:const, nil, :WIN32OLE_EVENT), :new,
                    s(:ivar, :@db))),
                s(:lvasgn, :h2,
                  s(:send,
                    s(:const, nil, :Handler2), :new)),
                s(:send,
                  s(:lvar, :ev), :handler=,
                  s(:lvar, :h2)),
                s(:send,
                  s(:ivar, :@db), :open),
                s(:send, nil, :message_loop),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :h2), :ev), :!=,
                    s(:str, ""))))),
            s(:def, :test_s_new_exc_tainted,
              s(:args),
              s(:begin,
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:gvasgn, :$SAFE,
                        s(:int, 1)),
                      s(:lvasgn, :str,
                        s(:str, "ConnectionEvents")),
                      s(:send,
                        s(:lvar, :str), :taint),
                      s(:lvasgn, :ev,
                        s(:send,
                          s(:const, nil, :WIN32OLE_EVENT), :new,
                          s(:ivar, :@db),
                          s(:lvar, :str)))))),
                s(:lvasgn, :exc,
                  s(:block,
                    s(:send, nil, :assert_raise,
                      s(:const, nil, :SecurityError)),
                    s(:args),
                    s(:send,
                      s(:lvar, :th), :join))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "insecure event creation - `ConnectionEvents'"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :exc), :message))))),
          s(:def, :test_dummy_for_skip_message,
            s(:args),
            s(:send, nil, :skip,
              s(:str, "ActiveX Data Object Library not found")))))), nil))
