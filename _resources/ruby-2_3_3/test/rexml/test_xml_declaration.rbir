s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestXmlDeclaration),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:lvasgn, :xml,
              s(:dstr,
                s(:str, "      <?xml encoding= 'UTF-8' standalone='yes'?>\n"),
                s(:str, "      <root>\n"),
                s(:str, "      </root>\n"))),
            s(:ivasgn, :@doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :xml))),
            s(:ivasgn, :@root,
              s(:send,
                s(:ivar, :@doc), :root)),
            s(:ivasgn, :@xml_declaration,
              s(:send,
                s(:send,
                  s(:ivar, :@doc), :children), :[],
                s(:int, 0))))),
        s(:def, :test_is_first_child,
          s(:args),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :REXML), :XMLDecl),
            s(:ivar, :@xml_declaration))),
        s(:def, :test_has_document_as_parent,
          s(:args),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :REXML), :Document),
            s(:send,
              s(:ivar, :@xml_declaration), :parent))),
        s(:def, :test_has_sibling,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :REXML), :XMLDecl),
              s(:send,
                s(:send,
                  s(:ivar, :@root), :previous_sibling), :previous_sibling)),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const, nil, :REXML), :Element),
              s(:send,
                s(:send,
                  s(:ivar, :@xml_declaration), :next_sibling), :next_sibling))))))))
