s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :FunctionsTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :test_functions,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a>more <b id='1'/><b id='2'>dumb</b><b id='3'/><c/> text</a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :res,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "text()")),
              s(:args,
                s(:arg, :val)),
              s(:send,
                s(:lvar, :res), :<<,
                s(:send,
                  s(:lvar, :val), :to_s))),
            s(:send, nil, :assert_equal,
              s(:str, "more  text"),
              s(:lvar, :res)),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "b[last()]"))),
            s(:send, nil, :assert_equal,
              s(:str, "3"),
              s(:send,
                s(:send,
                  s(:lvar, :res), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "b[position()=2]"))),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:lvar, :res), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "*[name()='c']"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :res), :name)))),
        s(:def, :test_starts_with,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "        <foo>\n"),
                s(:str, "        <a href=\"mailto:a@b.c\">a@b.c</a>\n"),
                s(:str, "        <a href=\"http://www.foo.com\">http://www.foo.com</a>\n"),
                s(:str, "        </foo>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :mailtos,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//a[starts-with(@href, 'mailto:')]"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :mailtos), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "mailto:a@b.c"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :mailtos), :[],
                    s(:int, 0)), :attributes), :[],
                s(:str, "href"))),
            s(:lvasgn, :ailtos,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//a[starts-with(@href, 'ailto:')]"))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :ailtos), :size)))),
        s(:def, :test_string_length,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "        <AAA>\n"),
                  s(:str, "        <Q/>\n"),
                  s(:str, "        <SSSS/>\n"),
                  s(:str, "        <BB/>\n"),
                  s(:str, "        <CCC/>\n"),
                  s(:str, "        <DDDDDDDD/>\n"),
                  s(:str, "        <EEEE/>\n"),
                  s(:str, "        </AAA>\n")))),
            s(:send, nil, :assert,
              s(:lvar, :doc),
              s(:str, "create doc")),
            s(:lvasgn, :set,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//*[string-length(name()) = 3]"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :set), :size),
              s(:str, "nodes with names length = 3")),
            s(:lvasgn, :set,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//*[string-length(name()) < 3]"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :set), :size),
              s(:str, "nodes with names length < 3")),
            s(:lvasgn, :set,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//*[string-length(name()) > 3]"))),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :set), :size),
              s(:str, "nodes with names length > 3")))),
        s(:def, :test_contains,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "        <foo>\n"),
                s(:str, "        <a href=\"mailto:a@b.c\">a@b.c</a>\n"),
                s(:str, "        <a href=\"http://www.foo.com\">http://www.foo.com</a>\n"),
                s(:str, "        </foo>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:str, "o"),
                    s(:int, 2)),
                  s(:array,
                    s(:str, "foo"),
                    s(:int, 1)),
                  s(:array,
                    s(:str, "bar"),
                    s(:int, 0))), :each),
              s(:args,
                s(:arg, :test)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :search),
                    s(:lvasgn, :expected)),
                  s(:lvar, :test)),
                s(:lvasgn, :set,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :to_a,
                    s(:dstr,
                      s(:str, "//a[contains(@href, '"),
                      s(:begin,
                        s(:lvar, :search)),
                      s(:str, "')]")))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:send,
                    s(:lvar, :set), :size)))))),
        s(:def, :test_substring,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<test string=\"12345\" />"))),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:float, 1.5),
                    s(:float, 2.6),
                    s(:str, "234")),
                  s(:array,
                    s(:int, 0),
                    s(:int, 3),
                    s(:str, "12")),
                  s(:array,
                    s(:int, 0),
                    s(:str, "0 div 0"),
                    s(:str, "")),
                  s(:array,
                    s(:int, 1),
                    s(:str, "0 div 0"),
                    s(:str, "")),
                  s(:array,
                    s(:str, "-42"),
                    s(:str, "1 div 0"),
                    s(:str, "12345")),
                  s(:array,
                    s(:str, "-1 div 0"),
                    s(:str, "1 div 0"),
                    s(:str, ""))), :each),
              s(:args,
                s(:arg, :start),
                s(:arg, :length),
                s(:arg, :expected)),
              s(:begin,
                s(:lvasgn, :set,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :to_a,
                    s(:dstr,
                      s(:str, "//test[substring(@string, "),
                      s(:begin,
                        s(:lvar, :start)),
                      s(:str, ", "),
                      s(:begin,
                        s(:lvar, :length)),
                      s(:str, ") = '"),
                      s(:begin,
                        s(:lvar, :expected)),
                      s(:str, "']")))),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :set), :size),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :start)),
                    s(:str, ", "),
                    s(:begin,
                      s(:lvar, :length)),
                    s(:str, ", '"),
                    s(:begin,
                      s(:lvar, :expected)),
                    s(:str, "'"))))))),
        s(:def, :test_substring_angrez,
          s(:args),
          s(:begin,
            s(:lvasgn, :testString,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Functions), :substring_after,
                s(:str, "helloworld"),
                s(:str, "hello"))),
            s(:send, nil, :assert_equal,
              s(:str, "world"),
              s(:lvar, :testString)))),
        s(:def, :test_translate,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <doc>\n"),
                s(:str, "      <case name='w3c one' result='BAr' />        <!-- w3c -->\n"),
                s(:str, "      <case name='w3c two' result='AAA' />        <!-- w3c -->\n"),
                s(:str, "      <case name='alchemy' result=\"gold\" />   <!-- mike -->\n"),
                s(:str, "      <case name='vbxml one' result='A Space Odyssey' />\n"),
                s(:str, "      <case name='vbxml two' result='AbCdEf' />\n"),
                s(:str, "      </doc>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:str, "bar"),
                    s(:str, "abc"),
                    s(:str, "ABC"),
                    s(:str, "w3c one")),
                  s(:array,
                    s(:str, "--aaa--"),
                    s(:str, "abc-"),
                    s(:str, "ABC"),
                    s(:str, "w3c two")),
                  s(:array,
                    s(:str, "lead"),
                    s(:str, "dear language"),
                    s(:str, "doll groover"),
                    s(:str, "alchemy")),
                  s(:array,
                    s(:str, "A Space Odissei"),
                    s(:str, "i"),
                    s(:str, "y"),
                    s(:str, "vbxml one")),
                  s(:array,
                    s(:str, "abcdefg"),
                    s(:str, "aceg"),
                    s(:str, "ACE"),
                    s(:str, "vbxml two"))), :each),
              s(:args,
                s(:arg, :arg1),
                s(:arg, :arg2),
                s(:arg, :arg3),
                s(:arg, :name)),
              s(:begin,
                s(:lvasgn, :translate,
                  s(:dstr,
                    s(:str, "translate('"),
                    s(:begin,
                      s(:lvar, :arg1)),
                    s(:str, "', '"),
                    s(:begin,
                      s(:lvar, :arg2)),
                    s(:str, "', '"),
                    s(:begin,
                      s(:lvar, :arg3)),
                    s(:str, "')"))),
                s(:lvasgn, :set,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :to_a,
                    s(:dstr,
                      s(:str, "//case[@result = "),
                      s(:begin,
                        s(:lvar, :translate)),
                      s(:str, "]")))),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :set), :size),
                  s(:lvar, :translate)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :name),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :set), :[],
                        s(:int, 0)), :attributes), :[],
                    s(:str, "name"))))))),
        s(:def, :test_name,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a xmlns:x='foo'><b/><x:b/></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :d), :root), :elements), :to_a,
                  s(:str, "*[name() = \"b\"]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[name() = \"x:b\"]")), :size)))),
        s(:def, :test_local_name,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a xmlns:x='foo'><b/><x:b/></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :d), :root), :elements), :to_a,
                  s(:str, "*[local_name() = \"b\"]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[local_name() = \"b\"]")), :size)))),
        s(:def, :test_substring2,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<test string=\"12345\" />"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :to_a,
                  s(:str, "//test[substring(@string,2)='2345']")), :size)))),
        s(:def, :test_floor_ceiling_round,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b id='1'/><b id='2'/><b id='3'/></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :id_1,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "/a/b[@id='1']"))),
            s(:lvasgn, :id_2,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "/a/b[@id='2']"))),
            s(:lvasgn, :id_3,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "/a/b[@id='3']"))),
            s(:lvasgn, :good,
              s(:hash,
                s(:pair,
                  s(:str, "floor"),
                  s(:array,
                    s(:array),
                    s(:array,
                      s(:lvar, :id_1)),
                    s(:array,
                      s(:lvar, :id_2)),
                    s(:array,
                      s(:lvar, :id_3)))),
                s(:pair,
                  s(:str, "ceiling"),
                  s(:array,
                    s(:array,
                      s(:lvar, :id_1)),
                    s(:array,
                      s(:lvar, :id_2)),
                    s(:array,
                      s(:lvar, :id_3)),
                    s(:array))),
                s(:pair,
                  s(:str, "round"),
                  s(:array,
                    s(:array,
                      s(:lvar, :id_1)),
                    s(:array,
                      s(:lvar, :id_2)),
                    s(:array,
                      s(:lvar, :id_3)),
                    s(:array))))),
            s(:block,
              s(:send,
                s(:lvar, :good), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :value)),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 0),
                      s(:int, 3))), :each),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:lvasgn, :xpath,
                    s(:dstr,
                      s(:str, "//b[number(@id) = "),
                      s(:begin,
                        s(:lvar, :key)),
                      s(:str, "("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :i), :+,
                          s(:float, 0.5))),
                      s(:str, ")]"))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :value), :[],
                      s(:lvar, :i)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :XPath), :match,
                      s(:lvar, :doc),
                      s(:lvar, :xpath)))))),
            s(:send,
              s(:lvar, :good), :[]=,
              s(:str, "round"),
              s(:array,
                s(:array),
                s(:array,
                  s(:lvar, :id_1)),
                s(:array,
                  s(:lvar, :id_2)),
                s(:array,
                  s(:lvar, :id_3)))),
            s(:block,
              s(:send,
                s(:lvar, :good), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :value)),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 0),
                      s(:int, 3))), :each),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:lvasgn, :xpath,
                    s(:dstr,
                      s(:str, "//b[number(@id) = "),
                      s(:begin,
                        s(:lvar, :key)),
                      s(:str, "("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :i), :+,
                          s(:float, 0.4))),
                      s(:str, ")]"))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :value), :[],
                      s(:lvar, :i)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :XPath), :match,
                      s(:lvar, :doc),
                      s(:lvar, :xpath)))))))),
        s(:def, :test_lang,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "      <a xml:lang=\"en\">\n"),
                  s(:str, "      <b xml:lang=\"ja\">\n"),
                  s(:str, "      <c xml:lang=\"fr\"/>\n"),
                  s(:str, "      <d/>\n"),
                  s(:str, "      <e xml:lang=\"ja-JP\"/>\n"),
                  s(:str, "      <f xml:lang=\"en-US\"/>\n"),
                  s(:str, "      </b>\n"),
                  s(:str, "      </a>\n")))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[lang('fr')]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[lang('ja')]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[lang('en')]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[lang('en-us')]")), :size)),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "      <root>\n"),
                  s(:str, "      <para xml:lang=\"en\"/>\n"),
                  s(:str, "      <div xml:lang=\"en\"><para/></div>\n"),
                  s(:str, "      <para xml:lang=\"EN\"/>\n"),
                  s(:str, "      <para xml:lang=\"en-us\"/>\n"),
                  s(:str, "      </root>\n")))),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[lang('en')]")), :size)))),
        s(:def, :test_ticket_60,
          s(:args),
          s(:begin,
            s(:lvasgn, :document,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a><b>A</b><b>1</b></a>"))),
            s(:send, nil, :assert_equal,
              s(:str, "A"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :first,
                  s(:lvar, :document),
                  s(:str, "//b[.=\"A\"]")), :text)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :first,
                  s(:lvar, :document),
                  s(:str, "//b[.=\"1\"]")), :text)))),
        s(:def, :test_normalize_space,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><!--COMMENT A--><b><!-- COMMENT A --></b></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :predicate,
              s(:str, "string(.)=normalize_space('\nCOMMENT    \n A \n\n ')")),
            s(:lvasgn, :m,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :doc),
                s(:dstr,
                  s(:str, "//comment()["),
                  s(:begin,
                    s(:lvar, :predicate)),
                  s(:str, "]")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Comment), :new,
                  s(:str, "COMMENT A"))),
              s(:lvar, :m))))))))
