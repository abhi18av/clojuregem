s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/pullparser")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :PullParserTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :test_basics,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :source,
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\"?>\n"),
                  s(:str, "      <!DOCTYPE blah>\n"),
                  s(:str, "      <a>foo &lt;<b attribute=\"value\">bar</b> nooo</a>"))),
              s(:lvasgn, :parser,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Parsers), :PullParser), :new,
                  s(:lvar, :source))),
              s(:lvasgn, :res,
                s(:hash,
                  s(:pair,
                    s(:sym, :text),
                    s(:int, 0)))),
              s(:until,
                s(:send,
                  s(:lvar, :parser), :empty?),
                s(:begin,
                  s(:lvasgn, :results,
                    s(:send,
                      s(:lvar, :parser), :pull)),
                  s(:if,
                    s(:send,
                      s(:lvar, :results), :xmldecl?),
                    s(:send,
                      s(:lvar, :res), :[]=,
                      s(:sym, :xmldecl),
                      s(:true)), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :results), :doctype?),
                    s(:send,
                      s(:lvar, :res), :[]=,
                      s(:sym, :doctype),
                      s(:true)), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :results), :start_element?),
                      s(:send,
                        s(:send,
                          s(:lvar, :results), :[],
                          s(:int, 0)), :==,
                        s(:str, "a"))),
                    s(:send,
                      s(:lvar, :res), :[]=,
                      s(:sym, :a),
                      s(:true)), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :results), :start_element?),
                      s(:send,
                        s(:send,
                          s(:lvar, :results), :[],
                          s(:int, 0)), :==,
                        s(:str, "b"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :res), :[]=,
                        s(:sym, :b),
                        s(:true)),
                      s(:send, nil, :assert_equal,
                        s(:str, "value"),
                        s(:send,
                          s(:send,
                            s(:lvar, :results), :[],
                            s(:int, 1)), :[],
                          s(:str, "attribute")))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :results), :text?),
                    s(:op_asgn,
                      s(:send,
                        s(:lvar, :res), :[],
                        s(:sym, :text)), :+,
                      s(:int, 1)), nil))),
              s(:block,
                s(:send,
                  s(:array,
                    s(:sym, :xmldecl),
                    s(:sym, :doctype),
                    s(:sym, :a),
                    s(:sym, :b)), :each),
                s(:args,
                  s(:arg, :tag)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:lvar, :tag)),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :tag)),
                    s(:str, " wasn't processed")))),
              s(:send, nil, :assert_equal,
                s(:int, 4),
                s(:send,
                  s(:lvar, :res), :[],
                  s(:sym, :text)))),
            s(:resbody,
              s(:array,
                s(:const, nil, :ParseException)), nil,
              s(:send, nil, :puts,
                s(:gvar, :$!))), nil)),
        s(:def, :test_bad_document,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b></a>")),
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Parsers), :PullParser), :new,
                s(:lvar, :source))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException),
                s(:str, "Parsing should have failed")),
              s(:args),
              s(:while,
                s(:send,
                  s(:lvar, :parser), :has_next?),
                s(:send,
                  s(:lvar, :parser), :pull))))),
        s(:def, :test_entity_replacement,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<!DOCTYPE foo [\n"),
                s(:str, "      <!ENTITY la \"1234\">\n"),
                s(:str, "      <!ENTITY lala \"--&la;--\">\n"),
                s(:str, "      <!ENTITY lalal \"&la;&la;\">\n"),
                s(:str, "      ]><a><la>&la;</la><lala>&lala;</lala></a>"))),
            s(:lvasgn, :pp,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Parsers), :PullParser), :new,
                s(:lvar, :source))),
            s(:lvasgn, :el_name,
              s(:str, "")),
            s(:while,
              s(:send,
                s(:lvar, :pp), :has_next?),
              s(:begin,
                s(:lvasgn, :event,
                  s(:send,
                    s(:lvar, :pp), :pull)),
                s(:case,
                  s(:send,
                    s(:lvar, :event), :event_type),
                  s(:when,
                    s(:sym, :start_element),
                    s(:lvasgn, :el_name,
                      s(:send,
                        s(:lvar, :event), :[],
                        s(:int, 0)))),
                  s(:when,
                    s(:sym, :text),
                    s(:case,
                      s(:lvar, :el_name),
                      s(:when,
                        s(:str, "la"),
                        s(:send, nil, :assert_equal,
                          s(:str, "1234"),
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:int, 1)))),
                      s(:when,
                        s(:str, "lala"),
                        s(:send, nil, :assert_equal,
                          s(:str, "--1234--"),
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:int, 1)))), nil)), nil))))),
        s(:def, :test_peek_unshift,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b/></a>")),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :REXML), :Parsers), :PullParser), :new,
              s(:lvar, :source)))),
        s(:def, :test_inspect,
          s(:args),
          s(:begin,
            s(:lvasgn, :xml,
              s(:str, "<a id=\"1\"><b id=\"2\">Hey</b></a>")),
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const, nil, :Parsers), :PullParser), :new,
                s(:lvar, :xml))),
            s(:while,
              s(:send,
                s(:lvar, :parser), :has_next?),
              s(:begin,
                s(:lvasgn, :pull_event,
                  s(:send,
                    s(:lvar, :parser), :pull)),
                s(:if,
                  s(:send,
                    s(:lvar, :pull_event), :start_element?),
                  s(:begin,
                    s(:lvasgn, :peek,
                      s(:send,
                        s(:lvar, :parser), :peek)),
                    s(:send,
                      s(:lvar, :peek), :inspect)), nil))))),
        s(:def, :test_peek,
          s(:args),
          s(:begin,
            s(:lvasgn, :xml,
              s(:str, "<a id=\"1\"><b id=\"2\">Hey</b></a>")),
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const, nil, :Parsers), :PullParser), :new,
                s(:lvar, :xml))),
            s(:lvasgn, :names,
              s(:array,
                s(:str, "a"),
                s(:str, "b"))),
            s(:while,
              s(:send,
                s(:lvar, :parser), :has_next?),
              s(:begin,
                s(:lvasgn, :pull_event,
                  s(:send,
                    s(:lvar, :parser), :pull)),
                s(:if,
                  s(:send,
                    s(:lvar, :pull_event), :start_element?),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:sym, :start_element),
                      s(:send,
                        s(:lvar, :pull_event), :event_type)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :names), :shift),
                      s(:send,
                        s(:lvar, :pull_event), :[],
                        s(:int, 0))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :names), :[],
                          s(:int, 0)), :==,
                        s(:str, "b")),
                      s(:begin,
                        s(:lvasgn, :peek,
                          s(:send,
                            s(:lvar, :parser), :peek)),
                        s(:send, nil, :assert_equal,
                          s(:sym, :start_element),
                          s(:send,
                            s(:lvar, :peek), :event_type)),
                        s(:send, nil, :assert_equal,
                          s(:send,
                            s(:lvar, :names), :[],
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :peek), :[],
                            s(:int, 0)))), nil)), nil))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :names), :length))))))))
