s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestAttributes),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@ns_a,
              s(:str, "urn:x-test:a")),
            s(:ivasgn, :@ns_b,
              s(:str, "urn:x-test:b")),
            s(:lvasgn, :element_string,
              s(:dstr,
                s(:str, "      <test xmlns:a=\""),
                s(:begin,
                  s(:ivar, :@ns_a)),
                s(:str, "\"\n"),
                s(:str, "            xmlns:b=\""),
                s(:begin,
                  s(:ivar, :@ns_b)),
                s(:str, "\"\n"),
                s(:str, "            a = \"1\"\n"),
                s(:str, "            b = '2'\n"),
                s(:str, "            a:c = \"3\"\n"),
                s(:str, "            a:d = '4'\n"),
                s(:str, "            a:e = \"5\"\n"),
                s(:str, "            b:f = \"6\"/>\n"))),
            s(:ivasgn, :@attributes,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :element_string)), :root), :attributes)))),
        s(:def, :test_get_attribute_ns,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:ivar, :@attributes), :get_attribute_ns,
                  s(:str, ""),
                  s(:str, "a")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:ivar, :@attributes), :get_attribute_ns,
                  s(:str, ""),
                  s(:str, "b")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "3"),
              s(:send,
                s(:send,
                  s(:ivar, :@attributes), :get_attribute_ns,
                  s(:ivar, :@ns_a),
                  s(:str, "c")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "4"),
              s(:send,
                s(:send,
                  s(:ivar, :@attributes), :get_attribute_ns,
                  s(:ivar, :@ns_a),
                  s(:str, "d")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "5"),
              s(:send,
                s(:send,
                  s(:ivar, :@attributes), :get_attribute_ns,
                  s(:ivar, :@ns_a),
                  s(:str, "e")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "6"),
              s(:send,
                s(:send,
                  s(:ivar, :@attributes), :get_attribute_ns,
                  s(:ivar, :@ns_b),
                  s(:str, "f")), :value))))))))
