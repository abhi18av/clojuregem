s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :EncodingTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXMLTestUtils)),
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@encoded_root,
              s(:str, "<a><b>\xE6</b></a>")),
            s(:ivasgn, :@encoded,
              s(:send,
                s(:str, "<?xml version='1.0' encoding='ISO-8859-3'?>"), :+,
                s(:ivar, :@encoded_root))),
            s(:ivasgn, :@not_encoded,
              s(:str, "<a><b>\xC4\x89</b></a>")))),
        s(:def, :test_encoded_in_encoded_out,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:ivar, :@encoded))),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send,
              s(:lvar, :out), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ASCII_8BIT)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@encoded),
              s(:lvar, :out)))),
        s(:def, :test_encoded_in_change_out,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:ivar, :@encoded))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :xml_decl), :encoding=,
              s(:str, "UTF-8")),
            s(:send, nil, :assert_equal,
              s(:str, "UTF-8"),
              s(:send,
                s(:lvar, :doc), :encoding)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new), :write,
              s(:send,
                s(:lvar, :doc), :root),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send,
              s(:lvar, :out), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ASCII_8BIT)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@not_encoded),
              s(:lvar, :out)),
            s(:lvasgn, :char,
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:lvar, :doc),
                  s(:str, "/a/b/text()")), :to_s)),
            s(:send,
              s(:lvar, :char), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ASCII_8BIT)),
            s(:send, nil, :assert_equal,
              s(:str, "\xC4\x89"),
              s(:lvar, :char)))),
        s(:def, :test_encoded_in_different_out,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:ivar, :@encoded))),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new), :write,
              s(:send,
                s(:lvar, :doc), :root),
              s(:send,
                s(:const, nil, :Output), :new,
                s(:lvasgn, :out,
                  s(:str, "")),
                s(:str, "UTF-8"))),
            s(:send,
              s(:lvar, :out), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ASCII_8BIT)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@not_encoded),
              s(:lvar, :out)))),
        s(:def, :test_in_change_out,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:ivar, :@not_encoded))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :xml_decl), :encoding=,
              s(:str, "ISO-8859-3")),
            s(:send, nil, :assert_equal,
              s(:str, "ISO-8859-3"),
              s(:send,
                s(:lvar, :doc), :encoding)),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send,
              s(:lvar, :out), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ASCII_8BIT)),
            s(:send, nil, :assert_equal,
              s(:ivar, :@encoded),
              s(:lvar, :out)))),
        s(:def, :test_in_different_out,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:ivar, :@not_encoded))),
            s(:send,
              s(:lvar, :doc), :write,
              s(:send,
                s(:const, nil, :Output), :new,
                s(:lvasgn, :out,
                  s(:str, "")),
                s(:str, "ISO-8859-3"))),
            s(:send,
              s(:lvar, :out), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ASCII_8BIT)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "<?xml version='1.0'?>"),
                s(:begin,
                  s(:ivar, :@encoded_root))),
              s(:lvar, :out)))),
        s(:def, :test_in_different_access,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "      <?xml version='1.0' encoding='ISO-8859-1'?>\n"),
                  s(:str, "      <a a=\"\xFF\">\xFF</a>\n")))),
            s(:lvasgn, :expect,
              s(:str, "\xC3\xBF")),
            s(:send,
              s(:lvar, :expect), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :UTF_8)),
            s(:send, nil, :assert_equal,
              s(:lvar, :expect),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "a")), :attributes), :[],
                s(:str, "a"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expect),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "a")), :text)))),
        s(:def, :test_ticket_89,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "         <?xml version=\"1.0\" encoding=\"CP-1252\" ?>\n"),
                  s(:str, "         <xml><foo></foo></xml>\n")))),
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :Document), :new,
              s(:lvar, :doc)))),
        s(:def, :test_parse_utf16,
          s(:args),
          s(:begin,
            s(:lvasgn, :utf16,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "utf16.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :f)))),
            s(:send, nil, :assert_equal,
              s(:str, "UTF-16"),
              s(:send,
                s(:lvar, :utf16), :encoding)),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :utf16), :[],
                  s(:int, 0)), :kind_of?,
                s(:const,
                  s(:const, nil, :REXML), :XMLDecl))))),
        s(:def, :test_parse_utf16_with_utf8_default_internal,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_internal,
              s(:str, "UTF-8")),
            s(:args),
            s(:begin,
              s(:lvasgn, :utf16,
                s(:block,
                  s(:send,
                    s(:const, nil, :File), :open,
                    s(:send, nil, :fixture_path,
                      s(:str, "utf16.xml"))),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :f)))),
              s(:send, nil, :assert_equal,
                s(:str, "UTF-16"),
                s(:send,
                  s(:lvar, :utf16), :encoding)))))))))
