s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/ultralightparser")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestUltraLightParser),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:class,
        s(:const, nil, :TestDocumentTypeDeclaration),
        s(:self),
        s(:begin,
          s(:def, :test_entity_declaration,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:sym, :start_doctype),
                  s(:sym, :parent),
                  s(:str, "root"),
                  s(:str, "SYSTEM"),
                  s(:str, "urn:x-test"),
                  s(:nil),
                  s(:array,
                    s(:sym, :entitydecl),
                    s(:str, "name"),
                    s(:str, "value"))),
                s(:array,
                  s(:sym, :text),
                  s(:str, "\n")),
                s(:array,
                  s(:sym, :start_element),
                  s(:sym, :parent),
                  s(:str, "root"),
                  s(:hash)),
                s(:array,
                  s(:sym, :text),
                  s(:str, "\n"))),
              s(:send, nil, :parse,
                s(:str, "<!ENTITY name \"value\">\n")))),
          s(:send, nil, :private),
          s(:def, :xml,
            s(:args,
              s(:arg, :internal_subset)),
            s(:dstr,
              s(:str, "<!DOCTYPE root SYSTEM \"urn:x-test\" [\n"),
              s(:begin,
                s(:lvar, :internal_subset)),
              s(:str, "\n"),
              s(:str, "]>\n"),
              s(:str, "<root/>\n"))),
          s(:def, :parse,
            s(:args,
              s(:arg, :internal_subset)),
            s(:begin,
              s(:lvasgn, :parser,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Parsers), :UltraLightParser), :new,
                  s(:send, nil, :xml,
                    s(:lvar, :internal_subset)))),
              s(:send, nil, :normalize,
                s(:send,
                  s(:lvar, :parser), :parse)))),
          s(:def, :normalize,
            s(:args,
              s(:arg, :root)),
            s(:block,
              s(:send,
                s(:lvar, :root), :collect),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :normalize_child,
                s(:lvar, :child)))),
          s(:def, :normalize_child,
            s(:args,
              s(:arg, :child)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:send,
                  s(:lvar, :child), :first)),
              s(:case,
                s(:lvar, :tag),
                s(:when,
                  s(:sym, :start_doctype),
                  s(:begin,
                    s(:lvasgn, :normalized_parent,
                      s(:sym, :parent)),
                    s(:lvasgn, :normalized_doctype,
                      s(:send,
                        s(:lvar, :child), :dup)),
                    s(:send,
                      s(:lvar, :normalized_doctype), :[]=,
                      s(:int, 1),
                      s(:lvar, :normalized_parent)),
                    s(:lvar, :normalized_doctype))),
                s(:when,
                  s(:sym, :start_element),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :tag),
                        s(:lvasgn, :parent),
                        s(:lvasgn, :name),
                        s(:lvasgn, :attributes),
                        s(:splat,
                          s(:lvasgn, :children))),
                      s(:lvar, :child)),
                    s(:lvasgn, :normalized_parent,
                      s(:sym, :parent)),
                    s(:lvasgn, :normalized_children,
                      s(:block,
                        s(:send,
                          s(:lvar, :children), :collect),
                        s(:args,
                          s(:arg, :sub_child)),
                        s(:send, nil, :normalize_child,
                          s(:lvar, :sub_child)))),
                    s(:array,
                      s(:lvar, :tag),
                      s(:lvar, :normalized_parent),
                      s(:lvar, :name),
                      s(:lvar, :attributes),
                      s(:splat,
                        s(:lvar, :normalized_children))))),
                s(:lvar, :child)))))))))
