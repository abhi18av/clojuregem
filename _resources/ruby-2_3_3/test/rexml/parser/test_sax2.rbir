s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/sax2parser")),
  s(:send, nil, :require,
    s(:str, "rexml/sax2listener")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestSAX2Parser),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:class,
        s(:const, nil, :TestDocumentTypeDeclaration),
        s(:self),
        s(:begin,
          s(:send, nil, :private),
          s(:def, :xml,
            s(:args,
              s(:arg, :internal_subset)),
            s(:dstr,
              s(:str, "<!DOCTYPE r SYSTEM \"urn:x-henrikmartensson:test\" [\n"),
              s(:begin,
                s(:lvar, :internal_subset)),
              s(:str, "\n"),
              s(:str, "]>\n"),
              s(:str, "<r/>\n"))),
          s(:class,
            s(:const, nil, :TestEntityDeclaration),
            s(:self),
            s(:begin,
              s(:class,
                s(:const, nil, :Listener), nil,
                s(:begin,
                  s(:send, nil, :include,
                    s(:const,
                      s(:const, nil, :REXML), :SAX2Listener)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :entity_declarations)),
                  s(:def, :initialize,
                    s(:args),
                    s(:ivasgn, :@entity_declarations,
                      s(:array))),
                  s(:def, :entitydecl,
                    s(:args,
                      s(:arg, :declaration)),
                    s(:begin,
                      s(:zsuper),
                      s(:send,
                        s(:ivar, :@entity_declarations), :<<,
                        s(:lvar, :declaration)))))),
              s(:send, nil, :private),
              s(:def, :parse,
                s(:args,
                  s(:arg, :internal_subset)),
                s(:begin,
                  s(:lvasgn, :listener,
                    s(:send,
                      s(:const, nil, :Listener), :new)),
                  s(:lvasgn, :parser,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :REXML), :Parsers), :SAX2Parser), :new,
                      s(:send, nil, :xml,
                        s(:lvar, :internal_subset)))),
                  s(:send,
                    s(:lvar, :parser), :listen,
                    s(:lvar, :listener)),
                  s(:send,
                    s(:lvar, :parser), :parse),
                  s(:send,
                    s(:lvar, :listener), :entity_declarations))),
              s(:class,
                s(:const, nil, :TestGeneralEntity),
                s(:self),
                s(:begin,
                  s(:class,
                    s(:const, nil, :TestValue),
                    s(:self),
                    s(:begin,
                      s(:def, :test_double_quote,
                        s(:args),
                        s(:send, nil, :assert_equal,
                          s(:array,
                            s(:array,
                              s(:str, "name"),
                              s(:str, "value"))),
                          s(:send, nil, :parse,
                            s(:str, "<!ENTITY name \"value\">\n")))),
                      s(:def, :test_single_quote,
                        s(:args),
                        s(:send, nil, :assert_equal,
                          s(:array,
                            s(:array,
                              s(:str, "name"),
                              s(:str, "value"))),
                          s(:send, nil, :parse,
                            s(:str, "<!ENTITY name 'value'>\n")))))),
                  s(:class,
                    s(:const, nil, :TestExternlID),
                    s(:self),
                    s(:begin,
                      s(:class,
                        s(:const, nil, :TestSystem),
                        s(:self),
                        s(:begin,
                          s(:def, :test_with_ndata,
                            s(:args),
                            s(:begin,
                              s(:lvasgn, :declaration,
                                s(:array,
                                  s(:str, "name"),
                                  s(:str, "SYSTEM"),
                                  s(:str, "system-literal"),
                                  s(:str, "NDATA"),
                                  s(:str, "ndata-name"))),
                              s(:send, nil, :assert_equal,
                                s(:array,
                                  s(:lvar, :declaration)),
                                s(:send, nil, :parse,
                                  s(:str, "<!ENTITY name SYSTEM \"system-literal\" NDATA ndata-name>\n"))))),
                          s(:def, :test_without_ndata,
                            s(:args),
                            s(:begin,
                              s(:lvasgn, :declaration,
                                s(:array,
                                  s(:str, "name"),
                                  s(:str, "SYSTEM"),
                                  s(:str, "system-literal"))),
                              s(:send, nil, :assert_equal,
                                s(:array,
                                  s(:lvar, :declaration)),
                                s(:send, nil, :parse,
                                  s(:str, "<!ENTITY name SYSTEM \"system-literal\">\n"))))))),
                      s(:class,
                        s(:const, nil, :TestPublic),
                        s(:self),
                        s(:begin,
                          s(:def, :test_with_ndata,
                            s(:args),
                            s(:begin,
                              s(:lvasgn, :declaration,
                                s(:array,
                                  s(:str, "name"),
                                  s(:str, "PUBLIC"),
                                  s(:str, "public-literal"),
                                  s(:str, "system-literal"),
                                  s(:str, "NDATA"),
                                  s(:str, "ndata-name"))),
                              s(:send, nil, :assert_equal,
                                s(:array,
                                  s(:lvar, :declaration)),
                                s(:send, nil, :parse,
                                  s(:str, "<!ENTITY name PUBLIC \"public-literal\" \"system-literal\" NDATA ndata-name>\n"))))),
                          s(:def, :test_without_ndata,
                            s(:args),
                            s(:begin,
                              s(:lvasgn, :declaration,
                                s(:array,
                                  s(:str, "name"),
                                  s(:str, "PUBLIC"),
                                  s(:str, "public-literal"),
                                  s(:str, "system-literal"))),
                              s(:send, nil, :assert_equal,
                                s(:array,
                                  s(:lvar, :declaration)),
                                s(:send, nil, :parse,
                                  s(:str, "<!ENTITY name PUBLIC \"public-literal\" \"system-literal\">\n"))))))))))),
              s(:class,
                s(:const, nil, :TestParameterEntity),
                s(:self),
                s(:begin,
                  s(:class,
                    s(:const, nil, :TestValue),
                    s(:self),
                    s(:begin,
                      s(:def, :test_double_quote,
                        s(:args),
                        s(:send, nil, :assert_equal,
                          s(:array,
                            s(:array,
                              s(:str, "%"),
                              s(:str, "name"),
                              s(:str, "value"))),
                          s(:send, nil, :parse,
                            s(:str, "<!ENTITY % name \"value\">\n")))),
                      s(:def, :test_single_quote,
                        s(:args),
                        s(:send, nil, :assert_equal,
                          s(:array,
                            s(:array,
                              s(:str, "%"),
                              s(:str, "name"),
                              s(:str, "value"))),
                          s(:send, nil, :parse,
                            s(:str, "<!ENTITY % name 'value'>\n")))))),
                  s(:class,
                    s(:const, nil, :TestExternlID),
                    s(:self),
                    s(:begin,
                      s(:def, :test_system,
                        s(:args),
                        s(:begin,
                          s(:lvasgn, :declaration,
                            s(:array,
                              s(:str, "%"),
                              s(:str, "name"),
                              s(:str, "SYSTEM"),
                              s(:str, "system-literal"))),
                          s(:send, nil, :assert_equal,
                            s(:array,
                              s(:lvar, :declaration)),
                            s(:send, nil, :parse,
                              s(:str, "<!ENTITY % name SYSTEM \"system-literal\">\n"))))),
                      s(:def, :test_public,
                        s(:args),
                        s(:begin,
                          s(:lvasgn, :declaration,
                            s(:array,
                              s(:str, "%"),
                              s(:str, "name"),
                              s(:str, "PUBLIC"),
                              s(:str, "public-literal"),
                              s(:str, "system-literal"))),
                          s(:send, nil, :assert_equal,
                            s(:array,
                              s(:lvar, :declaration)),
                            s(:send, nil, :parse,
                              s(:str, "<!ENTITY % name PUBLIC \"public-literal\" \"system-literal\">\n"))))))))))),
          s(:class,
            s(:const, nil, :TestNotationDeclaration),
            s(:self),
            s(:begin,
              s(:class,
                s(:const, nil, :Listener), nil,
                s(:begin,
                  s(:send, nil, :include,
                    s(:const,
                      s(:const, nil, :REXML), :SAX2Listener)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :notation_declarations)),
                  s(:def, :initialize,
                    s(:args),
                    s(:ivasgn, :@notation_declarations,
                      s(:array))),
                  s(:def, :notationdecl,
                    s(:args,
                      s(:restarg, :declaration)),
                    s(:begin,
                      s(:zsuper),
                      s(:send,
                        s(:ivar, :@notation_declarations), :<<,
                        s(:lvar, :declaration)))))),
              s(:send, nil, :private),
              s(:def, :parse,
                s(:args,
                  s(:arg, :internal_subset)),
                s(:begin,
                  s(:lvasgn, :listener,
                    s(:send,
                      s(:const, nil, :Listener), :new)),
                  s(:lvasgn, :parser,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :REXML), :Parsers), :SAX2Parser), :new,
                      s(:send, nil, :xml,
                        s(:lvar, :internal_subset)))),
                  s(:send,
                    s(:lvar, :parser), :listen,
                    s(:lvar, :listener)),
                  s(:send,
                    s(:lvar, :parser), :parse),
                  s(:send,
                    s(:lvar, :listener), :notation_declarations))),
              s(:class,
                s(:const, nil, :TestExternlID),
                s(:self),
                s(:begin,
                  s(:def, :test_system,
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :declaration,
                        s(:array,
                          s(:str, "name"),
                          s(:str, "SYSTEM"),
                          s(:nil),
                          s(:str, "system-literal"))),
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:lvar, :declaration)),
                        s(:send, nil, :parse,
                          s(:str, "<!NOTATION name SYSTEM \"system-literal\">\n"))))),
                  s(:def, :test_public,
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :declaration,
                        s(:array,
                          s(:str, "name"),
                          s(:str, "PUBLIC"),
                          s(:str, "public-literal"),
                          s(:str, "system-literal"))),
                      s(:send, nil, :assert_equal,
                        s(:array,
                          s(:lvar, :declaration)),
                        s(:send, nil, :parse,
                          s(:str, "<!NOTATION name PUBLIC \"public-literal\" \"system-literal\">\n"))))))),
              s(:class,
                s(:const, nil, :TestPublicID),
                s(:self),
                s(:def, :test_literal,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :declaration,
                      s(:array,
                        s(:str, "name"),
                        s(:str, "PUBLIC"),
                        s(:str, "public-literal"),
                        s(:nil))),
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:lvar, :declaration)),
                      s(:send, nil, :parse,
                        s(:str, "<!NOTATION name PUBLIC \"public-literal\">\n")))))))))))))
