s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:begin,
      s(:class,
        s(:const, nil, :TestDocTypeAccessor),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@sysid,
                s(:str, "urn:x-test:sysid1")),
              s(:ivasgn, :@notid1,
                s(:str, "urn:x-test:notation1")),
              s(:ivasgn, :@notid2,
                s(:str, "urn:x-test:notation2")),
              s(:lvasgn, :document_string1,
                s(:dstr,
                  s(:str, "      <!DOCTYPE r SYSTEM \""),
                  s(:begin,
                    s(:ivar, :@sysid)),
                  s(:str, "\" [\n"),
                  s(:str, "        <!NOTATION n1 SYSTEM \""),
                  s(:begin,
                    s(:ivar, :@notid1)),
                  s(:str, "\">\n"),
                  s(:str, "        <!NOTATION n2 SYSTEM \""),
                  s(:begin,
                    s(:ivar, :@notid2)),
                  s(:str, "\">\n"),
                  s(:str, "      ]>\n"),
                  s(:str, "      <r/>\n"))),
              s(:ivasgn, :@doctype1,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :document_string1)), :doctype)),
              s(:ivasgn, :@pubid,
                s(:str, "TEST_ID")),
              s(:lvasgn, :document_string2,
                s(:dstr,
                  s(:str, "      <!DOCTYPE r PUBLIC \""),
                  s(:begin,
                    s(:ivar, :@pubid)),
                  s(:str, "\">\n"),
                  s(:str, "      <r/>\n"))),
              s(:ivasgn, :@doctype2,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :document_string2)), :doctype)),
              s(:lvasgn, :document_string3,
                s(:dstr,
                  s(:str, "      <!DOCTYPE r PUBLIC \""),
                  s(:begin,
                    s(:ivar, :@pubid)),
                  s(:str, "\" \""),
                  s(:begin,
                    s(:ivar, :@sysid)),
                  s(:str, "\">\n"),
                  s(:str, "      <r/>\n"))),
              s(:ivasgn, :@doctype3,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :document_string3)), :doctype)))),
          s(:def, :test_public,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:ivar, :@doctype1), :public)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@pubid),
                s(:send,
                  s(:ivar, :@doctype2), :public)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@pubid),
                s(:send,
                  s(:ivar, :@doctype3), :public)))),
          s(:def, :test_system,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:ivar, :@sysid),
                s(:send,
                  s(:ivar, :@doctype1), :system)),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:ivar, :@doctype2), :system)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@sysid),
                s(:send,
                  s(:ivar, :@doctype3), :system)))),
          s(:def, :test_notation,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:ivar, :@notid1),
                s(:send,
                  s(:send,
                    s(:ivar, :@doctype1), :notation,
                    s(:str, "n1")), :system)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@notid2),
                s(:send,
                  s(:send,
                    s(:ivar, :@doctype1), :notation,
                    s(:str, "n2")), :system)))),
          s(:def, :test_notations,
            s(:args),
            s(:begin,
              s(:lvasgn, :notations,
                s(:send,
                  s(:ivar, :@doctype1), :notations)),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :notations), :length)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@notid1),
                s(:send,
                  s(:send, nil, :find_notation,
                    s(:lvar, :notations),
                    s(:str, "n1")), :system)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@notid2),
                s(:send,
                  s(:send, nil, :find_notation,
                    s(:lvar, :notations),
                    s(:str, "n2")), :system)))),
          s(:def, :find_notation,
            s(:args,
              s(:arg, :notations),
              s(:arg, :name)),
            s(:block,
              s(:send,
                s(:lvar, :notations), :find),
              s(:args,
                s(:arg, :notation)),
              s(:send,
                s(:lvar, :name), :==,
                s(:send,
                  s(:lvar, :notation), :name)))))),
      s(:class,
        s(:const, nil, :TestNotationDeclPublic),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@name,
                s(:str, "vrml")),
              s(:ivasgn, :@id,
                s(:str, "VRML 1.0")),
              s(:ivasgn, :@uri,
                s(:str, "http://www.web3d.org/")))),
          s(:def, :test_to_s,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "<!NOTATION "),
                s(:begin,
                  s(:ivar, :@name)),
                s(:str, " PUBLIC \""),
                s(:begin,
                  s(:ivar, :@id)),
                s(:str, "\">")),
              s(:send,
                s(:send, nil, :decl,
                  s(:ivar, :@id),
                  s(:nil)), :to_s))),
          s(:def, :test_to_s_with_uri,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "<!NOTATION "),
                s(:begin,
                  s(:ivar, :@name)),
                s(:str, " PUBLIC \""),
                s(:begin,
                  s(:ivar, :@id)),
                s(:str, "\" \""),
                s(:begin,
                  s(:ivar, :@uri)),
                s(:str, "\">")),
              s(:send,
                s(:send, nil, :decl,
                  s(:ivar, :@id),
                  s(:ivar, :@uri)), :to_s))),
          s(:send, nil, :private),
          s(:def, :decl,
            s(:args,
              s(:arg, :id),
              s(:arg, :uri)),
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :NotationDecl), :new,
              s(:ivar, :@name),
              s(:str, "PUBLIC"),
              s(:lvar, :id),
              s(:lvar, :uri))))),
      s(:class,
        s(:const, nil, :TestNotationDeclSystem),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@name,
                s(:str, "gif")),
              s(:ivasgn, :@id,
                s(:str, "gif viewer")))),
          s(:def, :test_to_s,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "<!NOTATION "),
                s(:begin,
                  s(:ivar, :@name)),
                s(:str, " SYSTEM \""),
                s(:begin,
                  s(:ivar, :@id)),
                s(:str, "\">")),
              s(:send,
                s(:send, nil, :decl,
                  s(:ivar, :@id)), :to_s))),
          s(:send, nil, :private),
          s(:def, :decl,
            s(:args,
              s(:arg, :id)),
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :NotationDecl), :new,
              s(:ivar, :@name),
              s(:str, "SYSTEM"),
              s(:lvar, :id),
              s(:nil))))))))
