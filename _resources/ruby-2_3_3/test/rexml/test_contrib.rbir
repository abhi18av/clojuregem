s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/formatters/default")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :ContribTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXMLTestUtils)),
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:casgn, nil, :XML_STRING_01,
          s(:dstr,
            s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
            s(:str, "<biblio>\n"),
            s(:str, "  <entry type=\"Book\">\n"),
            s(:str, "    <author>Thomas, David; Hunt, Andrew</author>\n"),
            s(:str, "    <language>english</language>\n"),
            s(:str, "    <publisher>Addison-Wesley</publisher>\n"),
            s(:str, "    <title>Programming Ruby. The Pragmatic Programmer's Guide</title>\n"),
            s(:str, "    <year>2000</year>\n"),
            s(:str, "  </entry>\n"),
            s(:str, "  <entry type=\"Book\">\n"),
            s(:str, "    <author>Blammo, Blah</author>\n"),
            s(:str, "    <language>english</language>\n"),
            s(:str, "    <publisher>Hubbabubba</publisher>\n"),
            s(:str, "    <title>Foozboozer's Life</title>\n"),
            s(:str, "    <type>Book</type>\n"),
            s(:str, "    <year>2002</year>\n"),
            s(:str, "  </entry>\n"),
            s(:str, "</biblio>\n"))),
        s(:casgn, nil, :XML_STRING_02,
          s(:dstr,
            s(:str, "<biblio>\n"),
            s(:str, "  <entry type=\"Book\">\n"),
            s(:str, "    <language>english</language>\n"),
            s(:str, "    <publisher>Addison-Wesley</publisher>\n"),
            s(:str, "    <title>Programming Ruby. The Pragmatic Programmer's Guide</title>\n"),
            s(:str, "    <type>Book</type>\n"),
            s(:str, "    <year>2000</year>\n"),
            s(:str, "  </entry>\n"),
            s(:str, "  <entry type=\"Book\">\n"),
            s(:str, "    <author>Blammo, Blah</author>\n"),
            s(:str, "    <language>english</language>\n"),
            s(:str, "    <publisher>Hubbabubba</publisher>\n"),
            s(:str, "    <title>Foozboozer's Life</title>\n"),
            s(:str, "    <type>Book</type>\n"),
            s(:str, "    <year>2002</year>\n"),
            s(:str, "  </entry>\n"),
            s(:str, "</biblio>\n"))),
        s(:def, :test_bad_doctype_Tobias,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "       <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\"\n"),
                s(:str, "          \"http://www.w3.org/TR/SVG/DTD/svg10.dtd\"\n"),
                s(:str, "         [\n"),
                s(:str, "         <!-- <!ENTITY % fast-slow \"0 0  .5 1\">-->\n"),
                s(:str, "         <!--<!ENTITY % slow-fast \".5 0  1 1\">-->\n"),
                s(:str, "         <!ENTITY hover_ani\n"),
                s(:str, "          '<animateTransform attributeName=\"transform\"\n"),
                s(:str, "           type=\"scale\" restart=\"whenNotActive\" values=\"1;0.96\"\n"),
                s(:str, "           dur=\"0.5s\" calcMode=\"spline\" keySplines=\"0 0  .5 1\"\n"),
                s(:str, "           fill=\"freeze\" begin=\"mouseover\"/>\n"),
                s(:str, "           <animateTransform  attributeName=\"transform\"\n"),
                s(:str, "           type=\"scale\" restart=\"whenNotActive\" values=\"0.96;1\"\n"),
                s(:str, "           dur=\"0.5s\" calcMode=\"spline\" keySplines=\".5 0  1 1\"\n"),
                s(:str, "           fill=\"freeze\" begin=\"mouseover+0.5s\"/>'\n"),
                s(:str, "         >\n"),
                s(:str, "         ]\n"),
                s(:str, "       >\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :out), :[],
                  s(:regexp,
                    s(:str, ">\\'>"),
                    s(:regopt))), :!=,
                s(:nil)),
              s(:str, "Couldn't find >'>")),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :out), :[],
                  s(:regexp,
                    s(:str, "\\]>"),
                    s(:regopt))), :!=,
                s(:nil)),
              s(:str, "Couldn't find ]>")))),
        s(:def, :test_namespace_Peter,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <?xml version=\"1.0\"?>\n"),
                s(:str, "      <config:myprog-config xmlns:config=\"http://someurl/program/version\">\n"),
                s(:str, "      <!-- main options -->\n"),
                s(:str, "        <config:main>\n"),
                s(:str, "          <config:parameter name=\"name\"  value=\"value\"/>\n"),
                s(:str, "        </config:main>\n"),
                s(:str, "      </config:myprog-config>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:str, "myprog-config"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :name)),
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :each,
                s(:lvar, :doc),
                s(:str, "x:myprog-config/x:main/x:parameter"),
                s(:hash,
                  s(:pair,
                    s(:str, "x"),
                    s(:str, "http://someurl/program/version")))),
              s(:args,
                s(:arg, :element)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:str, "name"),
                  s(:send,
                    s(:send,
                      s(:lvar, :element), :attributes), :[],
                    s(:str, "name"))),
                s(:op_asgn,
                  s(:lvasgn, :count), :+,
                  s(:int, 1)))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:lvar, :count)),
            s(:send, nil, :assert_equal,
              s(:str, "myprog-config"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "config:myprog-config")), :name)))),
        s(:def, :test_complex_xpath_Tobias,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <root>\n"),
                s(:str, "        <foo>\n"),
                s(:str, "          <bar style=\"baz\"/>\n"),
                s(:str, "          <blah style=\"baz\"/>\n"),
                s(:str, "          <blam style=\"baz\"/>\n"),
                s(:str, "        </foo>\n"),
                s(:str, "        <wax>\n"),
                s(:str, "          <fudge>\n"),
                s(:str, "            <noodle/>\n"),
                s(:str, "          </fudge>\n"),
                s(:str, "        </wax>\n"),
                s(:str, "      </root>\n"))),
            s(:lvasgn, :complex_path,
              s(:send,
                s(:send,
                  s(:send,
                    s(:str, "*[* "), :+,
                    s(:str, "and not(*/node()) ")), :+,
                  s(:str, "and not(*[not(@style)]) ")), :+,
                s(:str, "and not(*/@style != */@style)]"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :results,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:lvar, :complex_path))),
            s(:send, nil, :assert,
              s(:lvar, :results)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :results), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:send,
                  s(:lvar, :results), :[],
                  s(:int, 0)), :name)))),
        s(:def, :test_extra_newline_on_read_Chris,
          s(:args),
          s(:begin,
            s(:lvasgn, :text,
              s(:str, "test text")),
            s(:lvasgn, :e,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "Test"))),
            s(:send,
              s(:lvar, :e), :add_text,
              s(:lvar, :text)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new), :write,
              s(:lvar, :e),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :out))),
            s(:lvasgn, :outtext,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :text)),
            s(:send, nil, :assert_equal,
              s(:lvar, :text),
              s(:lvar, :outtext)))),
        s(:def, :test_other_xpath_Tobias,
          s(:args),
          s(:begin,
            s(:lvasgn, :schema,
              s(:dstr,
                s(:str, "      <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n"),
                s(:str, "        elementFormDefault=\"qualified\">\n"),
                s(:str, "        <xs:element name=\"rect\">\n"),
                s(:str, "          <xs:complexType>\n"),
                s(:str, "            <xs:attribute name=\"width\" type=\"xs:byte\" use=\"required\"/>\n"),
                s(:str, "            <xs:attribute name=\"height\" type=\"xs:byte\" use=\"required\"/>\n"),
                s(:str, "          </xs:complexType>\n"),
                s(:str, "        </xs:element>\n"),
                s(:str, "        <xs:element name=\"svg\">\n"),
                s(:str, "          <xs:complexType>\n"),
                s(:str, "            <xs:sequence>\n"),
                s(:str, "              <xs:element ref=\"rect\"/>\n"),
                s(:str, "            </xs:sequence>\n"),
                s(:str, "          </xs:complexType>\n"),
                s(:str, "        </xs:element>\n"),
                s(:str, "      </xs:schema>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :schema))),
            s(:lvasgn, :result,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "xs:element[descendant::xs:element[@ref]]"))),
            s(:send, nil, :assert,
              s(:lvar, :result)),
            s(:send, nil, :assert_equal,
              s(:str, "svg"),
              s(:send,
                s(:send,
                  s(:lvar, :result), :attributes), :[],
                s(:str, "name"))),
            s(:lvasgn, :result,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :first,
                s(:lvar, :doc),
                s(:str, "element[descendant::element[@ref]]"))),
            s(:send, nil, :assert_nil,
              s(:lvar, :result)))),
        s(:def, :test_xpath_01_TobiasReif,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:send,
                  s(:const, nil, :XML_STRING_01), :dup))),
            s(:lvasgn, :desired_result,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<author>Thomas, David; Hunt, Andrew</author>"))),
            s(:lvasgn, :xpath,
              s(:str, "//author")),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:lvar, :xpath))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :desired_result), :to_s),
              s(:send,
                s(:lvar, :result), :to_s)))),
        s(:def, :test_xpath_whitespace_TobiasReif,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:send,
                  s(:const, nil, :XML_STRING_01), :dup))),
            s(:lvasgn, :desired_result,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<author>Thomas, David; Hunt, Andrew</author>"))),
            s(:lvasgn, :xpath,
              s(:str, "//author\n \n")),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:lvar, :xpath))),
            s(:lvasgn, :failure_message,
              s(:str, "\n[[[TR: AFAIK, whitespace should be allowed]]]\n")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :desired_result), :to_s),
              s(:send,
                s(:lvar, :result), :to_s),
              s(:lvar, :failure_message)))),
        s(:def, :test_xpath_02_TobiasReif,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:send,
                  s(:const, nil, :XML_STRING_01), :dup))),
            s(:lvasgn, :desired_result,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<author>Thomas, David; Hunt, Andrew</author>"))),
            s(:lvasgn, :xpath,
              s(:dstr,
                s(:str, "/biblio/entry[\n"),
                s(:str, "      title/text()=concat('Programming Ruby. The Pragmatic Programmer',\"'\",'s Guide')\n"),
                s(:str, "      and\n"),
                s(:str, "      year='2000'\n"),
                s(:str, "      ]/author"))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:lvar, :xpath))),
            s(:lvasgn, :failure_message,
              s(:dstr,
                s(:str, "\nHow to handle the apos inside the string inside the XPath?\nXPath = "),
                s(:begin,
                  s(:lvar, :xpath)),
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :desired_result), :to_s),
              s(:send,
                s(:lvar, :result), :to_s),
              s(:lvar, :failure_message)))),
        s(:def, :test_xpath_03_TobiasReif,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:send,
                  s(:const, nil, :XML_STRING_02), :dup))),
            s(:lvasgn, :desired_result_string,
              s(:dstr,
                s(:str, "<entry type='Book'>\n"),
                s(:str, "    <language>english</language>\n"),
                s(:str, "    <publisher>Addison-Wesley</publisher>\n"),
                s(:str, "    <title>Programming Ruby. The Pragmatic Programmer's Guide</title>\n"),
                s(:str, "    <type>Book</type>\n"),
                s(:str, "    <year>2000</year>\n"),
                s(:str, "  </entry>"))),
            s(:send,
              s(:const, nil, :Document), :new,
              s(:lvar, :desired_result_string)),
            s(:lvasgn, :xpath,
              s(:str, "/biblio/entry[not(author)]")),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:lvar, :xpath))),
            s(:send, nil, :assert_equal,
              s(:lvar, :desired_result_string),
              s(:send,
                s(:lvar, :result), :to_s)))),
        s(:def, :test_umlaut,
          s(:args),
          s(:begin,
            s(:lvasgn, :koln_iso,
              s(:str, "K\xF6ln")),
            s(:lvasgn, :koln_utf,
              s(:str, "K\xC3\xB6ln")),
            s(:lvasgn, :source_iso,
              s(:dstr,
                s(:str, "<?xml version='1.0' encoding='ISO-8859-1'?><test>"),
                s(:begin,
                  s(:lvar, :koln_iso)),
                s(:str, "</test>"))),
            s(:lvasgn, :source_utf,
              s(:dstr,
                s(:str, "<?xml version='1.0' encoding='UTF-8'?><test>"),
                s(:begin,
                  s(:lvar, :koln_utf)),
                s(:str, "</test>"))),
            s(:if,
              s(:send,
                s(:const, nil, :String), :method_defined?,
                s(:sym, :encode)),
              s(:begin,
                s(:send,
                  s(:lvar, :koln_iso), :force_encoding,
                  s(:str, "iso-8859-1")),
                s(:send,
                  s(:lvar, :koln_utf), :force_encoding,
                  s(:str, "utf-8")),
                s(:send,
                  s(:lvar, :source_iso), :force_encoding,
                  s(:str, "iso-8859-1")),
                s(:send,
                  s(:lvar, :source_utf), :force_encoding,
                  s(:str, "utf-8"))), nil),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source_iso))),
            s(:send, nil, :assert_equal,
              s(:str, "ISO-8859-1"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :xml_decl), :encoding)),
            s(:send, nil, :assert_equal,
              s(:lvar, :koln_utf),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :text)),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source_iso),
              s(:lvar, :out)),
            s(:send,
              s(:send,
                s(:lvar, :doc), :xml_decl), :encoding=,
              s(:str, "UTF-8")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source_utf),
              s(:lvar, :out)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"),
                  s(:str, "<intranet>\n"),
                  s(:str, "<position><aktuell datum=\"01-10-11\">Technik</aktuell></position>\n"),
                  s(:str, "<hauptspalte>\n"),
                  s(:str, "<headline>Technik</headline>\n"),
                  s(:str, "Die Technik ist das R\xFCckgrat der meisten Gesch\xFCftsprozesse bei Home of the Brave. Deshalb sollen hier alle relevanten technischen Abl\xFCufe, Daten und Einrichtungen beschrieben werden, damit jeder im Bedarfsfall die n\xFCtigen Informationen, Anweisungen und Verhaltensempfehlungen nachlesen und/oder abrufen kann.\n"),
                  s(:str, "</hauptspalte>\n"),
                  s(:str, "<nebenspalte>\n"),
                  s(:str, "  <link ziel=\"Flash/\">Flash</link><umbruch/>\n"),
                  s(:str, "  N\xFCtzliches von Flashern f\xFCr Flasher.<umbruch/>\n"),
                  s(:str, "  <link neu=\"ja\" ziel=\"Cvs/\">CVS-FAQ</link><umbruch/>\n"),
                  s(:str, "  FAQ zur Benutzung von CVS bei HOB\n"),
                  s(:str, "</nebenspalte>\n"),
                  s(:str, "</intranet>\n")))),
            s(:lvasgn, :tn,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "//nebenspalte/text()[2]"))),
            s(:lvasgn, :expected_iso,
              s(:str, "N\xFCtzliches von Flashern f\xFCr Flasher.")),
            s(:lvasgn, :expected_utf,
              s(:send,
                s(:send,
                  s(:lvar, :expected_iso), :unpack,
                  s(:str, "C*")), :pack,
                s(:str, "U*"))),
            s(:send,
              s(:lvar, :expected_iso), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :ISO_8859_1)),
            s(:send,
              s(:lvar, :expected_utf), :force_encoding,
              s(:const,
                s(:const,
                  s(:cbase), :Encoding), :UTF_8)),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected_utf),
              s(:send,
                s(:send,
                  s(:lvar, :tn), :to_s), :strip)),
            s(:lvasgn, :f,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new)),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :tn),
              s(:send,
                s(:const, nil, :Output), :new,
                s(:lvasgn, :o,
                  s(:str, "")),
                s(:str, "ISO-8859-1"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected_iso),
              s(:send,
                s(:lvar, :o), :strip)),
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "xmlfile-bug.xml"))),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :file)))),
            s(:lvasgn, :tn,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "//nebenspalte/text()[2]"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected_utf),
              s(:send,
                s(:send,
                  s(:lvar, :tn), :to_s), :strip)),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :tn),
              s(:send,
                s(:const, nil, :Output), :new,
                s(:lvasgn, :o,
                  s(:str, "")),
                s(:str, "ISO-8859-1"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected_iso),
              s(:send,
                s(:lvar, :o), :strip)))),
        s(:def, :test_element_cloning_namespace_Chris,
          s(:args),
          s(:begin,
            s(:lvasgn, :aDoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<h1 tpl:content=\"title\" xmlns:tpl=\"1\">Dummy title</h1>"))),
            s(:lvasgn, :anElement,
              s(:lvasgn, :anElement,
                s(:send,
                  s(:send,
                    s(:lvar, :aDoc), :elements), :[],
                  s(:int, 1)))),
            s(:lvasgn, :elementAttrPrefix,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :anElement), :attributes), :get_attribute,
                  s(:str, "content")), :prefix)),
            s(:lvasgn, :aClone,
              s(:send,
                s(:lvar, :anElement), :clone)),
            s(:lvasgn, :cloneAttrPrefix,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :aClone), :attributes), :get_attribute,
                  s(:str, "content")), :prefix)),
            s(:send, nil, :assert_equal,
              s(:lvar, :elementAttrPrefix),
              s(:lvar, :cloneAttrPrefix)))),
        s(:def, :test_namespaces_in_attlist_tobias,
          s(:args),
          s(:begin,
            s(:lvasgn, :in_string,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "foo.xml")),
                  s(:str, "r")),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:lvar, :file), :read))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :in_string))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "//leg"))),
            s(:send, nil, :assert_equal,
              s(:str, "http://www.foo.com/human"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 1)), :namespace)),
            s(:send, nil, :assert_equal,
              s(:str, "human leg"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:lvar, :doc),
                  s(:str, "//x:leg/text()"),
                  s(:hash,
                    s(:pair,
                      s(:str, "x"),
                      s(:str, "http://www.foo.com/human")))), :to_s)))),
        s(:def, :test_less_than_in_element_content,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "ProductionSupport.xml"))),
                s(:args,
                  s(:arg, :source)),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :source)))),
            s(:lvasgn, :h,
              s(:send,
                s(:const, nil, :Hash), :new)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :each,
                s(:str, "//CommonError")),
              s(:args,
                s(:arg, :el)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :el), :elements), :[],
                    s(:str, "Key")), :text),
                s(:str, "okay"))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :h), :include?,
                s(:str, "MotorInsuranceContract(Object)>>#error:"))))),
        s(:def, :test_various_xpath,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<r a=\"1\"><p><c b=\"2\">3</c></p></r>"))),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:str, "/r"),
                    s(:const,
                      s(:const, nil, :REXML), :Element)),
                  s(:array,
                    s(:str, "/r/p/c"),
                    s(:const,
                      s(:const, nil, :REXML), :Element)),
                  s(:array,
                    s(:str, "/r/attribute::a"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/@a"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/attribute::*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/@*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c/attribute::b"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c/@b"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c/attribute::*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c/@*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "//c/attribute::b"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "//c/@b"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "//c/attribute::*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "//c/@*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, ".//node()"),
                    s(:const,
                      s(:const, nil, :REXML), :Node)),
                  s(:array,
                    s(:str, ".//node()[@a]"),
                    s(:const,
                      s(:const, nil, :REXML), :Element)),
                  s(:array,
                    s(:str, ".//node()[@a=\"1\"]"),
                    s(:const,
                      s(:const, nil, :REXML), :Element)),
                  s(:array,
                    s(:str, ".//node()[@b]"),
                    s(:const,
                      s(:const, nil, :REXML), :Element)),
                  s(:array,
                    s(:str, ".//node()[@b=\"2\"]"),
                    s(:const,
                      s(:const, nil, :REXML), :Element))), :each),
              s(:args,
                s(:arg, :xpath),
                s(:arg, :kind)),
              s(:kwbegin,
                s(:rescue,
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :XPath), :each,
                      s(:lvar, :doc),
                      s(:lvar, :xpath)),
                    s(:args,
                      s(:arg, :what)),
                    s(:send, nil, :assert_kind_of,
                      s(:lvar, :kind),
                      s(:lvar, :what),
                      s(:dstr,
                        s(:str, "\n\nWrong type ("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :what), :class)),
                        s(:str, ") returned for "),
                        s(:begin,
                          s(:lvar, :xpath)),
                        s(:str, " (expected "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :kind), :name)),
                        s(:str, ")\n\n")))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)), nil,
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "PATH WAS: "),
                          s(:begin,
                            s(:lvar, :xpath)))),
                      s(:send, nil, :raise))), nil))),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:str, "/r"),
                    s(:str, "attribute::a"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r"),
                    s(:str, "@a"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r"),
                    s(:str, "attribute::*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r"),
                    s(:str, "@*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c"),
                    s(:str, "attribute::b"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c"),
                    s(:str, "@b"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c"),
                    s(:str, "attribute::*"),
                    s(:const, nil, :Attribute)),
                  s(:array,
                    s(:str, "/r/p/c"),
                    s(:str, "@*"),
                    s(:const, nil, :Attribute))), :each),
              s(:args,
                s(:arg, :nodepath),
                s(:arg, :xpath),
                s(:arg, :kind)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :context,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :XPath), :first,
                        s(:lvar, :doc),
                        s(:lvar, :nodepath))),
                    s(:block,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :XPath), :each,
                        s(:lvar, :context),
                        s(:lvar, :xpath)),
                      s(:args,
                        s(:arg, :what)),
                      s(:send, nil, :assert_kind_of,
                        s(:lvar, :kind),
                        s(:lvar, :what),
                        s(:dstr,
                          s(:str, "Wrong type ("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :what), :class)),
                          s(:str, ") returned for "),
                          s(:begin,
                            s(:lvar, :xpath)),
                          s(:str, " (expected "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :kind), :name)),
                          s(:str, ")\n"))))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)), nil,
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "PATH WAS: "),
                          s(:begin,
                            s(:lvar, :xpath)))),
                      s(:send, nil, :raise))), nil))))),
        s(:def, :test_entities_Holden_Glova,
          s(:args),
          s(:begin,
            s(:lvasgn, :document,
              s(:dstr,
                s(:str, "      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                s(:str, "      <!DOCTYPE rubynet [\n"),
                s(:str, "      <!ENTITY rbconfig.MAJOR \"1\">\n"),
                s(:str, "      <!ENTITY rbconfig.MINOR \"7\">\n"),
                s(:str, "      <!ENTITY rbconfig.TEENY \"2\">\n"),
                s(:str, "      <!ENTITY rbconfig.ruby_version \"&rbconfig.MAJOR;.&rbconfig.MINOR;\">\n"),
                s(:str, "      <!ENTITY rbconfig.arch \"i386-freebsd5\">\n"),
                s(:str, "      <!ENTITY rbconfig.prefix \"/usr/local\">\n"),
                s(:str, "      <!ENTITY rbconfig.libdir \"&rbconfig.prefix;/lib\">\n"),
                s(:str, "      <!ENTITY rbconfig.includedir \"&rbconfig.prefix;/include\">\n"),
                s(:str, "      <!ENTITY rbconfig.sitedir \"&rbconfig.prefix;/lib/ruby/site_ruby\">\n"),
                s(:str, "      <!ENTITY rbconfig.sitelibdir \"&rbconfig.sitedir;/&rbconfig.ruby_version;\">\n"),
                s(:str, "      <!ENTITY rbconfig.sitearchdir \"&rbconfig.sitelibdir;/&rbconfig.arch;\">\n"),
                s(:str, "      ]>\n"),
                s(:str, "      <rubynet>\n"),
                s(:str, "        <pkg version=\"version1.0\">\n"),
                s(:str, "          <files>\n"),
                s(:str, "            <file>\n"),
                s(:str, "              <filename>uga.rb</filename>\n"),
                s(:str, "              <mode>0444</mode>\n"),
                s(:str, "              <path>&rbconfig.libdir;/rexml</path>\n"),
                s(:str, "              <content encoding=\"xml\">... the file here</content>\n"),
                s(:str, "            </file>\n"),
                s(:str, "            <file>\n"),
                s(:str, "              <filename>booga.h</filename>\n"),
                s(:str, "              <mode>0444</mode>\n"),
                s(:str, "              <path>&rbconfig.includedir;</path>\n"),
                s(:str, "              <content encoding=\"xml\">... the file here</content>\n"),
                s(:str, "            </file>\n"),
                s(:str, "            <file>\n"),
                s(:str, "              <filename>foo.so</filename>\n"),
                s(:str, "              <mode>0555</mode>\n"),
                s(:str, "              <path>&rbconfig.sitearchdir;/rexml</path>\n"),
                s(:str, "              <content encoding=\"mime64\">Li4uIHRoZSBmaWxlIGhlcmU=\n</content>\n"),
                s(:str, "            </file>\n"),
                s(:str, "          </files>\n"),
                s(:str, "        </pkg>\n"),
                s(:str, "      </rubynet>\n"))),
            s(:lvasgn, :file_xpath,
              s(:str, "/rubynet/pkg/files/file")),
            s(:lvasgn, :root,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :document))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :root), :elements), :each,
                s(:lvar, :file_xpath)),
              s(:args,
                s(:arg, :metadata)),
              s(:begin,
                s(:lvasgn, :text,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :metadata), :elements), :[],
                        s(:str, "path")), :get_text), :value)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :text), :!~,
                    s(:regexp,
                      s(:str, "&rbconfig"),
                      s(:regopt))),
                  s(:dstr,
                    s(:str, "'"),
                    s(:begin,
                      s(:lvar, :text)),
                    s(:str, "' failed"))))))),
        s(:def, :test_whitespace_after_xml_decl,
          s(:args),
          s(:send,
            s(:const, nil, :Document), :new,
            s(:dstr,
              s(:str, "<?xml version='1.0'?>\n"),
              s(:str, "  <blo>\n"),
              s(:str, "    <wak>\n"),
              s(:str, "    </wak>\n"),
              s(:str, "</blo>\n")))),
        s(:def, :test_external_entity,
          s(:args),
          s(:begin,
            s(:lvasgn, :xp,
              s(:str, "//channel/title")),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "working.rss"),
                  s(:str, "broken.rss")), :each),
              s(:args,
                s(:arg, :path)),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:send, nil, :fixture_path,
                      s(:lvar, :path)))),
                s(:args,
                  s(:arg, :file)),
                s(:begin,
                  s(:lvasgn, :doc,
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Document), :new,
                      s(:send,
                        s(:send,
                          s(:lvar, :file), :readlines), :join,
                        s(:str, "")))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :class),
                    s(:const,
                      s(:const, nil, :REXML), :Element)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :doc), :root), :elements), :class),
                    s(:const,
                      s(:const, nil, :REXML), :Elements)),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :doc), :root), :elements), :[],
                        s(:lvar, :xp)), :kind_of?,
                      s(:const,
                        s(:const, nil, :REXML), :Element)))))))),
        s(:def, :test_maintain_dtd,
          s(:args),
          s(:begin,
            s(:lvasgn, :src,
              s(:dstr,
                s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                s(:str, "<!DOCTYPE ivattacks SYSTEM \"../../ivacm.dtd\" [\n"),
                s(:str, "<!ENTITY % extern-packages SYSTEM \"../../ivpackages.dtd\">\n"),
                s(:str, "<!ENTITY % extern-packages SYSTEM \"../../common-declarations.dtd\">\n"),
                s(:str, "%extern-packages;\n"),
                s(:str, "%extern-common;\n"),
                s(:str, "]>"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :src))),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:lvasgn, :src,
              s(:send,
                s(:lvar, :src), :tr,
                s(:str, "\""),
                s(:str, "'"))),
            s(:lvasgn, :out,
              s(:send,
                s(:lvar, :out), :tr,
                s(:str, "\""),
                s(:str, "'"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :src),
              s(:lvar, :out)))),
        s(:def, :test_text_nodes_nomatch,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<root><child>test</child></root>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "/root/child[text()=\"no-test\"]"))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :r), :size)))),
        s(:def, :test_raw_Terje_Elde,
          s(:args),
          s(:begin,
            s(:lvasgn, :f,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new)),
            s(:lvasgn, :txt,
              s(:str, "abc&#248;def")),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:lvar, :txt),
                s(:false),
                s(:nil),
                s(:true))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :a),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :txt),
              s(:lvar, :out)),
            s(:lvasgn, :txt,
              s(:str, "<sean><russell>abc&#248;def</russell></sean>")),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :txt),
                s(:hash,
                  s(:pair,
                    s(:sym, :raw),
                    s(:array,
                      s(:str, "russell")))))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :a),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :txt),
              s(:lvar, :out)))),
        s(:def, :test_indenting_error,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "test1"))),
            s(:lvasgn, :b,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "test2"))),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "test3"))),
            s(:send,
              s(:lvar, :b), :<<,
              s(:lvar, :c)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :b)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new), :write,
              s(:lvar, :a),
              s(:str, "")))),
        s(:def, :test_pos,
          s(:args),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "tempfile")),
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :create,
                s(:str, "tidal")),
              s(:args,
                s(:arg, :testfile)),
              s(:begin,
                s(:lvasgn, :testdata,
                  s(:dstr,
                    s(:str, "<calibration>\n"),
                    s(:str, "<section name=\"parameters\">\n"),
                    s(:str, "<param name=\"barpress\">760</param>\n"),
                    s(:str, "<param name=\"hertz\">50</param>\n"),
                    s(:str, "</section>\n"),
                    s(:str, "</calibration>\n"))),
                s(:send,
                  s(:lvar, :testfile), :puts,
                  s(:lvar, :testdata)),
                s(:send,
                  s(:lvar, :testfile), :rewind),
                s(:block,
                  s(:send, nil, :assert_nothing_raised),
                  s(:args),
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :testfile))))))),
        s(:def, :test_deep_clone,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\"?><!DOCTYPE html PUBLIC\n"),
                  s(:str, "      \"-//W3C//DTD\n"),
                  s(:str, "      XHTML 1.0 Transitional//EN\"\n"),
                  s(:str, "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html\n"),
                  s(:str, "      xmlns=\"http:///www.w3.org/1999/xhtml\"></html>")))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :deep_clone)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :to_s),
              s(:send,
                s(:lvar, :b), :to_s)))),
        s(:def, :test_double_escaping,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:str, "<title>AT&amp;T</title>")),
            s(:lvasgn, :xml,
              s(:dstr,
                s(:str, "<description><![CDATA["),
                s(:begin,
                  s(:lvar, :data)),
                s(:str, "]]></description>"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :xml))),
            s(:lvasgn, :description,
              s(:block,
                s(:send,
                  s(:lvar, :doc), :find),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :name), :==,
                  s(:str, "description")))),
            s(:send, nil, :assert_equal,
              s(:lvar, :data),
              s(:send,
                s(:lvar, :description), :text)))),
        s(:def, :test_ticket_12,
          s(:args),
          s(:begin,
            s(:lvasgn, :cfg,
              s(:str, "<element><anotherelement><child1>a</child1><child2>b</child2></anotherelement></element>")),
            s(:lvasgn, :config,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :cfg))),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :config), :elements), :[],
                  s(:str, "//child1")), :text))))))))
