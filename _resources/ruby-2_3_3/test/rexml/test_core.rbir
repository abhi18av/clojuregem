s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/output")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:send, nil, :require,
    s(:str, "rexml/formatters/pretty")),
  s(:send, nil, :require,
    s(:str, "rexml/undefinednamespaceexception")),
  s(:send, nil, :require_relative,
    s(:str, "listener")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :Tester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXMLTestUtils)),
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :setup,
          s(:args),
          s(:ivasgn, :@xsa_source,
            s(:dstr,
              s(:str, "        <?xml version=\"1.0\"?>\n"),
              s(:str, "        <?xsl stylesheet=\"blah.xsl\"?>\n"),
              s(:str, "        <!-- The first line tests the XMLDecl, the second tests PI.\n"),
              s(:str, "        The next line tests DocType. This line tests comments. -->\n"),
              s(:str, "        <!DOCTYPE xsa PUBLIC\n"),
              s(:str, "          \"-//LM Garshol//DTD XML Software Autoupdate 1.0//EN//XML\"\n"),
              s(:str, "          \"http://www.garshol.priv.no/download/xsa/xsa.dtd\">\n"),
              s(:str, "\n"),
              s(:str, "        <xsa>\n"),
              s(:str, "          <vendor id=\"blah\">\n"),
              s(:str, "            <name>Lars Marius Garshol</name>\n"),
              s(:str, "            <email>larsga@garshol.priv.no</email>\n"),
              s(:str, "            <url>http://www.stud.ifi.uio.no/~lmariusg/</url>\n"),
              s(:str, "          </vendor>\n"),
              s(:str, "        </xsa>\n")))),
        s(:def, :test_bad_markup,
          s(:args),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "<pkg='version'> foo </pkg>"),
                s(:str, "<0/>"),
                s(:str, "<a>&</a>"),
                s(:str, "<a>&a</a>"),
                s(:str, "<a a=\"<\"/>"),
                s(:str, "<a 3=\"<\"/>"),
                s(:str, "<a a=\"1\" a=\"2\"/>"),
                s(:str, "<a><!-- -- --></a>"),
                s(:str, "<a><!-- ---></a>"),
                s(:str, "<a>&#x00;</a>"),
                s(:str, "<a>&#0;</a>"),
                s(:str, "<a a='&#0;' />"),
                s(:str, "<a>\f</a>"),
                s(:str, "<a a='\f' />"),
                s(:str, "<a>\x00</a>"),
                s(:str, "<a>&#xfffe;</a>"),
                s(:str, "<a>&#65535;</a>")), :each),
            s(:args,
              s(:arg, :src)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException),
                s(:dstr,
                  s(:str, "Parse "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :src), :inspect)),
                  s(:str, " should have failed!"))),
              s(:args),
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :src))))),
        s(:def, :test_attribute,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a att=\"A\">blah</a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :each),
              s(:args,
                s(:arg, :a)),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :a), :attributes), :[],
                    s(:str, "att")), :<<,
                  s(:str, "B")),
                s(:send, nil, :assert_equal,
                  s(:str, "AB"),
                  s(:send,
                    s(:send,
                      s(:lvar, :a), :attributes), :[],
                    s(:str, "att"))),
                s(:send,
                  s(:send,
                    s(:lvar, :a), :attributes), :[]=,
                  s(:str, "att"),
                  s(:str, "C")),
                s(:send, nil, :assert_equal,
                  s(:str, "C"),
                  s(:send,
                    s(:send,
                      s(:lvar, :a), :attributes), :[],
                    s(:str, "att"))))),
            s(:lvasgn, :text,
              s(:str, "this is a {target[@name='test']/@value} test")),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <?xml version=\"1.0\"?>\n"),
                s(:str, "      <doc search=\""),
                s(:begin,
                  s(:lvar, :text)),
                s(:str, "\"/>\n"))),
            s(:lvasgn, :xml,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :value,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :xml), :root), :attributes), :[],
                s(:str, "search"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :text),
              s(:send,
                s(:lvar, :value), :to_s)),
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "test"))),
            s(:send,
              s(:lvar, :e), :add_attributes,
              s(:hash,
                s(:pair,
                  s(:str, "name1"),
                  s(:str, "test1")),
                s(:pair,
                  s(:str, "name4"),
                  s(:str, "test4")))),
            s(:send,
              s(:lvar, :e), :add_attributes,
              s(:array,
                s(:array,
                  s(:str, "name3"),
                  s(:str, "test3")),
                s(:array,
                  s(:str, "name2"),
                  s(:str, "test2")))),
            s(:send, nil, :assert_equal,
              s(:str, "test1"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :[],
                s(:str, "name1"))),
            s(:send, nil, :assert_equal,
              s(:str, "test2"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :[],
                s(:str, "name2"))),
            s(:send, nil, :assert_equal,
              s(:str, "test3"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :[],
                s(:str, "name3"))),
            s(:send, nil, :assert_equal,
              s(:str, "test4"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :[],
                s(:str, "name4"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:array,
                  s(:str, "<test"),
                  s(:str, "name1='test1'"),
                  s(:str, "name2='test2'"),
                  s(:str, "name3='test3'"),
                  s(:str, "name4='test4'/>")), :join,
                s(:str, " ")),
              s(:send,
                s(:lvar, :e), :to_s)))),
        s(:def, :test_cdata,
          s(:args),
          s(:begin,
            s(:lvasgn, :test,
              s(:dstr,
                s(:str, "The quick brown fox jumped\n"),
                s(:str, "        & < & < \" '\n"),
                s(:str, "      over the lazy dog."))),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<a><![CDATA["),
                s(:begin,
                  s(:lvar, :test)),
                s(:str, "]]></a>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :cdata,
              s(:send,
                s(:send,
                  s(:lvar, :d), :[],
                  s(:int, 0)), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:lvar, :test),
              s(:send,
                s(:lvar, :cdata), :value)))),
        s(:def, :test_comment,
          s(:args),
          s(:begin,
            s(:lvasgn, :string,
              s(:str, "This is a new comment!")),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<!--"),
                s(:begin,
                  s(:lvar, :string)),
                s(:str, "-->"))),
            s(:lvasgn, :comment,
              s(:send,
                s(:const, nil, :Comment), :new,
                s(:lvar, :string))),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new), :write,
              s(:lvar, :comment),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:lvar, :out)),
            s(:lvasgn, :comment2,
              s(:send,
                s(:const, nil, :Comment), :new,
                s(:lvar, :comment))),
            s(:send, nil, :assert_equal,
              s(:lvar, :comment),
              s(:lvar, :comment2)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<d><!- foo --></d>"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<d><!-- foo -></d>"))))),
        s(:def, :test_whitespace,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<root-element><first-element/></root-element>"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :size)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "<root-element>\n"),
                  s(:str, "      <first-element/>\n"),
                  s(:str, "      </root-element>")))),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :size)),
            s(:lvasgn, :text,
              s(:dstr,
                s(:str, "  This is   text\n"),
                s(:str, "      with a lot of   whitespace   "))),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<a>"),
                s(:begin,
                  s(:lvar, :text)),
                s(:str, "<b>"),
                s(:begin,
                  s(:lvar, :text)),
                s(:str, "</b><c>"),
                s(:begin,
                  s(:lvar, :text)),
                s(:str, "</c>"),
                s(:begin,
                  s(:lvar, :text)),
                s(:str, "</a>"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source),
                s(:hash,
                  s(:pair,
                    s(:sym, :respect_whitespace),
                    s(:array,
                      s(:str, "a"),
                      s(:str, "c")))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :text),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "//c")), :text)),
            s(:lvasgn, :string,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :each),
              s(:args,
                s(:arg, :n)),
              s(:if,
                s(:send,
                  s(:lvar, :n), :kind_of?,
                  s(:const, nil, :Text)),
                s(:send,
                  s(:lvar, :string), :<<,
                  s(:send,
                    s(:lvar, :n), :to_s)), nil)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :text), :+,
                s(:lvar, :text)),
              s(:lvar, :string)),
            s(:lvasgn, :string,
              s(:dstr,
                s(:str, "   lots   of    blank\n"),
                s(:str, "      space"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :add_element,
                  s(:str, "d")), :add_element,
                s(:str, "c")), :text=,
              s(:lvar, :string)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :add_element,
                s(:str, "e")), :text=,
              s(:lvar, :string)),
            s(:send, nil, :assert_equal,
              s(:lvar, :string),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "/a/d/c")), :text)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :string), :!=,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "/a/e")), :text)),
              s(:str, "Text wasn't properly compressed")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source),
                s(:hash,
                  s(:pair,
                    s(:sym, :respect_whitespace),
                    s(:sym, :all))))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :add_element,
                s(:str, "d")), :text=,
              s(:lvar, :string)),
            s(:send, nil, :assert_equal,
              s(:lvar, :text),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :text)),
            s(:lvasgn, :nxt,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :each),
              s(:args,
                s(:arg, :n)),
              s(:if,
                s(:send,
                  s(:lvar, :n), :kind_of?,
                  s(:const, nil, :Text)),
                s(:send,
                  s(:lvar, :nxt), :<<,
                  s(:send,
                    s(:lvar, :n), :to_s)), nil)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :text), :+,
                s(:lvar, :text)),
              s(:lvar, :nxt)),
            s(:send, nil, :assert_equal,
              s(:lvar, :text),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:str, "b")), :text)),
            s(:send, nil, :assert_equal,
              s(:lvar, :text),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:str, "c")), :text)),
            s(:send, nil, :assert_equal,
              s(:lvar, :string),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:str, "d")), :text)))),
        s(:def, :test_doctype,
          s(:args),
          s(:begin,
            s(:lvasgn, :string,
              s(:str, "something")),
            s(:lvasgn, :correct,
              s(:str, "<!DOCTYPE something>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :DocType), :new,
                s(:lvar, :string))),
            s(:send, nil, :assert_equal,
              s(:lvar, :string),
              s(:send,
                s(:lvar, :doc), :name)),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :correct),
              s(:lvar, :out)),
            s(:lvasgn, :doc2,
              s(:send,
                s(:const, nil, :DocType), :new,
                s(:lvar, :doc))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :doc), :name),
              s(:send,
                s(:lvar, :doc2), :name)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :doc), :external_id),
              s(:send,
                s(:lvar, :doc2), :external_id)),
            s(:lvasgn, :correct,
              s(:str, "<!DOCTYPE xsa PUBLIC \"-//LM Garshol//DTD XML Software Autoupdate 1.0//EN//XML\" \"http://www.garshol.priv.no/download/xsa/xsa.dtd\">")),
            s(:lvasgn, :one_line_source,
              s(:str, "<!DOCTYPE xsa PUBLIC \"-//LM Garshol//DTD XML Software Autoupdate 1.0//EN//XML\" \"http://www.garshol.priv.no/download/xsa/xsa.dtd\"><a/>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :one_line_source))),
            s(:lvasgn, :doc,
              s(:send,
                s(:lvar, :doc), :[],
                s(:int, 0))),
            s(:send, nil, :assert,
              s(:lvar, :doc)),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :test,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :correct),
              s(:lvar, :test)),
            s(:lvasgn, :multi_line_source,
              s(:dstr,
                s(:str, "<!DOCTYPE xsa PUBLIC\n"),
                s(:str, "      \"-//LM Garshol//DTD XML Software Autoupdate 1.0//EN//XML\"\n"),
                s(:str, "      \"http://www.garshol.priv.no/download/xsa/xsa.dtd\">\n"),
                s(:str, "      <a/>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :multi_line_source))),
            s(:lvasgn, :doc,
              s(:send,
                s(:lvar, :d), :[],
                s(:int, 0))),
            s(:send, nil, :assert,
              s(:lvar, :doc)),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :test,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :correct),
              s(:lvar, :test)),
            s(:lvasgn, :odd_space_source,
              s(:dstr,
                s(:str, "  <!DOCTYPE\n"),
                s(:str, "      xsa      PUBLIC                 \"-//LM Garshol//DTD XML Software Autoupdate 1.0//EN//XML\"\n"),
                s(:str, "      \"http://www.garshol.priv.no/download/xsa/xsa.dtd\">   <a/>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :odd_space_source))),
            s(:lvasgn, :dt,
              s(:send,
                s(:lvar, :d), :doctype)),
            s(:send,
              s(:lvar, :dt), :write,
              s(:lvasgn, :test,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :correct),
              s(:lvar, :test)),
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "doctype_test.xml"))),
                s(:args,
                  s(:arg, :docin)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :docin)))),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvasgn, :test,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:int, 31),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :doctype), :size)))),
        s(:def, :test_document,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<element/>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :name), :to_s),
              s(:str, "element")),
            s(:lvasgn, :source,
              s(:ivar, :@xsa_source)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :XMLDecl),
              s(:send,
                s(:lvar, :doc), :xml_decl)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :DocType),
              s(:send,
                s(:lvar, :doc), :doctype)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :doc), :version),
              s(:str, "1.0")),
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "dash.xml"))),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :s)))),
            s(:send, nil, :assert_equal,
              s(:str, "content-2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "//content-2")), :name)))),
        s(:def, :test_instruction,
          s(:args),
          s(:begin,
            s(:lvasgn, :target,
              s(:str, "use")),
            s(:lvasgn, :content,
              s(:str, "ruby")),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<?"),
                s(:begin,
                  s(:lvar, :target)),
                s(:str, " "),
                s(:begin,
                  s(:lvar, :content)),
                s(:str, "?>"))),
            s(:lvasgn, :instruction,
              s(:send,
                s(:const, nil, :Instruction), :new,
                s(:lvar, :target),
                s(:lvar, :content))),
            s(:lvasgn, :instruction2,
              s(:send,
                s(:const, nil, :Instruction), :new,
                s(:lvar, :instruction))),
            s(:send, nil, :assert_equal,
              s(:lvar, :instruction),
              s(:lvar, :instruction2)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new), :write,
              s(:lvar, :instruction),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:lvar, :out)),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :instruction2,
              s(:send,
                s(:lvar, :d), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :instruction), :to_s),
              s(:send,
                s(:lvar, :instruction2), :to_s)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<d><?foo bar></d>"))))),
        s(:def, :test_parent,
          s(:args),
          s(:begin,
            s(:lvasgn, :parent,
              s(:send,
                s(:const, nil, :Parent), :new)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :parent), :<<,
                  s(:str, "Something")),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)), nil,
                  s(:begin,
                    s(:send,
                      s(:lvar, :parent), :<<,
                      s(:send,
                        s(:const, nil, :Comment), :new,
                        s(:str, "Some comment"))),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:lvar, :parent), :size), :==,
                        s(:int, 1)),
                      s(:str, "size of parent should be 1")))),
                s(:send, nil, :assert_fail,
                  s(:send,
                    s(:str, "should have gotten an exception trying to add a "), :+,
                    s(:str, "String to a Parent"))))),
            s(:lvasgn, :source,
              s(:str, "<a><one/><three/><five/></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :three,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :[],
                s(:str, "three"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :insert_before,
              s(:lvar, :three),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "two"))),
            s(:lvasgn, :nxt,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :[],
                s(:str, "one"))),
            s(:lvasgn, :string,
              s(:str, "")),
            s(:while,
              s(:lvar, :nxt),
              s(:begin,
                s(:send,
                  s(:lvar, :string), :<<,
                  s(:send,
                    s(:lvar, :nxt), :name)),
                s(:lvasgn, :nxt,
                  s(:send,
                    s(:lvar, :nxt), :next_sibling)))),
            s(:send, nil, :assert_equal,
              s(:str, "onetwothreefive"),
              s(:lvar, :string)),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :insert_after,
              s(:lvar, :three),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "four"))),
            s(:lvasgn, :string,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :each),
              s(:args,
                s(:arg, :element)),
              s(:send,
                s(:lvar, :string), :<<,
                s(:send,
                  s(:lvar, :element), :name))),
            s(:send, nil, :assert_equal,
              s(:str, "onetwothreefourfive"),
              s(:lvar, :string)),
            s(:lvasgn, :string,
              s(:str, "")),
            s(:lvasgn, :nxt,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :[],
                s(:str, "five"))),
            s(:while,
              s(:lvar, :nxt),
              s(:begin,
                s(:send,
                  s(:lvar, :string), :<<,
                  s(:send,
                    s(:lvar, :nxt), :name)),
                s(:lvasgn, :nxt,
                  s(:send,
                    s(:lvar, :nxt), :previous_sibling)))),
            s(:send, nil, :assert_equal,
              s(:str, "fivefourthreetwoone"),
              s(:lvar, :string)),
            s(:send,
              s(:lvar, :doc), :insert_after,
              s(:str, "//two"),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "two-and-half"))),
            s(:lvasgn, :string,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :name)), :join)),
            s(:send, nil, :assert_equal,
              s(:str, "onetwotwo-and-halfthreefourfive"),
              s(:lvar, :string)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "/a/five")), :insert_before,
              s(:str, "../four"),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "three-and-half"))),
            s(:lvasgn, :string,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :name)), :join)),
            s(:send, nil, :assert_equal,
              s(:str, "onetwotwo-and-halfthreethree-and-halffourfive"),
              s(:lvar, :string)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "/a/five")), :previous_sibling=,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "four-and-half"))),
            s(:lvasgn, :string,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :name)), :join)),
            s(:send, nil, :assert_equal,
              s(:str, "onetwotwo-and-halfthreethree-and-halffourfour-and-halffive"),
              s(:lvar, :string)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "/a/one")), :next_sibling=,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "one-and-half"))),
            s(:lvasgn, :string,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :name)), :join)),
            s(:send, nil, :assert_equal,
              s(:str, "oneone-and-halftwotwo-and-halfthreethree-and-halffourfour-and-halffive"),
              s(:lvar, :string)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><one/><three/></a>"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :[]=,
              s(:int, 1),
              s(:int, 0),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "two"))),
            s(:lvasgn, :string,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :each),
              s(:args,
                s(:arg, :el)),
              s(:send,
                s(:lvar, :string), :<<,
                s(:send,
                  s(:lvar, :el), :name))),
            s(:send, nil, :assert_equal,
              s(:str, "onetwothree"),
              s(:lvar, :string)))),
        s(:def, :test_source,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:ivar, :@xsa_source)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :name), :to_s),
              s(:str, "xsa")),
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "project.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :f)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :name), :to_s),
              s(:str, "Project")))),
        s(:def, :test_text,
          s(:args),
          s(:begin,
            s(:lvasgn, :f,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new)),
            s(:lvasgn, :string,
              s(:str, "Some text")),
            s(:lvasgn, :text,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:lvar, :string))),
            s(:send, nil, :assert_equal,
              s(:lvar, :string),
              s(:send,
                s(:lvar, :text), :to_s)),
            s(:lvasgn, :text2,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:lvar, :text))),
            s(:send, nil, :assert_equal,
              s(:lvar, :text),
              s(:lvar, :text2)),
            s(:lvasgn, :string,
              s(:str, "0 < ( 1 & 1 )")),
            s(:lvasgn, :correct,
              s(:str, "0 &lt; ( 1 &amp; 1 )")),
            s(:lvasgn, :text,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:lvar, :string),
                s(:true))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :text),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :correct),
              s(:lvar, :out)),
            s(:lvasgn, :string,
              s(:str, "Cats &amp; dogs")),
            s(:lvasgn, :text,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:lvar, :string),
                s(:false),
                s(:nil),
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:lvar, :string),
              s(:send,
                s(:lvar, :text), :to_s)),
            s(:lvasgn, :string2,
              s(:dstr,
                s(:str, "<a>"),
                s(:begin,
                  s(:lvar, :string)),
                s(:str, "</a>"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :string2),
                s(:hash,
                  s(:pair,
                    s(:sym, :raw),
                    s(:array,
                      s(:str, "a"),
                      s(:str, "b")))))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :doc),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :string2),
              s(:lvar, :out)),
            s(:lvasgn, :b,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :add_element,
                s(:str, "b"))),
            s(:send,
              s(:lvar, :b), :text=,
              s(:lvar, :string)),
            s(:send, nil, :assert_equal,
              s(:lvar, :string),
              s(:send,
                s(:send,
                  s(:lvar, :b), :get_text), :to_s)),
            s(:lvasgn, :c,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :add_element,
                s(:str, "c"))),
            s(:send,
              s(:lvar, :c), :text=,
              s(:lvar, :string)),
            s(:send, nil, :assert_equal,
              s(:str, "Cats &amp;amp; dogs"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :get_text), :to_s)),
            s(:lvasgn, :string,
              s(:str, "<a>&amp;<b>&lt;</b><c>&gt;<d>&quot;</d></c></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :string),
                s(:hash,
                  s(:pair,
                    s(:sym, :raw),
                    s(:sym, :all))))),
            s(:send, nil, :assert_equal,
              s(:str, "&amp;"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "/a")), :[],
                  s(:int, 0)), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "&"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "/a")), :text)),
            s(:send, nil, :assert_equal,
              s(:str, "&lt;"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "/a/b")), :[],
                  s(:int, 0)), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "<"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "/a/b")), :text)),
            s(:send, nil, :assert_equal,
              s(:str, "&gt;"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "/a/c")), :[],
                  s(:int, 0)), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, ">"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "/a/c")), :text)),
            s(:send, nil, :assert_equal,
              s(:str, "&quot;"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "//d")), :[],
                  s(:int, 0)), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "\""),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :[],
                  s(:str, "//d")), :text)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b/></a>"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :text=,
              s(:str, "Sean")),
            s(:send, nil, :assert_equal,
              s(:str, "<a><b/>Sean</a>"),
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :text=,
              s(:str, "Elliott")),
            s(:send, nil, :assert_equal,
              s(:str, "<a><b/>Elliott</a>"),
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :add_element,
              s(:str, "c")),
            s(:send, nil, :assert_equal,
              s(:str, "<a><b/>Elliott<c/></a>"),
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :text=,
              s(:str, "Russell")),
            s(:send, nil, :assert_equal,
              s(:str, "<a><b/>Russell<c/></a>"),
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :text=,
              s(:nil)),
            s(:send, nil, :assert_equal,
              s(:str, "<a><b/><c/></a>"),
              s(:send,
                s(:lvar, :doc), :to_s)))),
        s(:def, :test_text_frozen,
          s(:args),
          s(:begin,
            s(:lvasgn, :string,
              s(:send,
                s(:str, "Frozen"), :freeze)),
            s(:lvasgn, :text,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:lvar, :string))),
            s(:send, nil, :assert_equal,
              s(:lvar, :string),
              s(:send,
                s(:lvar, :text), :to_s)))),
        s(:def, :test_xmldecl,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<?xml version='1.0'?>")),
            s(:lvasgn, :decl2,
              s(:send,
                s(:const, nil, :XMLDecl), :new)),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:send,
                s(:lvar, :decl2), :to_s)),
            s(:lvasgn, :decl2,
              s(:send,
                s(:const, nil, :XMLDecl), :new,
                s(:str, "1.0"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:send,
                s(:lvar, :decl2), :to_s)))),
        s(:def, :test_xmldecl_utf_16be_encoding_name,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "<?xml version='1.0' encoding='UTF-16'?>"),
            s(:send,
              s(:send,
                s(:const, nil, :XMLDecl), :new,
                s(:str, "1.0"),
                s(:str, "UTF-16")), :to_s))),
        s(:def, :each_test,
          s(:args,
            s(:arg, :element),
            s(:arg, :xpath),
            s(:arg, :num_children)),
          s(:begin,
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:lvar, :element), :each_element,
                s(:lvar, :xpath)),
              s(:args,
                s(:arg, :child)),
              s(:begin,
                s(:op_asgn,
                  s(:lvasgn, :count), :+,
                  s(:int, 1)),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :child)), nil))),
            s(:send, nil, :assert_equal,
              s(:lvar, :num_children),
              s(:lvar, :count)))),
        s(:def, :test_element_access,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "project.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :f)))),
            s(:block,
              s(:send, nil, :each_test,
                s(:lvar, :doc),
                s(:str, "/"),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :doc), :name),
                s(:send,
                  s(:lvar, :child), :name))),
            s(:block,
              s(:send, nil, :each_test,
                s(:lvar, :doc),
                s(:str, "."),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:lvar, :doc),
                s(:lvar, :child))),
            s(:block,
              s(:send, nil, :each_test,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, ".."),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:lvar, :doc),
                s(:lvar, :child))),
            s(:send, nil, :each_test,
              s(:send,
                s(:lvar, :doc), :root),
              s(:str, "*"),
              s(:int, 5)),
            s(:block,
              s(:send, nil, :each_test,
                s(:lvar, :doc),
                s(:str, "Project/Datasets"),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:str, "Datasets"),
                s(:send,
                  s(:lvar, :child), :name))),
            s(:send, nil, :each_test,
              s(:lvar, :doc),
              s(:str, "Project/Datasets/link"),
              s(:int, 2)),
            s(:block,
              s(:send, nil, :each_test,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "/Project/Description"),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:str, "Description"),
                s(:send,
                  s(:lvar, :child), :name))),
            s(:block,
              s(:send, nil, :each_test,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "./Description"),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:str, "Description"),
                s(:send,
                  s(:lvar, :child), :name))),
            s(:block,
              s(:send, nil, :each_test,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "../Project"),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:lvar, :child))),
            s(:lvasgn, :first,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "Project"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :doc), :root),
              s(:lvar, :first)),
            s(:lvasgn, :second,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "Project")), :elements), :[],
                s(:int, 1))),
            s(:lvasgn, :third,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "Project/Creator"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :second),
              s(:lvar, :third)),
            s(:lvasgn, :fourth,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "Project/Datasets/link[@idref='18']"))),
            s(:send, nil, :assert_equal,
              s(:str, "Test data 1"),
              s(:send,
                s(:send,
                  s(:lvar, :fourth), :attributes), :[],
                s(:str, "name"))),
            s(:block,
              s(:send, nil, :each_test,
                s(:lvar, :doc),
                s(:str, "Project/Datasets/link[@idref='18']"),
                s(:int, 1)),
              s(:args,
                s(:arg, :child)),
              s(:send, nil, :assert_equal,
                s(:str, "Test data 1"),
                s(:send,
                  s(:send,
                    s(:lvar, :child), :attributes), :[],
                  s(:str, "name")))),
            s(:lvasgn, :creator,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :[],
                s(:str, "//Creator"))),
            s(:lvasgn, :lm,
              s(:send,
                s(:lvar, :creator), :next_element)),
            s(:send, nil, :assert_equal,
              s(:str, "LastModifier"),
              s(:send,
                s(:lvar, :lm), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "Creator"),
              s(:send,
                s(:send,
                  s(:lvar, :lm), :previous_element), :name)))),
        s(:def, :test_child,
          s(:args),
          s(:begin,
            s(:lvasgn, :sean,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "Sean"))),
            s(:lvasgn, :rubbell,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "Rubbell"))),
            s(:lvasgn, :elliott,
              s(:send,
                s(:lvar, :sean), :add_element,
                s(:str, "Elliott"))),
            s(:send,
              s(:lvar, :sean), :<<,
              s(:lvar, :rubbell)),
            s(:send, nil, :assert_equal,
              s(:lvar, :elliott),
              s(:send,
                s(:lvar, :rubbell), :previous_sibling)),
            s(:send, nil, :assert_equal,
              s(:lvar, :rubbell),
              s(:send,
                s(:lvar, :elliott), :next_sibling)),
            s(:lvasgn, :russell,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "Russell"))),
            s(:send,
              s(:lvar, :rubbell), :replace_with,
              s(:lvar, :russell)),
            s(:send, nil, :assert_equal,
              s(:lvar, :elliott),
              s(:send,
                s(:lvar, :russell), :previous_sibling)),
            s(:send, nil, :assert_equal,
              s(:lvar, :russell),
              s(:send,
                s(:lvar, :elliott), :next_sibling)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :russell), :document)),
            s(:send, nil, :assert_equal,
              s(:lvar, :sean),
              s(:send,
                s(:lvar, :russell), :root)))),
        s(:def, :test_element,
          s(:args),
          s(:begin,
            s(:lvasgn, :sean,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "Sean"))),
            s(:lvasgn, :string,
              s(:str, "1) He's a great guy!")),
            s(:send,
              s(:lvar, :sean), :text=,
              s(:lvar, :string)),
            s(:lvasgn, :russell,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "Russell"))),
            s(:send,
              s(:lvar, :sean), :<<,
              s(:lvar, :russell)),
            s(:send,
              s(:send,
                s(:lvar, :russell), :attributes), :[]=,
              s(:str, "email"),
              s(:str, "ser@germane-software.com")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :russell), :attributes), :[],
                s(:str, "email")),
              s(:str, "ser@germane-software.com")),
            s(:send,
              s(:send,
                s(:lvar, :russell), :attributes), :[]=,
              s(:str, "webpage"),
              s(:str, "http://www.germane-software.com/~ser")),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :sean), :has_text?),
              s(:str, "element should have text")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :sean), :text),
              s(:lvar, :string)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :sean), :has_elements?),
              s(:str, "element should have one element")),
            s(:lvasgn, :string,
              s(:str, "2) What a stud!")),
            s(:send,
              s(:lvar, :sean), :add_text,
              s(:lvar, :string)),
            s(:send,
              s(:lvar, :sean), :text=,
              s(:str, "3) Super programmer!")),
            s(:send,
              s(:lvar, :sean), :text=,
              s(:nil)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :sean), :has_text?),
              s(:str, "element should still have text")),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :sean), :text),
              s(:lvar, :string)),
            s(:send,
              s(:lvar, :russell), :delete_attribute,
              s(:str, "email")),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :russell), :attributes), :[],
                s(:str, "email"))),
            s(:send,
              s(:send,
                s(:lvar, :russell), :attributes), :delete,
              s(:str, "webpage")),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :russell), :has_attributes?), :!),
              s(:str, "element should have no attributes")))),
        s(:def, :test_no_format,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b><c>blah</c><d/></b></a>")),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :out)),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:lvar, :out)))),
        s(:def, :test_namespace,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <x xmlns:foo=\"http://www.bar.com/schema\">\n"),
                s(:str, "      </x>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:str, "http://www.bar.com/schema"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :namespace,
                s(:str, "foo"))),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <!-- bar namespace is \"someuri\" -->\n"),
                s(:str, "      <foo:bar xmlns=\"default\" xmlns:foo=\"someuri\">\n"),
                s(:str, "      <!-- a namespace is \"default\" -->\n"),
                s(:str, "      <a/>\n"),
                s(:str, "      <!-- foo:b namespace is \"someuri\" -->\n"),
                s(:str, "      <foo:b>\n"),
                s(:str, "      <!-- c namespace is \"default\" -->\n"),
                s(:str, "      <c/>\n"),
                s(:str, "      </foo:b>\n"),
                s(:str, "      <!-- d namespace is \"notdefault\" -->\n"),
                s(:str, "      <d xmlns=\"notdefault\">\n"),
                s(:str, "      <!-- e namespace is \"notdefault\" -->\n"),
                s(:str, "      <e/>\n"),
                s(:str, "      <f xmlns=\"\">\n"),
                s(:str, "      <g/>\n"),
                s(:str, "      </f>\n"),
                s(:str, "      </d>\n"),
                s(:str, "      </foo:bar>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:str, "someuri"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :namespace)),
            s(:send, nil, :assert_equal,
              s(:str, "default"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 1)), :namespace)),
            s(:send, nil, :assert_equal,
              s(:str, "someuri"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 2)), :namespace)),
            s(:send, nil, :assert_equal,
              s(:str, "notdefault"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 3)), :namespace)),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <a xmlns:b=\"uri\">\n"),
                s(:str, "      <b b:a=\"x\" a=\"y\"/>\n"),
                s(:str, "      <c xmlns=\"foo\">\n"),
                s(:str, "      </c>\n"),
                s(:str, "      </a>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :b,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :[],
                s(:str, "b"))),
            s(:send, nil, :assert_equal,
              s(:str, "x"),
              s(:send,
                s(:send,
                  s(:lvar, :b), :attributes), :[],
                s(:str, "b:a"))),
            s(:send, nil, :assert_equal,
              s(:str, "y"),
              s(:send,
                s(:send,
                  s(:lvar, :b), :attributes), :[],
                s(:str, "a"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new)),
            s(:send,
              s(:lvar, :doc), :add_element,
              s(:str, "sean:blah")),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :text=,
              s(:str, "Some text")),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :out)),
            s(:send, nil, :assert_equal,
              s(:str, "<sean:blah>Some text</sean:blah>"),
              s(:lvar, :out)))),
        s(:def, :test_add_namespace,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "a"))),
            s(:send,
              s(:lvar, :e), :add_namespace,
              s(:str, "someuri")),
            s(:send,
              s(:lvar, :e), :add_namespace,
              s(:str, "foo"),
              s(:str, "otheruri")),
            s(:send,
              s(:lvar, :e), :add_namespace,
              s(:str, "xmlns:bar"),
              s(:str, "thirduri")),
            s(:send, nil, :assert_equal,
              s(:str, "someuri"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :[],
                s(:str, "xmlns"))),
            s(:send, nil, :assert_equal,
              s(:str, "otheruri"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :[],
                s(:str, "xmlns:foo"))),
            s(:send, nil, :assert_equal,
              s(:str, "thirduri"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :[],
                s(:str, "xmlns:bar"))))),
        s(:def, :test_big_documentation,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "documentation.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :f)))),
            s(:send, nil, :assert_equal,
              s(:str, "Sean Russell"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :d), :elements), :[],
                      s(:str, "documentation/head/author")), :text), :tr,
                  s(:str, "\n\t"),
                  s(:str, " ")), :squeeze,
                s(:str, " "))),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:send,
              s(:lvar, :d), :write,
              s(:lvar, :out)))),
        s(:def, :test_tutorial,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "tutorial.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :f)))),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :out)))),
        s(:def, :test_stream,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Listener), :new)),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:send, nil, :fixture_path,
                  s(:str, "documentation.xml"))),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const, nil, :Document), :parse_stream,
                s(:lvar, :f),
                s(:lvar, :c))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :c), :ts),
              s(:str, "Stream parsing apparently didn't parse the whole file")),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :c), :te),
              s(:str, "Stream parsing dropped end tag for documentation")),
            s(:send,
              s(:const, nil, :Document), :parse_stream,
              s(:str, "<a.b> <c/> </a.b>"),
              s(:lvar, :c)),
            s(:send,
              s(:const, nil, :Document), :parse_stream,
              s(:str, "<a>&lt;&gt;&amp;</a>"),
              s(:lvar, :c)),
            s(:send, nil, :assert_equal,
              s(:str, "<>&"),
              s(:send,
                s(:lvar, :c), :normalize)))),
        s(:def, :test_line,
          s(:args),
          s(:ensure,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :f,
                  s(:send,
                    s(:const, nil, :File), :new,
                    s(:send, nil, :fixture_path,
                      s(:str, "bad.xml")))),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :f)),
                s(:send, nil, :assert_fail,
                  s(:str, "There should have been an error"))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:gvar, :$!), :line), :==,
                    s(:int, 5)),
                  s(:send,
                    s(:str, "Should have been an error on line 5, "), :+,
                    s(:dstr,
                      s(:str, "but was reported as being on line "),
                      s(:begin,
                        s(:send,
                          s(:gvar, :$!), :line)))))), nil),
            s(:if,
              s(:lvar, :f),
              s(:send,
                s(:lvar, :f), :close), nil))),
        s(:def, :test_substitution,
          s(:args),
          s(:begin,
            s(:lvasgn, :val,
              s(:str, "a'b\"c")),
            s(:lvasgn, :el,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "a"))),
            s(:send,
              s(:send,
                s(:lvar, :el), :attributes), :[]=,
              s(:str, "x"),
              s(:lvar, :val)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Default), :new), :write,
              s(:lvar, :el),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:lvasgn, :nel,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :out))),
            s(:send, nil, :assert_equal,
              s(:lvar, :val),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :nel), :root), :attributes), :[],
                s(:str, "x"))))),
        s(:def, :test_exception,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:send,
                s(:const, nil, :SourceFactory), :create_from,
                s(:str, "<a/>"))),
            s(:lvasgn, :p,
              s(:send,
                s(:const, nil, :ParseException), :new,
                s(:str, "dummy message"),
                s(:lvar, :source))),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :raise,
                  s(:str, "dummy")),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)), nil,
                  s(:send,
                    s(:lvar, :p), :continued_exception=,
                    s(:gvar, :$!))), nil)))),
        s(:def, :test_bad_content,
          s(:args),
          s(:begin,
            s(:lvasgn, :in_gt,
              s(:str, "<root-el>content>content</root-el>")),
            s(:lvasgn, :in_lt,
              s(:str, "<root-el>content<content</root-el>")),
            s(:lvasgn, :tree_gt,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :in_gt))),
            s(:send, nil, :assert_equal,
              s(:str, "content>content"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :tree_gt), :elements), :[],
                  s(:int, 1)), :text)),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:send,
                    s(:const, nil, :Document), :new,
                    s(:lvar, :in_lt)),
                  s(:send, nil, :assert_fail,
                    s(:str, "Should have gotten a parse error"))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :ParseException)), nil, nil), nil)))),
        s(:def, :test_iso_8859_1_output_function,
          s(:args),
          s(:begin,
            s(:lvasgn, :out,
              s(:str, "")),
            s(:lvasgn, :output,
              s(:send,
                s(:const, nil, :Output), :new,
                s(:lvar, :out))),
            s(:lvasgn, :koln_iso_8859_1,
              s(:str, "K\xF6ln")),
            s(:lvasgn, :koln_utf8,
              s(:str, "K\xC3\xB6ln")),
            s(:lvasgn, :source,
              s(:send,
                s(:const, nil, :Source), :new,
                s(:lvar, :koln_iso_8859_1),
                s(:str, "iso-8859-1"))),
            s(:lvasgn, :results,
              s(:send,
                s(:send,
                  s(:lvar, :source), :scan,
                  s(:regexp,
                    s(:str, ".*"),
                    s(:regopt))), :[],
                s(:int, 0))),
            s(:if,
              s(:send,
                s(:lvar, :koln_utf8), :respond_to?,
                s(:sym, :force_encoding)),
              s(:send,
                s(:lvar, :koln_utf8), :force_encoding,
                s(:str, "UTF-8")), nil),
            s(:send, nil, :assert_equal,
              s(:lvar, :koln_utf8),
              s(:lvar, :results)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:lvar, :results)),
            s(:if,
              s(:send,
                s(:lvar, :koln_iso_8859_1), :respond_to?,
                s(:sym, :force_encoding)),
              s(:send,
                s(:lvar, :koln_iso_8859_1), :force_encoding,
                s(:str, "ISO-8859-1")), nil),
            s(:send, nil, :assert_equal,
              s(:lvar, :koln_iso_8859_1),
              s(:lvar, :out)))),
        s(:def, :test_attributes_each,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:a='foo'><b x='1' y='2' z='3' a:x='4'/></a>"))),
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :[],
                    s(:int, 1)), :attributes), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:op_asgn,
                s(:lvasgn, :count), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:lvar, :count)))),
        s(:def, :test_delete_namespace,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns='1' xmlns:x='2'/>"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :delete_namespace),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :delete_namespace,
              s(:str, "x")),
            s(:send, nil, :assert_equal,
              s(:str, "<a/>"),
              s(:send,
                s(:lvar, :doc), :to_s)))),
        s(:def, :test_each_element_with_attribute,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b id='1'/><c id='2'/><d id='1'/><e/></a>"))),
            s(:lvasgn, :arry,
              s(:array)),
            s(:lvasgn, :block,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :e)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :arry), :include?,
                      s(:send,
                        s(:lvar, :e), :name))),
                  s(:send,
                    s(:lvar, :arry), :delete,
                    s(:send,
                      s(:lvar, :e), :name))))),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "b"),
                s(:str, "c"),
                s(:str, "d"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_attribute,
              s(:str, "id"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "b"),
                s(:str, "d"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_attribute,
              s(:str, "id"),
              s(:str, "1"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "b"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_attribute,
              s(:str, "id"),
              s(:str, "1"),
              s(:int, 1),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "d"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_attribute,
              s(:str, "id"),
              s(:str, "1"),
              s(:int, 0),
              s(:str, "d"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)))),
        s(:def, :test_each_element_with_text,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b>b</b><c>b</c><d>d</d><e/></a>"))),
            s(:lvasgn, :arry,
              s(:array)),
            s(:lvasgn, :block,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :e)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :arry), :include?,
                      s(:send,
                        s(:lvar, :e), :name))),
                  s(:send,
                    s(:lvar, :arry), :delete,
                    s(:send,
                      s(:lvar, :e), :name))))),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "b"),
                s(:str, "c"),
                s(:str, "d"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_text,
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "b"),
                s(:str, "c"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_text,
              s(:str, "b"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "b"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_text,
              s(:str, "b"),
              s(:int, 1),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)),
            s(:lvasgn, :arry,
              s(:array,
                s(:str, "d"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :each_element_with_text,
              s(:nil),
              s(:int, 0),
              s(:str, "d"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :arry), :size)))),
        s(:def, :test_element_parse_stream,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :Source), :new,
                s(:str, "<a>some text</a>"))),
            s(:lvasgn, :l,
              s(:send,
                s(:const, nil, :Listener), :new)),
            s(:sclass,
              s(:lvar, :l),
              s(:def, :tag_start,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :attributes)),
                s(:if,
                  s(:send,
                    s(:str, "a"), :==,
                    s(:lvar, :name)), nil,
                  s(:send, nil, :raise,
                    s(:str, "Didn't find proper tag name"))))),
            s(:send,
              s(:const, nil, :Document), :parse_stream,
              s(:lvar, :s),
              s(:lvar, :l)))),
        s(:def, :test_deep_clone,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<?xml version=\"1\"?><a x=\"y\"><b>text</b>text<c><d><e>text</e></d></c></a>"))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :deep_clone)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :to_s),
              s(:send,
                s(:lvar, :b), :to_s)),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a>some &lt; text <b> more &gt; text </b> &gt; </a>"))),
            s(:lvasgn, :b,
              s(:send,
                s(:lvar, :a), :deep_clone)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :to_s),
              s(:send,
                s(:lvar, :b), :to_s)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:send,
                  s(:lvar, :b), :to_s))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :a), :to_s),
              s(:send,
                s(:lvar, :c), :to_s)))),
        s(:def, :test_whitespace_before_root,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:dstr,
                s(:str, "<?xml version='1.0'?>\n"),
                s(:str, "  <blo>\n"),
                s(:str, "    <wak>\n"),
                s(:str, "    </wak>\n"),
                s(:str, "  </blo>\n"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :a))),
            s(:lvasgn, :b,
              s(:str, "")),
            s(:send,
              s(:lvar, :d), :write,
              s(:lvar, :b)),
            s(:send, nil, :assert_equal,
              s(:lvar, :a),
              s(:lvar, :b)))),
        s(:def, :test_entities,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a>&#101;&#x65;&#252;</a>"))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:str, "ee\xC3\xBC"), :force_encoding,
                s(:str, "UTF-8")),
              s(:send,
                s(:send,
                  s(:lvar, :a), :root), :text)))),
        s(:def, :test_element_decl,
          s(:args),
          s(:begin,
            s(:lvasgn, :element_decl,
              s(:send,
                s(:const, nil, :Source), :new,
                s(:dstr,
                  s(:str, "<!DOCTYPE foo [\n"),
                  s(:str, "<!ELEMENT bar (#PCDATA)>\n"),
                  s(:str, "]>")))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :element_decl))),
            s(:lvasgn, :d,
              s(:send,
                s(:lvar, :doc), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:str, "<!ELEMENT bar (#PCDATA)>"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :d), :to_s), :split,
                    s(:regexp,
                      s(:str, "\\n"),
                      s(:regopt))), :[],
                  s(:int, 1)), :strip)))),
        s(:def, :test_attlist_decl,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "      <!DOCTYPE blah [\n"),
                  s(:str, "      <!ATTLIST blah\n"),
                  s(:str, "        xmlns    CDATA    \"foo\">\n"),
                  s(:str, "      <!ATTLIST a\n"),
                  s(:str, "        bar          CDATA \"gobble\"\n"),
                  s(:str, "        xmlns:one    CDATA  \"two\"\n"),
                  s(:str, "      >\n"),
                  s(:str, "      ]>\n"),
                  s(:str, "      <a xmlns:three='xxx' three='yyy'><one:b/><three:c/></a>\n")))),
            s(:send, nil, :assert_equal,
              s(:str, "gobble"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "bar"))),
            s(:send, nil, :assert_equal,
              s(:str, "xxx"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 2)), :namespace)),
            s(:send, nil, :assert_equal,
              s(:str, "two"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 1)), :namespace)),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :namespace)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "      <?xml version=\"1.0\"?>\n"),
                  s(:str, "      <!DOCTYPE schema SYSTEM \"XMLSchema.dtd\" [\n"),
                  s(:str, "      <!ENTITY % p ''>\n"),
                  s(:str, "      <!ENTITY % s ''>\n"),
                  s(:str, "      <!ATTLIST schema\n"),
                  s(:str, "        xmlns:svg CDATA #FIXED \"http://www.w3.org/2000/svg\"\n"),
                  s(:str, "        xmlns:xlink CDATA #FIXED \"http://www.w3.org/1999/xlink\"\n"),
                  s(:str, "        xmlns:xml CDATA #FIXED \"http://www.w3.org/XML/1998/namespace\"\n"),
                  s(:str, "      >]>\n"),
                  s(:str, "      <schema/>\n")))),
            s(:lvasgn, :prefixes,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :prefixes), :sort)),
            s(:lvasgn, :correct,
              s(:array,
                s(:str, "svg"),
                s(:str, "xlink"),
                s(:str, "xml"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :correct),
              s(:lvar, :prefixes)))),
        s(:def, :test_attlist_write,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "foo.xml"))),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :file)))),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :out)))),
        s(:def, :test_more_namespaces,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :REXML), :UndefinedNamespaceException),
                s(:str, "Should have gotten an Undefined Namespace error")),
              s(:args),
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<r><p><n:c/></p></r>"))),
            s(:lvasgn, :doc2,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<r xmlns:n='1'><p><n:c/></p></r>"))),
            s(:lvasgn, :es,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :doc2),
                s(:str, "//c"))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :es), :size)),
            s(:lvasgn, :es,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :doc2),
                s(:str, "//n:c"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :es), :size)),
            s(:send,
              s(:send,
                s(:lvar, :doc2), :root), :add_namespace,
              s(:str, "m"),
              s(:str, "2")),
            s(:send,
              s(:send,
                s(:lvar, :doc2), :root), :add_element,
              s(:str, "m:o")),
            s(:lvasgn, :es,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :doc2),
                s(:str, ".//o"))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :es), :size)),
            s(:lvasgn, :es,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :doc2),
                s(:str, "//n:c"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :es), :size)))),
        s(:def, :test_ticket_51,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "        <test xmlns='1' xmlns:x='1'>\n"),
                  s(:str, "           <a>X</a>\n"),
                  s(:str, "           <x:a>Y</x:a>\n"),
                  s(:str, "\n"),
                  s(:str, "           <b xmlns='2'>\n"),
                  s(:str, "             <a>Z</a>\n"),
                  s(:str, "           </b>\n"),
                  s(:str, "        </test>\n")))),
            s(:send, nil, :assert_equal,
              s(:str, "XY"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/test/a/text()")), :join)),
            s(:send, nil, :assert_equal,
              s(:str, "XY"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/test/x:a/text()")), :join)),
            s(:send, nil, :assert_equal,
              s(:str, "XYZ"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//a/text()")), :join)),
            s(:send, nil, :assert_equal,
              s(:str, "XY"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/f:test/f:a/text()"),
                  s(:hash,
                    s(:pair,
                      s(:str, "f"),
                      s(:str, "1")))), :join)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/test/a/text()"),
                  s(:hash,
                    s(:pair,
                      s(:str, "f"),
                      s(:str, "1")))), :join)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/x:test/x:a/text()"),
                  s(:hash,
                    s(:pair,
                      s(:str, "f"),
                      s(:str, "1")))), :join)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//a/text()"),
                  s(:hash,
                    s(:pair,
                      s(:str, "f"),
                      s(:str, "1")))), :join)))),
        s(:def, :test_processing_instruction,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><?foo bar?><?foo2 bar2?><b><?foo3 bar3?></b><?foo4 bar4?></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:str, "//processing-instruction()")), :size)),
            s(:lvasgn, :match,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :d),
                s(:str, "//processing-instruction('foo3')"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :match), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "bar3"),
              s(:send,
                s(:send,
                  s(:lvar, :match), :[],
                  s(:int, 0)), :content)))),
        s(:def, :test_oses_with_bad_EOLs,
          s(:args),
          s(:send,
            s(:const, nil, :Document), :new,
            s(:str, "\n\n\n<?xml version='1.0'?>\n\n\n<a/>\n\n"))),
        s(:def, :test_ignore_whitespace,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a> <b/> abc <![CDATA[def]]>  </a>")),
            s(:lvasgn, :context_all,
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_whitespace_nodes),
                  s(:sym, :all)))),
            s(:lvasgn, :context_a,
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_whitespace_nodes),
                  s(:str, "a")))),
            s(:lvasgn, :context_b,
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_whitespace_nodes),
                  s(:str, "b")))),
            s(:lvasgn, :tests,
              s(:array,
                s(:array,
                  s(:array,
                    s(:str, " abc "),
                    s(:str, "def")),
                  s(:lvar, :context_all)),
                s(:array,
                  s(:array,
                    s(:str, " abc "),
                    s(:str, "def")),
                  s(:lvar, :context_a)),
                s(:array,
                  s(:array,
                    s(:str, " "),
                    s(:str, " abc "),
                    s(:str, "def"),
                    s(:str, "  ")),
                  s(:lvar, :context_b)))),
            s(:block,
              s(:send,
                s(:lvar, :tests), :each),
              s(:args,
                s(:arg, :test)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :test), :[],
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Document), :new,
                          s(:lvar, :source),
                          s(:send,
                            s(:lvar, :test), :[],
                            s(:int, 1))), :root), :texts), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :to_s)))))),
        s(:def, :test_0xD_in_preface,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:str, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r<opml version=\"1.0\">\r</opml>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :doc))))),
        s(:def, :test_hyphens_in_doctype,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "       <?xml version=\"1.0\"?>\n"),
                  s(:str, "       <!DOCTYPE a-b-c>\n"),
                  s(:str, "       <a-b-c>\n"),
                  s(:str, "         <a/>\n"),
                  s(:str, "       </a-b-c>\n")))),
            s(:send, nil, :assert_equal,
              s(:str, "a-b-c"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :doctype), :name)))),
        s(:def, :test_accents,
          s(:args),
          s(:begin,
            s(:lvasgn, :docs,
              s(:array,
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"),
                  s(:str, "<gnuPod>\n"),
                  s(:str, "<files>\n"),
                  s(:str, "  <file id=\"57\"  artist=\"Coralie Cl\xEF\xBF\xBDent\" />\n"),
                  s(:str, "</files>\n"),
                  s(:str, "</gnuPod>")),
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"),
                  s(:str, "<gnuPod>\n"),
                  s(:str, "<files>\n"),
                  s(:str, "    <file id=\"71\"  album=\"Astrakan Caf\" />\n"),
                  s(:str, "</files>\n"),
                  s(:str, "</gnuPod>")),
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"),
                  s(:str, "<gnuPod>\n"),
                  s(:str, "<files>\n"),
                  s(:str, "    <file id=\"71\"  album=\"Astrakan Caf\xEF\xBF\xBDeria\" />\n"),
                  s(:str, "</files>\n"),
                  s(:str, "</gnuPod>")),
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"),
                  s(:str, "<gnuPod>\n"),
                  s(:str, "<files>\n"),
                  s(:str, "    <file id=\"71\"  album=\"Astrakan Caf\xEF\xBF\xBD\" />\n"),
                  s(:str, "</files>\n"),
                  s(:str, "</gnuPod>")))),
            s(:block,
              s(:send,
                s(:lvar, :docs), :each_with_index),
              s(:args,
                s(:arg, :d),
                s(:arg, :i)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :d)),
                  s(:resbody, nil, nil,
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :i)),
                          s(:str, " => "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :docs), :[],
                              s(:lvar, :i))))),
                      s(:send, nil, :raise))), nil))))),
        s(:def, :test_replace_text,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"))),
            s(:send,
              s(:lvar, :e), :add_text,
              s(:str, "foo")),
            s(:send, nil, :assert_equal,
              s(:str, "<a>foo</a>"),
              s(:send,
                s(:lvar, :e), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :e), :[],
                s(:int, 0)), :value=,
              s(:str, "bar")),
            s(:send, nil, :assert_equal,
              s(:str, "<a>bar</a>"),
              s(:send,
                s(:lvar, :e), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :e), :[],
                s(:int, 0)), :value=,
              s(:str, "<")),
            s(:send, nil, :assert_equal,
              s(:str, "<a>&lt;</a>"),
              s(:send,
                s(:lvar, :e), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "<"),
              s(:send,
                s(:send,
                  s(:lvar, :e), :[],
                  s(:int, 0)), :value)))),
        s(:def, :test_write_doctype,
          s(:args),
          s(:begin,
            s(:lvasgn, :document,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new)),
            s(:lvasgn, :xmldecl,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XMLDecl), :new,
                s(:str, "1.0"),
                s(:str, "UTF-8"))),
            s(:send,
              s(:lvar, :document), :add,
              s(:lvar, :xmldecl)),
            s(:lvasgn, :s,
              s(:str, "")),
            s(:send,
              s(:lvar, :document), :write,
              s(:lvar, :s)),
            s(:lvasgn, :str,
              s(:str, "<!DOCTYPE foo \"bar\">")),
            s(:lvasgn, :source,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Source), :new,
                s(:lvar, :str))),
            s(:lvasgn, :doctype,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :DocType), :new,
                s(:lvar, :source))),
            s(:send,
              s(:lvar, :document), :add,
              s(:lvar, :doctype)),
            s(:send,
              s(:lvar, :document), :write,
              s(:lvar, :s)),
            s(:lvasgn, :element,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "hoge"))),
            s(:send,
              s(:lvar, :document), :add,
              s(:lvar, :element)),
            s(:send,
              s(:lvar, :document), :write,
              s(:lvar, :s)))),
        s(:def, :test_write_cdata,
          s(:args),
          s(:begin,
            s(:lvasgn, :src,
              s(:str, "<a>A</a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :src))),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :out)),
            s(:send, nil, :assert_equal,
              s(:lvar, :src),
              s(:lvar, :out)),
            s(:lvasgn, :src,
              s(:str, "<a><![CDATA[A]]></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :src))),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :out)),
            s(:send, nil, :assert_equal,
              s(:lvar, :src),
              s(:lvar, :out)))),
        s(:def, :test_namespace_attributes,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <a xmlns:x=\"1\">\n"),
                s(:str, "        <x:b x:n=\"foo\"/>\n"),
                s(:str, "      </a>\n"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "//x:b/@x:n")), :value)),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "//x:b/@x:n"),
                s(:hash))))),
        s(:def, :test_null_element_name,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new)),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send,
                s(:lvar, :a), :add_element,
                s(:nil))))),
        s(:def, :test_text_raw,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "      <?xml version=\"1.0\"?>\n"),
                  s(:str, "      <!DOCTYPE schema SYSTEM \"XMLSchema.dtd\" [\n"),
                  s(:str, "      <!ENTITY % s 'Sean'>\n"),
                  s(:str, "      ]>\n"),
                  s(:str, "      <a/>\n")))),
            s(:lvasgn, :a,
              s(:send,
                s(:lvar, :doc), :root)),
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:str, "Sean"),
                s(:false),
                s(:nil),
                s(:true))),
            s(:send,
              s(:lvar, :a), :text=,
              s(:lvar, :t)),
            s(:send, nil, :assert_equal,
              s(:str, "Sean"),
              s(:send,
                s(:lvar, :t), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "Sean"),
              s(:send,
                s(:lvar, :t), :value)),
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:str, "Sean"),
                s(:false),
                s(:nil),
                s(:false))),
            s(:send,
              s(:lvar, :a), :text=,
              s(:lvar, :t)),
            s(:send, nil, :assert_equal,
              s(:str, "&s;"),
              s(:send,
                s(:lvar, :t), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "Sean"),
              s(:send,
                s(:lvar, :t), :value)),
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:str, "&s;"),
                s(:false),
                s(:nil),
                s(:true))),
            s(:send,
              s(:lvar, :a), :text=,
              s(:lvar, :t)),
            s(:send, nil, :assert_equal,
              s(:str, "&s;"),
              s(:send,
                s(:lvar, :t), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "Sean"),
              s(:send,
                s(:lvar, :t), :value)),
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:str, "&s;"),
                s(:false),
                s(:nil),
                s(:true))),
            s(:send,
              s(:lvar, :a), :text=,
              s(:lvar, :t)),
            s(:send, nil, :assert_equal,
              s(:str, "&s;"),
              s(:send,
                s(:lvar, :t), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "Sean"),
              s(:send,
                s(:lvar, :t), :value)),
            s(:lvasgn, :t,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Text), :new,
                s(:str, "&amp;"),
                s(:false),
                s(:nil),
                s(:true))),
            s(:send, nil, :assert_equal,
              s(:str, "&amp;"),
              s(:send,
                s(:lvar, :t), :to_s)),
            s(:lvasgn, :t,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Text), :new,
                s(:str, "&amp;"),
                s(:false),
                s(:false))),
            s(:send, nil, :assert_equal,
              s(:str, "&amp;amp;"),
              s(:send,
                s(:lvar, :t), :to_s)))),
        s(:def, :test_to_xpath,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "<tag1>\n"),
                  s(:str, "        <tag2 name=\"tag2\"/>\n"),
                  s(:str, "        <tag2 name=\"tag2\"/>\n"),
                  s(:str, "      </tag1>")))),
            s(:lvasgn, :names,
              s(:array,
                s(:str, "/tag1/tag2[1]"),
                s(:str, "/tag1/tag2[2]"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :each_with_index),
              s(:args,
                s(:arg, :el),
                s(:arg, :i)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :names), :[],
                  s(:lvar, :i)),
                s(:send,
                  s(:lvar, :el), :xpath))))),
        s(:def, :test_transitive,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a/>"))),
            s(:lvasgn, :s,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :s),
              s(:int, 0),
              s(:true)))),
        s(:def, :test_replace_with,
          s(:args),
          s(:begin,
            s(:lvasgn, :old,
              s(:str, "<doc>old<foo/>old</doc>")),
            s(:lvasgn, :d,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :old)), :root)),
            s(:lvasgn, :new,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Text), :new,
                s(:str, "new"),
                s(:true),
                s(:nil),
                s(:true))),
            s(:lvasgn, :child,
              s(:send,
                s(:send,
                  s(:lvar, :d), :children), :[],
                s(:int, 2))),
            s(:send,
              s(:lvar, :child), :replace_with,
              s(:lvar, :new)),
            s(:send, nil, :assert_equal,
              s(:lvar, :new),
              s(:send,
                s(:send,
                  s(:lvar, :d), :children), :[],
                s(:int, 2))))),
        s(:def, :test_repeated_writes,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :IO), :read,
                s(:send, nil, :fixture_path,
                  s(:str, "iso8859-1.xml")))),
            s(:lvasgn, :f,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new)),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :a))),
            s(:lvasgn, :a_andre,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :xmldoc), :elements), :[],
                    s(:str, "//image")), :attributes), :[],
                s(:str, "caption"))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :xmldoc),
              s(:lvasgn, :b,
                s(:str, ""))),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :b))),
            s(:lvasgn, :b_andre,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :xmldoc), :elements), :[],
                    s(:str, "//image")), :attributes), :[],
                s(:str, "caption"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :a_andre),
              s(:lvar, :b_andre)),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :xmldoc),
              s(:lvasgn, :c,
                s(:str, ""))),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :c))),
            s(:lvasgn, :c_andre,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :xmldoc), :elements), :[],
                    s(:str, "//image")), :attributes), :[],
                s(:str, "caption"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :b_andre),
              s(:lvar, :c_andre)),
            s(:lvasgn, :o,
              s(:send,
                s(:const, nil, :Output), :new,
                s(:lvasgn, :d,
                  s(:str, "")),
                s(:str, "UTF-8"))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :xmldoc),
              s(:lvar, :o)),
            s(:send, nil, :assert_not_equal,
              s(:lvar, :c),
              s(:lvar, :d)))),
        s(:def, :test_pretty_format_long_text_finite,
          s(:args),
          s(:begin,
            s(:lvasgn, :n,
              s(:int, 1000000)),
            s(:lvasgn, :long_text,
              s(:send,
                s(:str, "aaaa "), :*,
                s(:lvar, :n))),
            s(:lvasgn, :xml,
              s(:dstr,
                s(:str, "<doc>"),
                s(:begin,
                  s(:lvar, :long_text)),
                s(:str, "</doc>"))),
            s(:lvasgn, :formatter,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new)),
            s(:lvasgn, :document,
              s(:nil)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :document,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :xml))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :REXML), :ParseException)), nil,
                  s(:begin,
                    s(:lvasgn, :skip_message,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:str, "skip this test because we can't check Pretty#wrap "), :+,
                            s(:str, "works without #<SystemStackError: stack level too deep> on ")), :+,
                          s(:str, "small memory system. #<RegexpError: failed to allocate memory> ")), :+,
                        s(:str, "will be raised on the system. See also [ruby-dev:42599]."))),
                    s(:return,
                      s(:lvar, :skip_message)))), nil)),
            s(:lvasgn, :output,
              s(:str, "")),
            s(:send,
              s(:lvar, :formatter), :write,
              s(:lvar, :document),
              s(:lvar, :output)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "<doc>\n"), :+,
                        s(:begin,
                          s(:send,
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:str, " "), :+,
                                  s(:begin,
                                    s(:send,
                                      s(:str, " aaaa"), :*,
                                      s(:int, 15)))), :+,
                                s(:str, "\n"))), :*,
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :/,
                                s(:int, 15)))))), :+,
                      s(:str, "  ")), :+,
                    s(:begin,
                      s(:send,
                        s(:str, "aaaa "), :*,
                        s(:begin,
                          s(:send,
                            s(:lvar, :n), :%,
                            s(:int, 15)))))), :+,
                  s(:str, "\n")), :+,
                s(:str, "</doc>")),
              s(:lvar, :output)))),
        s(:def, :test_pretty_format_deep_indent,
          s(:args),
          s(:begin,
            s(:lvasgn, :n,
              s(:int, 6)),
            s(:lvasgn, :elements,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:lvar, :n), :times),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:send,
                  s(:lvar, :elements), :<<,
                  s(:dstr,
                    s(:str, "<element"),
                    s(:begin,
                      s(:lvar, :i)),
                    s(:str, ">"))),
                s(:send,
                  s(:lvar, :elements), :<<,
                  s(:send,
                    s(:dstr,
                      s(:str, "element"),
                      s(:begin,
                        s(:lvar, :i)),
                      s(:str, " ")), :*,
                    s(:int, 5))))),
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :n), :-,
                    s(:int, 1))), :downto,
                s(:int, 0)),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :elements), :<<,
                s(:dstr,
                  s(:str, "</element"),
                  s(:begin,
                    s(:lvar, :i)),
                  s(:str, ">")))),
            s(:lvasgn, :xml,
              s(:dstr,
                s(:str, "<doc>"),
                s(:begin,
                  s(:lvar, :elements)),
                s(:str, "</doc>"))),
            s(:lvasgn, :document,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :xml))),
            s(:lvasgn, :formatter,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new)),
            s(:send,
              s(:lvar, :formatter), :width=,
              s(:int, 20)),
            s(:lvasgn, :output,
              s(:str, "")),
            s(:send,
              s(:lvar, :formatter), :write,
              s(:lvar, :document),
              s(:lvar, :output)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "<doc>\n"),
                  s(:str, "  <element0>\n"),
                  s(:str, "    element0\n"),
                  s(:str, "    element0\n"),
                  s(:str, "    element0\n"),
                  s(:str, "    element0\n"),
                  s(:str, "    element0 \n"),
                  s(:str, "    <element1>\n"),
                  s(:str, "      element1\n"),
                  s(:str, "      element1\n"),
                  s(:str, "      element1\n"),
                  s(:str, "      element1\n"),
                  s(:str, "      element1 \n"),
                  s(:str, "      <element2>\n"),
                  s(:str, "        element2\n"),
                  s(:str, "        element2\n"),
                  s(:str, "        element2\n"),
                  s(:str, "        element2\n"),
                  s(:str, "        element2 \n"),
                  s(:str, "        <element3>\n"),
                  s(:str, "          element3\n"),
                  s(:str, "          element3\n"),
                  s(:str, "          element3\n"),
                  s(:str, "          element3\n"),
                  s(:str, "          element3 \n"),
                  s(:str, "          <element4>\n"),
                  s(:str, "            element4\n"),
                  s(:str, "            element4\n"),
                  s(:str, "            element4\n"),
                  s(:str, "            element4\n"),
                  s(:str, "            element4\n"),
                  s(:str, "            \n"),
                  s(:str, "            <element5>\n"),
                  s(:str, "              element5 element5 element5 element5 element5 \n"),
                  s(:str, "            </element5>\n"),
                  s(:str, "          </element4>\n"),
                  s(:str, "        </element3>\n"),
                  s(:str, "      </element2>\n"),
                  s(:str, "    </element1>\n"),
                  s(:str, "  </element0>\n"),
                  s(:str, "</doc>\n")), :strip),
              s(:lvar, :output)))),
        s(:def, :test_ticket_58,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new)),
            s(:send,
              s(:lvar, :doc), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XMLDecl), :default)),
            s(:send,
              s(:lvar, :doc), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"))),
            s(:lvasgn, :str,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :str)),
            s(:send, nil, :assert_equal,
              s(:str, "<a/>"),
              s(:lvar, :str)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new)),
            s(:send,
              s(:lvar, :doc), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XMLDecl), :new,
                s(:str, "1.0"),
                s(:str, "UTF-8"))),
            s(:send,
              s(:lvar, :doc), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"))),
            s(:lvasgn, :str,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :str)),
            s(:send, nil, :assert_equal,
              s(:str, "<?xml version='1.0' encoding='UTF-8'?><a/>"),
              s(:lvar, :str)))),
        s(:def, :test_ticket_53,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :REXML), :ParseException)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a><b></a>"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :REXML), :ParseException)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a><b>"))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :REXML), :ParseException)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a><b/>"))))),
        s(:def, :test_ticket_52,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<!-- this is a single line comment -->")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:send,
              s(:lvar, :d), :write,
              s(:lvasgn, :k,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:lvar, :k)),
            s(:lvasgn, :source,
              s(:str, "<a><!-- Comment --></a>")),
            s(:lvasgn, :target,
              s(:str, "<a>\n    <!-- Comment -->\n</a>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new,
                s(:int, 4)), :write,
              s(:lvar, :d),
              s(:lvasgn, :k,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :target),
              s(:lvar, :k)))),
        s(:def, :test_ticket_76,
          s(:args),
          s(:begin,
            s(:lvasgn, :src,
              s(:str, "<div>at&t")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException),
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:lvar, :src)),
                  s(:str, "\" is invalid XML"))),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :src))))),
        s(:def, :test_ticket_21,
          s(:args),
          s(:begin,
            s(:lvasgn, :src,
              s(:str, "<foo bar=value/>")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException),
                s(:str, "invalid XML should be caught")),
              s(:args),
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :src))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :src)),
                s(:resbody, nil, nil,
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "missing attribute quote"),
                      s(:regopt)),
                    s(:send,
                      s(:gvar, :$!), :message))), nil)))),
        s(:def, :test_ticket_63,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:send, nil, :fixture_path,
                s(:str, "t63-1.xml"))),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:const, nil, :Document), :new,
              s(:lvar, :f)))),
        s(:def, :test_ticket_75,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "t75.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :f)))),
            s(:send, nil, :assert_equal,
              s(:str, "tree"),
              s(:send,
                s(:send,
                  s(:lvar, :d), :root), :name)))),
        s(:def, :test_ticket_48_part_II,
          s(:args),
          s(:begin,
            s(:lvasgn, :f,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new)),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<test/>"))),
            s(:send,
              s(:lvar, :xmldoc), :<<,
              s(:send,
                s(:const, nil, :XMLDecl), :new,
                s(:const,
                  s(:const, nil, :XMLDecl), :DEFAULT_VERSION),
                s(:str, "UTF-8"))),
            s(:lvasgn, :content,
              s(:send,
                s(:array,
                  s(:str, "61c3a927223c3e26")), :pack,
                s(:str, "H*"))),
            s(:if,
              s(:send,
                s(:lvar, :content), :respond_to?,
                s(:sym, :force_encoding)),
              s(:send,
                s(:lvar, :content), :force_encoding,
                s(:str, "UTF-8")), nil),
            s(:send,
              s(:send,
                s(:lvar, :xmldoc), :root), :add_attribute,
              s(:str, "attr"),
              s(:lvar, :content)),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :xmldoc),
              s(:lvasgn, :out,
                s(:array))),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :out), :join))),
            s(:lvasgn, :sanity1,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :xmldoc), :root), :attributes), :[],
                s(:str, "attr"))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :xmldoc),
              s(:lvasgn, :out,
                s(:array))),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :out), :join))),
            s(:lvasgn, :sanity2,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :xmldoc), :root), :attributes), :[],
                s(:str, "attr"))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :xmldoc),
              s(:lvasgn, :out,
                s(:array))),
            s(:send, nil, :assert_equal,
              s(:lvar, :sanity1),
              s(:lvar, :sanity2)))),
        s(:def, :test_ticket_88,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<?xml version=\"1.0\" encoding=\"shift_jis\"?>"))),
            s(:send, nil, :assert_equal,
              s(:str, "<?xml version='1.0' encoding='SHIFT_JIS'?>"),
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<?xml version = \"1.0\" encoding = \"shift_jis\"?>"))),
            s(:send, nil, :assert_equal,
              s(:str, "<?xml version='1.0' encoding='SHIFT_JIS'?>"),
              s(:send,
                s(:lvar, :doc), :to_s)))),
        s(:def, :test_ticket_85,
          s(:args),
          s(:begin,
            s(:lvasgn, :xml,
              s(:dstr,
                s(:str, "<foo>\n"),
                s(:str, "  <bar>\n"),
                s(:str, "    <bob name='jimmy'/>\n"),
                s(:str, "  </bar>\n"),
                s(:str, "</foo>\n"))),
            s(:lvasgn, :yml,
              s(:dstr,
                s(:str, "<foo>\n"),
                s(:str, "  <bar>\n"),
                s(:str, "    <bob name='jimmy'/>\n"),
                s(:str, "  </bar>\n"),
                s(:str, "</foo>"))),
            s(:lvasgn, :f,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new,
                s(:int, 2))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :xml),
                s(:hash,
                  s(:pair,
                    s(:sym, :ignore_whitespace_nodes),
                    s(:sym, :all))))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :d),
              s(:lvasgn, :output1,
                s(:str, ""))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :xml))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :d),
              s(:lvasgn, :output2,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :output1),
              s(:lvar, :output2)),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :yml))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :d),
              s(:lvasgn, :output3,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :output3), :strip),
              s(:send,
                s(:lvar, :output2), :strip)),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :yml))),
            s(:send,
              s(:lvar, :f), :write,
              s(:lvar, :d),
              s(:lvasgn, :output4,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :output3), :strip),
              s(:send,
                s(:lvar, :output4), :strip)))),
        s(:def, :test_ticket_91,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<root>\n"),
                s(:str, "        <bah something='1' somethingelse='bah'>\n"),
                s(:str, "          <something>great</something>\n"),
                s(:str, "        </bah>\n"),
                s(:str, "      </root>"))),
            s(:lvasgn, :expected,
              s(:dstr,
                s(:str, "<root>\n"),
                s(:str, "  <bah something='1' somethingelse='bah'>\n"),
                s(:str, "    <something>great</something>\n"),
                s(:str, "  </bah>\n"),
                s(:str, "  <bah/>\n"),
                s(:str, "</root>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send,
              s(:send,
                s(:lvar, :d), :root), :add_element,
              s(:str, "bah")),
            s(:lvasgn, :p,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new,
                s(:int, 2))),
            s(:send,
              s(:lvar, :p), :compact=,
              s(:true)),
            s(:send,
              s(:lvar, :p), :write,
              s(:lvar, :d),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :out)))),
        s(:def, :test_ticket_95,
          s(:args),
          s(:begin,
            s(:lvasgn, :testd,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a><b><c/><c/><c/></b></a>"))),
            s(:send,
              s(:lvar, :testd), :write,
              s(:lvasgn, :out1,
                s(:str, ""))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :testd), :elements), :[],
                s(:str, "//c[2]")), :xpath),
            s(:send,
              s(:lvar, :testd), :write,
              s(:lvasgn, :out2,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:lvar, :out1),
              s(:lvar, :out2)))),
        s(:def, :test_ticket_102,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<doc xmlns=\"ns\"><item name=\"foo\"/></doc>"))),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :[],
                    s(:str, "item")), :attribute,
                  s(:str, "name"),
                  s(:str, "ns")), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "item"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:str, "item[@name='foo']")), :name)))),
        s(:def, :test_ticket_14,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :REXML), :UndefinedNamespaceException),
              s(:str, "Should have gotten an Undefined Namespace error")),
            s(:args),
            s(:send,
              s(:const, nil, :Document), :new,
              s(:str, "<a><n:b/></a>")))),
        s(:def, :test_ticket_105,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a/>"))),
            s(:send,
              s(:send,
                s(:lvar, :d), :root), :add_text,
              s(:str, "a")),
            s(:send,
              s(:send,
                s(:lvar, :d), :root), :add_text,
              s(:str, "b")),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :root), :children), :size)))),
        s(:def, :test_ticket_121,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<doc xmlns=\"ns\" xmlns:phantom=\"ns\"><item name=\"foo\">text</item></doc>"))),
            s(:send, nil, :assert_equal,
              s(:str, "text"),
              s(:send,
                s(:lvar, :doc), :text,
                s(:str, "/doc/item[@name='foo']"))),
            s(:send, nil, :assert_equal,
              s(:str, "name='foo'"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :[],
                    s(:str, "item")), :attribute,
                  s(:str, "name"),
                  s(:str, "ns")), :inspect)),
            s(:send, nil, :assert_equal,
              s(:str, "<item name='foo'>text</item>"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:str, "item[@name='foo']")), :to_s)))),
        s(:def, :test_ticket_135,
          s(:args),
          s(:begin,
            s(:lvasgn, :bean_element,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "bean"))),
            s(:lvasgn, :textToAdd,
              s(:str, "(&#38;(|(memberof=CN=somegroupabcdefgh,OU=OUsucks,DC=hookemhorns,DC=com)(mail=*someco.com))(acct=%u)(!(extraparameter:2.2.222.222222.2.2.222:=2)))")),
            s(:send,
              s(:send,
                s(:lvar, :bean_element), :add_element,
                s(:str, "prop"),
                s(:hash,
                  s(:pair,
                    s(:str, "key"),
                    s(:str, "filter")))), :add_text,
              s(:lvar, :textToAdd)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new)),
            s(:send,
              s(:lvar, :doc), :add_element,
              s(:lvar, :bean_element)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Formatters), :Pretty), :new,
                s(:int, 3)), :write,
              s(:lvar, :doc),
              s(:lvasgn, :out,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:str, "<bean>\n   <prop key='filter'>\n      (&amp;#38;(|(memberof=CN=somegroupabcdefgh,OU=OUsucks,DC=hookemhorns,DC=com)(mail=*someco.com))(acct=%u)(!(extraparameter:2.2.222.222222.2.2.222:=2)))\n   </prop>\n</bean>"),
              s(:lvar, :out)))),
        s(:def, :test_ticket_138,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:str, "<svg xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" "), :+,
                  s(:str, "inkscape:version=\"0.44\" version=\"1.0\"/>")))),
            s(:lvasgn, :expected,
              s(:hash,
                s(:pair,
                  s(:str, "inkscape"),
                  s(:send, nil, :attribute,
                    s(:str, "xmlns:inkscape"),
                    s(:str, "http://www.inkscape.org/namespaces/inkscape"))),
                s(:pair,
                  s(:str, "version"),
                  s(:hash,
                    s(:pair,
                      s(:str, "inkscape"),
                      s(:send, nil, :attribute,
                        s(:str, "inkscape:version"),
                        s(:str, "0.44"))),
                    s(:pair,
                      s(:str, ""),
                      s(:send, nil, :attribute,
                        s(:str, "version"),
                        s(:str, "1.0"))))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes)),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :to_s)), :root), :attributes)))),
        s(:def, :test_empty_doc,
          s(:args),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:str, "")), :children), :empty?))),
        s(:send, nil, :private),
        s(:def, :attribute,
          s(:args,
            s(:arg, :name),
            s(:arg, :value)),
          s(:send,
            s(:const,
              s(:const, nil, :REXML), :Attribute), :new,
            s(:lvar, :name),
            s(:lvar, :value)))))))
