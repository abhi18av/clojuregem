s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :Ticket80),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:cvasgn, :@@xmlstr,
          s(:dstr,
            s(:str, "<?xml version=\"1.0\"?>\n"),
            s(:str, "<root xmlns=\"urn:some-xml-ns\" xmlns:other=\"urn:some-other-xml-ns\">\n"),
            s(:str, " <l1-foo>\n"),
            s(:str, "  <l2 value=\"foo-01\"/>\n"),
            s(:str, "  <l2 value=\"foo-02\"/>\n"),
            s(:str, "  <l2 value=\"foo-03\"/>\n"),
            s(:str, " </l1-foo>\n"),
            s(:str, " <other:l1>\n"),
            s(:str, "  <l2 value=\"no-show\"/>\n"),
            s(:str, " </other:l1>\n"),
            s(:str, " <l1-bar>\n"),
            s(:str, "  <l2 value=\"bar-01\"/>\n"),
            s(:str, "  <l2 value=\"bar-02\"/>\n"),
            s(:str, " </l1-bar>\n"),
            s(:str, "</root>"))),
        s(:def, :test_xpathNamespacedChildWildcard,
          s(:args),
          s(:begin,
            s(:lvasgn, :out,
              s(:send,
                s(:const, nil, :Array), :new)),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :each,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:cvar, :@@xmlstr)),
                s(:str, "/ns:root/ns:*/ns:l2/@value"),
                s(:hash,
                  s(:pair,
                    s(:str, "ns"),
                    s(:str, "urn:some-xml-ns")))),
              s(:args,
                s(:arg, :node)),
              s(:send,
                s(:lvar, :out), :push,
                s(:send,
                  s(:lvar, :node), :value))),
            s(:lvasgn, :chk,
              s(:array,
                s(:str, "foo-01"),
                s(:str, "foo-02"),
                s(:str, "foo-03"),
                s(:str, "bar-01"),
                s(:str, "bar-02"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :chk),
              s(:lvar, :out)))),
        s(:def, :test_xpathNamespacedChildWildcardWorkaround,
          s(:args),
          s(:begin,
            s(:lvasgn, :out,
              s(:send,
                s(:const, nil, :Array), :new)),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :each,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:cvar, :@@xmlstr)),
                s(:str, "/ns:root/*[namespace-uri()=\"urn:some-xml-ns\"]/ns:l2/@value"),
                s(:hash,
                  s(:pair,
                    s(:str, "ns"),
                    s(:str, "urn:some-xml-ns")))),
              s(:args,
                s(:arg, :node)),
              s(:send,
                s(:lvar, :out), :push,
                s(:send,
                  s(:lvar, :node), :value))),
            s(:lvasgn, :chk,
              s(:array,
                s(:str, "foo-01"),
                s(:str, "foo-02"),
                s(:str, "foo-03"),
                s(:str, "bar-01"),
                s(:str, "bar-02"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :chk),
              s(:lvar, :out))))))))
