s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/text")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TextTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :test_shift_operator_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :text,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:str, "original\r\n"))),
            s(:send,
              s(:send,
                s(:lvar, :text), :<<,
                s(:str, "append1\r\n")), :<<,
              s(:str, "append2\r\n")),
            s(:send, nil, :assert_equal,
              s(:str, "original\nappend1\nappend2\n"),
              s(:send,
                s(:lvar, :text), :to_s)))),
        s(:def, :test_shift_operator_cache,
          s(:args),
          s(:begin,
            s(:lvasgn, :text,
              s(:send,
                s(:const, nil, :Text), :new,
                s(:str, "original\r\n"))),
            s(:send,
              s(:send,
                s(:lvar, :text), :<<,
                s(:str, "append1\r\n")), :<<,
              s(:str, "append2\r\n")),
            s(:send, nil, :assert_equal,
              s(:str, "original\nappend1\nappend2\n"),
              s(:send,
                s(:lvar, :text), :to_s)),
            s(:send,
              s(:send,
                s(:lvar, :text), :<<,
                s(:str, "append3\r\n")), :<<,
              s(:str, "append4\r\n")),
            s(:send, nil, :assert_equal,
              s(:str, "original\nappend1\nappend2\nappend3\nappend4\n"),
              s(:send,
                s(:lvar, :text), :to_s))))))))
