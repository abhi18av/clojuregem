s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/entity")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :EntityTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_parse_general_decl,
          s(:args),
          s(:begin,
            s(:lvasgn, :simple,
              s(:str, "<!ENTITY foo 'bar'>")),
            s(:send,
              s(:lvar, :simple), :=~,
              s(:regexp,
                s(:begin,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Entity), :GEDECL)),
                s(:regopt))),
            s(:send, nil, :assert,
              s(:back_ref, :$&)),
            s(:send, nil, :assert_equal,
              s(:lvar, :simple),
              s(:back_ref, :$&)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :ENTITYDECL), :=~,
              s(:lvar, :simple)),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :simple))),
            s(:lvasgn, :match,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Entity), :ENTITYDECL), :match,
                s(:lvar, :simple))),
            s(:send, nil, :assert_equal,
              s(:str, "foo"),
              s(:send,
                s(:lvar, :match), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:str, "'bar'"),
              s(:send,
                s(:lvar, :match), :[],
                s(:int, 2))),
            s(:lvasgn, :simple,
              s(:dstr,
                s(:str, "<!ENTITY Pub-Status\n"),
                s(:str, "      \"This is a pre-release of the specification.\">"))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :simple))),
            s(:lvasgn, :match,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Entity), :ENTITYDECL), :match,
                s(:lvar, :simple))),
            s(:send, nil, :assert_equal,
              s(:str, "Pub-Status"),
              s(:send,
                s(:lvar, :match), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:str, "\"This is a pre-release of the specification.\""),
              s(:send,
                s(:lvar, :match), :[],
                s(:int, 2))),
            s(:lvasgn, :txt,
              s(:dstr,
                s(:str, "\"This is a\n"),
                s(:str, "      pre-release of <the> specification.\""))),
            s(:lvasgn, :simple,
              s(:dstr,
                s(:str, "<!ENTITY     Pub-Status\n"),
                s(:str, "      "),
                s(:begin,
                  s(:lvar, :txt)),
                s(:str, ">"))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :simple))),
            s(:lvasgn, :match,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Entity), :ENTITYDECL), :match,
                s(:lvar, :simple))),
            s(:send, nil, :assert_equal,
              s(:str, "Pub-Status"),
              s(:send,
                s(:lvar, :match), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:lvar, :txt),
              s(:send,
                s(:lvar, :match), :[],
                s(:int, 2))))),
        s(:def, :test_parse_external_decl,
          s(:args),
          s(:begin,
            s(:lvasgn, :zero,
              s(:str, "<!ENTITY open-hatch SYSTEM \"http://www.textuality.com/boilerplate/OpenHatch.xml\" >")),
            s(:lvasgn, :one,
              s(:dstr,
                s(:str, "<!ENTITY open-hatch\n"),
                s(:str, "                SYSTEM \"http://www.textuality.com/boilerplate/OpenHatch.xml\">"))),
            s(:lvasgn, :two,
              s(:dstr,
                s(:str, "<!ENTITY open-hatch\n"),
                s(:str, "                PUBLIC \"-//Textuality//TEXT Standard open-hatch boilerplate//EN\"\n"),
                s(:str, "                \"http://www.textuality.com/boilerplate/OpenHatch.xml\">"))),
            s(:lvasgn, :three,
              s(:dstr,
                s(:str, "<!ENTITY hatch-pic\n"),
                s(:str, "                SYSTEM \"../grafix/OpenHatch.gif\"\n"),
                s(:str, "                NDATA gif >"))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :zero))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :one))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :two))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :three))))),
        s(:def, :test_parse_entity,
          s(:args),
          s(:begin,
            s(:lvasgn, :one,
              s(:str, "<!ENTITY % YN '\"Yes\"'>")),
            s(:lvasgn, :two,
              s(:str, "<!ENTITY WhatHeSaid \"He said %YN;\">")),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :one))),
            s(:send, nil, :assert,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Entity), :matches?,
                s(:lvar, :two))))),
        s(:def, :test_constructor,
          s(:args),
          s(:begin,
            s(:lvasgn, :one,
              s(:array,
                s(:str, "<!ENTITY % YN '\"Yes\"'>"),
                s(:str, "<!ENTITY % YN2 \"Yes\">"),
                s(:str, "<!ENTITY WhatHeSaid \"He said %YN;\">"),
                s(:dstr,
                  s(:str, "<!ENTITY open-hatch\n"),
                  s(:str, "                SYSTEM \"http://www.textuality.com/boilerplate/OpenHatch.xml\">")),
                s(:dstr,
                  s(:str, "<!ENTITY open-hatch2\n"),
                  s(:str, "                PUBLIC \"-//Textuality//TEXT Standard open-hatch boilerplate//EN\"\n"),
                  s(:str, "                \"http://www.textuality.com/boilerplate/OpenHatch.xml\">")),
                s(:dstr,
                  s(:str, "<!ENTITY hatch-pic\n"),
                  s(:str, "                SYSTEM \"../grafix/OpenHatch.gif\"\n"),
                  s(:str, "                NDATA gif>")))),
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<!DOCTYPE foo [\n"),
                s(:str, "        <!ENTITY % YN '\"Yes\"'>\n"),
                s(:str, "        <!ENTITY % YN2 \"Yes\">\n"),
                s(:str, "        <!ENTITY WhatHeSaid \"He said %YN;\">\n"),
                s(:str, "        <!ENTITY open-hatch\n"),
                s(:str, "                SYSTEM \"http://www.textuality.com/boilerplate/OpenHatch.xml\">\n"),
                s(:str, "        <!ENTITY open-hatch2\n"),
                s(:str, "                PUBLIC \"-//Textuality//TEXT Standard open-hatch boilerplate//EN\"\n"),
                s(:str, "                \"http://www.textuality.com/boilerplate/OpenHatch.xml\">\n"),
                s(:str, "        <!ENTITY hatch-pic\n"),
                s(:str, "                SYSTEM \"../grafix/OpenHatch.gif\"\n"),
                s(:str, "                NDATA gif>\n"),
                s(:str, "      ]>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :dt,
              s(:send,
                s(:lvar, :d), :doctype)),
            s(:lvasgn, :c,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:lvar, :dt), :each),
              s(:args,
                s(:arg, :child)),
              s(:if,
                s(:send,
                  s(:lvar, :child), :kind_of?,
                  s(:const,
                    s(:const, nil, :REXML), :Entity)),
                s(:begin,
                  s(:lvasgn, :str,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :one), :[],
                          s(:lvar, :c)), :tr,
                        s(:str, "\r\n\t"),
                        s(:str, "   ")), :squeeze,
                      s(:str, " "))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :str),
                    s(:send,
                      s(:lvar, :child), :to_s)),
                  s(:op_asgn,
                    s(:lvasgn, :c), :+,
                    s(:int, 1))), nil)))),
        s(:def, :test_replace_entities,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<!DOCTYPE blah [\n<!ENTITY foo \"bar\">\n]><a>&foo;</a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :text)),
            s(:lvasgn, :out,
              s(:str, "")),
            s(:send,
              s(:lvar, :doc), :write,
              s(:lvar, :out)),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:lvar, :out)))),
        s(:def, :test_entity_string_limit,
          s(:args),
          s(:begin,
            s(:lvasgn, :template,
              s(:str, "<!DOCTYPE bomb [ <!ENTITY a \"^\" > ]> <bomb>$</bomb>")),
            s(:lvasgn, :len,
              s(:int, 5120)),
            s(:send,
              s(:lvar, :template), :sub!,
              s(:regexp,
                s(:str, "\\^"),
                s(:regopt)),
              s(:send,
                s(:str, "B"), :*,
                s(:lvar, :len))),
            s(:lvasgn, :entities,
              s(:send,
                s(:str, "&a;"), :*,
                s(:int, 2))),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :template), :sub,
                  s(:regexp,
                    s(:str, "\\$"),
                    s(:regopt)),
                  s(:lvar, :entities)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :len), :*,
                s(:int, 2)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :xmldoc), :root), :text), :bytesize)),
            s(:lvasgn, :entities,
              s(:send,
                s(:str, "&a;"), :*,
                s(:int, 3))),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :template), :sub,
                  s(:regexp,
                    s(:str, "\\$"),
                    s(:regopt)),
                  s(:lvar, :entities)))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :RuntimeError)),
              s(:args),
              s(:send,
                s(:send,
                  s(:lvar, :xmldoc), :root), :text)))),
        s(:def, :test_entity_string_limit_for_parameter_entity,
          s(:args),
          s(:begin,
            s(:lvasgn, :template,
              s(:str, "<!DOCTYPE bomb [ <!ENTITY % a \"^\" > <!ENTITY bomb \"$\" > ]><root/>")),
            s(:lvasgn, :len,
              s(:int, 5120)),
            s(:send,
              s(:lvar, :template), :sub!,
              s(:regexp,
                s(:str, "\\^"),
                s(:regopt)),
              s(:send,
                s(:str, "B"), :*,
                s(:lvar, :len))),
            s(:lvasgn, :entities,
              s(:send,
                s(:str, "%a;"), :*,
                s(:int, 2))),
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :Document), :new,
              s(:send,
                s(:lvar, :template), :sub,
                s(:regexp,
                  s(:str, "\\$"),
                  s(:regopt)),
                s(:lvar, :entities))),
            s(:lvasgn, :entities,
              s(:send,
                s(:str, "%a;"), :*,
                s(:int, 3))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :REXML), :ParseException)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:lvar, :template), :sub,
                  s(:regexp,
                    s(:str, "\\$"),
                    s(:regopt)),
                  s(:lvar, :entities)))))),
        s(:def, :test_raw,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<!DOCTYPE foo [\n"),
                s(:str, "<!ENTITY ent \"replace\">\n"),
                s(:str, "]><a>replace &ent;</a>"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source),
                s(:hash,
                  s(:pair,
                    s(:sym, :raw),
                    s(:sym, :all))))),
            s(:send, nil, :assert_equal,
              s(:str, "replace &ent;"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :get_text), :to_s)),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:send,
                s(:lvar, :doc), :to_s)))),
        s(:def, :test_lazy_evaluation,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<!DOCTYPE foo [\n"),
                s(:str, "<!ENTITY ent \"replace\">\n"),
                s(:str, "]><a>replace &ent;</a>"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "replace replace"),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :text)),
            s(:send, nil, :assert_equal,
              s(:lvar, :source),
              s(:send,
                s(:lvar, :doc), :to_s)))),
        s(:def, :test_entity_replacement,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<!DOCTYPE foo [\n"),
                s(:str, "      <!ENTITY % YN '\"Yes\"'>\n"),
                s(:str, "      <!ENTITY WhatHeSaid \"He said %YN;\">]>\n"),
                s(:str, "      <a>&WhatHeSaid;</a>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :dt,
              s(:send,
                s(:lvar, :d), :doctype)),
            s(:send, nil, :assert_equal,
              s(:str, "\"Yes\""),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dt), :entities), :[],
                  s(:str, "YN")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "He said \"Yes\""),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :dt), :entities), :[],
                  s(:str, "WhatHeSaid")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "He said \"Yes\""),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :[],
                  s(:int, 1)), :text)))),
        s(:def, :test_entity_insertions,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "&amp;"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Text), :new,
                s(:str, "&amp;"),
                s(:false),
                s(:nil),
                s(:true)), :to_s))),
        s(:def, :test_single_pass_unnormalization,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "&amp;&"),
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :Text), :unnormalize,
              s(:str, "&#38;amp;&amp;")))),
        s(:def, :test_entity_filter,
          s(:args),
          s(:begin,
            s(:lvasgn, :document,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "<!DOCTYPE root [\n"),
                  s(:str, "<!ENTITY copy \"(c)\">\n"),
                  s(:str, "<!ENTITY release-year \"2013\">\n"),
                  s(:str, "]>\n"),
                  s(:str, "<root/>\n")))),
            s(:lvasgn, :respect_whitespace,
              s(:false)),
            s(:lvasgn, :parent,
              s(:send,
                s(:lvar, :document), :root)),
            s(:lvasgn, :raw,
              s(:false)),
            s(:lvasgn, :entity_filter,
              s(:array,
                s(:str, "copy"))),
            s(:send, nil, :assert_equal,
              s(:str, "(c) &release-year;"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Text), :new,
                  s(:str, "(c) 2013"),
                  s(:lvar, :respect_whitespace),
                  s(:lvar, :parent),
                  s(:lvar, :raw),
                  s(:lvar, :entity_filter)), :to_s))))))))
