s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestDocument),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_version_attributes_to_s,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "        <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"),
                  s(:str, "        <svg  id=\"svg2\"\n"),
                  s(:str, "              xmlns:sodipodi=\"foo\"\n"),
                  s(:str, "              xmlns:inkscape=\"bar\"\n"),
                  s(:str, "              sodipodi:version=\"0.32\"\n"),
                  s(:str, "              inkscape:version=\"0.44.1\"\n"),
                  s(:str, "        >\n"),
                  s(:str, "        </svg>\n")))),
            s(:lvasgn, :string,
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:send, nil, :assert_match,
              s(:str, "xmlns:sodipodi"),
              s(:lvar, :string)),
            s(:send, nil, :assert_match,
              s(:str, "xmlns:inkscape"),
              s(:lvar, :string)),
            s(:send, nil, :assert_match,
              s(:str, "sodipodi:version"),
              s(:lvar, :string)),
            s(:send, nil, :assert_match,
              s(:str, "inkscape:version"),
              s(:lvar, :string)))),
        s(:def, :test_new,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                  s(:str, "<message>Hello world!</message>\n")))),
            s(:send, nil, :assert_equal,
              s(:str, "Hello world!"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :children), :first), :value)))),
        s(:class,
          s(:const, nil, :EntityExpansionLimitTest),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:def, :setup,
              s(:args),
              s(:ivasgn, :@default_entity_expansion_limit,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Security), :entity_expansion_limit))),
            s(:def, :teardown,
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Security), :entity_expansion_limit=,
                s(:ivar, :@default_entity_expansion_limit))),
            s(:class,
              s(:const, nil, :GeneralEntityTest),
              s(:self),
              s(:begin,
                s(:def, :test_have_value,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:dstr,
                        s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                        s(:str, "<!DOCTYPE member [\n"),
                        s(:str, "  <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n"),
                        s(:str, "  <!ENTITY b \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">\n"),
                        s(:str, "  <!ENTITY c \"&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;\">\n"),
                        s(:str, "  <!ENTITY d \"&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;\">\n"),
                        s(:str, "  <!ENTITY e \"&f;&f;&f;&f;&f;&f;&f;&f;&f;&f;\">\n"),
                        s(:str, "  <!ENTITY f \"&g;&g;&g;&g;&g;&g;&g;&g;&g;&g;\">\n"),
                        s(:str, "  <!ENTITY g \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\">\n"),
                        s(:str, "]>\n"),
                        s(:str, "<member>\n"),
                        s(:str, "&a;\n"),
                        s(:str, "</member>\n"))),
                    s(:lvasgn, :doc,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :doc), :root), :children), :first), :value)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Security), :entity_expansion_limit=,
                      s(:int, 100)),
                    s(:send, nil, :assert_equal,
                      s(:int, 100),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Security), :entity_expansion_limit)),
                    s(:lvasgn, :doc,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :doc), :root), :children), :first), :value)),
                    s(:send, nil, :assert_equal,
                      s(:int, 101),
                      s(:send,
                        s(:lvar, :doc), :entity_expansion_count)))),
                s(:def, :test_empty_value,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:dstr,
                        s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                        s(:str, "<!DOCTYPE member [\n"),
                        s(:str, "  <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n"),
                        s(:str, "  <!ENTITY b \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">\n"),
                        s(:str, "  <!ENTITY c \"&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;\">\n"),
                        s(:str, "  <!ENTITY d \"&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;\">\n"),
                        s(:str, "  <!ENTITY e \"&f;&f;&f;&f;&f;&f;&f;&f;&f;&f;\">\n"),
                        s(:str, "  <!ENTITY f \"&g;&g;&g;&g;&g;&g;&g;&g;&g;&g;\">\n"),
                        s(:str, "  <!ENTITY g \"\">\n"),
                        s(:str, "]>\n"),
                        s(:str, "<member>\n"),
                        s(:str, "&a;\n"),
                        s(:str, "</member>\n"))),
                    s(:lvasgn, :doc,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :doc), :root), :children), :first), :value)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Security), :entity_expansion_limit=,
                      s(:int, 100)),
                    s(:send, nil, :assert_equal,
                      s(:int, 100),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Security), :entity_expansion_limit)),
                    s(:lvasgn, :doc,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :doc), :root), :children), :first), :value)),
                    s(:send, nil, :assert_equal,
                      s(:int, 101),
                      s(:send,
                        s(:lvar, :doc), :entity_expansion_count)))),
                s(:def, :test_with_default_entity,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:dstr,
                        s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                        s(:str, "<!DOCTYPE member [\n"),
                        s(:str, "  <!ENTITY a \"a\">\n"),
                        s(:str, "  <!ENTITY a2 \"&a; &a;\">\n"),
                        s(:str, "]>\n"),
                        s(:str, "<member>\n"),
                        s(:str, "&a;\n"),
                        s(:str, "&a2;\n"),
                        s(:str, "&lt;\n"),
                        s(:str, "</member>\n"))),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Security), :entity_expansion_limit=,
                      s(:int, 4)),
                    s(:lvasgn, :doc,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:send, nil, :assert_equal,
                      s(:str, "\na\na a\n<\n"),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :doc), :root), :children), :first), :value)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Security), :entity_expansion_limit=,
                      s(:int, 3)),
                    s(:lvasgn, :doc,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const, nil, :RuntimeError)),
                      s(:args),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :doc), :root), :children), :first), :value)))))),
            s(:class,
              s(:const, nil, :ParameterEntityTest),
              s(:self),
              s(:begin,
                s(:def, :test_have_value,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:dstr,
                        s(:str, "<!DOCTYPE root [\n"),
                        s(:str, "  <!ENTITY % a \"BOOM.BOOM.BOOM.BOOM.BOOM.BOOM.BOOM.BOOM.BOOM.\">\n"),
                        s(:str, "  <!ENTITY % b \"%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;\">\n"),
                        s(:str, "  <!ENTITY % c \"%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;\">\n"),
                        s(:str, "  <!ENTITY % d \"%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;\">\n"),
                        s(:str, "  <!ENTITY % e \"%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;\">\n"),
                        s(:str, "  <!ENTITY % f \"%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;\">\n"),
                        s(:str, "  <!ENTITY % g \"%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\">\n"),
                        s(:str, "  <!ENTITY test \"test %g;\">\n"),
                        s(:str, "]>\n"),
                        s(:str, "<cd></cd>\n"))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :REXML), :ParseException)),
                      s(:args),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Security), :entity_expansion_limit=,
                      s(:int, 100)),
                    s(:send, nil, :assert_equal,
                      s(:int, 100),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Security), :entity_expansion_limit)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :REXML), :ParseException)),
                      s(:args),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))))),
                s(:def, :test_empty_value,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:dstr,
                        s(:str, "<!DOCTYPE root [\n"),
                        s(:str, "  <!ENTITY % a \"\">\n"),
                        s(:str, "  <!ENTITY % b \"%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;%a;\">\n"),
                        s(:str, "  <!ENTITY % c \"%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;%b;\">\n"),
                        s(:str, "  <!ENTITY % d \"%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;%c;\">\n"),
                        s(:str, "  <!ENTITY % e \"%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;\">\n"),
                        s(:str, "  <!ENTITY % f \"%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;%e;\">\n"),
                        s(:str, "  <!ENTITY % g \"%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\">\n"),
                        s(:str, "  <!ENTITY test \"test %g;\">\n"),
                        s(:str, "]>\n"),
                        s(:str, "<cd></cd>\n"))),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :REXML), :ParseException)),
                      s(:args),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Security), :entity_expansion_limit=,
                      s(:int, 100)),
                    s(:send, nil, :assert_equal,
                      s(:int, 100),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Security), :entity_expansion_limit)),
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :REXML), :ParseException)),
                      s(:args),
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:lvar, :xml))))))))),
        s(:def, :test_tag_in_cdata_with_not_ascii_only_but_ascii8bit_encoding_source,
          s(:args),
          s(:begin,
            s(:lvasgn, :tag,
              s(:str, "<b>...</b>")),
            s(:lvasgn, :message,
              s(:str, "こんにちは、世界！")),
            s(:lvasgn, :xml,
              s(:dstr,
                s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                s(:str, "<message><![CDATA["),
                s(:begin,
                  s(:lvar, :tag)),
                s(:begin,
                  s(:lvar, :message)),
                s(:str, "]]></message>\n"))),
            s(:send,
              s(:lvar, :xml), :force_encoding,
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :xml))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:begin,
                  s(:lvar, :tag)),
                s(:begin,
                  s(:lvar, :message))),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :children), :first), :value)))),
        s(:def, :test_xml_declaration_standalone,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug2539,
              s(:str, "[ruby-core:27345]")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<?xml version=\"1.0\" standalone=\"no\" ?>"))),
            s(:send, nil, :assert_equal,
              s(:str, "no"),
              s(:send,
                s(:lvar, :doc), :stand_alone?),
              s(:lvar, :bug2539)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<?xml version=\"1.0\" standalone= \"no\" ?>"))),
            s(:send, nil, :assert_equal,
              s(:str, "no"),
              s(:send,
                s(:lvar, :doc), :stand_alone?),
              s(:lvar, :bug2539)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<?xml version=\"1.0\" standalone=  \"no\" ?>"))),
            s(:send, nil, :assert_equal,
              s(:str, "no"),
              s(:send,
                s(:lvar, :doc), :stand_alone?),
              s(:lvar, :bug2539)))),
        s(:class,
          s(:const, nil, :WriteTest),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:def, :setup,
              s(:args),
              s(:ivasgn, :@document,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:dstr,
                    s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                    s(:str, "<message>Hello world!</message>\n"))))),
            s(:class,
              s(:const, nil, :ArgumentsTest),
              s(:self),
              s(:begin,
                s(:def, :test_output,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:lvar, :output)),
                    s(:send, nil, :assert_equal,
                      s(:dstr,
                        s(:str, "<?xml version='1.0' encoding='UTF-8'?>\n"),
                        s(:str, "<message>Hello world!</message>\n")),
                      s(:lvar, :output)))),
                s(:def, :test_indent,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:lvasgn, :indent,
                      s(:int, 2)),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:lvar, :output),
                      s(:lvar, :indent)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:dstr,
                          s(:str, "<?xml version='1.0' encoding='UTF-8'?>\n"),
                          s(:str, "<message>\n"),
                          s(:str, "  Hello world!\n"),
                          s(:str, "</message>\n")), :chomp),
                      s(:lvar, :output)))),
                s(:def, :test_transitive,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:lvasgn, :indent,
                      s(:int, 2)),
                    s(:lvasgn, :transitive,
                      s(:true)),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:lvar, :output),
                      s(:lvar, :indent),
                      s(:lvar, :transitive)),
                    s(:send, nil, :assert_equal,
                      s(:dstr,
                        s(:str, "<?xml version='1.0' encoding='UTF-8'?>\n"),
                        s(:str, "<message\n"),
                        s(:str, ">Hello world!</message\n"),
                        s(:str, ">\n")),
                      s(:lvar, :output)))),
                s(:def, :test_ie_hack,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:lvasgn, :indent,
                      s(:int, -1)),
                    s(:lvasgn, :transitive,
                      s(:false)),
                    s(:lvasgn, :ie_hack,
                      s(:true)),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:str, "<empty/>"))),
                    s(:send,
                      s(:lvar, :document), :write,
                      s(:lvar, :output),
                      s(:lvar, :indent),
                      s(:lvar, :transitive),
                      s(:lvar, :ie_hack)),
                    s(:send, nil, :assert_equal,
                      s(:str, "<empty />"),
                      s(:lvar, :output)))),
                s(:def, :test_encoding,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:lvasgn, :indent,
                      s(:int, -1)),
                    s(:lvasgn, :transitive,
                      s(:false)),
                    s(:lvasgn, :ie_hack,
                      s(:false)),
                    s(:lvasgn, :encoding,
                      s(:str, "Windows-31J")),
                    s(:send,
                      s(:send,
                        s(:ivar, :@document), :xml_decl), :encoding=,
                      s(:str, "Shift_JIS")),
                    s(:lvasgn, :japanese_text,
                      s(:str, "こんにちは")),
                    s(:send,
                      s(:send,
                        s(:ivar, :@document), :root), :text=,
                      s(:lvar, :japanese_text)),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:lvar, :output),
                      s(:lvar, :indent),
                      s(:lvar, :transitive),
                      s(:lvar, :ie_hack),
                      s(:lvar, :encoding)),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:dstr,
                          s(:str, "<?xml version='1.0' encoding='SHIFT_JIS'?>\n"),
                          s(:str, "<message>"),
                          s(:begin,
                            s(:lvar, :japanese_text)),
                          s(:str, "</message>\n")), :encode,
                        s(:lvar, :encoding)),
                      s(:lvar, :output)))))),
            s(:class,
              s(:const, nil, :OptionsTest),
              s(:self),
              s(:begin,
                s(:def, :test_output,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:hash,
                        s(:pair,
                          s(:sym, :output),
                          s(:lvar, :output)))),
                    s(:send, nil, :assert_equal,
                      s(:dstr,
                        s(:str, "<?xml version='1.0' encoding='UTF-8'?>\n"),
                        s(:str, "<message>Hello world!</message>\n")),
                      s(:lvar, :output)))),
                s(:def, :test_indent,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:hash,
                        s(:pair,
                          s(:sym, :output),
                          s(:lvar, :output)),
                        s(:pair,
                          s(:sym, :indent),
                          s(:int, 2)))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:dstr,
                          s(:str, "<?xml version='1.0' encoding='UTF-8'?>\n"),
                          s(:str, "<message>\n"),
                          s(:str, "  Hello world!\n"),
                          s(:str, "</message>\n")), :chomp),
                      s(:lvar, :output)))),
                s(:def, :test_transitive,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:hash,
                        s(:pair,
                          s(:sym, :output),
                          s(:lvar, :output)),
                        s(:pair,
                          s(:sym, :indent),
                          s(:int, 2)),
                        s(:pair,
                          s(:sym, :transitive),
                          s(:true)))),
                    s(:send, nil, :assert_equal,
                      s(:dstr,
                        s(:str, "<?xml version='1.0' encoding='UTF-8'?>\n"),
                        s(:str, "<message\n"),
                        s(:str, ">Hello world!</message\n"),
                        s(:str, ">\n")),
                      s(:lvar, :output)))),
                s(:def, :test_ie_hack,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:str, "<empty/>"))),
                    s(:send,
                      s(:lvar, :document), :write,
                      s(:hash,
                        s(:pair,
                          s(:sym, :output),
                          s(:lvar, :output)),
                        s(:pair,
                          s(:sym, :ie_hack),
                          s(:true)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "<empty />"),
                      s(:lvar, :output)))),
                s(:def, :test_encoding,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :output,
                      s(:str, "")),
                    s(:lvasgn, :encoding,
                      s(:str, "Windows-31J")),
                    s(:send,
                      s(:send,
                        s(:ivar, :@document), :xml_decl), :encoding=,
                      s(:str, "Shift_JIS")),
                    s(:lvasgn, :japanese_text,
                      s(:str, "こんにちは")),
                    s(:send,
                      s(:send,
                        s(:ivar, :@document), :root), :text=,
                      s(:lvar, :japanese_text)),
                    s(:send,
                      s(:ivar, :@document), :write,
                      s(:hash,
                        s(:pair,
                          s(:sym, :output),
                          s(:lvar, :output)),
                        s(:pair,
                          s(:sym, :encoding),
                          s(:lvar, :encoding)))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:dstr,
                          s(:str, "<?xml version='1.0' encoding='SHIFT_JIS'?>\n"),
                          s(:str, "<message>"),
                          s(:begin,
                            s(:lvar, :japanese_text)),
                          s(:str, "</message>\n")), :encode,
                        s(:lvar, :encoding)),
                      s(:lvar, :output)))))))),
        s(:class,
          s(:const, nil, :BomTest),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:class,
              s(:const, nil, :HaveEncodingTest),
              s(:self),
              s(:begin,
                s(:def, :test_utf_8,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:send,
                        s(:dstr,
                          s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                          s(:str, "<message>Hello world!</message>\n")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :bom,
                      s(:send,
                        s(:str, "﻿"), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :bom), :+,
                          s(:lvar, :xml)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "UTF-8"),
                      s(:send,
                        s(:lvar, :document), :encoding)))),
                s(:def, :test_utf_16le,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:send,
                        s(:send,
                          s(:dstr,
                            s(:str, "<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n"),
                            s(:str, "<message>Hello world!</message>\n")), :encode,
                          s(:str, "UTF-16LE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :bom,
                      s(:send,
                        s(:send,
                          s(:str, "﻿"), :encode,
                          s(:str, "UTF-16LE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :bom), :+,
                          s(:lvar, :xml)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "UTF-16"),
                      s(:send,
                        s(:lvar, :document), :encoding)))),
                s(:def, :test_utf_16be,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:send,
                        s(:send,
                          s(:dstr,
                            s(:str, "<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n"),
                            s(:str, "<message>Hello world!</message>\n")), :encode,
                          s(:str, "UTF-16BE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :bom,
                      s(:send,
                        s(:send,
                          s(:str, "﻿"), :encode,
                          s(:str, "UTF-16BE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :bom), :+,
                          s(:lvar, :xml)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "UTF-16"),
                      s(:send,
                        s(:lvar, :document), :encoding)))))),
            s(:class,
              s(:const, nil, :NoEncodingTest),
              s(:self),
              s(:begin,
                s(:def, :test_utf_8,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:send,
                        s(:dstr,
                          s(:str, "<?xml version=\"1.0\"?>\n"),
                          s(:str, "<message>Hello world!</message>\n")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :bom,
                      s(:send,
                        s(:str, "﻿"), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :bom), :+,
                          s(:lvar, :xml)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "UTF-8"),
                      s(:send,
                        s(:lvar, :document), :encoding)))),
                s(:def, :test_utf_16le,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:send,
                        s(:send,
                          s(:dstr,
                            s(:str, "<?xml version=\"1.0\"?>\n"),
                            s(:str, "<message>Hello world!</message>\n")), :encode,
                          s(:str, "UTF-16LE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :bom,
                      s(:send,
                        s(:send,
                          s(:str, "﻿"), :encode,
                          s(:str, "UTF-16LE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :bom), :+,
                          s(:lvar, :xml)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "UTF-16"),
                      s(:send,
                        s(:lvar, :document), :encoding)))),
                s(:def, :test_utf_16be,
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :xml,
                      s(:send,
                        s(:send,
                          s(:dstr,
                            s(:str, "<?xml version=\"1.0\"?>\n"),
                            s(:str, "<message>Hello world!</message>\n")), :encode,
                          s(:str, "UTF-16BE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :bom,
                      s(:send,
                        s(:send,
                          s(:str, "﻿"), :encode,
                          s(:str, "UTF-16BE")), :force_encoding,
                        s(:str, "ASCII-8BIT"))),
                    s(:lvasgn, :document,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :Document), :new,
                        s(:send,
                          s(:lvar, :bom), :+,
                          s(:lvar, :xml)))),
                    s(:send, nil, :assert_equal,
                      s(:str, "UTF-16"),
                      s(:send,
                        s(:lvar, :document), :encoding)))))),
            s(:class,
              s(:const, nil, :WriteTest),
              s(:self),
              s(:def, :test_utf_16,
                s(:args),
                s(:begin,
                  s(:lvasgn, :xml,
                    s(:send,
                      s(:send,
                        s(:dstr,
                          s(:str, "<?xml version=\"1.0\"?>\n"),
                          s(:str, "<message>Hello world!</message>\n")), :encode,
                        s(:str, "UTF-16LE")), :force_encoding,
                      s(:str, "ASCII-8BIT"))),
                  s(:lvasgn, :bom,
                    s(:send,
                      s(:send,
                        s(:str, "﻿"), :encode,
                        s(:str, "UTF-16LE")), :force_encoding,
                      s(:str, "ASCII-8BIT"))),
                  s(:lvasgn, :document,
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Document), :new,
                      s(:send,
                        s(:lvar, :bom), :+,
                        s(:lvar, :xml)))),
                  s(:lvasgn, :actual_xml,
                    s(:str, "")),
                  s(:send,
                    s(:lvar, :document), :write,
                    s(:lvar, :actual_xml)),
                  s(:lvasgn, :expected_xml,
                    s(:send,
                      s(:dstr,
                        s(:str, "﻿<?xml version='1.0' encoding='UTF-16'?>\n"),
                        s(:str, "<message>Hello world!</message>\n")), :encode,
                      s(:str, "UTF-16BE"))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :expected_xml),
                    s(:lvar, :actual_xml)))))))))))
