s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/xpath")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :JaxenTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXMLTestUtils)),
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :test_axis,
          s(:args),
          s(:send, nil, :test,
            s(:str, "axis"))),
        s(:def, :test_basic,
          s(:args),
          s(:send, nil, :test,
            s(:str, "basic"))),
        s(:def, :test_basicupdate,
          s(:args),
          s(:send, nil, :test,
            s(:str, "basicupdate"))),
        s(:def, :test_contents,
          s(:args),
          s(:send, nil, :test,
            s(:str, "contents"))),
        s(:def, :test_defaultNamespace,
          s(:args),
          s(:send, nil, :test,
            s(:str, "defaultNamespace"))),
        s(:def, :test_fibo,
          s(:args),
          s(:send, nil, :test,
            s(:str, "fibo"))),
        s(:def, :test_id,
          s(:args),
          s(:send, nil, :test,
            s(:str, "id"))),
        s(:def, :test_jaxen24,
          s(:args),
          s(:send, nil, :test,
            s(:str, "jaxen24"))),
        s(:def, :test_lang,
          s(:args),
          s(:send, nil, :test,
            s(:str, "lang"))),
        s(:def, :test_message,
          s(:args),
          s(:send, nil, :test,
            s(:str, "message"))),
        s(:def, :test_moreover,
          s(:args),
          s(:send, nil, :test,
            s(:str, "moreover"))),
        s(:def, :test_much_ado,
          s(:args),
          s(:send, nil, :test,
            s(:str, "much_ado"))),
        s(:def, :test_namespaces,
          s(:args),
          s(:send, nil, :test,
            s(:str, "namespaces"))),
        s(:def, :test_nitf,
          s(:args),
          s(:send, nil, :test,
            s(:str, "nitf"))),
        s(:def, :test_numbers,
          s(:args),
          s(:send, nil, :test,
            s(:str, "numbers"))),
        s(:def, :test_pi,
          s(:args),
          s(:send, nil, :test,
            s(:str, "pi"))),
        s(:def, :test_pi2,
          s(:args),
          s(:send, nil, :test,
            s(:str, "pi2"))),
        s(:def, :test_simple,
          s(:args),
          s(:send, nil, :test,
            s(:str, "simple"))),
        s(:def, :test_testNamespaces,
          s(:args),
          s(:send, nil, :test,
            s(:str, "testNamespaces"))),
        s(:def, :test_text,
          s(:args),
          s(:send, nil, :test,
            s(:str, "text"))),
        s(:def, :test_underscore,
          s(:args),
          s(:send, nil, :test,
            s(:str, "underscore"))),
        s(:def, :test_web,
          s(:args),
          s(:send, nil, :test,
            s(:str, "web"))),
        s(:def, :test_web2,
          s(:args),
          s(:send, nil, :test,
            s(:str, "web2"))),
        s(:send, nil, :private),
        s(:def, :test,
          s(:args,
            s(:arg, :fname)),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:send,
                      s(:lvar, :fname), :+,
                      s(:str, ".xml")))),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :file)))),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :doc),
                s(:str, "/tests/document")),
              s(:args,
                s(:arg, :e)),
              s(:send, nil, :handleDocument,
                s(:lvar, :e))))),
        s(:def, :handleContext,
          s(:args,
            s(:arg, :testDoc),
            s(:arg, :ctxElement)),
          s(:begin,
            s(:lvasgn, :testCtx,
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :testDoc),
                  s(:send,
                    s(:send,
                      s(:lvar, :ctxElement), :attributes), :[],
                    s(:str, "select"))), :[],
                s(:int, 0))),
            s(:lvasgn, :namespaces,
              s(:hash)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :testCtx), :class), :==,
                s(:const, nil, :Element)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :testCtx), :prefixes), :each),
                s(:args,
                  s(:arg, :pre)),
                s(:send, nil, :handleNamespace,
                  s(:lvar, :testCtx),
                  s(:lvar, :pre),
                  s(:lvar, :namespaces))), nil),
            s(:lvasgn, :variables,
              s(:hash)),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :ctxElement),
                s(:str, "@*[namespace-uri() = 'http://jaxen.org/test-harness/var']")),
              s(:args,
                s(:arg, :attrib)),
              s(:send, nil, :handleVariable,
                s(:lvar, :testCtx),
                s(:lvar, :variables),
                s(:lvar, :attrib))),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :ctxElement),
                s(:str, "valueOf")),
              s(:args,
                s(:arg, :e)),
              s(:send, nil, :handleValueOf,
                s(:lvar, :testCtx),
                s(:lvar, :variables),
                s(:lvar, :namespaces),
                s(:lvar, :e))),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :ctxElement),
                s(:str, "test[not(@exception) or (@exception != 'true') ]")),
              s(:args,
                s(:arg, :e)),
              s(:send, nil, :handleNominalTest,
                s(:lvar, :testCtx),
                s(:lvar, :variables),
                s(:lvar, :namespaces),
                s(:lvar, :e))),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :ctxElement),
                s(:str, "test[@exception = 'true']")),
              s(:args,
                s(:arg, :e)),
              s(:send, nil, :handleExceptionalTest,
                s(:lvar, :testCtx),
                s(:lvar, :variables),
                s(:lvar, :namespaces),
                s(:lvar, :e))))),
        s(:def, :handleValueOf,
          s(:args,
            s(:arg, :ctx),
            s(:arg, :variables),
            s(:arg, :namespaces),
            s(:arg, :valueOfElement)),
          s(:begin,
            s(:lvasgn, :expected,
              s(:send,
                s(:lvar, :valueOfElement), :text)),
            s(:lvasgn, :got,
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :ctx),
                  s(:send,
                    s(:send,
                      s(:lvar, :valueOfElement), :attributes), :[],
                    s(:str, "select")),
                  s(:lvar, :namespaces),
                  s(:lvar, :variables)), :[],
                s(:int, 0))),
            s(:send, nil, :assert_true,
              s(:or,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:lvar, :got), :nil?),
                    s(:send,
                      s(:lvar, :expected), :nil?))),
                s(:send,
                  s(:send,
                    s(:lvar, :got), :nil?), :!))),
            s(:case,
              s(:send,
                s(:lvar, :got), :class),
              s(:when,
                s(:const, nil, :Element),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :got), :class),
                  s(:const, nil, :Element))),
              s(:when,
                s(:const, nil, :Attribute),
                s(:const, nil, :Text),
                s(:const, nil, :Comment),
                s(:const, nil, :TrueClass),
                s(:const, nil, :FalseClass),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:send,
                    s(:lvar, :got), :to_s))),
              s(:when,
                s(:const, nil, :Instruction),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:send,
                    s(:lvar, :got), :content))),
              s(:when,
                s(:const, nil, :Fixnum),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:send, nil, :exected), :to_f),
                  s(:lvar, :got))),
              s(:when,
                s(:const, nil, :String),
                s(:begin,
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :got), :==,
                        s(:nil)),
                      s(:send,
                        s(:lvar, :got), :==,
                        s(:str, ""))),
                    s(:lvasgn, :got,
                      s(:str, "")), nil),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :expected), :==,
                        s(:nil)),
                      s(:send,
                        s(:lvar, :expected), :==,
                        s(:str, ""))),
                    s(:lvasgn, :expected,
                      s(:str, "")), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :expected),
                    s(:lvar, :got)))),
              s(:send, nil, :assert_fail,
                s(:str, "Wassup?"))))),
        s(:def, :handleNominalTest,
          s(:args,
            s(:arg, :ctx),
            s(:arg, :variables),
            s(:arg, :namespaces),
            s(:arg, :testElement)),
          s(:begin,
            s(:lvasgn, :expected,
              s(:send,
                s(:send,
                  s(:lvar, :testElement), :attributes), :[],
                s(:str, "count"))),
            s(:lvasgn, :got,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :ctx),
                s(:send,
                  s(:send,
                    s(:lvar, :testElement), :attributes), :[],
                  s(:str, "select")),
                s(:lvar, :namespaces),
                s(:lvar, :variables))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :expected), :nil?), :!),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :expected), :==,
                  s(:send,
                    s(:send,
                      s(:lvar, :got), :size), :to_s))), nil),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :testElement),
                s(:str, "valueOf")),
              s(:args,
                s(:arg, :e)),
              s(:send, nil, :handleValueOf,
                s(:lvar, :got),
                s(:lvar, :variables),
                s(:lvar, :namespaces),
                s(:lvar, :e))))),
        s(:def, :handleExceptionalTest,
          s(:args,
            s(:arg, :ctx),
            s(:arg, :variables),
            s(:arg, :namespaces),
            s(:arg, :testElement)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :Exception)),
            s(:args),
            s(:send,
              s(:const, nil, :XPath), :match,
              s(:lvar, :ctx),
              s(:send,
                s(:send,
                  s(:lvar, :testElement), :attributes), :[],
                s(:str, "select")),
              s(:lvar, :namespaces),
              s(:lvar, :variables)))),
        s(:def, :handleDocument,
          s(:args,
            s(:arg, :docElement)),
          s(:begin,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "- Processing document: "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :docElement), :attributes), :[],
                    s(:str, "url"))))),
            s(:lvasgn, :testFile,
              s(:send,
                s(:const, nil, :File), :new,
                s(:send,
                  s(:send,
                    s(:lvar, :docElement), :attributes), :[],
                  s(:str, "url")))),
            s(:lvasgn, :testDoc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :testFile))),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :docElement),
                s(:str, "context")),
              s(:args,
                s(:arg, :e)),
              s(:send, nil, :handleContext,
                s(:lvar, :testDoc),
                s(:lvar, :e))))),
        s(:def, :handleVariable,
          s(:args,
            s(:arg, :ctx),
            s(:arg, :variables),
            s(:arg, :attrib)),
          s(:begin,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "--- Found attribute: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :attrib), :name)))),
            s(:send,
              s(:lvar, :variables), :[]=,
              s(:send,
                s(:lvar, :attrib), :name),
              s(:send,
                s(:lvar, :attrib), :value)))),
        s(:def, :handleNamespace,
          s(:args,
            s(:arg, :ctx),
            s(:arg, :prefix),
            s(:arg, :namespaces)),
          s(:begin,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "--- Found namespace: "),
                s(:begin,
                  s(:lvar, :prefix)))),
            s(:send,
              s(:lvar, :namespaces), :[]=,
              s(:lvar, :prefix),
              s(:send,
                s(:send,
                  s(:lvar, :ctx), :namespaces), :[],
                s(:lvar, :prefix)))))))))
