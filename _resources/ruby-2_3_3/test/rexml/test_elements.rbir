s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :ElementsTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :test_accessor,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b/><c id=\"1\"/><c id=\"2\"/><d/></a>"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 1)), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :[],
                    s(:str, "c")), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :[],
                    s(:int, 2),
                    s(:str, "c")), :attributes), :[],
                s(:str, "id"))))),
        s(:def, :test_indexing,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a/>"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :[]=,
              s(:int, 10),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "b"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 1)), :name)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :[]=,
              s(:int, 1),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "c"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 1)), :name)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :[]=,
              s(:str, "c"),
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "d"))),
            s(:send, nil, :assert_equal,
              s(:str, "d"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :[],
                  s(:int, 1)), :name)))),
        s(:def, :test_delete,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b/><c/><c id=\"1\"/></a>"))),
            s(:lvasgn, :block,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :str)),
                s(:begin,
                  s(:lvasgn, :out,
                    s(:str, "")),
                  s(:send,
                    s(:lvar, :doc), :write,
                    s(:lvar, :out)),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :str),
                    s(:lvar, :out))))),
            s(:lvasgn, :b,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :[],
                s(:int, 1))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :delete,
              s(:lvar, :b)),
            s(:send,
              s(:lvar, :block), :call,
              s(:str, "<a><c/><c id='1'/></a>")),
            s(:send,
              s(:send,
                s(:lvar, :doc), :elements), :delete,
              s(:str, "a/c[@id='1']")),
            s(:send,
              s(:lvar, :block), :call,
              s(:str, "<a><c/></a>")),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :delete,
              s(:int, 1)),
            s(:send,
              s(:lvar, :block), :call,
              s(:str, "<a/>")))),
        s(:def, :test_delete_all,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><c/><c/><c/><c/></a>"))),
            s(:lvasgn, :deleted,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :delete_all,
                s(:str, "a/c"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:lvar, :deleted), :size)))),
        s(:def, :test_ticket_36,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:xi='foo'><b><xi:c id='1'/></b><xi:c id='2'/></a>"))),
            s(:lvasgn, :deleted,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :delete_all,
                s(:str, "xi:c"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :deleted), :size)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:xi='foo'><b><xi:c id='1'/></b><xi:c id='2'/></a>"))),
            s(:lvasgn, :deleted,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :delete_all,
                s(:str, "//xi:c"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :deleted), :size)))),
        s(:def, :test_add,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "a"))),
            s(:send,
              s(:send,
                s(:lvar, :a), :elements), :add,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "b"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :elements), :[],
                  s(:int, 1)), :name)),
            s(:send,
              s(:send,
                s(:lvar, :a), :elements), :add,
              s(:str, "c")),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :elements), :[],
                  s(:int, 2)), :name)))),
        s(:def, :test_size,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a>sean<b/>elliott<b/>russell<b/></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :size)))),
        s(:def, :test_each,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b/><c/><d/>sean<b/><c/><d/></a>"))),
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:lvasgn, :block,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :e)),
                s(:op_asgn,
                  s(:lvasgn, :count), :+,
                  s(:int, 1)))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :each,
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:lvar, :count)),
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :each,
              s(:str, "b"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:lvar, :count)),
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :elements), :each,
              s(:str, "child::node()"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:lvar, :count)),
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:send,
              s(:const, nil, :XPath), :each,
              s(:send,
                s(:lvar, :doc), :root),
              s(:str, "child::node()"),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :assert_equal,
              s(:int, 7),
              s(:lvar, :count)))),
        s(:def, :test_each_with_frozen_condition,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<books><book name=\"Ruby\"/><book name=\"XML\"/></books>"))),
            s(:lvasgn, :names,
              s(:array)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :each,
                s(:send,
                  s(:str, "book"), :freeze)),
              s(:args,
                s(:arg, :element)),
              s(:send,
                s(:lvar, :names), :<<,
                s(:send,
                  s(:send,
                    s(:lvar, :element), :attributes), :[],
                  s(:str, "name")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "Ruby"),
                s(:str, "XML")),
              s(:lvar, :names)))),
        s(:def, :test_to_a,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a>sean<b/>elliott<c/></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :to_a), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :elements), :to_a,
                  s(:str, "child::node()")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:send,
                    s(:lvar, :doc), :root),
                  s(:str, "child::node()")), :size)))),
        s(:def, :test_collect,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b id='1'/><b id='2'/></a>"))),
            s(:lvasgn, :r,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :collect,
                  s(:str, "/a/b")),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :attributes), :[],
                    s(:str, "id")), :to_i))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:lvar, :r)))),
        s(:def, :test_inject,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b id='1'/><b id='2'/></a>"))),
            s(:lvasgn, :r,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :elements), :inject,
                  s(:str, "/a/b"),
                  s(:int, 3)),
                s(:args,
                  s(:arg, :s),
                  s(:arg, :e)),
                s(:send,
                  s(:lvar, :s), :+,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :attributes), :[],
                      s(:str, "id")), :to_i)))),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:lvar, :r))))))))
