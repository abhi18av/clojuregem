s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :XPathTesterDd),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :setup,
          s(:args),
          s(:cvasgn, :@@docDd,
            s(:send,
              s(:const, nil, :Document), :new,
              s(:dstr,
                s(:str, "        <a>\n"),
                s(:str, "          <b x='ab01A'>\n"),
                s(:str, "            <c y='abc01A'>Success</c>\n"),
                s(:str, "          </b>\n"),
                s(:str, "          <b x='ab02A' y='ab02B'>\n"),
                s(:str, "            <c>abc02C</c>\n"),
                s(:str, "          </b>\n"),
                s(:str, "        </a>\n")),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_whitespace_nodes),
                  s(:sym, :all)))))),
        s(:def, :test_Dd_preceding_sibling_children,
          s(:args),
          s(:begin,
            s(:lvasgn, :arr,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:cvar, :@@docDd),
                s(:str, "//b[@x='ab02A']/preceding-sibling::b/child::*")),
              s(:args,
                s(:arg, :cell)),
              s(:send,
                s(:lvar, :arr), :<<,
                s(:send,
                  s(:send,
                    s(:lvar, :cell), :texts), :join))),
            s(:send, nil, :assert_equal,
              s(:str, "Success"),
              s(:send,
                s(:lvar, :arr), :join)))),
        s(:def, :test_Dd_preceding_sibling_all,
          s(:args),
          s(:begin,
            s(:lvasgn, :arr,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:cvar, :@@docDd),
                s(:str, "//b[@x='ab02A']/preceding-sibling::*")),
              s(:args,
                s(:arg, :cell)),
              s(:send,
                s(:lvar, :arr), :<<,
                s(:send,
                  s(:lvar, :cell), :to_s))),
            s(:send, nil, :assert_equal,
              s(:str, "<b x='ab01A'><c y='abc01A'>Success</c></b>"),
              s(:send,
                s(:lvar, :arr), :join))))))))
