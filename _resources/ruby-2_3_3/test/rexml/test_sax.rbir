s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/sax2listener")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/sax2parser")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:begin,
      s(:class,
        s(:const, nil, :SAX2Tester),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :REXMLTestUtils)),
          s(:send, nil, :include,
            s(:const, nil, :REXML)),
          s(:def, :test_characters,
            s(:args),
            s(:begin,
              s(:lvasgn, :d,
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:str, "<A>@blah@</A>"))),
              s(:lvasgn, :txt,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :root), :text)),
              s(:lvasgn, :p,
                s(:send,
                  s(:const,
                    s(:const, nil, :Parsers), :SAX2Parser), :new,
                  s(:str, "<A>@blah@</A>"))),
              s(:block,
                s(:send,
                  s(:lvar, :p), :listen,
                  s(:sym, :characters)),
                s(:args,
                  s(:arg, :x)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :txt),
                  s(:lvar, :x))),
              s(:block,
                s(:send,
                  s(:lvar, :p), :listen,
                  s(:sym, :characters),
                  s(:array,
                    s(:str, "A"))),
                s(:args,
                  s(:arg, :x)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :txt),
                  s(:lvar, :x))),
              s(:send,
                s(:lvar, :p), :parse))),
          s(:def, :test_entity_replacement,
            s(:args),
            s(:begin,
              s(:lvasgn, :source,
                s(:dstr,
                  s(:str, "<!DOCTYPE foo [\n"),
                  s(:str, "      <!ENTITY la \"1234\">\n"),
                  s(:str, "      <!ENTITY lala \"--&la;--\">\n"),
                  s(:str, "      <!ENTITY lalal \"&la;&la;\">\n"),
                  s(:str, "      ]><a><la>&la;</la><lala>&lala;</lala></a>"))),
              s(:lvasgn, :sax,
                s(:send,
                  s(:const,
                    s(:const, nil, :Parsers), :SAX2Parser), :new,
                  s(:lvar, :source))),
              s(:lvasgn, :results,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :sax), :listen,
                  s(:sym, :characters)),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :results), :<<,
                  s(:lvar, :x))),
              s(:send,
                s(:lvar, :sax), :parse),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :results), :size)),
              s(:send, nil, :assert_equal,
                s(:str, "1234"),
                s(:send,
                  s(:lvar, :results), :[],
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:str, "--1234--"),
                s(:send,
                  s(:lvar, :results), :[],
                  s(:int, 1))))),
          s(:def, :test_sax2,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:send, nil, :fixture_path,
                  s(:str, "documentation.xml"))),
              s(:args,
                s(:arg, :f)),
              s(:begin,
                s(:lvasgn, :parser,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Parsers), :SAX2Parser), :new,
                    s(:lvar, :f))),
                s(:lvasgn, :count,
                  s(:int, 0)),
                s(:lvasgn, :blok,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :uri),
                      s(:arg, :localname),
                      s(:arg, :qname),
                      s(:arg, :attributes)),
                    s(:begin,
                      s(:send, nil, :assert,
                        s(:send,
                          s(:array,
                            s(:str, "bugs"),
                            s(:str, "todo")), :include?,
                          s(:lvar, :localname)),
                        s(:dstr,
                          s(:str, "Mismatched name; we got '"),
                          s(:begin,
                            s(:lvar, :qname)),
                          s(:str, "'\nArgs were:\n\tURI: "),
                          s(:begin,
                            s(:lvar, :uri)),
                          s(:str, "\n\tLOCALNAME: "),
                          s(:begin,
                            s(:lvar, :localname)),
                          s(:str, "\n\tQNAME: "),
                          s(:begin,
                            s(:lvar, :qname)),
                          s(:str, "\n\tATTRIBUTES: "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :attributes), :inspect)),
                          s(:str, "\n\tSELF="),
                          s(:begin,
                            s(:lvar, :blok)))),
                      s(:op_asgn,
                        s(:lvasgn, :count), :+,
                        s(:int, 1))))),
                s(:lvasgn, :start_document,
                  s(:int, 0)),
                s(:lvasgn, :end_document,
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :listen,
                    s(:sym, :start_document)),
                  s(:args),
                  s(:op_asgn,
                    s(:lvasgn, :start_document), :+,
                    s(:int, 1))),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :listen,
                    s(:sym, :end_document)),
                  s(:args),
                  s(:op_asgn,
                    s(:lvasgn, :end_document), :+,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:sym, :start_element),
                  s(:array,
                    s(:str, "changelog"),
                    s(:str, "bugs"),
                    s(:str, "todo")),
                  s(:block_pass,
                    s(:lvar, :blok))),
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:array,
                    s(:str, "changelog"),
                    s(:str, "bugs"),
                    s(:str, "todo")),
                  s(:block_pass,
                    s(:lvar, :blok))),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :listen,
                    s(:sym, :start_element)),
                  s(:args,
                    s(:arg, :uri),
                    s(:arg, :localname),
                    s(:arg, :qname),
                    s(:arg, :attributes)), nil),
                s(:lvasgn, :listener,
                  s(:send,
                    s(:const, nil, :MySAX2Listener), :new)),
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:lvar, :listener)),
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:array,
                    s(:str, "/change/"),
                    s(:str, "bugs"),
                    s(:str, "todo")),
                  s(:lvar, :listener)),
                s(:lvasgn, :blok,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :uri),
                      s(:arg, :localname),
                      s(:arg, :qname),
                      s(:arg, :attributes)),
                    s(:send, nil, :assert_fail,
                      s(:str, "This listener should have been deafened!")))),
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:array,
                    s(:str, "changelog")),
                  s(:block_pass,
                    s(:lvar, :blok))),
                s(:send,
                  s(:lvar, :parser), :deafen,
                  s(:block_pass,
                    s(:lvar, :blok))),
                s(:lvasgn, :tc,
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:lvar, :parser), :listen,
                    s(:sym, :characters),
                    s(:array,
                      s(:str, "version"))),
                  s(:args,
                    s(:arg, :text)),
                  s(:begin,
                    s(:send, nil, :assert,
                      s(:send,
                        s(:lvar, :text), :=~,
                        s(:regexp,
                          s(:str, "@ANT_VERSION@"),
                          s(:regopt))),
                      s(:dstr,
                        s(:str, "version was '"),
                        s(:begin,
                          s(:lvar, :text)),
                        s(:str, "'"))),
                    s(:op_asgn,
                      s(:lvasgn, :tc), :+,
                      s(:int, 1)))),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :parser), :parse),
                    s(:resbody, nil,
                      s(:lvasgn, :exception),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :exception), :kind_of?,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Test), :Unit), :AssertionFailedError)),
                          s(:send, nil, :raise,
                            s(:lvar, :exception)), nil),
                        s(:send, nil, :puts,
                          s(:gvar, :$!)),
                        s(:send, nil, :puts,
                          s(:send,
                            s(:lvar, :exception), :backtrace)))), nil)),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:lvar, :count)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:lvar, :tc)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:lvar, :start_document)),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:lvar, :end_document))))),
          s(:class,
            s(:const, nil, :SimpleDoctypeListener), nil,
            s(:begin,
              s(:send, nil, :include,
                s(:const,
                  s(:const, nil, :REXML), :SAX2Listener)),
              s(:send, nil, :attr_reader,
                s(:sym, :name),
                s(:sym, :pub_sys),
                s(:sym, :long_name),
                s(:sym, :uri)),
              s(:def, :initialize,
                s(:args),
                s(:ivasgn, :@name,
                  s(:ivasgn, :@pub_sys,
                    s(:ivasgn, :@long_name,
                      s(:ivasgn, :@uri,
                        s(:nil)))))),
              s(:def, :doctype,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :pub_sys),
                  s(:arg, :long_name),
                  s(:arg, :uri)),
                s(:begin,
                  s(:ivasgn, :@name,
                    s(:lvar, :name)),
                  s(:ivasgn, :@pub_sys,
                    s(:lvar, :pub_sys)),
                  s(:ivasgn, :@long_name,
                    s(:lvar, :long_name)),
                  s(:ivasgn, :@uri,
                    s(:lvar, :uri)))))),
          s(:def, :test_simple_doctype_listener,
            s(:args),
            s(:begin,
              s(:lvasgn, :xml,
                s(:dstr,
                  s(:str, "        <?xml version=\"1.0\"?>\n"),
                  s(:str, "        <!DOCTYPE greeting PUBLIC \"Hello Greeting DTD\" \"http://foo/hello.dtd\">\n"),
                  s(:str, "        <greeting>Hello, world!</greeting>\n"))),
              s(:lvasgn, :parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Parsers), :SAX2Parser), :new,
                  s(:lvar, :xml))),
              s(:lvasgn, :dtl,
                s(:send,
                  s(:const, nil, :SimpleDoctypeListener), :new)),
              s(:send,
                s(:lvar, :parser), :listen,
                s(:lvar, :dtl)),
              s(:lvasgn, :tname,
                s(:nil)),
              s(:lvasgn, :tpub_sys,
                s(:nil)),
              s(:lvasgn, :tlong_name,
                s(:nil)),
              s(:lvasgn, :turi,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:sym, :doctype)),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :pub_sys),
                  s(:arg, :long_name),
                  s(:arg, :uri)),
                s(:begin,
                  s(:lvasgn, :tname,
                    s(:lvar, :name)),
                  s(:lvasgn, :tpub_sys,
                    s(:lvar, :pub_sys)),
                  s(:lvasgn, :tlong_name,
                    s(:lvar, :long_name)),
                  s(:lvasgn, :turi,
                    s(:lvar, :uri)))),
              s(:send,
                s(:lvar, :parser), :parse),
              s(:send, nil, :assert_equal,
                s(:str, "greeting"),
                s(:lvar, :tname),
                s(:str, "simple doctype block listener failed - incorrect name")),
              s(:send, nil, :assert_equal,
                s(:str, "PUBLIC"),
                s(:lvar, :tpub_sys),
                s(:str, "simple doctype block listener failed - incorrect pub_sys")),
              s(:send, nil, :assert_equal,
                s(:str, "Hello Greeting DTD"),
                s(:lvar, :tlong_name),
                s(:str, "simple doctype block listener failed - incorrect long_name")),
              s(:send, nil, :assert_equal,
                s(:str, "http://foo/hello.dtd"),
                s(:lvar, :turi),
                s(:str, "simple doctype block listener failed - incorrect uri")),
              s(:send, nil, :assert_equal,
                s(:str, "greeting"),
                s(:send,
                  s(:lvar, :dtl), :name),
                s(:str, "simple doctype listener failed - incorrect name")),
              s(:send, nil, :assert_equal,
                s(:str, "PUBLIC"),
                s(:send,
                  s(:lvar, :dtl), :pub_sys),
                s(:str, "simple doctype listener failed - incorrect pub_sys")),
              s(:send, nil, :assert_equal,
                s(:str, "Hello Greeting DTD"),
                s(:send,
                  s(:lvar, :dtl), :long_name),
                s(:str, "simple doctype listener failed - incorrect long_name")),
              s(:send, nil, :assert_equal,
                s(:str, "http://foo/hello.dtd"),
                s(:send,
                  s(:lvar, :dtl), :uri),
                s(:str, "simple doctype listener failed - incorrect uri")))),
          s(:def, :test_doctype_with_mising_name_throws_exception,
            s(:args),
            s(:begin,
              s(:lvasgn, :xml,
                s(:dstr,
                  s(:str, "        <?xml version=\"1.0\"?>\n"),
                  s(:str, "        <!DOCTYPE >\n"),
                  s(:str, "        <greeting>Hello, world!</greeting>\n"))),
              s(:lvasgn, :parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Parsers), :SAX2Parser), :new,
                  s(:lvar, :xml))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :REXML), :ParseException),
                  s(:str, "doctype missing name did not throw ParseException")),
                s(:args),
                s(:send,
                  s(:lvar, :parser), :parse)))),
          s(:class,
            s(:const, nil, :KouListener), nil,
            s(:begin,
              s(:send, nil, :include,
                s(:const,
                  s(:const, nil, :REXML), :SAX2Listener)),
              s(:send, nil, :attr_accessor,
                s(:sym, :sdoc),
                s(:sym, :edoc)),
              s(:send, nil, :attr_reader,
                s(:sym, :selem),
                s(:sym, :decl),
                s(:sym, :pi)),
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:ivasgn, :@sdoc,
                    s(:ivasgn, :@edoc,
                      s(:ivasgn, :@selem,
                        s(:false)))),
                  s(:ivasgn, :@decl,
                    s(:int, 0)),
                  s(:ivasgn, :@pi,
                    s(:int, 0)))),
              s(:def, :start_document,
                s(:args),
                s(:ivasgn, :@sdoc,
                  s(:true))),
              s(:def, :end_document,
                s(:args),
                s(:ivasgn, :@edoc,
                  s(:true))),
              s(:def, :xmldecl,
                s(:args,
                  s(:restarg, :arg)),
                s(:op_asgn,
                  s(:ivasgn, :@decl), :+,
                  s(:int, 1))),
              s(:def, :processing_instruction,
                s(:args,
                  s(:restarg, :arg)),
                s(:op_asgn,
                  s(:ivasgn, :@pi), :+,
                  s(:int, 1))),
              s(:def, :start_element,
                s(:args,
                  s(:restarg, :arg)),
                s(:ivasgn, :@selem,
                  s(:true))))),
          s(:def, :test_begin_end_document,
            s(:args),
            s(:begin,
              s(:lvasgn, :parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Parsers), :SAX2Parser), :new,
                  s(:str, "<a/>"))),
              s(:lvasgn, :kl,
                s(:send,
                  s(:const, nil, :KouListener), :new)),
              s(:send,
                s(:lvar, :parser), :listen,
                s(:lvar, :kl)),
              s(:lvasgn, :sd,
                s(:false)),
              s(:lvasgn, :ed,
                s(:false)),
              s(:block,
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:sym, :start_document)),
                s(:args),
                s(:lvasgn, :sd,
                  s(:true))),
              s(:block,
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:sym, :end_document)),
                s(:args),
                s(:lvasgn, :ed,
                  s(:true))),
              s(:send,
                s(:lvar, :parser), :parse),
              s(:send, nil, :assert,
                s(:lvar, :sd),
                s(:str, ":start_document block failed")),
              s(:send, nil, :assert,
                s(:lvar, :ed),
                s(:str, ":end_document block failed")),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :kl), :sdoc),
                s(:str, ":start_document listener failed")),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :kl), :edoc),
                s(:str, ":end_document listener failed")))),
          s(:def, :test_listen_before_start,
            s(:args),
            s(:begin,
              s(:lvasgn, :parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Parsers), :SAX2Parser), :new,
                  s(:str, "<?xml version='1.0'?><?pi?><a><?pi?></a>"))),
              s(:lvasgn, :k1,
                s(:send,
                  s(:const, nil, :KouListener), :new)),
              s(:send,
                s(:lvar, :parser), :listen,
                s(:lvar, :k1)),
              s(:lvasgn, :xmldecl,
                s(:false)),
              s(:lvasgn, :pi,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:sym, :xmldecl)),
                s(:args),
                s(:lvasgn, :xmldecl,
                  s(:true))),
              s(:block,
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:sym, :processing_instruction)),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :pi), :+,
                  s(:int, 1))),
              s(:send,
                s(:lvar, :parser), :parse),
              s(:send, nil, :assert,
                s(:lvar, :xmldecl),
                s(:str, ":xmldecl failed")),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:lvar, :pi),
                s(:str, ":processing_instruction failed")),
              s(:send, nil, :assert,
                s(:send,
                  s(:lvar, :k1), :decl),
                s(:str, "Listener for xmldecl failed")),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :k1), :pi),
                s(:str, "Listener for processing instruction failed")))),
          s(:def, :test_socket,
            s(:args),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "socket")),
              s(:block,
                s(:send,
                  s(:const, nil, :TCPServer), :open,
                  s(:str, "127.0.0.1"),
                  s(:int, 0)),
                s(:args,
                  s(:arg, :server)),
                s(:block,
                  s(:send,
                    s(:const, nil, :TCPSocket), :open,
                    s(:str, "127.0.0.1"),
                    s(:send,
                      s(:send,
                        s(:lvar, :server), :addr), :[],
                      s(:int, 1))),
                  s(:args,
                    s(:arg, :socket)),
                  s(:begin,
                    s(:lvasgn, :ok,
                      s(:false)),
                    s(:lvasgn, :session,
                      s(:send,
                        s(:lvar, :server), :accept)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:send,
                            s(:lvar, :session), :<<,
                            s(:str, "<foo>")),
                          s(:lvasgn, :parser,
                            s(:send,
                              s(:const,
                                s(:const,
                                  s(:const, nil, :REXML), :Parsers), :SAX2Parser), :new,
                              s(:lvar, :socket))),
                          s(:send,
                            s(:block,
                              s(:send,
                                s(:const, nil, :Fiber), :new),
                              s(:args),
                              s(:begin,
                                s(:block,
                                  s(:send,
                                    s(:lvar, :parser), :listen,
                                    s(:sym, :start_element)),
                                  s(:args),
                                  s(:begin,
                                    s(:lvasgn, :ok,
                                      s(:true)),
                                    s(:send,
                                      s(:const, nil, :Fiber), :yield))),
                                s(:send,
                                  s(:lvar, :parser), :parse))), :resume),
                          s(:send, nil, :assert,
                            s(:lvar, :ok))),
                        s(:send,
                          s(:lvar, :session), :close)))))))),
          s(:def, :test_char_ref_sax2,
            s(:args),
            s(:begin,
              s(:lvasgn, :parser,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Parsers), :SAX2Parser), :new,
                  s(:str, "<ABC>&#252;</ABC>"))),
              s(:lvasgn, :result,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:sym, :characters)),
                s(:args,
                  s(:arg, :text)),
                s(:lvasgn, :result,
                  s(:send,
                    s(:lvar, :text), :unpack,
                    s(:str, "U*")))),
              s(:send,
                s(:lvar, :parser), :parse),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :result), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 252),
                s(:send,
                  s(:lvar, :result), :[],
                  s(:int, 0))))),
          s(:def, :test_char_ref_dom,
            s(:args),
            s(:begin,
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:str, "<ABC>&#252;</ABC>"))),
              s(:lvasgn, :result,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :text), :unpack,
                  s(:str, "U*"))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :result), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 252),
                s(:send,
                  s(:lvar, :result), :[],
                  s(:int, 0))))),
          s(:class,
            s(:const, nil, :Ticket68), nil,
            s(:send, nil, :include,
              s(:const,
                s(:const, nil, :REXML), :SAX2Listener))),
          s(:def, :test_ticket_68,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:send, nil, :fixture_path,
                  s(:str, "ticket_68.xml"))),
              s(:args,
                s(:arg, :f)),
              s(:begin,
                s(:lvasgn, :parser,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :REXML), :Parsers), :SAX2Parser), :new,
                    s(:lvar, :f))),
                s(:send,
                  s(:lvar, :parser), :listen,
                  s(:send,
                    s(:const, nil, :Ticket68), :new)),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :parser), :parse),
                    s(:resbody, nil, nil,
                      s(:begin,
                        s(:send, nil, :p,
                          s(:send,
                            s(:send,
                              s(:lvar, :parser), :source), :position)),
                        s(:send, nil, :p,
                          s(:send,
                            s(:send,
                              s(:lvar, :parser), :source), :current_line)),
                        s(:send, nil, :puts,
                          s(:send,
                            s(:send,
                              s(:gvar, :$!), :backtrace), :join,
                            s(:str, "\n"))),
                        s(:send, nil, :flunk,
                          s(:send,
                            s(:gvar, :$!), :message)))), nil))))))),
      s(:class,
        s(:const, nil, :MySAX2Listener), nil,
        s(:send, nil, :include,
          s(:const,
            s(:const, nil, :REXML), :SAX2Listener))))))
