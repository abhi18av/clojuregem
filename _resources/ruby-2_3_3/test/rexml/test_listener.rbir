s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/streamlistener")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:begin,
      s(:class,
        s(:const, nil, :BaseTester),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :REXMLTestUtils)),
          s(:def, :test_empty,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@listener)), nil,
                s(:return)),
              s(:lvasgn, :t1,
                s(:str, "<string></string>")),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:ivar, :@listener), :parse,
                  s(:lvar, :t1)),
                s(:str, "Empty")))),
          s(:def, :test_space,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@listener)), nil,
                s(:return)),
              s(:lvasgn, :t2,
                s(:str, "<string>    </string>")),
              s(:send, nil, :assert_equal,
                s(:str, "    "),
                s(:send,
                  s(:ivar, :@listener), :parse,
                  s(:lvar, :t2)),
                s(:str, "Space")))),
          s(:def, :test_whitespace,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@listener)), nil,
                s(:return)),
              s(:lvasgn, :t3,
                s(:str, "<string>RE\n \t \n \t XML</string>")),
              s(:send, nil, :assert_equal,
                s(:str, "RE\n \t \n \t XML"),
                s(:send,
                  s(:ivar, :@listener), :parse,
                  s(:lvar, :t3)),
                s(:str, "Whitespaces")))),
          s(:def, :test_leading_trailing_whitespace,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@listener)), nil,
                s(:return)),
              s(:lvasgn, :t4,
                s(:str, "<string>    REXML    </string>")),
              s(:send, nil, :assert_equal,
                s(:str, "    REXML    "),
                s(:send,
                  s(:ivar, :@listener), :parse,
                  s(:lvar, :t4)),
                s(:str, "Leading and trailing whitespaces")))),
          s(:def, :test_entity_reference,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@listener)), nil,
                s(:return)),
              s(:lvasgn, :t5,
                s(:str, "<string>&lt;&gt;&amp;lt;&amp;gt;</string>")),
              s(:send, nil, :assert_equal,
                s(:str, "<>&lt;&gt;"),
                s(:send,
                  s(:ivar, :@listener), :parse,
                  s(:lvar, :t5)),
                s(:str, "Entity reference")))),
          s(:def, :test_character_reference,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@listener)), nil,
                s(:return)),
              s(:lvasgn, :t6,
                s(:str, "<string>&#xd;</string>")),
              s(:send, nil, :assert_equal,
                s(:str, "\r"),
                s(:send,
                  s(:ivar, :@listener), :parse,
                  s(:lvar, :t6)),
                s(:str, "Character reference.")))),
          s(:def, :test_cr,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@listener)), nil,
                s(:return)),
              s(:lvasgn, :t7,
                s(:str, "<string> \r\n \r \n </string>")),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:str, " \n \n \n "), :unpack,
                    s(:str, "C*")), :inspect),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@listener), :parse,
                      s(:lvar, :t7)), :unpack,
                    s(:str, "C*")), :inspect),
                s(:str, "CR")))),
          s(:class,
            s(:const, nil, :AccentListener), nil,
            s(:begin,
              s(:def, :tag_start,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :attributes)), nil),
              s(:def, :tag_end,
                s(:args,
                  s(:arg, :name)), nil),
              s(:def, :xmldecl,
                s(:args,
                  s(:arg, :a),
                  s(:arg, :b),
                  s(:arg, :c)), nil),
              s(:def, :text,
                s(:args,
                  s(:arg, :tx)), nil))),
          s(:def, :test_accents,
            s(:args),
            s(:begin,
              s(:lvasgn, :source,
                s(:dstr,
                  s(:str, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"),
                  s(:str, "<g>\n"),
                  s(:str, "<f  a=\"\xE9\" />\n"),
                  s(:str, "</g>"))),
              s(:lvasgn, :doc,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :source))),
              s(:lvasgn, :a,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :[],
                    s(:str, "/g/f")), :attribute,
                  s(:str, "a"))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :value), :respond_to?,
                  s(:sym, :force_encoding)),
                s(:send,
                  s(:send,
                    s(:lvar, :a), :value), :force_encoding,
                  s(:str, "binary")), nil),
              s(:send, nil, :assert_equal,
                s(:str, "\xC3\xA9"),
                s(:send,
                  s(:lvar, :a), :value)),
              s(:lvasgn, :doc,
                s(:block,
                  s(:send,
                    s(:const, nil, :File), :open,
                    s(:send, nil, :fixture_path,
                      s(:str, "stream_accents.xml"))),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :parse_stream,
                    s(:lvar, :f),
                    s(:send,
                      s(:const, nil, :AccentListener), :new)))))))),
      s(:class,
        s(:const, nil, :MyREXMLListener), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :REXML), :StreamListener)),
          s(:def, :initialize,
            s(:args),
            s(:ivasgn, :@text,
              s(:nil))),
          s(:def, :parse,
            s(:args,
              s(:arg, :stringOrReadable)),
            s(:begin,
              s(:ivasgn, :@text,
                s(:str, "")),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :parse_stream,
                s(:lvar, :stringOrReadable),
                s(:self)),
              s(:ivar, :@text))),
          s(:def, :text,
            s(:args,
              s(:arg, :text)),
            s(:send,
              s(:ivar, :@text), :<<,
              s(:lvar, :text))))),
      s(:class,
        s(:const, nil, :REXMLTester),
        s(:const, nil, :BaseTester),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:ivasgn, :@listener,
              s(:send,
                s(:const, nil, :MyREXMLListener), :new))),
          s(:def, :test_character_reference_2,
            s(:args),
            s(:begin,
              s(:lvasgn, :t6,
                s(:str, "<string>&#xd;</string>")),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :t6), :strip),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :new,
                    s(:lvar, :t6)), :to_s)))))))))
