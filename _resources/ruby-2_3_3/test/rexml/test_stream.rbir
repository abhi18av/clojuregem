s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/streamlistener")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:begin,
      s(:class,
        s(:const, nil, :MyListener), nil,
        s(:send, nil, :include,
          s(:const,
            s(:const, nil, :REXML), :StreamListener))),
      s(:class,
        s(:const, nil, :StreamTester),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_listener,
            s(:args),
            s(:begin,
              s(:lvasgn, :data,
                s(:str, "<session1 user=\"han\" password=\"rootWeiler\" />\n<session2 user=\"han\" password=\"rootWeiler\" />")),
              s(:lvasgn, :b,
                s(:send,
                  s(:const, nil, :RequestReader), :new,
                  s(:lvar, :data))),
              s(:lvasgn, :b,
                s(:send,
                  s(:const, nil, :RequestReader), :new,
                  s(:lvar, :data))))),
          s(:def, :test_ticket_49,
            s(:args),
            s(:begin,
              s(:lvasgn, :source,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:dstr,
                    s(:str, "      <!DOCTYPE foo [\n"),
                    s(:str, "        <!ENTITY ent \"replace\">\n"),
                    s(:str, "      ]>\n"),
                    s(:str, "      <a>&ent;</a>\n")))),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :parse_stream,
                s(:lvar, :source),
                s(:send,
                  s(:const, nil, :MyListener), :new)))),
          s(:def, :test_ticket_10,
            s(:args),
            s(:begin,
              s(:lvasgn, :source,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:dstr,
                    s(:str, "      <!DOCTYPE foo [\n"),
                    s(:str, "        <!ENTITY ent \"replace\">\n"),
                    s(:str, "        <!ATTLIST a\n"),
                    s(:str, "         xmlns:human CDATA #FIXED \"http://www.foo.com/human\">\n"),
                    s(:str, "        <!ELEMENT bar (#PCDATA)>\n"),
                    s(:str, "        <!NOTATION n1 PUBLIC \"-//HM//NOTATION TEST1//EN\" 'urn:x-henrikmartensson.org:test5'>\n"),
                    s(:str, "      ]>\n"),
                    s(:str, "      <a/>\n")))),
              s(:lvasgn, :listener,
                s(:send,
                  s(:const, nil, :MyListener), :new)),
              s(:sclass,
                s(:lvar, :listener),
                s(:begin,
                  s(:send, nil, :attr_accessor,
                    s(:sym, :events)),
                  s(:def, :entitydecl,
                    s(:args,
                      s(:arg, :content)),
                    s(:send,
                      s(:ivar, :@events), :[]=,
                      s(:sym, :entitydecl),
                      s(:true))),
                  s(:def, :attlistdecl,
                    s(:args,
                      s(:arg, :element_name),
                      s(:arg, :attributes),
                      s(:arg, :raw_content)),
                    s(:send,
                      s(:ivar, :@events), :[]=,
                      s(:sym, :attlistdecl),
                      s(:true))),
                  s(:def, :elementdecl,
                    s(:args,
                      s(:arg, :content)),
                    s(:send,
                      s(:ivar, :@events), :[]=,
                      s(:sym, :elementdecl),
                      s(:true))),
                  s(:def, :notationdecl,
                    s(:args,
                      s(:arg, :content)),
                    s(:send,
                      s(:ivar, :@events), :[]=,
                      s(:sym, :notationdecl),
                      s(:true))))),
              s(:send,
                s(:lvar, :listener), :events=,
                s(:hash)),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :parse_stream,
                s(:lvar, :source),
                s(:lvar, :listener)),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :listener), :events), :[],
                  s(:sym, :entitydecl))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :listener), :events), :[],
                  s(:sym, :attlistdecl))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :listener), :events), :[],
                  s(:sym, :elementdecl))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:lvar, :listener), :events), :[],
                  s(:sym, :notationdecl))))),
          s(:def, :test_entity,
            s(:args),
            s(:begin,
              s(:lvasgn, :listener,
                s(:send,
                  s(:const, nil, :MyListener), :new)),
              s(:sclass,
                s(:lvar, :listener),
                s(:begin,
                  s(:send, nil, :attr_accessor,
                    s(:sym, :entities)),
                  s(:def, :entity,
                    s(:args,
                      s(:arg, :content)),
                    s(:send,
                      s(:ivar, :@entities), :<<,
                      s(:lvar, :content))))),
              s(:send,
                s(:lvar, :listener), :entities=,
                s(:array)),
              s(:lvasgn, :source,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:dstr,
                    s(:str, "<!DOCTYPE root [\n"),
                    s(:str, "<!ENTITY % ISOLat2\n"),
                    s(:str, "         SYSTEM \"http://www.xml.com/iso/isolat2-xml.entities\" >\n"),
                    s(:str, "%ISOLat2;\n"),
                    s(:str, "]>\n"),
                    s(:str, "<root/>\n")))),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :parse_stream,
                s(:lvar, :source),
                s(:lvar, :listener)),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:str, "ISOLat2")),
                s(:send,
                  s(:lvar, :listener), :entities)))))),
      s(:class,
        s(:const, nil, :RequestReader), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :doc)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@stack,
                s(:array)),
              s(:ivasgn, :@doc,
                s(:nil)),
              s(:block,
                s(:send, nil, :catch,
                  s(:sym, :fini)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Document), :parse_stream,
                    s(:lvar, :io),
                    s(:self)),
                  s(:send, nil, :raise,
                    s(:const, nil, :IOError)))))),
          s(:def, :tag_start,
            s(:args,
              s(:arg, :name),
              s(:arg, :args)),
            s(:begin,
              s(:if,
                s(:ivar, :@doc),
                s(:send,
                  s(:ivar, :@stack), :push,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :Element), :new,
                    s(:lvar, :name),
                    s(:send,
                      s(:ivar, :@stack), :last))),
                s(:begin,
                  s(:ivasgn, :@doc,
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Document), :new,
                      s(:dstr,
                        s(:str, "<"),
                        s(:begin,
                          s(:lvar, :name)),
                        s(:str, "/>")))),
                  s(:send,
                    s(:ivar, :@stack), :push,
                    s(:send,
                      s(:ivar, :@doc), :root)))),
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :attr),
                  s(:arg, :val)),
                s(:send,
                  s(:send,
                    s(:ivar, :@stack), :last), :add_attribute,
                  s(:lvar, :attr),
                  s(:lvar, :val))))),
          s(:def, :tag_end,
            s(:args,
              s(:arg, :name),
              s(:restarg, :args)),
            s(:begin,
              s(:send,
                s(:ivar, :@stack), :pop),
              s(:if,
                s(:send,
                  s(:ivar, :@stack), :empty?),
                s(:send, nil, :throw,
                  s(:sym, :fini)), nil))),
          s(:def, :text,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:send,
                s(:ivar, :@stack), :last), :text=,
              s(:lvar, :str))),
          s(:def, :comment,
            s(:args,
              s(:arg, :str)), nil),
          s(:def, :doctype,
            s(:args,
              s(:arg, :name),
              s(:arg, :pub_sys),
              s(:arg, :long_name),
              s(:arg, :uri)), nil),
          s(:def, :doctype_end,
            s(:args), nil))))))
