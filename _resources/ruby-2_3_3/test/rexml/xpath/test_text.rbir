s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/element")),
  s(:send, nil, :require,
    s(:str, "rexml/xpath")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestXPathText),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:ivasgn, :@doc,
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :Document), :new))),
        s(:def, :tear_down,
          s(:args), nil),
        s(:def, :test_text_as_element,
          s(:args),
          s(:begin,
            s(:lvasgn, :node1,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"),
                s(:ivar, :@doc))),
            s(:lvasgn, :node2,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "b"),
                s(:lvar, :node1))),
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :Text), :new,
              s(:str, "test"),
              s(:false),
              s(:lvar, :node2)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:ivar, :@doc), :elements), :size),
              s(:str, "doc owns 1 element node1")),
            s(:send, nil, :assert_same,
              s(:lvar, :node1),
              s(:send,
                s(:send,
                  s(:ivar, :@doc), :elements), :[],
                s(:int, 1)),
              s(:str, "doc owns 1 element node1")),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :node1), :elements), :size),
              s(:str, "node1 owns 1 element node2")),
            s(:send, nil, :assert_same,
              s(:lvar, :node2),
              s(:send,
                s(:send,
                  s(:lvar, :node1), :elements), :[],
                s(:int, 1)),
              s(:str, "node1 owns 1 element node2")),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :node2), :size),
              s(:str, "node2 owns 1 text element")))),
        s(:def, :test_text_in_xpath_query,
          s(:args),
          s(:begin,
            s(:lvasgn, :node1,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"),
                s(:ivar, :@doc))),
            s(:lvasgn, :node2,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "b"),
                s(:lvar, :node1))),
            s(:lvasgn, :textnode,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Text), :new,
                s(:str, "test"),
                s(:false),
                s(:lvar, :node2))),
            s(:send,
              s(:lvar, :textnode), :parent=,
              s(:lvar, :node2)),
            s(:lvasgn, :nodes,
              s(:send,
                s(:ivar, :@doc), :get_elements,
                s(:str, "//b"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :nodes), :size),
              s(:str, "document has one element")),
            s(:lvasgn, :nodes,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:ivar, :@doc),
                s(:str, "//text()"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :nodes), :size),
              s(:str, "//text() should yield one Text element")),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :REXML), :Text),
              s(:send,
                s(:send,
                  s(:lvar, :nodes), :[],
                  s(:int, 0)), :class)))),
        s(:def, :test_comment_in_xpath_query,
          s(:args),
          s(:begin,
            s(:lvasgn, :node1,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"),
                s(:ivar, :@doc))),
            s(:lvasgn, :node2,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "b"),
                s(:lvar, :node1))),
            s(:lvasgn, :commentnode,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Comment), :new,
                s(:str, "test"),
                s(:lvar, :node2))),
            s(:lvasgn, :nodes,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:ivar, :@doc),
                s(:str, "//comment()"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :nodes), :size),
              s(:str, "//comment() should yield one Comment element")),
            s(:send, nil, :assert_same,
              s(:lvar, :commentnode),
              s(:send,
                s(:lvar, :nodes), :[],
                s(:int, 0))))),
        s(:def, :test_parentage,
          s(:args),
          s(:begin,
            s(:lvasgn, :node1,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"),
                s(:ivar, :@doc))),
            s(:send, nil, :assert_same,
              s(:ivar, :@doc),
              s(:send,
                s(:lvar, :node1), :parent),
              s(:str, "node1 parent is document")),
            s(:lvasgn, :node2,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "b"),
                s(:lvar, :node1))),
            s(:send, nil, :assert_same,
              s(:lvar, :node1),
              s(:send,
                s(:lvar, :node2), :parent),
              s(:str, "node2 parent is node1")),
            s(:lvasgn, :textnode,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Text), :new,
                s(:str, "test"),
                s(:false),
                s(:lvar, :node2))),
            s(:send, nil, :assert_same,
              s(:lvar, :node2),
              s(:send,
                s(:lvar, :textnode), :parent)),
            s(:lvasgn, :comment,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Comment), :new,
                s(:str, "Test comment"),
                s(:lvar, :node2))),
            s(:send, nil, :assert_same,
              s(:lvar, :node2),
              s(:send,
                s(:lvar, :comment), :parent)))),
        s(:def, :test_ancestors,
          s(:args),
          s(:begin,
            s(:lvasgn, :node1,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "a"),
                s(:ivar, :@doc))),
            s(:lvasgn, :node2,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new,
                s(:str, "b"),
                s(:lvar, :node1))),
            s(:lvasgn, :textnode,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Text), :new,
                s(:str, "test"),
                s(:false),
                s(:lvar, :node2))),
            s(:send, nil, :assert_same,
              s(:lvar, :node2),
              s(:send,
                s(:lvar, :textnode), :parent)),
            s(:lvasgn, :nodes,
              s(:send,
                s(:ivar, :@doc), :get_elements,
                s(:str, "//b/ancestor::*"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :nodes), :size),
              s(:str, "<b> has one element ancestor")),
            s(:lvasgn, :nodes,
              s(:send,
                s(:ivar, :@doc), :get_elements,
                s(:str, "//b/ancestor::node()"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :nodes), :size),
              s(:str, "<b> has two node ancestors")),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :nodes), :[],
                  s(:int, 1)), :kind_of?,
                s(:const,
                  s(:const, nil, :REXML), :Document)))))))))
