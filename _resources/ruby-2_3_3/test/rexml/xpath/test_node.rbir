s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "../rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestXPathNode),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :matches,
          s(:args,
            s(:arg, :xml),
            s(:arg, :xpath)),
          s(:begin,
            s(:lvasgn, :document,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :xml))),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :each,
                s(:lvar, :document),
                s(:lvar, :xpath)), :collect,
              s(:block_pass,
                s(:sym, :to_s))))),
        s(:class,
          s(:const, nil, :TestQName),
          s(:self),
          s(:begin,
            s(:def, :test_ascii,
              s(:args),
              s(:begin,
                s(:lvasgn, :xml,
                  s(:dstr,
                    s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                    s(:str, "<root>\n"),
                    s(:str, "  <ascii>\n"),
                    s(:str, "    <child>child</child>\n"),
                    s(:str, "  </ascii>\n"),
                    s(:str, "</root>\n"))),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "<child>child</child>")),
                  s(:send, nil, :matches,
                    s(:lvar, :xml),
                    s(:str, "/root/ascii/child"))))),
            s(:def, :test_non_ascii,
              s(:args),
              s(:begin,
                s(:lvasgn, :xml,
                  s(:dstr,
                    s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                    s(:str, "<root>\n"),
                    s(:str, "  <non-àscii>\n"),
                    s(:str, "    <child>child</child>\n"),
                    s(:str, "  </non-àscii>\n"),
                    s(:str, "</root>\n"))),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:str, "<child>child</child>")),
                  s(:send, nil, :matches,
                    s(:lvar, :xml),
                    s(:str, "/root/non-àscii/child")))))))))))
