s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestXPathAttribute),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@xml,
              s(:dstr,
                s(:str, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"),
                s(:str, "<root>\n"),
                s(:str, "  <child name=\"one\">child1</child>\n"),
                s(:str, "  <child name=\"two\">child2</child>\n"),
                s(:str, "  <child name=\"three\">child3</child>\n"),
                s(:str, "</root>\n"))),
            s(:ivasgn, :@document,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:ivar, :@xml))))),
        s(:def, :test_elements,
          s(:args),
          s(:begin,
            s(:lvasgn, :root,
              s(:send,
                s(:send,
                  s(:ivar, :@document), :elements), :[],
                s(:str, "root"))),
            s(:lvasgn, :second_child,
              s(:send,
                s(:send,
                  s(:lvar, :root), :elements), :[],
                s(:str, "child[@name='two']"))),
            s(:send, nil, :assert_equal,
              s(:str, "child2"),
              s(:send,
                s(:lvar, :second_child), :text)))),
        s(:def, :test_xpath_each,
          s(:args),
          s(:begin,
            s(:lvasgn, :children,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :each,
                s(:ivar, :@document),
                s(:str, "/root/child[@name='two']"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "child2")),
              s(:send,
                s(:lvar, :children), :collect,
                s(:block_pass,
                  s(:sym, :text))))))))))
