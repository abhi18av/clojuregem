s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestXPathAxisPredcedingSibling),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:casgn, nil, :SOURCE,
          s(:dstr,
            s(:str, "      <a id='1'>\n"),
            s(:str, "        <e id='2'>\n"),
            s(:str, "          <f id='3'/>\n"),
            s(:str, "          <f id='4'/>\n"),
            s(:str, "          <f id='5'/>\n"),
            s(:str, "          <f id='6'/>\n"),
            s(:str, "        </e>\n"),
            s(:str, "      </a>\n"))),
        s(:def, :setup,
          s(:args),
          s(:if,
            s(:defined?,
              s(:cvar, :@@doc)), nil,
            s(:cvasgn, :@@doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:const, nil, :SOURCE))))),
        s(:def, :test_preceding_sibling_axis,
          s(:args),
          s(:begin,
            s(:lvasgn, :context,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "/a/e/f[last()]"))),
            s(:send, nil, :assert_equal,
              s(:str, "6"),
              s(:send,
                s(:send,
                  s(:lvar, :context), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :prev,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :context),
                s(:str, "preceding-sibling::f"))),
            s(:send, nil, :assert_equal,
              s(:str, "5"),
              s(:send,
                s(:send,
                  s(:lvar, :prev), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :prev,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :context),
                s(:str, "preceding-sibling::f[1]"))),
            s(:send, nil, :assert_equal,
              s(:str, "5"),
              s(:send,
                s(:send,
                  s(:lvar, :prev), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :prev,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :context),
                s(:str, "preceding-sibling::f[2]"))),
            s(:send, nil, :assert_equal,
              s(:str, "4"),
              s(:send,
                s(:send,
                  s(:lvar, :prev), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :prev,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :context),
                s(:str, "preceding-sibling::f[3]"))),
            s(:send, nil, :assert_equal,
              s(:str, "3"),
              s(:send,
                s(:send,
                  s(:lvar, :prev), :attributes), :[],
                s(:str, "id")))))))))
