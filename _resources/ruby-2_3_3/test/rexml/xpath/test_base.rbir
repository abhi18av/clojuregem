s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "../rexml_test_utils")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestXPathBase),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXMLTestUtils)),
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:casgn, nil, :SOURCE,
          s(:dstr,
            s(:str, "      <a id='1'>\n"),
            s(:str, "        <b id='2' x='y'>\n"),
            s(:str, "          <c id='3'/>\n"),
            s(:str, "          <c id='4'/>\n"),
            s(:str, "        </b>\n"),
            s(:str, "        <d id='5'>\n"),
            s(:str, "          <c id='6' x='y'/>\n"),
            s(:str, "          <c id='7'/>\n"),
            s(:str, "          <c id='8'/>\n"),
            s(:str, "          <q id='19'/>\n"),
            s(:str, "        </d>\n"),
            s(:str, "        <e id='9'>\n"),
            s(:str, "          <f id='10' a='b'/>\n"),
            s(:str, "          <f id='11' a='c'/>\n"),
            s(:str, "          <f id='12' a='d'>\n"),
            s(:str, "            <g id='13'/>\n"),
            s(:str, "          </f>\n"),
            s(:str, "          <f id='14' a='d'/>\n"),
            s(:str, "        </e>\n"),
            s(:str, "        <m id='15'>\n"),
            s(:str, "          <n id='16'>\n"),
            s(:str, "            <o id='17'>\n"),
            s(:str, "              <p id='18'/>\n"),
            s(:str, "            </o>\n"),
            s(:str, "          </n>\n"),
            s(:str, "        </m>\n"),
            s(:str, "      </a>\n"))),
        s(:casgn, nil, :JENI_TENNISON,
          s(:dstr,
            s(:str, "    <a>\n"),
            s(:str, "      <b>\n"),
            s(:str, "        <c>\n"),
            s(:str, "          <d>\n"),
            s(:str, "            <e id='x'>\n"),
            s(:str, "              <f/>\n"),
            s(:str, "            </e>\n"),
            s(:str, "          </d>\n"),
            s(:str, "        </c>\n"),
            s(:str, "        <c>\n"),
            s(:str, "          <d>\n"),
            s(:str, "            <e id='y'/>\n"),
            s(:str, "          </d>\n"),
            s(:str, "        </c>\n"),
            s(:str, "      </b>\n"),
            s(:str, "      <b>\n"),
            s(:str, "        <c>\n"),
            s(:str, "          <d>\n"),
            s(:str, "            <e id='z'/>\n"),
            s(:str, "          </d>\n"),
            s(:str, "        </c>\n"),
            s(:str, "      </b>\n"),
            s(:str, "    </a>\n"))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:if,
              s(:defined?,
                s(:cvar, :@@doc)), nil,
              s(:cvasgn, :@@doc,
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:const, nil, :SOURCE)))),
            s(:if,
              s(:defined?,
                s(:cvar, :@@jeni)), nil,
              s(:cvasgn, :@@jeni,
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:const, nil, :JENI_TENNISON)))))),
        s(:def, :each_test,
          s(:args,
            s(:arg, :element),
            s(:arg, :xpath)),
          s(:begin,
            s(:lvasgn, :count,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :element),
                s(:lvar, :xpath)),
              s(:args,
                s(:arg, :child)),
              s(:begin,
                s(:op_asgn,
                  s(:lvasgn, :count), :+,
                  s(:int, 1)),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :child)), nil))),
            s(:lvar, :count))),
        s(:def, :test_descendant,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b><c id='1'/></b><d><b><c id='2'/></b></d></a>"))),
            s(:lvasgn, :p,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :doc),
                s(:str, "//c"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :p), :size)),
            s(:lvasgn, :p,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "//p"))),
            s(:send, nil, :assert_equal,
              s(:str, "p"),
              s(:send,
                s(:lvar, :p), :name)),
            s(:lvasgn, :c,
              s(:block,
                s(:send, nil, :each_test,
                  s(:cvar, :@@doc),
                  s(:str, "//c")),
                s(:args,
                  s(:arg, :child)),
                s(:send, nil, :assert_equal,
                  s(:str, "c"),
                  s(:send,
                    s(:lvar, :child), :name)))),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:lvar, :c)),
            s(:lvasgn, :c,
              s(:block,
                s(:send, nil, :each_test,
                  s(:send,
                    s(:cvar, :@@doc), :root),
                  s(:str, "b//c")),
                s(:args,
                  s(:arg, :child)),
                s(:send, nil, :assert_equal,
                  s(:str, "c"),
                  s(:send,
                    s(:lvar, :child), :name)))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:lvar, :c)),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><z id='1'/><b><z id='11'/><z id='12'/></b><c><z id='21'/><z id='22'/><d><z id='31'/><z id='32'/></d></c></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//z[1]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/descendant::z[1]")), :size)))),
        s(:def, :test_root,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b/></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:lvar, :doc),
              s(:send,
                s(:lvar, :doc), :root_node)),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :XPath), :first,
                      s(:lvar, :doc),
                      s(:str, "/")), :elements), :[],
                  s(:int, 1)), :name)))),
        s(:def, :test_abbreviated_simple_child,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a")), :name))),
        s(:def, :test_child,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/b/c"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "3"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:cvar, :@@doc),
                    s(:str, "a/b/c")), :attributes), :[],
                s(:str, "id"))))),
        s(:def, :test_root_child,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:cvar, :@@doc),
                  s(:str, "/a")), :name)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/b/c"))),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:lvar, :c),
                  s(:str, "/a")), :name)))),
        s(:def, :test_root_children,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/b/c"))),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:lvar, :c),
                    s(:str, "/a/b")), :attributes), :[],
                s(:str, "id"))))),
        s(:def, :test_abbreviated_step,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/b/c"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:cvar, :@@doc), :root),
                  s(:str, ".")), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:lvar, :c),
                  s(:str, "..")), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:cvar, :@@doc),
                  s(:str, "a/b/..")), :name)),
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "project.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :f)))),
            s(:lvasgn, :c,
              s(:block,
                s(:send, nil, :each_test,
                  s(:send,
                    s(:lvar, :doc), :root),
                  s(:str, "./Description")),
                s(:args,
                  s(:arg, :child)),
                s(:send, nil, :assert_equal,
                  s(:str, "Description"),
                  s(:send,
                    s(:lvar, :child), :name)))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:lvar, :c)))),
        s(:def, :test_predicates,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "12"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:cvar, :@@doc),
                    s(:str, "a/e/f[3]")), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "13"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:cvar, :@@doc),
                    s(:str, "a/e/f[3]/g")), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "14"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:cvar, :@@doc),
                    s(:str, "a/e/f[@a='d'][2]")), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "14"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:cvar, :@@doc),
                    s(:str, "a/e/f[@a='d'][@id='14']")), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:cvar, :@@doc),
                  s(:str, "*[name()='a' and @id='1']")), :name)),
            s(:lvasgn, :c,
              s(:block,
                s(:send, nil, :each_test,
                  s(:cvar, :@@doc),
                  s(:str, "//*[name()='f' and @a='d']")),
                s(:args,
                  s(:arg, :i)),
                s(:send, nil, :assert_equal,
                  s(:str, "f"),
                  s(:send,
                    s(:lvar, :i), :name)))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:lvar, :c)),
            s(:lvasgn, :c,
              s(:block,
                s(:send, nil, :each_test,
                  s(:cvar, :@@doc),
                  s(:str, "//*[name()='m' or @a='d']")),
                s(:args,
                  s(:arg, :i)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:array,
                      s(:str, "m"),
                      s(:str, "f")), :include?,
                    s(:send,
                      s(:lvar, :i), :name))))),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:lvar, :c)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:cvar, :@@doc),
                  s(:str, "//b[@x]")), :name)))),
        s(:def, :test_node_type,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><?foo bar?><!--comment-->text</a>"))),
            s(:send, nil, :assert_equal,
              s(:sym, :processing_instruction),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :doc), :root),
                  s(:str, "processing-instruction()")), :node_type)),
            s(:send, nil, :assert_equal,
              s(:sym, :comment),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :doc), :root),
                  s(:str, "comment()")), :node_type)))),
        s(:def, :test_functions,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a>more <b id='1'/><b id='2'>dumb</b><b id='3'/><c/> text</a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :res,
              s(:str, "")),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "b[position()=2]"))),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:lvar, :res), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "*[name()='c']"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :res), :name)))),
        s(:def, :no_test_ancestor,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:const, nil, :File), :new,
                  s(:send, nil, :fixture_path,
                    s(:str, "testsrc.xml"))))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :each,
                s(:str, "//item")),
              s(:args,
                s(:arg, :el)),
              s(:begin,
                s(:send, nil, :print,
                  s(:send,
                    s(:lvar, :el), :name)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :el), :attributes), :[],
                    s(:str, "x")),
                  s(:send, nil, :puts,
                    s(:send,
                      s(:str, " -- "), :+,
                      s(:send,
                        s(:send,
                          s(:lvar, :el), :attributes), :[],
                        s(:str, "x")))),
                  s(:send, nil, :puts)))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :each,
                s(:str, "//item/ancestor::")),
              s(:args,
                s(:arg, :el)),
              s(:begin,
                s(:send, nil, :print,
                  s(:send,
                    s(:lvar, :el), :name)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :el), :attributes), :[],
                    s(:str, "x")),
                  s(:send, nil, :puts,
                    s(:send,
                      s(:str, " -- "), :+,
                      s(:send,
                        s(:send,
                          s(:lvar, :el), :attributes), :[],
                        s(:str, "x")))),
                  s(:send, nil, :puts)))))),
        s(:def, :test_more,
          s(:args),
          s(:begin,
            s(:lvasgn, :xmlsource,
              s(:send, nil, :fixture_path,
                s(:str, "testsrc.xml"))),
            s(:lvasgn, :xpathtests,
              s(:send, nil, :fixture_path,
                s(:str, "xp.tst"))),
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :xmlsource)),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :f)))),
            s(:lvasgn, :results,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new)),
            s(:send,
              s(:lvar, :results), :add_element,
              s(:str, "test-results")),
            s(:block,
              s(:send,
                s(:const, nil, :File), :foreach,
                s(:lvar, :xpathtests)),
              s(:args,
                s(:arg, :line)),
              s(:begin,
                s(:send,
                  s(:lvar, :line), :strip!),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send,
                        s(:lvar, :doc), :root),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :doc), :elements), :each,
                          s(:lvar, :line)),
                        s(:args,
                          s(:arg, :el)),
                        s(:send,
                          s(:send,
                            s(:lvar, :results), :root), :<<,
                          s(:send,
                            s(:lvar, :el), :clone))),
                      s(:send,
                        s(:const, nil, :GC), :start)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :z),
                      s(:send, nil, :fail,
                        s(:send,
                          s(:dstr,
                            s(:str, "Error on line "),
                            s(:begin,
                              s(:lvar, :line)),
                            s(:str, ":\n"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :z), :message)),
                            s(:str, "\n")), :+,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :z), :backtrace), :[],
                              s(:int, 0),
                              s(:int, 10)), :join,
                            s(:str, "\n"))))), nil)))))),
        s(:def, :test_axe_descendant,
          s(:args),
          s(:send, nil, :assert_equal,
            s(:str, "f"),
            s(:send,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "descendant::f")), :name))),
        s(:def, :test_axe_parent,
          s(:args),
          s(:begin,
            s(:lvasgn, :q,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/d/c/parent::*/q"))),
            s(:send, nil, :assert_equal,
              s(:int, 19),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :q), :attributes), :[],
                  s(:str, "id")), :to_i)))),
        s(:def, :test_abbreviated_attribute,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:cvar, :@@doc),
                  s(:str, "a[@id='1']")), :name)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/b/c[@id='4']"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "4"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "descendant::f[@a='c']"))),
            s(:send, nil, :assert_equal,
              s(:str, "11"),
              s(:send,
                s(:send,
                  s(:lvar, :result), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "11"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:cvar, :@@doc),
                    s(:str, "a/e/f[@a='c']")), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "11"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :first,
                    s(:cvar, :@@doc),
                    s(:str, "a/e/*[@a='c']")), :attributes), :[],
                s(:str, "id"))))),
        s(:def, :test_axe_self,
          s(:args),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/b/c"))),
            s(:send, nil, :assert,
              s(:lvar, :c)),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:lvar, :c),
                  s(:str, "self::node()")), :name)))),
        s(:def, :test_axe_ancestor,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      <a>\n"),
                  s(:str, "        <b id='1'>\n"),
                  s(:str, "          <c>\n"),
                  s(:str, "            <b id='2'>\n"),
                  s(:str, "              <d/>\n"),
                  s(:str, "            </b>\n"),
                  s(:str, "          </c>\n"),
                  s(:str, "        </b>\n"),
                  s(:str, "      </a>")))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "//d"))),
            s(:send, nil, :assert_equal,
              s(:str, "d"),
              s(:send,
                s(:lvar, :d), :name)),
            s(:lvasgn, :b,
              s(:block,
                s(:send, nil, :each_test,
                  s(:lvar, :d),
                  s(:str, "ancestor::b")),
                s(:args,
                  s(:arg, :el)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 1),
                        s(:int, 2))), :===,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :el), :attributes), :[],
                        s(:str, "id")), :to_i)),
                  s(:dstr,
                    s(:str, "Expected "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :el), :attributes), :[],
                        s(:str, "id"))),
                    s(:str, " to be either 1 or 2"))))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:lvar, :b)))),
        s(:def, :test_axe_child,
          s(:args),
          s(:begin,
            s(:lvasgn, :m,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/child::m"))),
            s(:send, nil, :assert_equal,
              s(:int, 15),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :attributes), :[],
                  s(:str, "id")), :to_i)))),
        s(:def, :test_axe_attribute,
          s(:args),
          s(:begin,
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/attribute::id"))),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:lvar, :a), :value)),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/e/f[@id='14']/attribute::a"))),
            s(:send, nil, :assert_equal,
              s(:str, "d"),
              s(:send,
                s(:lvar, :a), :value)))),
        s(:def, :test_axe_sibling,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b><c/></b><e><f id='10'/><f id='11'/><f id='12'/></e></a>"))),
            s(:lvasgn, :first_f,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "a/e/f"))),
            s(:send, nil, :assert,
              s(:lvar, :first_f)),
            s(:send, nil, :assert_equal,
              s(:str, "10"),
              s(:send,
                s(:send,
                  s(:lvar, :first_f), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :next_f,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "a/e/f/following-sibling::node()"))),
            s(:send, nil, :assert_equal,
              s(:str, "11"),
              s(:send,
                s(:send,
                  s(:lvar, :next_f), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :b,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "a/e/preceding-sibling::node()"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :b), :name)))),
        s(:def, :test_lang,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "lang0.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:const, nil, :Document), :new,
                  s(:lvar, :f)))),
            s(:lvasgn, :c,
              s(:block,
                s(:send, nil, :each_test,
                  s(:lvar, :doc),
                  s(:str, "//language/*")),
                s(:args,
                  s(:arg, :element)), nil)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:lvar, :c)))),
        s(:def, :test_namespaces_1,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "        <foo xmlns:ts=\"this\" xmlns:tt=\"that\">\n"),
                s(:str, "          <ts:bar>this bar</ts:bar>\n"),
                s(:str, "          <tt:bar>that bar</tt:bar>\n"),
                s(:str, "        </foo>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:const, nil, :XPath), :each,
                s(:lvar, :doc),
                s(:str, "//bar")),
              s(:args),
              s(:send, nil, :fail,
                s(:str, "'bar' should match nothing in this case"))),
            s(:lvasgn, :namespace,
              s(:hash,
                s(:pair,
                  s(:str, "t"),
                  s(:str, "this")))),
            s(:lvasgn, :results,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "//t:bar"),
                s(:lvar, :namespace))),
            s(:send, nil, :assert_equal,
              s(:str, "this bar"),
              s(:send,
                s(:lvar, :results), :text)))),
        s(:def, :test_namespaces_2,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "        <foo xmlns:ts=\"this\" xmlns:tt=\"that\">\n"),
                s(:str, "          <ts:bar>this bar</ts:bar>\n"),
                s(:str, "          <tt:bar>that bar</tt:bar>\n"),
                s(:str, "        </foo>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "//*[local_name()='bar']"))),
            s(:send, nil, :assert,
              s(:lvar, :res),
              s(:str, "looking for //*[name()='bar']")),
            s(:send, nil, :assert_equal,
              s(:str, "this"),
              s(:send,
                s(:lvar, :res), :namespace)),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "*[namespace_uri()='that']"))),
            s(:send, nil, :assert_equal,
              s(:str, "that bar"),
              s(:send,
                s(:lvar, :res), :text)))),
        s(:def, :test_complex,
          s(:args),
          s(:begin,
            s(:lvasgn, :next_f,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/e/f[@id='11']/following-sibling::*"))),
            s(:send, nil, :assert_equal,
              s(:int, 12),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :next_f), :attributes), :[],
                  s(:str, "id")), :to_i)),
            s(:lvasgn, :prev_f,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/e/f[@id='11']/preceding-sibling::*"))),
            s(:send, nil, :assert_equal,
              s(:int, 10),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :prev_f), :attributes), :[],
                  s(:str, "id")), :to_i)),
            s(:lvasgn, :c,
              s(:send, nil, :each_test,
                s(:cvar, :@@doc),
                s(:str, "descendant-or-self::*[@x='y']"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:lvar, :c)))),
        s(:def, :test_grouping,
          s(:args),
          s(:begin,
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/d/*[name()='d' and (name()='f' or name()='q')]"))),
            s(:send, nil, :assert_nil,
              s(:lvar, :t)),
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:cvar, :@@doc),
                s(:str, "a/d/*[(name()='d' and name()='f') or name()='q']"))),
            s(:send, nil, :assert_equal,
              s(:str, "q"),
              s(:send,
                s(:lvar, :t), :name)))),
        s(:def, :test_preceding,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b id='0'/><b id='2'/><b><c id='0'/><c id='1'/><c id='2'/></b><b id='1'/></a>"))),
            s(:lvasgn, :start,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :d),
                s(:str, "/a/b[@id='1']"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :start), :name)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :start),
                s(:str, "preceding::c"))),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :attributes), :[],
                s(:str, "id"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :c1),
                s(:lvasgn, :c0)),
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :d),
                s(:str, "/a/b/c[@id='2']/preceding::node()"))),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:lvar, :c1), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "0"),
              s(:send,
                s(:send,
                  s(:lvar, :c0), :attributes), :[],
                s(:str, "id"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :c2),
                s(:lvasgn, :c1),
                s(:lvasgn, :c0),
                s(:lvasgn, :b),
                s(:lvasgn, :b2),
                s(:lvasgn, :b0)),
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :start),
                s(:str, "preceding::node()"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c2), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c1), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c0), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :b), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :b2), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :b0), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:lvar, :c2), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:lvar, :c1), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "0"),
              s(:send,
                s(:send,
                  s(:lvar, :c0), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :b), :attributes), :empty?)),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:lvar, :b2), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_equal,
              s(:str, "0"),
              s(:send,
                s(:send,
                  s(:lvar, :b0), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a><b/><c/><d/></a>"))),
            s(:lvasgn, :matches,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "/a/d/preceding::node()"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:lvar, :matches), :[],
                  s(:int, 0)), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:lvar, :matches), :[],
                  s(:int, 1)), :name)),
            s(:lvasgn, :s,
              s(:str, "<a><b><c id='1'/></b><b><b><c id='2'/><c id='3'/></b><c id='4'/></b><c id='NOMATCH'><c id='5'/></c></a>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :s))),
            s(:lvasgn, :c,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "//c[@id = '5']"))),
            s(:lvasgn, :cs,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :c),
                s(:str, "preceding::c"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:lvar, :cs), :length)))),
        s(:def, :test_following,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b id='0'/><b/><b><c id='1'/><c id='2'/></b><b id='1'/></a>"))),
            s(:lvasgn, :start,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :d),
                s(:str, "/a/b[@id='0']"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:lvar, :start), :name)),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :start),
                s(:str, "following::c"))),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:lvar, :c), :attributes), :[],
                s(:str, "id"))),
            s(:lvasgn, :s,
              s(:str, "<a><b><c><d/></c><e/></b><f><g><h/><i/></g></f><i/></a>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :s))),
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :d),
                s(:str, "/a/b/c"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:lvar, :c), :name)),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :c),
                s(:str, "following::*"))),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:send,
                s(:lvar, :res), :size)),
            s(:lvasgn, :res,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :c),
                s(:str, "following::i"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :res), :size)))),
        s(:def, :test_starts_with,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "        <foo>\n"),
                s(:str, "        <a href=\"mailto:a@b.c\">a@b.c</a>\n"),
                s(:str, "        <a href=\"http://www.foo.com\">http://www.foo.com</a>\n"),
                s(:str, "        </foo>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :mailtos,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//a[starts-with(@href, 'mailto:')]"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :mailtos), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "mailto:a@b.c"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :mailtos), :[],
                    s(:int, 0)), :attributes), :[],
                s(:str, "href"))),
            s(:lvasgn, :ailtos,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//a[starts-with(@href, 'ailto:')]"))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :ailtos), :size)))),
        s(:def, :test_toms_text_node,
          s(:args),
          s(:begin,
            s(:lvasgn, :file,
              s(:str, "<a>A<b>B</b><c>C<d>D</d>E</c>F</a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :file))),
            s(:send, nil, :assert_equal,
              s(:str, "A"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :doc), :[],
                    s(:int, 0)),
                  s(:str, "text()")), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "AF"),
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :XPath), :match,
                      s(:send,
                        s(:lvar, :doc), :[],
                        s(:int, 0)),
                      s(:str, "text()")), :collect),
                  s(:args,
                    s(:arg, :n)),
                  s(:send,
                    s(:lvar, :n), :to_s)), :join,
                s(:str, ""))),
            s(:send, nil, :assert_equal,
              s(:str, "B"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :doc), :[],
                    s(:int, 0)),
                  s(:str, "b/text()")), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "D"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :doc), :[],
                    s(:int, 0)),
                  s(:str, "//d/text()")), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "ABCDEF"),
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :XPath), :match,
                      s(:send,
                        s(:lvar, :doc), :[],
                        s(:int, 0)),
                      s(:str, "//text()")), :collect),
                  s(:args,
                    s(:arg, :n)),
                  s(:send,
                    s(:lvar, :n), :to_s)), :join,
                s(:str, ""))))),
        s(:def, :test_string_length,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "        <AAA>\n"),
                  s(:str, "        <Q/>\n"),
                  s(:str, "        <SSSS/>\n"),
                  s(:str, "        <BB/>\n"),
                  s(:str, "        <CCC/>\n"),
                  s(:str, "        <DDDDDDDD/>\n"),
                  s(:str, "        <EEEE/>\n"),
                  s(:str, "        </AAA>\n")))),
            s(:send, nil, :assert,
              s(:lvar, :doc),
              s(:str, "create doc")),
            s(:lvasgn, :set,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//*[string-length(name()) = 3]"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :set), :size),
              s(:str, "nodes with names length = 3")),
            s(:lvasgn, :set,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//*[string-length(name()) < 3]"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :set), :size),
              s(:str, "nodes with names length < 3")),
            s(:lvasgn, :set,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :to_a,
                s(:str, "//*[string-length(name()) > 3]"))),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :set), :size),
              s(:str, "nodes with names length > 3")))),
        s(:def, :test_contains,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "        <foo>\n"),
                s(:str, "        <a href=\"mailto:a@b.c\">a@b.c</a>\n"),
                s(:str, "        <a href=\"http://www.foo.com\">http://www.foo.com</a>\n"),
                s(:str, "        </foo>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:str, "foo"),
                    s(:int, 1)),
                  s(:array,
                    s(:str, "bar"),
                    s(:int, 0))), :each),
              s(:args,
                s(:arg, :search),
                s(:arg, :expected)),
              s(:begin,
                s(:lvasgn, :set,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :to_a,
                    s(:dstr,
                      s(:str, "//a[contains(@href, '"),
                      s(:begin,
                        s(:lvar, :search)),
                      s(:str, "')]")))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:send,
                    s(:lvar, :set), :size)))))),
        s(:def, :test_substring,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<test string=\"12345\" />"))),
            s(:send,
              s(:const, nil, :Document), :new,
              s(:str, "<a b='1'/>")),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:float, 1.5),
                    s(:float, 2.6),
                    s(:str, "234")),
                  s(:array,
                    s(:int, 0),
                    s(:int, 3),
                    s(:str, "12")),
                  s(:array,
                    s(:int, 0),
                    s(:str, "0 div 0"),
                    s(:str, "")),
                  s(:array,
                    s(:int, 1),
                    s(:str, "0 div 0"),
                    s(:str, "")),
                  s(:array,
                    s(:str, "-42"),
                    s(:str, "1 div 0"),
                    s(:str, "12345")),
                  s(:array,
                    s(:str, "-1 div 0"),
                    s(:str, "1 div 0"),
                    s(:str, ""))), :each),
              s(:args,
                s(:arg, :start),
                s(:arg, :length),
                s(:arg, :expected)),
              s(:begin,
                s(:lvasgn, :set,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :to_a,
                    s(:dstr,
                      s(:str, "//test[substring(@string, "),
                      s(:begin,
                        s(:lvar, :start)),
                      s(:str, ", "),
                      s(:begin,
                        s(:lvar, :length)),
                      s(:str, ") = '"),
                      s(:begin,
                        s(:lvar, :expected)),
                      s(:str, "']")))),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :set), :size),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :start)),
                    s(:str, ", "),
                    s(:begin,
                      s(:lvar, :length)),
                    s(:str, ", '"),
                    s(:begin,
                      s(:lvar, :expected)),
                    s(:str, "'"))))))),
        s(:def, :test_translate,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "      <doc>\n"),
                s(:str, "      <case name='w3c one' result='BAr' />        <!-- w3c -->\n"),
                s(:str, "      <case name='w3c two' result='AAA' />        <!-- w3c -->\n"),
                s(:str, "      <case name='alchemy' result=\"gold\" />   <!-- mike -->\n"),
                s(:str, "      <case name='vbxml one' result='A Space Odyssey' />\n"),
                s(:str, "      <case name='vbxml two' result='AbCdEf' />\n"),
                s(:str, "      </doc>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:block,
              s(:send,
                s(:array,
                  s(:array,
                    s(:str, "bar"),
                    s(:str, "abc"),
                    s(:str, "ABC"),
                    s(:str, "w3c one")),
                  s(:array,
                    s(:str, "--aaa--"),
                    s(:str, "abc-"),
                    s(:str, "ABC"),
                    s(:str, "w3c two")),
                  s(:array,
                    s(:str, "lead"),
                    s(:str, "dear language"),
                    s(:str, "doll groover"),
                    s(:str, "alchemy")),
                  s(:array,
                    s(:str, "A Space Odissei"),
                    s(:str, "i"),
                    s(:str, "y"),
                    s(:str, "vbxml one")),
                  s(:array,
                    s(:str, "abcdefg"),
                    s(:str, "aceg"),
                    s(:str, "ACE"),
                    s(:str, "vbxml two"))), :each),
              s(:args,
                s(:arg, :arg1),
                s(:arg, :arg2),
                s(:arg, :arg3),
                s(:arg, :name)),
              s(:begin,
                s(:lvasgn, :translate,
                  s(:dstr,
                    s(:str, "translate('"),
                    s(:begin,
                      s(:lvar, :arg1)),
                    s(:str, "', '"),
                    s(:begin,
                      s(:lvar, :arg2)),
                    s(:str, "', '"),
                    s(:begin,
                      s(:lvar, :arg3)),
                    s(:str, "')"))),
                s(:lvasgn, :set,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :elements), :to_a,
                    s(:dstr,
                      s(:str, "//case[@result = "),
                      s(:begin,
                        s(:lvar, :translate)),
                      s(:str, "]")))),
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :set), :size),
                  s(:lvar, :translate)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :name),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :set), :[],
                        s(:int, 0)), :attributes), :[],
                    s(:str, "name"))))))),
        s(:def, :test_math,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a><b/><c/></a>"))),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[1]"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "node()[1]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[0 + 1]"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[0 + 1]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[1 + 1]"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[1 + 1]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[4 div 2]"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[4 div 2]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[2 - 1]"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[2 - 1]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[5 mod 2]"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[5 mod 2]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[8 mod 3]"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[8 mod 3]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[1 * 2]"))),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[1 * 2]")), :name)),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :d), :root),
                s(:str, "node()[2 + -1]"))),
            s(:send, nil, :assert_equal,
              s(:str, "b"),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :first,
                  s(:send,
                    s(:lvar, :d), :root),
                  s(:str, "./node()[2 + -1]")), :name)))),
        s(:def, :test_name,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :UndefinedNamespaceException),
                s(:str, "x should be undefined")),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a x='foo'><b/><x:b/></a>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a xmlns:x='foo'><b/><x:b/></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :d), :root), :elements), :to_a,
                  s(:str, "*[name() = \"b\"]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[name() = \"x:b\"]")), :size)))),
        s(:def, :test_local_name,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<a xmlns:x='foo'><b/><x:b/></a>"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :d), :root), :elements), :to_a,
                  s(:str, "*[local_name() = \"b\"]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :elements), :to_a,
                  s(:str, "//*[local_name() = \"b\"]")), :size)))),
        s(:def, :test_comparisons,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b id='1'/><b id='2'/><b id='3'/></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//b[number(@id) > 1]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//b[number(@id) >= 1]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//b[number(@id) <= 1]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//b[number(@id) = (1 * 1)]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//b[number(@id) = (1 mod 2)]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//b[number(@id) = (4 div 2)]")), :size)))),
        s(:def, :test_substring_before,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<r><a/><b/><c/></r>"))),
            s(:send, nil, :assert_equal,
              s(:str, "a"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :to_a,
                    s(:str, "*[name()=substring-before('abc', 'b')]")), :[],
                  s(:int, 0)), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "c"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :doc), :root), :elements), :to_a,
                    s(:str, "*[name()=substring-after('abc', 'b')]")), :[],
                  s(:int, 0)), :name)))),
        s(:def, :test_spaces,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "<a>\n"),
                  s(:str, "        <b>\n"),
                  s(:str, "          <c id='a'/>\n"),
                  s(:str, "        </b>\n"),
                  s(:str, "        <c id='b'/>\n"),
                  s(:str, "      </a>")))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//*[local-name()='c' and @id='b']")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//*[ local-name()='c' and @id='b' ]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//*[ local-name() = 'c' and @id = 'b' ]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/a/c[@id]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/a/c[(@id)]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/a/c[ @id ]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/a/c[ (@id) ]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/a/c[( @id )]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:send,
                    s(:lvar, :doc), :root),
                  s(:str, "/a/c[ ( @id ) ]")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "/a/c [ ( @id ) ] ")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, " / a / c [ ( @id ) ] ")), :size)))),
        s(:def, :test_text_nodes,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<root><child>test</child></root>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "/root/child[text()=\"test\"]"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :r), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "child"),
              s(:send,
                s(:send,
                  s(:lvar, :r), :[],
                  s(:int, 0)), :name)),
            s(:send, nil, :assert_equal,
              s(:str, "test"),
              s(:send,
                s(:send,
                  s(:lvar, :r), :[],
                  s(:int, 0)), :text)))),
        s(:def, :test_auto_string_value,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<root><foo/><title>Introduction</title></root>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :source,
              s(:str, "<a><b/><c/><c>test</c></a>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "/a[c='test']"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :r), :size)),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "a[c='test']"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :r), :size)),
            s(:lvasgn, :r,
              s(:send,
                s(:send,
                  s(:lvar, :d), :elements), :[],
                s(:str, "/a[c='test']"))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :r)),
            s(:lvasgn, :r,
              s(:send,
                s(:send,
                  s(:lvar, :d), :elements), :[],
                s(:str, "a[c='test']"))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :r)),
            s(:lvasgn, :r,
              s(:send,
                s(:send,
                  s(:lvar, :d), :elements), :[],
                s(:str, "a[c='xtest']"))),
            s(:send, nil, :assert_nil,
              s(:lvar, :r)),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "a[c='xtest']"))),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:lvar, :r), :size)))),
        s(:def, :test_ordering,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b><c id='1'/><c id='2'/></b><b><d id='1'/><d id='2'/></b></a>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "/a/*/*[1]"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :r), :size)),
            s(:block,
              s(:send,
                s(:lvar, :r), :each),
              s(:args,
                s(:arg, :el)),
              s(:send, nil, :assert_equal,
                s(:str, "1"),
                s(:send,
                  s(:send,
                    s(:lvar, :el), :attribute,
                    s(:str, "id")), :value))))),
        s(:def, :test_descendant_or_self_ordering,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<a>\n"),
                s(:str, "      <b>\n"),
                s(:str, "        <c id='1'/>\n"),
                s(:str, "        <c id='2'/>\n"),
                s(:str, "      </b>\n"),
                s(:str, "      <b>\n"),
                s(:str, "        <d id='1'>\n"),
                s(:str, "          <c id='3'/>\n"),
                s(:str, "        </d>\n"),
                s(:str, "        <d id='2'>\n"),
                s(:str, "          <e>\n"),
                s(:str, "            <c id='4'/>\n"),
                s(:str, "          </e>\n"),
                s(:str, "        </d>\n"),
                s(:str, "      </b>\n"),
                s(:str, "    </a>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :cs,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :d),
                s(:str, "/descendant-or-self::c"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:lvar, :cs), :length)),
            s(:block,
              s(:send,
                s(:int, 1), :upto,
                s(:int, 4)),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :x), :to_s),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :cs), :[],
                      s(:send,
                        s(:lvar, :x), :-,
                        s(:int, 1))), :attributes), :[],
                  s(:str, "id")))))),
        s(:def, :test_and,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "<doc><route run='*' title='HNO'\n"),
                  s(:str, "      destination='debian_production1' date='*' edition='*'\n"),
                  s(:str, "      source='debian_satellite1'/></doc>")))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :root), :elements), :[],
                s(:str, "route[@run='0']"))),
            s(:send, nil, :assert_equal,
              s(:nil),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :d), :root), :elements), :[],
                s(:str, "route[@run='0' and @title='HNO']"))))),
        s(:def, :test_numbers,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a x=\"0\" y=\"*\" z=\"4e\" w=\"e4\" v=\"a\"/>"))),
            s(:lvasgn, :xp1,
              s(:str, "/a[ @x = 0 ]")),
            s(:lvasgn, :xp2,
              s(:str, "/a[ @x = '0' ]")),
            s(:lvasgn, :xp3,
              s(:str, "/a[ (@x + 1) = 1 ]")),
            s(:lvasgn, :xp4,
              s(:str, "/a[ @y = 0 ]")),
            s(:lvasgn, :xp5,
              s(:str, "/a[ (@z + 1) = 5 ]")),
            s(:lvasgn, :xp6,
              s(:str, "/a[ (@w + 1) = 5 ]")),
            s(:lvasgn, :xp7,
              s(:str, "/a[ (@v + 1) = 1 ]")),
            s(:lvasgn, :xp8,
              s(:str, "/a[ @n = 0 ]")),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp1)), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp2)), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp3)), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp4)), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp5)), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp6)), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp7)), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:lvar, :xp8)), :length)))),
        s(:def, :test_tobis_preceding,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc_string,
              s(:dstr,
                s(:str, "<a>\n"),
                s(:str, "  <b/>\n"),
                s(:str, "  <c>\n"),
                s(:str, "    <d/>\n"),
                s(:str, "    <e/>\n"),
                s(:str, "  </c>\n"),
                s(:str, "</a>"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :doc_string))),
            s(:lvasgn, :e,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :get_elements,
                  s(:str, "/a/c/e")), :[],
                s(:int, 0))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:lvar, :e), :get_elements,
                  s(:str, "preceding-sibling::*")), :length)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :e),
                  s(:str, "preceding::*")), :length)))),
        s(:def, :test_filtering,
          s(:args), nil),
        s(:def, :test_union,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:dstr,
                s(:str, "<div id=\"the_div\">\n"),
                s(:str, "  <span id=\"the_span\">\n"),
                s(:str, "  <strong id=\"the_strong\">a</strong>\n"),
                s(:str, "  </span>\n"),
                s(:str, "  <em id=\"the_em2\">b</em>\n"),
                s(:str, "</div>"))),
            s(:lvasgn, :rd,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :data))),
            s(:lvasgn, :union,
              s(:send,
                s(:lvar, :rd), :get_elements,
                s(:str, "//*[name()=\"em\" or name()=\"strong\"]"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :union), :length),
              s(:str, "name() and \"or\" failed")),
            s(:lvasgn, :union,
              s(:send,
                s(:lvar, :rd), :get_elements,
                s(:str, "//em|//strong"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :union), :length),
              s(:str, "Both tag types are returned by XPath union operator")))),
        s(:def, :test_union2,
          s(:args),
          s(:begin,
            s(:lvasgn, :src,
              s(:dstr,
                s(:str, "<div id=\"the_div\">\n"),
                s(:str, "<span id=\"the_span\">\n"),
                s(:str, "<strong id=\"the_strong\">a</strong>\n"),
                s(:str, "</span>\n"),
                s(:str, "<em id=\"the_em2\">b</em>\n"),
                s(:str, "</div>\n"))),
            s(:lvasgn, :rd,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :src))),
            s(:lvasgn, :union,
              s(:send,
                s(:lvar, :rd), :get_elements,
                s(:str, "//em|//strong"))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :union), :length),
              s(:str, "Both tag types are returned by XPath union operator")))),
        s(:def, :test_a_star_star_one,
          s(:args),
          s(:begin,
            s(:lvasgn, :string,
              s(:dstr,
                s(:str, "<a>\n"),
                s(:str, "  <b>\n"),
                s(:str, "    <c1/>\n"),
                s(:str, "    <d/>\n"),
                s(:str, "    <e/>\n"),
                s(:str, "    <f/>\n"),
                s(:str, "  </b>\n"),
                s(:str, "  <b>\n"),
                s(:str, "    <c2/>\n"),
                s(:str, "    <d/>\n"),
                s(:str, "    <e/>\n"),
                s(:str, "    <f/>\n"),
                s(:str, "  </b>\n"),
                s(:str, "</a>\n"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :string))),
            s(:lvasgn, :c1,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :d),
                s(:str, "/a/*/*[1]"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :c1), :length)),
            s(:send, nil, :assert_equal,
              s(:str, "c1"),
              s(:send,
                s(:send,
                  s(:lvar, :c1), :[],
                  s(:int, 0)), :name)))),
        s(:def, :test_sum,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "<a>"), :+,
                        s(:str, "<b>1</b><b>2</b><b>3</b>")), :+,
                      s(:str, "<c><d>1</d><d>2</d></c>")), :+,
                    s(:str, "<e att='1'/><e att='2'/>")), :+,
                  s(:str, "</a>")))),
            s(:for,
              s(:mlhs,
                s(:lvasgn, :v),
                s(:lvasgn, :p)),
              s(:array,
                s(:array,
                  s(:int, 6),
                  s(:str, "sum(/a/b)")),
                s(:array,
                  s(:int, 9),
                  s(:str, "sum(//b | //d)")),
                s(:array,
                  s(:int, 3),
                  s(:str, "sum(/a/e/@*)"))),
              s(:send, nil, :assert_equal,
                s(:lvar, :v),
                s(:send,
                  s(:send,
                    s(:const, nil, :XPath), :match,
                    s(:lvar, :d),
                    s(:lvar, :p)), :first))))),
        s(:def, :test_xpath_namespace,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:str, "<tag1 xmlns='ns1'><tag2 xmlns='ns2'/><tada>xa</tada></tag1>"))),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :d), :root)),
            s(:lvasgn, :num,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:lvar, :x), :each_element,
                s(:str, "tada")),
              s(:args),
              s(:op_asgn,
                s(:lvasgn, :num), :+,
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:lvar, :num)))),
        s(:def, :test_ticket_39,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "      <rss>\n"),
                  s(:str, "        <channel>\n"),
                  s(:str, "          <!-- removing the namespace declaration makes the test pass -->\n"),
                  s(:str, "          <convertLineBreaks xmlns=\"http://www.blogger.com/atom/ns#\">true</convertLineBreaks>\n"),
                  s(:str, "          <item>\n"),
                  s(:str, "            <title>Item 1</title>\n"),
                  s(:str, "          </item>\n"),
                  s(:str, "          <item>\n"),
                  s(:str, "            <title>Item 2</title>\n"),
                  s(:str, "            <pubDate>Thu, 13 Oct 2005 19:59:00 +0000</pubDate>\n"),
                  s(:str, "          </item>\n"),
                  s(:str, "          <item>\n"),
                  s(:str, "            <title>Item 3</title>\n"),
                  s(:str, "          </item>\n"),
                  s(:str, "        </channel>\n"),
                  s(:str, "      </rss>\n")))),
            s(:lvasgn, :root_node,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :doc),
                s(:str, "rss"))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :root_node)),
            s(:lvasgn, :channel_node,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:lvar, :root_node),
                s(:str, "channel"))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :channel_node)),
            s(:lvasgn, :items,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :channel_node),
                s(:str, "*"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:lvar, :items), :size)),
            s(:lvasgn, :items,
              s(:send,
                s(:const, nil, :XPath), :match,
                s(:lvar, :channel_node),
                s(:str, "item"))),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:lvar, :items), :size)))),
        s(:def, :test_ticket_42,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a></a>")),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :bElem,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "b"))),
            s(:send,
              s(:send,
                s(:lvar, :doc), :root), :add_element,
              s(:lvar, :bElem)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :each,
                s(:str, "//b[name(..) = \"a\"]")),
              s(:args,
                s(:arg, :x)),
              s(:send, nil, :assert_equal,
                s(:lvar, :x),
                s(:lvar, :bElem))))),
        s(:def, :test_ticket_56,
          s(:args),
          s(:begin,
            s(:lvasgn, :namespaces,
              s(:hash,
                s(:pair,
                  s(:str, "h"),
                  s(:str, "http://www.w3.org/1999/xhtml")))),
            s(:lvasgn, :finaldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:send, nil, :fixture_path,
                    s(:str, "google.2.xml"))))),
            s(:lvasgn, :column_headers,
              s(:array)),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :each,
                s(:lvar, :finaldoc),
                s(:str, "//h:form[@action=\"ModifyCampaign\"]//h:th"),
                s(:lvar, :namespaces)),
              s(:args,
                s(:arg, :el)),
              s(:begin,
                s(:lvasgn, :node,
                  s(:send,
                    s(:const,
                      s(:const, nil, :REXML), :XPath), :first,
                    s(:lvar, :el),
                    s(:str, "h:a/text()"),
                    s(:lvar, :namespaces))),
                s(:send,
                  s(:lvar, :column_headers), :<<,
                  s(:begin,
                    s(:if,
                      s(:lvar, :node),
                      s(:send,
                        s(:lvar, :node), :value),
                      s(:nil)))))),
            s(:block,
              s(:send,
                s(:lvar, :column_headers), :map!),
              s(:args,
                s(:arg, :h)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :h), :to_s), :strip), :chomp)),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, ""),
                s(:str, ""),
                s(:str, "Current Status"),
                s(:str, "Current Budget"),
                s(:str, "Clicks"),
                s(:str, "Impr."),
                s(:str, "CTR"),
                s(:str, "Avg. CPC"),
                s(:str, "Cost"),
                s(:str, "Conv. Rate"),
                s(:str, "Cost/Conv."))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:lvar, :column_headers)))),
        s(:def, :test_ticket_70,
          s(:args),
          s(:begin,
            s(:lvasgn, :string,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "<mydoc>\n"),
                s(:str, "\n"),
                s(:str, "    <someelement attribute=\"1.10\">Text1, text,\n"),
                s(:str, "text</someelement>\n"),
                s(:str, "\n"),
                s(:str, "    <someelement attribute=\"1.11\">Text2, text,\n"),
                s(:str, "text</someelement>\n"),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "</mydoc>\n"),
                s(:str, "\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :string))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :doc),
                  s(:str, "//someelement[contains(@attribute,'1.10')]")), :length)))),
        s(:def, :test_ticket_43,
          s(:args),
          s(:begin,
            s(:lvasgn, :sum,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "yahoo.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Document), :new,
                        s(:lvar, :f)), :elements), :to_a,
                    s(:str, "//item")), :size))),
            s(:send, nil, :assert_equal,
              s(:int, 10),
              s(:lvar, :sum)),
            s(:lvasgn, :text,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "yahoo.xml"))),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Document), :new,
                            s(:lvar, :f)), :elements), :to_a,
                        s(:str, "//title[contains(text(), \"'\")]")), :collect),
                    s(:args,
                      s(:arg, :e)),
                    s(:send,
                      s(:lvar, :e), :text)), :join))),
            s(:send, nil, :assert_equal,
              s(:str, "Broward labor market's a solid performer (Miami Herald)"),
              s(:lvar, :text)))),
        s(:def, :test_ticket_57,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:str, "<?xml version='1.0'?><a:x xmlns:a='1'><a:y p='p' q='q'><a:z>zzz</a:z></a:y></a:x>")),
            s(:lvasgn, :r,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :data))),
            s(:send, nil, :assert_equal,
              s(:const, nil, :Text),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :first,
                  s(:lvar, :r),
                  s(:str, "a:x/a:y[@p='p' and @q='q']/a:z/text()")), :class)),
            s(:send, nil, :assert_equal,
              s(:str, "zzz"),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :XPath), :first,
                  s(:lvar, :r),
                  s(:str, "a:x/a:y[@p='p' and @q='q']/a:z/text()")), :to_s)))),
        s(:def, :test_ticket_59,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:dstr,
                s(:str, "<a>\n"),
                s(:str, "        <c id='1'/>\n"),
                s(:str, "        <c id='2'/>\n"),
                s(:str, "        <b>\n"),
                s(:str, "          <c id='3'/>\n"),
                s(:str, "        </b>\n"),
                s(:str, "        <c id='4'/>\n"),
                s(:str, "        <b>\n"),
                s(:str, "          <b>\n"),
                s(:str, "            <c id='5'/>\n"),
                s(:str, "          </b>\n"),
                s(:str, "          <c id='6'/>\n"),
                s(:str, "        </b>\n"),
                s(:str, "        <c id='7'/>\n"),
                s(:str, "        <b>\n"),
                s(:str, "          <b>\n"),
                s(:str, "            <c id='8'/>\n"),
                s(:str, "            <b>\n"),
                s(:str, "              <c id='9'/>\n"),
                s(:str, "              <b>\n"),
                s(:str, "                <c id='10'/>\n"),
                s(:str, "              </b>\n"),
                s(:str, "              <c id='11'/>\n"),
                s(:str, "            </b>\n"),
                s(:str, "          </b>\n"),
                s(:str, "        </b>\n"),
                s(:str, "        <c id='12'/>\n"),
                s(:str, "      </a>"))),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :data))),
            s(:lvasgn, :res,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :d), :elements), :to_a,
                    s(:str, "//c")), :collect),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :attributes), :[],
                    s(:str, "id")), :to_i))),
            s(:send, nil, :assert_equal,
              s(:lvar, :res),
              s(:send,
                s(:lvar, :res), :sort)))),
        s(:def, :ticket_61_fixture,
          s(:args,
            s(:arg, :doc),
            s(:arg, :xpath)),
          s(:begin,
            s(:lvasgn, :matches,
              s(:array)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :elements), :each,
                s(:lvar, :xpath)),
              s(:args,
                s(:arg, :element)),
              s(:begin,
                s(:send,
                  s(:lvar, :matches), :<<,
                  s(:lvar, :element)),
                s(:send, nil, :assert_equal,
                  s(:str, "Add"),
                  s(:send,
                    s(:lvar, :element), :text)),
                s(:send, nil, :assert_equal,
                  s(:str, "ButtonText"),
                  s(:send,
                    s(:send,
                      s(:lvar, :element), :attributes), :[],
                    s(:str, "class"))))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :matches), :length)))),
        s(:def, :test_ticket_61_text,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "ticket_61.xml"))),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :file)))),
            s(:send, nil, :ticket_61_fixture,
              s(:lvar, :doc),
              s(:str, "//div[text()='Add' and @class='ButtonText']")))),
        s(:def, :test_ticket_61_contains,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send, nil, :fixture_path,
                    s(:str, "ticket_61.xml"))),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Document), :new,
                  s(:lvar, :file)))),
            s(:send, nil, :ticket_61_fixture,
              s(:lvar, :doc),
              s(:str, "//div[contains(.,'Add') and @class='ButtonText']")))),
        s(:def, :test_namespaces_0,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<x:a xmlns:x=\"y\"/>"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:str, "//x:a")), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:const, nil, :XPath), :match,
                  s(:lvar, :d),
                  s(:str, "//x:*")), :size)))),
        s(:def, :test_ticket_71,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<root xmlns:ns1=\"xyz\" xmlns:ns2=\"123\"><element ns1:attrname=\"foo\" ns2:attrname=\"bar\"/></root>"))),
            s(:lvasgn, :el,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :elements), :[],
                s(:int, 1))),
            s(:send, nil, :assert_equal,
              s(:str, "element"),
              s(:send,
                s(:lvar, :el), :name)),
            s(:lvasgn, :el2,
              s(:send,
                s(:const, nil, :XPath), :first,
                s(:send,
                  s(:lvar, :doc), :root),
                s(:str, "element[@ns:attrname='foo']"),
                s(:hash,
                  s(:pair,
                    s(:str, "ns"),
                    s(:str, "xyz"))))),
            s(:send, nil, :assert_equal,
              s(:lvar, :el),
              s(:lvar, :el2)))),
        s(:def, :test_ticket_78,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:dstr,
                s(:str, "      <root>\n"),
                s(:str, "          <element>\n"),
                s(:str, "              <tag x='1'>123</tag>\n"),
                s(:str, "          </element>\n"),
                s(:str, "          <element>\n"),
                s(:str, "              <tag x='2'>123a</tag>\n"),
                s(:str, "          </element>\n"),
                s(:str, "      </root>\n"))),
            s(:lvasgn, :seq,
              s(:array,
                s(:str, "BEGIN"),
                s(:str, "123"),
                s(:str, "END"),
                s(:str, "BEGIN"),
                s(:str, "123a"),
                s(:str, "END"))),
            s(:lvasgn, :xmlDoc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:lvar, :doc))),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "//element[tag='123']/tag"),
                  s(:str, "//element[tag='123a']/tag")), :each),
              s(:args,
                s(:arg, :query)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:str, "BEGIN"),
                  s(:send,
                    s(:lvar, :seq), :shift)),
                s(:block,
                  s(:send,
                    s(:const, nil, :XPath), :each,
                    s(:lvar, :xmlDoc),
                    s(:lvar, :query)),
                  s(:args,
                    s(:arg, :element)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:lvar, :seq), :shift),
                    s(:send,
                      s(:lvar, :element), :text))),
                s(:send, nil, :assert_equal,
                  s(:str, "END"),
                  s(:send,
                    s(:lvar, :seq), :shift)))))),
        s(:def, :test_ticket_79,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:str, "<a><b><c>test</c></b><b><c>3</c></b></a>")),
            s(:lvasgn, :d,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "/a/b[c='test']"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :r), :size)),
            s(:lvasgn, :r,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :d),
                s(:str, "/a/b[c='3']"))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :r), :size)))),
        s(:def, :test_or_and,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "<html>\n"),
                s(:str, "  <head>\n"),
                s(:str, "    <title>test</title>\n"),
                s(:str, "  </head>\n"),
                s(:str, "  <body>\n"),
                s(:str, "    <p>\n"),
                s(:str, "      A <a rel=\"sub\" href=\"/\">link</a>.\n"),
                s(:str, "    </p>\n"),
                s(:str, "  </body>\n"),
                s(:str, "</html>\n"))),
            s(:lvasgn, :xmldoc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :doc))),
            s(:lvasgn, :xpath,
              s(:str, "descendant::node()[(local-name()='link' or local-name()='a') and @rel='sub']")),
            s(:lvasgn, :hrefs,
              s(:array)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :xmldoc), :elements), :each,
                s(:lvar, :xpath)),
              s(:args,
                s(:arg, :element)),
              s(:send,
                s(:lvar, :hrefs), :<<,
                s(:send,
                  s(:send,
                    s(:lvar, :element), :attributes), :[],
                  s(:str, "href")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "/")),
              s(:lvar, :hrefs),
              s(:str, "Bug #3842 [ruby-core:32447]"))))))))
