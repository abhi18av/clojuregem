s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:str, "rexml/xpath")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/xpathparser")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :TestXPathPredicate),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:casgn, nil, :SRC,
          s(:dstr,
            s(:str, "    <article>\n"),
            s(:str, "       <section role=\"subdivision\" id=\"1\">\n"),
            s(:str, "          <para>free flowing text.</para>\n"),
            s(:str, "       </section>\n"),
            s(:str, "       <section role=\"division\">\n"),
            s(:str, "          <section role=\"subdivision\" id=\"2\">\n"),
            s(:str, "             <para>free flowing text.</para>\n"),
            s(:str, "          </section>\n"),
            s(:str, "          <section role=\"division\">\n"),
            s(:str, "             <para>free flowing text.</para>\n"),
            s(:str, "          </section>\n"),
            s(:str, "       </section>\n"),
            s(:str, "    </article>\n"))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:const, nil, :SRC))),
            s(:ivasgn, :@parser,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Parsers), :XPathParser), :new)))),
        s(:def, :test_predicates_parent,
          s(:args),
          s(:begin,
            s(:lvasgn, :path,
              s(:str, "//section[../self::section[@role=\"division\"]]")),
            s(:lvasgn, :m,
              s(:send, nil, :do_path,
                s(:lvar, :path))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :m), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 0)), :attributes), :[],
                s(:str, "id"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 1)), :attributes), :[],
                s(:str, "id"))))),
        s(:def, :test_predicates_single,
          s(:args),
          s(:begin,
            s(:lvasgn, :path,
              s(:str, "//section[@role=\"subdivision\" and not(../self::section[@role=\"division\"])]")),
            s(:lvasgn, :m,
              s(:send, nil, :do_path,
                s(:lvar, :path))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :m), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 0)), :attributes), :[],
                s(:str, "id"))))),
        s(:def, :test_predicates_multi,
          s(:args),
          s(:begin,
            s(:lvasgn, :path,
              s(:str, "//section[@role=\"subdivision\"][not(../self::section[@role=\"division\"])]")),
            s(:lvasgn, :m,
              s(:send, nil, :do_path,
                s(:lvar, :path))),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :m), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 0)), :attributes), :[],
                s(:str, "id"))))),
        s(:def, :do_path,
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:lvasgn, :m,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:ivar, :@doc),
                s(:lvar, :path))),
            s(:return,
              s(:lvar, :m)))),
        s(:def, :test_get_no_siblings_terminal_nodes,
          s(:args),
          s(:begin,
            s(:lvasgn, :source,
              s(:dstr,
                s(:str, "<a>\n"),
                s(:str, "  <b number='1' str='abc'>TEXT1</b>\n"),
                s(:str, "  <c number='1'/>\n"),
                s(:str, "  <c number='2' str='def'>\n"),
                s(:str, "    <b number='3'/>\n"),
                s(:str, "    <d number='1' str='abc'>TEXT2</d>\n"),
                s(:str, "    <b number='2'><!--COMMENT--></b>\n"),
                s(:str, "  </c>\n"),
                s(:str, "</a>\n"))),
            s(:lvasgn, :doc,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:lvar, :source))),
            s(:lvasgn, :predicate,
              s(:send,
                s(:send,
                  s(:str, "count(child::node()|"), :+,
                  s(:str, "following-sibling::node()|")), :+,
                s(:str, "preceding-sibling::node())=0"))),
            s(:lvasgn, :m,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :XPath), :match,
                s(:lvar, :doc),
                s(:dstr,
                  s(:str, "/descendant-or-self::node()["),
                  s(:begin,
                    s(:lvar, :predicate)),
                  s(:str, "]")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Text), :new,
                  s(:str, "TEXT1")),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Text), :new,
                  s(:str, "TEXT2")),
                s(:send,
                  s(:const,
                    s(:const, nil, :REXML), :Comment), :new,
                  s(:str, "COMMENT"))),
              s(:lvar, :m))))))))
