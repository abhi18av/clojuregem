s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit/testcase")),
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:module,
    s(:const, nil, :REXMLTests),
    s(:class,
      s(:const, nil, :AttributesTester),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :REXML)),
        s(:def, :test_accessor,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:foo='a' xmlns:bar='b' foo:att='1' bar:att='2' att='3'/>"))),
            s(:send, nil, :assert_equal,
              s(:str, "3"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "att"))),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "bar:att"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes), :[]=,
              s(:str, "att"),
              s(:int, 5)),
            s(:send, nil, :assert_equal,
              s(:str, "5"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "att"))))),
        s(:def, :test_each_attribute,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a x=\"1\" y=\"2\"/>"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :each_attribute),
              s(:args,
                s(:arg, :attr)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :attr), :expanded_name), :==,
                  s(:str, "x")),
                s(:send, nil, :assert_equal,
                  s(:str, "1"),
                  s(:send,
                    s(:lvar, :attr), :value)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :attr), :expanded_name), :==,
                    s(:str, "y")),
                  s(:send, nil, :assert_equal,
                    s(:str, "2"),
                    s(:send,
                      s(:lvar, :attr), :value)),
                  s(:send, nil, :assert_fail,
                    s(:str, "No such attribute!!"))))))),
        s(:def, :test_each,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a x=\"1\" y=\"2\"/>"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :value)),
              s(:if,
                s(:send,
                  s(:lvar, :name), :==,
                  s(:str, "x")),
                s(:send, nil, :assert_equal,
                  s(:str, "1"),
                  s(:lvar, :value)),
                s(:if,
                  s(:send,
                    s(:lvar, :name), :==,
                    s(:str, "y")),
                  s(:send, nil, :assert_equal,
                    s(:str, "2"),
                    s(:lvar, :value)),
                  s(:send, nil, :assert_fail,
                    s(:str, "No such attribute!!"))))))),
        s(:def, :test_get_attribute,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:x=\"a\" x:foo=\"1\" foo=\"2\" bar=\"3\"/>"))),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :attributes), :get_attribute,
                  s(:str, "foo")), :value)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :root), :attributes), :get_attribute,
                  s(:str, "x:foo")), :value)))),
        s(:def, :test_size,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:foo='a' x='1' y='2' foo:x='3'/>"))),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :length)))),
        s(:def, :test_setter,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:x='a' x:foo='1' foo='3'/>"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes), :[]=,
              s(:str, "y:foo"),
              s(:str, "2")),
            s(:send, nil, :assert_equal,
              s(:str, "2"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "y:foo"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes), :[]=,
              s(:str, "foo"),
              s(:str, "4")),
            s(:send, nil, :assert_equal,
              s(:str, "4"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "foo"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes), :[]=,
              s(:str, "x:foo"),
              s(:nil)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :size)))),
        s(:def, :test_delete,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns:y='a' xmlns:x='b' xmlns:z='c' y:foo='0' x:foo='1' foo='3' z:foo='4'/>"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes), :delete,
              s(:str, "foo")),
            s(:send, nil, :assert_equal,
              s(:int, 6),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "1"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "x:foo"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes), :delete,
              s(:str, "x:foo")),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :size)),
            s(:lvasgn, :attr,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :get_attribute,
                s(:str, "y:foo"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :root), :attributes), :delete,
              s(:lvar, :attr)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :size)),
            s(:send, nil, :assert_equal,
              s(:str, "4"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :[],
                s(:str, "z:foo"))))),
        s(:def, :test_prefixes,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a xmlns='foo' xmlns:x='bar' xmlns:y='twee' z='glorp' x:k='gru'/>"))),
            s(:lvasgn, :prefixes,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :doc), :root), :attributes), :prefixes)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :prefixes), :size)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :prefixes), :-,
                    s(:array,
                      s(:str, "x"),
                      s(:str, "y")))), :size)))),
        s(:def, :test_values_with_apostrophes,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<tag h1=\"1'2'\" h2='1\"2'/>"))),
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :doc), :to_s)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :s), :=~,
                s(:regexp,
                  s(:str, "h1='1&apos;2&apos;'"),
                  s(:regopt)))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :s), :=~,
                s(:regexp,
                  s(:str, "h2='1\"2'"),
                  s(:regopt)))))),
        s(:def, :test_namespace_conflict,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :ParseException),
                s(:str, "Declaring two attributes with the same namespace should be an error")),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Document), :new,
                s(:dstr,
                  s(:str, "        <x xmlns:n1=\"http://www.w3.org\"\n"),
                  s(:str, "           xmlns:n2=\"http://www.w3.org\" >\n"),
                  s(:str, "          <bad n1:a=\"1\"  n2:a=\"2\" />\n"),
                  s(:str, "        </x>\n")))),
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :Document), :new,
              s(:str, "<a xmlns:a='a' xmlns:b='a'></a>")))),
        s(:def, :test_attribute_deletion,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Element), :new)),
            s(:send,
              s(:lvar, :e), :add_namespace,
              s(:str, "a"),
              s(:str, "http://a/")),
            s(:send,
              s(:lvar, :e), :add_namespace,
              s(:str, "b"),
              s(:str, "http://b/")),
            s(:send,
              s(:lvar, :e), :add_attributes,
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "cc")),
                s(:pair,
                  s(:str, "a:c"),
                  s(:str, "cC")),
                s(:pair,
                  s(:str, "b:c"),
                  s(:str, "CC")))),
            s(:send,
              s(:send,
                s(:lvar, :e), :attributes), :delete,
              s(:str, "c")),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "c"))),
            s(:lvasgn, :before_size,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :size)),
            s(:send,
              s(:send,
                s(:lvar, :e), :attributes), :delete,
              s(:str, "c")),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "c"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :before_size),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :size)),
            s(:send,
              s(:send,
                s(:lvar, :e), :attributes), :delete,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "a:c"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "a:c"))),
            s(:send,
              s(:send,
                s(:lvar, :e), :attributes), :delete,
              s(:str, "b:c")),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "b:c"))),
            s(:lvasgn, :before_size,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :size)),
            s(:send,
              s(:send,
                s(:lvar, :e), :attributes), :delete,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "b:c"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "b:c"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :before_size),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :size)),
            s(:lvasgn, :before_size,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :size)),
            s(:send,
              s(:send,
                s(:lvar, :e), :attributes), :delete,
              s(:str, "c")),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "c"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :before_size),
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :size)),
            s(:send,
              s(:lvar, :e), :add_attribute,
              s(:str, "c"),
              s(:str, "cc")),
            s(:send,
              s(:send,
                s(:lvar, :e), :attributes), :delete,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "c"))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attributes), :get_attribute,
                s(:str, "c"))))),
        s(:def, :test_element_usage,
          s(:args),
          s(:begin,
            s(:lvasgn, :attr,
              s(:send,
                s(:const, nil, :Attribute), :new,
                s(:str, "name"),
                s(:str, "value"))),
            s(:lvasgn, :elem,
              s(:send,
                s(:const, nil, :Element), :new,
                s(:str, "elem"))),
            s(:lvasgn, :a,
              s(:send,
                s(:const, nil, :Attribute), :new,
                s(:lvar, :attr),
                s(:lvar, :elem))),
            s(:send, nil, :assert_equal,
              s(:lvar, :elem),
              s(:send,
                s(:lvar, :a), :element)))),
        s(:def, :attr_test,
          s(:args,
            s(:arg, :attr_name),
            s(:arg, :attr_value)),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Attribute), :new,
                s(:lvar, :attr_name),
                s(:lvar, :attr_value))),
            s(:lvasgn, :s1,
              s(:send,
                s(:lvar, :a1), :value)),
            s(:lvasgn, :s2,
              s(:send,
                s(:lvar, :a1), :value)),
            s(:send, nil, :assert_equal,
              s(:lvar, :s1),
              s(:lvar, :s2)),
            s(:lvasgn, :a2,
              s(:send,
                s(:const,
                  s(:const, nil, :REXML), :Attribute), :new,
                s(:lvar, :attr_name),
                s(:lvar, :attr_value))),
            s(:send,
              s(:lvar, :a2), :to_s),
            s(:lvasgn, :s1,
              s(:send,
                s(:lvar, :a2), :value)),
            s(:lvasgn, :s2,
              s(:send,
                s(:lvar, :a2), :value)),
            s(:send, nil, :assert_equal,
              s(:lvar, :s1),
              s(:lvar, :s2)))),
        s(:def, :test_amp_attributes,
          s(:args),
          s(:send, nil, :attr_test,
            s(:str, "name"),
            s(:str, "value with &amp; ampersand only"))),
        s(:def, :test_amp_and_lf_attributes,
          s(:args),
          s(:send, nil, :attr_test,
            s(:str, "name"),
            s(:str, "value with LF &#x000a; &amp; ampersand"))),
        s(:def, :test_quoting,
          s(:args),
          s(:begin,
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a x='1' y=\"2\"/>"))),
            s(:send, nil, :assert_equal,
              s(:str, "<a x='1' y='2'/>"),
              s(:send,
                s(:lvar, :d), :to_s)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :d), :root), :context), :[]=,
              s(:sym, :attribute_quote),
              s(:sym, :quote)),
            s(:send, nil, :assert_equal,
              s(:str, "<a x=\"1\" y=\"2\"/>"),
              s(:send,
                s(:lvar, :d), :to_s)),
            s(:lvasgn, :d,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:str, "<a x='1' y=\"2\"><b z='3'/></a>"))),
            s(:send, nil, :assert_equal,
              s(:str, "<a x='1' y='2'><b z='3'/></a>"),
              s(:send,
                s(:lvar, :d), :to_s)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :d), :root), :context), :[]=,
              s(:sym, :attribute_quote),
              s(:sym, :quote)),
            s(:send, nil, :assert_equal,
              s(:str, "<a x=\"1\" y=\"2\"><b z=\"3\"/></a>"),
              s(:send,
                s(:lvar, :d), :to_s)))),
        s(:def, :test_ticket_127,
          s(:args),
          s(:begin,
            s(:lvasgn, :doc,
              s(:send,
                s(:const, nil, :Document), :new)),
            s(:send,
              s(:lvar, :doc), :add_element,
              s(:str, "a"),
              s(:hash,
                s(:pair,
                  s(:str, "v"),
                  s(:str, "x & y")))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:lvar, :doc), :to_s), :index,
                s(:str, ";"))))),
        s(:def, :test_to_a_with_namespaces,
          s(:args),
          s(:begin,
            s(:lvasgn, :document,
              s(:send,
                s(:const, nil, :Document), :new,
                s(:dstr,
                  s(:str, "<root\n"),
                  s(:str, "  xmlns:ns1=\"http://example.org/ns1\"\n"),
                  s(:str, "  xmlns:ns2=\"http://example.org/ns2\">\n"),
                  s(:str, "  <child\n"),
                  s(:str, "    ns1:attribute=\"ns1\"\n"),
                  s(:str, "    ns2:attribute=\"ns2\"\n"),
                  s(:str, "        attribute=\"no-ns\"\n"),
                  s(:str, "    other-attribute=\"other-value\"/>\n"),
                  s(:str, "</root>\n")))),
            s(:lvasgn, :child,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :document), :root), :elements), :[],
                s(:str, "child"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "attribute='no-ns'"),
                s(:str, "ns1:attribute='ns1'"),
                s(:str, "ns2:attribute='ns2'"),
                s(:str, "other-attribute='other-value'")),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :child), :attributes), :to_a), :collect,
                  s(:block_pass,
                    s(:sym, :to_string))), :sort))))))))
