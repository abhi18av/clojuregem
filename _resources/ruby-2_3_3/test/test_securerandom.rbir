s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "securerandom")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestSecureRandom),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@it,
          s(:const, nil, :SecureRandom))),
      s(:def, :test_s_random_bytes,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:send,
              s(:send,
                s(:ivar, :@it), :random_bytes), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :ASCII_8BIT),
            s(:send,
              s(:send,
                s(:ivar, :@it), :random_bytes), :encoding)),
          s(:block,
            s(:send,
              s(:int, 65), :times),
            s(:args,
              s(:arg, :idx)),
            s(:send, nil, :assert_equal,
              s(:lvar, :idx),
              s(:send,
                s(:send,
                  s(:ivar, :@it), :random_bytes,
                  s(:lvar, :idx)), :size))))),
      s(:if,
        s(:false),
        s(:begin,
          s(:def, :test_s_random_bytes_is_fork_safe,
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :require,
                    s(:str, "openssl")),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :LoadError)), nil,
                    s(:return)), nil)),
              s(:send,
                s(:const, nil, :SecureRandom), :random_bytes,
                s(:int, 8)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :pid),
                  s(:lvasgn, :v1)),
                s(:send, nil, :forking_random_bytes)),
              s(:send, nil, :assert,
                s(:send, nil, :check_forking_random_bytes,
                  s(:lvar, :pid),
                  s(:lvar, :v1)),
                s(:str, "Process ID not recycled?")))),
          s(:def, :forking_random_bytes,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :r),
                  s(:lvasgn, :w)),
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:lvasgn, :pid,
                s(:block,
                  s(:send, nil, :fork),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :r), :close),
                    s(:send,
                      s(:lvar, :w), :write,
                      s(:send,
                        s(:const, nil, :SecureRandom), :random_bytes,
                        s(:int, 8))),
                    s(:send,
                      s(:lvar, :w), :close)))),
              s(:send,
                s(:lvar, :w), :close),
              s(:lvasgn, :v,
                s(:send,
                  s(:lvar, :r), :read,
                  s(:int, 8))),
              s(:send,
                s(:lvar, :r), :close),
              s(:send,
                s(:const, nil, :Process), :waitpid2,
                s(:lvar, :pid)),
              s(:array,
                s(:lvar, :pid),
                s(:lvar, :v)))),
          s(:def, :check_forking_random_bytes,
            s(:args,
              s(:arg, :target_pid),
              s(:arg, :target)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:int, 65536), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :pid,
                    s(:block,
                      s(:send, nil, :fork),
                      s(:args),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:gvar, :$$), :==,
                            s(:lvar, :target_pid)),
                          s(:begin,
                            s(:lvasgn, :v2,
                              s(:send,
                                s(:const, nil, :SecureRandom), :random_bytes,
                                s(:int, 8))),
                            s(:if,
                              s(:send,
                                s(:lvar, :v2), :==,
                                s(:lvar, :target)),
                              s(:send, nil, :exit,
                                s(:int, 1)),
                              s(:send, nil, :exit,
                                s(:int, 2)))), nil),
                        s(:send, nil, :exit,
                          s(:int, 3))))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :pid),
                      s(:lvasgn, :status)),
                    s(:send,
                      s(:const, nil, :Process), :waitpid2,
                      s(:lvar, :pid))),
                  s(:case,
                    s(:send,
                      s(:lvar, :status), :exitstatus),
                    s(:when,
                      s(:int, 1),
                      s(:send, nil, :raise,
                        s(:str, "returned same sequence for same PID"))),
                    s(:when,
                      s(:int, 2),
                      s(:return,
                        s(:true))), nil))),
              s(:false)))), nil),
      s(:def, :test_s_random_bytes_without_openssl,
        s(:args),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :require,
                s(:str, "openssl")),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:return)), nil)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :load_path,
                  s(:send,
                    s(:gvar, :$LOAD_PATH), :dup)),
                s(:lvasgn, :loaded_features,
                  s(:send,
                    s(:gvar, :$LOADED_FEATURES), :dup)),
                s(:lvasgn, :openssl,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Object), :instance_eval),
                    s(:args),
                    s(:send, nil, :remove_const,
                      s(:sym, :OpenSSL)))),
                s(:send, nil, :remove_feature,
                  s(:str, "securerandom.rb")),
                s(:send, nil, :remove_feature,
                  s(:str, "openssl.rb")),
                s(:block,
                  s(:send,
                    s(:const, nil, :Dir), :mktmpdir),
                  s(:args,
                    s(:arg, :dir)),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :open,
                        s(:send,
                          s(:const, nil, :File), :join,
                          s(:lvar, :dir),
                          s(:str, "openssl.rb")),
                        s(:str, "w")),
                      s(:args,
                        s(:arg, :f)),
                      s(:send,
                        s(:lvar, :f), :<<,
                        s(:str, "raise LoadError"))),
                    s(:send,
                      s(:gvar, :$LOAD_PATH), :unshift,
                      s(:lvar, :dir)),
                    s(:lvasgn, :v,
                      s(:gvar, :$VERBOSE)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:gvasgn, :$VERBOSE,
                            s(:false)),
                          s(:send, nil, :require,
                            s(:str, "securerandom"))),
                        s(:gvasgn, :$VERBOSE,
                          s(:lvar, :v)))),
                    s(:send, nil, :test_s_random_bytes)))),
              s(:begin,
                s(:send,
                  s(:gvar, :$LOADED_FEATURES), :replace,
                  s(:lvar, :loaded_features)),
                s(:send,
                  s(:gvar, :$LOAD_PATH), :replace,
                  s(:lvar, :load_path)),
                s(:send,
                  s(:const, nil, :Object), :const_set,
                  s(:sym, :OpenSSL),
                  s(:lvar, :openssl))))))),
      s(:def, :test_s_hex,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:ivar, :@it), :hex)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:int, 16), :*,
              s(:int, 2)),
            s(:send,
              s(:lvar, :s), :size)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A\\h+\\z"),
              s(:regopt)),
            s(:lvar, :s)),
          s(:block,
            s(:send,
              s(:int, 33), :times),
            s(:args,
              s(:arg, :idx)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:ivar, :@it), :hex,
                  s(:lvar, :idx))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :idx), :*,
                  s(:int, 2)),
                s(:send,
                  s(:lvar, :s), :size)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\A\\h*\\z"),
                  s(:regopt)),
                s(:lvar, :s)))))),
      s(:def, :test_hex_encoding,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const,
            s(:const, nil, :Encoding), :US_ASCII),
          s(:send,
            s(:send,
              s(:ivar, :@it), :hex), :encoding))),
      s(:def, :test_s_base64,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 16),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@it), :base64), :unpack,
                  s(:str, "m*")), :[],
                s(:int, 0)), :size)),
          s(:block,
            s(:send,
              s(:int, 17), :times),
            s(:args,
              s(:arg, :idx)),
            s(:send, nil, :assert_equal,
              s(:lvar, :idx),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@it), :base64,
                      s(:lvar, :idx)), :unpack,
                    s(:str, "m*")), :[],
                  s(:int, 0)), :size))))),
      s(:def, :test_s_urlsafe_base64,
        s(:args),
        s(:begin,
          s(:lvasgn, :safe,
            s(:regexp,
              s(:str, "[\\n+/]"),
              s(:regopt))),
          s(:block,
            s(:send,
              s(:int, 65), :times),
            s(:args,
              s(:arg, :idx)),
            s(:send, nil, :assert_not_match,
              s(:lvar, :safe),
              s(:send,
                s(:ivar, :@it), :urlsafe_base64,
                s(:lvar, :idx)))),
          s(:send, nil, :assert,
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 0),
                    s(:int, 10000))), :any?),
              s(:args,
                s(:arg, :idx)),
              s(:send,
                s(:lvar, :safe), :=~,
                s(:send,
                  s(:ivar, :@it), :base64,
                  s(:lvar, :idx)))),
            s(:str, "None of base64(0..10000) is url-safe")))),
      s(:def, :test_s_random_number_float,
        s(:args),
        s(:block,
          s(:send,
            s(:int, 101), :times),
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:send,
                s(:ivar, :@it), :random_number)),
            s(:send, nil, :assert_in_range,
              s(:erange,
                s(:float, 0.0),
                s(:float, 1.0)),
              s(:lvar, :v))))),
      s(:def, :test_s_random_number_float_by_zero,
        s(:args),
        s(:block,
          s(:send,
            s(:int, 101), :times),
          s(:args),
          s(:begin,
            s(:lvasgn, :v,
              s(:send,
                s(:ivar, :@it), :random_number,
                s(:int, 0))),
            s(:send, nil, :assert_in_range,
              s(:erange,
                s(:float, 0.0),
                s(:float, 1.0)),
              s(:lvar, :v))))),
      s(:def, :test_s_random_number_int,
        s(:args),
        s(:block,
          s(:send,
            s(:int, 101), :times),
          s(:args,
            s(:arg, :idx)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :idx), :zero?),
              s(:next), nil),
            s(:lvasgn, :v,
              s(:send,
                s(:ivar, :@it), :random_number,
                s(:lvar, :idx))),
            s(:send, nil, :assert_in_range,
              s(:erange,
                s(:int, 0),
                s(:lvar, :idx)),
              s(:lvar, :v))))),
      s(:def, :test_uuid,
        s(:args),
        s(:begin,
          s(:lvasgn, :uuid,
            s(:send,
              s(:ivar, :@it), :uuid)),
          s(:send, nil, :assert_equal,
            s(:int, 36),
            s(:send,
              s(:lvar, :uuid), :size)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A\\h{8}-\\h{4}-\\h{4}-\\h{4}-\\h{12}\\z"),
              s(:regopt)),
            s(:lvar, :uuid)))),
      s(:def, :protect,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:yield),
            s(:resbody,
              s(:array,
                s(:const, nil, :NotImplementedError)), nil, nil), nil))),
      s(:def, :remove_feature,
        s(:args,
          s(:arg, :basename)),
        s(:block,
          s(:send,
            s(:gvar, :$LOADED_FEATURES), :delete_if),
          s(:args,
            s(:arg, :path)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :path)), :==,
              s(:lvar, :basename)),
            s(:block,
              s(:send,
                s(:gvar, :$LOAD_PATH), :any?),
              s(:args,
                s(:arg, :dir)),
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:lvar, :basename)))), nil))),
      s(:def, :assert_in_range,
        s(:args,
          s(:arg, :range),
          s(:arg, :result),
          s(:optarg, :mesg,
            s(:nil))),
        s(:send, nil, :assert,
          s(:send,
            s(:lvar, :range), :cover?,
            s(:lvar, :result)),
          s(:block,
            s(:send, nil, :message,
              s(:lvar, :mesg)),
            s(:args),
            s(:dstr,
              s(:str, "Expected "),
              s(:begin,
                s(:lvar, :result)),
              s(:str, " to be in "),
              s(:begin,
                s(:lvar, :range)))))))))
