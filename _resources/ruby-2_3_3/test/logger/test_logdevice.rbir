s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "logger")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:class,
    s(:const, nil, :TestLogDevice),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :LogExcnRaiser), nil,
        s(:begin,
          s(:def, :write,
            s(:args,
              s(:restarg, :arg)),
            s(:send, nil, :raise,
              s(:str, "disk is full"))),
          s(:def, :close,
            s(:args), nil),
          s(:def, :stat,
            s(:args),
            s(:send,
              s(:const, nil, :Object), :new)))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@tempfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:str, "logger"))),
          s(:send,
            s(:ivar, :@tempfile), :close),
          s(:ivasgn, :@filename,
            s(:send,
              s(:ivar, :@tempfile), :path)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:ivar, :@filename)))),
      s(:def, :teardown,
        s(:args),
        s(:send,
          s(:ivar, :@tempfile), :close,
          s(:true))),
      s(:def, :d,
        s(:args,
          s(:arg, :log),
          s(:optarg, :opt,
            s(:hash))),
        s(:send,
          s(:const,
            s(:const, nil, :Logger), :LogDevice), :new,
          s(:lvar, :log),
          s(:lvar, :opt))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:const, nil, :STDERR))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :STDERR),
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :logdev), :filename)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send, nil, :d,
              s(:nil))),
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:ivar, :@filename))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :logdev), :dev), :sync)),
                s(:send, nil, :assert_equal,
                  s(:ivar, :@filename),
                  s(:send,
                    s(:lvar, :logdev), :filename)),
                s(:send,
                  s(:lvar, :logdev), :write,
                  s(:str, "hello"))),
              s(:send,
                s(:lvar, :logdev), :close))),
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:ivar, :@filename))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send,
                  s(:lvar, :logdev), :write,
                  s(:str, "world")),
                s(:lvasgn, :logfile,
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:send,
                      s(:lvar, :logfile), :split,
                      s(:regexp,
                        s(:str, "\\n"),
                        s(:regopt))), :size)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^helloworld$"),
                    s(:regopt)),
                  s(:lvar, :logfile))),
              s(:send,
                s(:lvar, :logdev), :close))))),
      s(:def, :test_write,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :r),
              s(:lvasgn, :w)),
            s(:send,
              s(:const, nil, :IO), :pipe)),
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:lvar, :w))),
          s(:send,
            s(:lvar, :logdev), :write,
            s(:str, "msg2\n\n")),
          s(:send,
            s(:const, nil, :IO), :select,
            s(:array,
              s(:lvar, :r)),
            s(:nil),
            s(:nil),
            s(:float, 0.1)),
          s(:send,
            s(:lvar, :w), :close),
          s(:lvasgn, :msg,
            s(:send,
              s(:lvar, :r), :read)),
          s(:send,
            s(:lvar, :r), :close),
          s(:send, nil, :assert_equal,
            s(:str, "msg2\n\n"),
            s(:lvar, :msg)),
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:send,
                s(:const, nil, :LogExcnRaiser), :new))),
          s(:sclass,
            s(:begin,
              s(:lvasgn, :stderr,
                s(:str, ""))),
            s(:alias,
              s(:sym, :write),
              s(:sym, :<<))),
          s(:masgn,
            s(:mlhs,
              s(:gvasgn, :$stderr),
              s(:lvasgn, :stderr)),
            s(:array,
              s(:lvar, :stderr),
              s(:gvar, :$stderr))),
          s(:kwbegin,
            s(:ensure,
              s(:block,
                s(:send, nil, :assert_nothing_raised),
                s(:args),
                s(:send,
                  s(:lvar, :logdev), :write,
                  s(:str, "hello"))),
              s(:begin,
                s(:send,
                  s(:lvar, :logdev), :close),
                s(:masgn,
                  s(:mlhs,
                    s(:gvasgn, :$stderr),
                    s(:lvasgn, :stderr)),
                  s(:array,
                    s(:lvar, :stderr),
                    s(:gvar, :$stderr)))))),
          s(:send, nil, :assert_equal,
            s(:str, "log writing failed. disk is full\n"),
            s(:lvar, :stderr)))),
      s(:def, :test_close,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :r),
              s(:lvasgn, :w)),
            s(:send,
              s(:const, nil, :IO), :pipe)),
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:lvar, :w))),
          s(:send,
            s(:lvar, :logdev), :write,
            s(:str, "msg2\n\n")),
          s(:send,
            s(:const, nil, :IO), :select,
            s(:array,
              s(:lvar, :r)),
            s(:nil),
            s(:nil),
            s(:float, 0.1)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :w), :closed?), :!)),
          s(:send,
            s(:lvar, :logdev), :close),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :w), :closed?)),
          s(:send,
            s(:lvar, :r), :close))),
      s(:def, :test_reopen_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:const, nil, :STDERR))),
          s(:lvasgn, :old_dev,
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send,
            s(:lvar, :logdev), :reopen),
          s(:send, nil, :assert_equal,
            s(:const, nil, :STDERR),
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :old_dev), :closed?), :!)))),
      s(:def, :test_reopen_io_by_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:const, nil, :STDERR))),
          s(:lvasgn, :old_dev,
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send,
            s(:lvar, :logdev), :reopen,
            s(:const, nil, :STDOUT)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :STDOUT),
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :old_dev), :closed?), :!)))),
      s(:def, :test_reopen_io_by_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:const, nil, :STDERR))),
          s(:lvasgn, :old_dev,
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send,
            s(:lvar, :logdev), :reopen,
            s(:ivar, :@filename)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert_equal,
                  s(:ivar, :@filename),
                  s(:send,
                    s(:lvar, :logdev), :filename)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:lvar, :old_dev), :closed?), :!))),
              s(:send,
                s(:lvar, :logdev), :close))))),
      s(:def, :test_reopen_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:ivar, :@filename))),
          s(:lvasgn, :old_dev,
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send,
            s(:lvar, :logdev), :reopen),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert_equal,
                  s(:ivar, :@filename),
                  s(:send,
                    s(:lvar, :logdev), :filename)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :old_dev), :closed?))),
              s(:send,
                s(:lvar, :logdev), :close))))),
      s(:def, :test_reopen_file_by_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:ivar, :@filename))),
          s(:lvasgn, :old_dev,
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send,
            s(:lvar, :logdev), :reopen,
            s(:const, nil, :STDOUT)),
          s(:send, nil, :assert_equal,
            s(:const, nil, :STDOUT),
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :logdev), :filename)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :old_dev), :closed?)))),
      s(:def, :test_reopen_file_by_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :logdev,
            s(:send, nil, :d,
              s(:ivar, :@filename))),
          s(:lvasgn, :old_dev,
            s(:send,
              s(:lvar, :logdev), :dev)),
          s(:lvasgn, :tempfile2,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:str, "logger"))),
          s(:send,
            s(:lvar, :tempfile2), :close),
          s(:lvasgn, :filename2,
            s(:send,
              s(:lvar, :tempfile2), :path)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :filename2)),
          s(:send,
            s(:lvar, :logdev), :reopen,
            s(:lvar, :filename2)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename2))),
                s(:send, nil, :assert_equal,
                  s(:lvar, :filename2),
                  s(:send,
                    s(:lvar, :logdev), :filename)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:lvar, :old_dev), :closed?))),
              s(:begin,
                s(:send,
                  s(:lvar, :logdev), :close),
                s(:send,
                  s(:lvar, :tempfile2), :close,
                  s(:true))))))),
      s(:def, :test_shifting_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :tmpfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:array,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:str, "(string)"),
                  s(:str, ".*")),
                s(:str, "_1.log")))),
          s(:lvasgn, :logfile,
            s(:send,
              s(:lvar, :tmpfile), :path)),
          s(:lvasgn, :logfile0,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".0"))),
          s(:lvasgn, :logfile1,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".1"))),
          s(:lvasgn, :logfile2,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".2"))),
          s(:lvasgn, :logfile3,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".3"))),
          s(:send,
            s(:lvar, :tmpfile), :close,
            s(:true)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile0)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile0)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile1)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile1)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile2)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile2)), nil),
          s(:lvasgn, :logger,
            s(:send,
              s(:const, nil, :Logger), :new,
              s(:lvar, :logfile),
              s(:int, 4),
              s(:int, 100))),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile0)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile0))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile1)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile1))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile2)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile2))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile3)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile3)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile3)), :!)),
          s(:send,
            s(:lvar, :logger), :close),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile0)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile1)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile2)),
          s(:lvasgn, :tmpfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:array,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:str, "(string)"),
                  s(:str, ".*")),
                s(:str, "_2.log")))),
          s(:lvasgn, :logfile,
            s(:send,
              s(:lvar, :tmpfile), :path)),
          s(:lvasgn, :logfile0,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".0"))),
          s(:lvasgn, :logfile1,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".1"))),
          s(:lvasgn, :logfile2,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".2"))),
          s(:lvasgn, :logfile3,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".3"))),
          s(:send,
            s(:lvar, :tmpfile), :close,
            s(:true)),
          s(:lvasgn, :logger,
            s(:send,
              s(:const, nil, :Logger), :new,
              s(:lvar, :logfile),
              s(:int, 4),
              s(:int, 150))),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile0)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile0)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile0))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile1)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile1)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile1))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile2)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile2)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile2))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile3)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile3)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile3)), :!)),
          s(:send,
            s(:lvar, :logger), :error,
            s(:send,
              s(:str, "0"), :*,
              s(:int, 15))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :logfile3)), :!)),
          s(:send,
            s(:lvar, :logger), :close),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile0)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile1)),
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:lvar, :logfile2)))),
      s(:def, :test_shifting_age_variants,
        s(:args),
        s(:begin,
          s(:lvasgn, :logger,
            s(:send,
              s(:const, nil, :Logger), :new,
              s(:ivar, :@filename),
              s(:str, "daily"))),
          s(:send,
            s(:lvar, :logger), :info,
            s(:str, "daily")),
          s(:send,
            s(:lvar, :logger), :close),
          s(:lvasgn, :logger,
            s(:send,
              s(:const, nil, :Logger), :new,
              s(:ivar, :@filename),
              s(:str, "weekly"))),
          s(:send,
            s(:lvar, :logger), :info,
            s(:str, "weekly")),
          s(:send,
            s(:lvar, :logger), :close),
          s(:lvasgn, :logger,
            s(:send,
              s(:const, nil, :Logger), :new,
              s(:ivar, :@filename),
              s(:str, "monthly"))),
          s(:send,
            s(:lvar, :logger), :info,
            s(:str, "monthly")),
          s(:send,
            s(:lvar, :logger), :close))),
      s(:def, :test_shifting_age,
        s(:args),
        s(:begin,
          s(:lvasgn, :yyyymmdd,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :strftime,
              s(:str, "%Y%m%d"))),
          s(:lvasgn, :filename1,
            s(:send,
              s(:ivar, :@filename), :+,
              s(:dstr,
                s(:str, "."),
                s(:begin,
                  s(:lvar, :yyyymmdd))))),
          s(:lvasgn, :filename2,
            s(:send,
              s(:ivar, :@filename), :+,
              s(:dstr,
                s(:str, "."),
                s(:begin,
                  s(:lvar, :yyyymmdd)),
                s(:str, ".1")))),
          s(:lvasgn, :filename3,
            s(:send,
              s(:ivar, :@filename), :+,
              s(:dstr,
                s(:str, "."),
                s(:begin,
                  s(:lvar, :yyyymmdd)),
                s(:str, ".2")))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :logger,
                  s(:send,
                    s(:const, nil, :Logger), :new,
                    s(:ivar, :@filename),
                    s(:str, "now"))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename1)), :!)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename2)), :!)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename3)), :!)),
                s(:send,
                  s(:lvar, :logger), :info,
                  s(:send,
                    s(:str, "0"), :*,
                    s(:int, 15))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename1))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename2)), :!)),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename3)), :!)),
                s(:send,
                  s(:lvar, :logger), :warn,
                  s(:send,
                    s(:str, "0"), :*,
                    s(:int, 15))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename1))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename2))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename3)), :!)),
                s(:send,
                  s(:lvar, :logger), :error,
                  s(:send,
                    s(:str, "0"), :*,
                    s(:int, 15))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:ivar, :@filename))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename1))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename2))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename3)))),
              s(:begin,
                s(:if,
                  s(:lvar, :logger),
                  s(:send,
                    s(:lvar, :logger), :close), nil),
                s(:block,
                  s(:send,
                    s(:array,
                      s(:lvar, :filename1),
                      s(:lvar, :filename2),
                      s(:lvar, :filename3)), :each),
                  s(:args,
                    s(:arg, :filename)),
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename)),
                    s(:send,
                      s(:const, nil, :File), :unlink,
                      s(:lvar, :filename)), nil))))))),
      s(:def, :test_shifting_size_in_multiprocess,
        s(:args),
        s(:begin,
          s(:lvasgn, :tmpfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:array,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:str, "(string)"),
                  s(:str, ".*")),
                s(:str, "_1.log")))),
          s(:lvasgn, :logfile,
            s(:send,
              s(:lvar, :tmpfile), :path)),
          s(:lvasgn, :logfile0,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".0"))),
          s(:lvasgn, :logfile1,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".1"))),
          s(:lvasgn, :logfile2,
            s(:send,
              s(:lvar, :logfile), :+,
              s(:str, ".2"))),
          s(:send,
            s(:lvar, :tmpfile), :close,
            s(:true)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile0)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile0)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile1)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile1)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :logfile2)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:lvar, :logfile2)), nil),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :stderr,
                  s(:send, nil, :run_children,
                    s(:int, 2),
                    s(:array,
                      s(:lvar, :logfile)),
                    s(:dstr,
                      s(:str, "        logger = Logger.new(ARGV[0], 4, 10)\n"),
                      s(:str, "        10.times do\n"),
                      s(:str, "          logger.info '0' * 15\n"),
                      s(:str, "        end\n")))),
                s(:send, nil, :assert_no_match,
                  s(:regexp,
                    s(:str, "log shifting failed"),
                    s(:regopt)),
                  s(:lvar, :stderr)),
                s(:send, nil, :assert_no_match,
                  s(:regexp,
                    s(:str, "log writing failed"),
                    s(:regopt)),
                  s(:lvar, :stderr)),
                s(:send, nil, :assert_no_match,
                  s(:regexp,
                    s(:str, "log rotation inter-process lock failed"),
                    s(:regopt)),
                  s(:lvar, :stderr))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :logfile)),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :logfile)), nil),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :logfile0)),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :logfile0)), nil),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :logfile1)),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :logfile1)), nil),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :logfile2)),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :logfile2)), nil)))))),
      s(:def, :test_shifting_age_in_multiprocess,
        s(:args),
        s(:begin,
          s(:lvasgn, :yyyymmdd,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :strftime,
              s(:str, "%Y%m%d"))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :stderr,
                  s(:send, nil, :run_children,
                    s(:int, 2),
                    s(:array,
                      s(:ivar, :@filename)),
                    s(:dstr,
                      s(:str, "        logger = Logger.new(ARGV[0], 'now')\n"),
                      s(:str, "        10.times do\n"),
                      s(:str, "          logger.info '0' * 15\n"),
                      s(:str, "        end\n")))),
                s(:send, nil, :assert_no_match,
                  s(:regexp,
                    s(:str, "log shifting failed"),
                    s(:regopt)),
                  s(:lvar, :stderr)),
                s(:send, nil, :assert_no_match,
                  s(:regexp,
                    s(:str, "log writing failed"),
                    s(:regopt)),
                  s(:lvar, :stderr)),
                s(:send, nil, :assert_no_match,
                  s(:regexp,
                    s(:str, "log rotation inter-process lock failed"),
                    s(:regopt)),
                  s(:lvar, :stderr))),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@filename)),
                    s(:str, "."),
                    s(:begin,
                      s(:lvar, :yyyymmdd)),
                    s(:str, "{,.[1-9]*}"))),
                s(:args,
                  s(:arg, :filename)),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :filename)),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :filename)), nil)))))),
      s(:def, :test_open_logfile_in_multiprocess,
        s(:args),
        s(:begin,
          s(:lvasgn, :tmpfile,
            s(:send,
              s(:const, nil, :Tempfile), :new,
              s(:array,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:str, "(string)"),
                  s(:str, ".*")),
                s(:str, "_1.log")))),
          s(:lvasgn, :logfile,
            s(:send,
              s(:lvar, :tmpfile), :path)),
          s(:send,
            s(:lvar, :tmpfile), :close,
            s(:true)),
          s(:kwbegin,
            s(:ensure,
              s(:block,
                s(:send,
                  s(:int, 20), :times),
                s(:args),
                s(:begin,
                  s(:send, nil, :run_children,
                    s(:int, 2),
                    s(:array,
                      s(:lvar, :logfile)),
                    s(:dstr,
                      s(:str, "          logfile = ARGV[0]\n"),
                      s(:str, "          logdev = Logger::LogDevice.new(logfile)\n"),
                      s(:str, "          logdev.send(:open_logfile, logfile)\n"))),
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :File), :readlines,
                          s(:lvar, :logfile)), :grep,
                        s(:regexp,
                          s(:str, "# Logfile created on"),
                          s(:regopt))), :size)),
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :logfile)))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :logfile)),
                s(:send,
                  s(:const, nil, :File), :unlink,
                  s(:lvar, :logfile)), nil))))),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)), nil,
        s(:def, :test_shifting_size_not_rotate_too_much,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :logdev0,
                s(:send, nil, :d,
                  s(:ivar, :@filename))),
              s(:send,
                s(:lvar, :logdev0), :__send__,
                s(:sym, :add_log_header),
                s(:ivar, :@tempfile)),
              s(:lvasgn, :header_size,
                s(:send,
                  s(:ivar, :@tempfile), :size)),
              s(:lvasgn, :message,
                s(:send,
                  s(:send,
                    s(:str, "*"), :*,
                    s(:int, 99)), :+,
                  s(:str, "\n"))),
              s(:lvasgn, :shift_size,
                s(:send,
                  s(:send,
                    s(:lvar, :header_size), :+,
                    s(:send,
                      s(:send,
                        s(:lvar, :message), :size), :*,
                      s(:int, 3))), :-,
                  s(:int, 1))),
              s(:lvasgn, :opt,
                s(:hash,
                  s(:pair,
                    s(:sym, :shift_age),
                    s(:int, 1)),
                  s(:pair,
                    s(:sym, :shift_size),
                    s(:lvar, :shift_size)))),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir),
                s(:args,
                  s(:arg, :tmpdir)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:lvasgn, :log,
                        s(:send,
                          s(:const, nil, :File), :join,
                          s(:lvar, :tmpdir),
                          s(:str, "log"))),
                      s(:lvasgn, :logdev1,
                        s(:send, nil, :d,
                          s(:lvar, :log),
                          s(:lvar, :opt))),
                      s(:lvasgn, :logdev2,
                        s(:send, nil, :d,
                          s(:lvar, :log),
                          s(:lvar, :opt))),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev1), :dev)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev2), :dev)),
                      s(:block,
                        s(:send,
                          s(:int, 3), :times),
                        s(:args),
                        s(:send,
                          s(:lvar, :logdev1), :write,
                          s(:lvar, :message))),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev1), :dev)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev2), :dev)),
                      s(:send,
                        s(:lvar, :logdev1), :write,
                        s(:lvar, :message)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev1), :dev)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:send,
                          s(:lvar, :log), :+,
                          s(:str, ".0")),
                        s(:send,
                          s(:lvar, :logdev2), :dev)),
                      s(:send,
                        s(:lvar, :logdev2), :write,
                        s(:lvar, :message)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev1), :dev)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev2), :dev)),
                      s(:send,
                        s(:lvar, :logdev1), :write,
                        s(:lvar, :message)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev1), :dev)),
                      s(:send,
                        s(:send, nil, :assert_file), :identical?,
                        s(:lvar, :log),
                        s(:send,
                          s(:lvar, :logdev2), :dev))),
                    s(:begin,
                      s(:if,
                        s(:lvar, :logdev1),
                        s(:send,
                          s(:lvar, :logdev1), :close), nil),
                      s(:if,
                        s(:lvar, :logdev2),
                        s(:send,
                          s(:lvar, :logdev2), :close), nil)))))),
            s(:send,
              s(:lvar, :logdev0), :close)))),
      s(:def, :test_shifting_midnight,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :mktmpdir),
          s(:args,
            s(:arg, :tmpdir)),
          s(:begin,
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:splat,
                  s(:array,
                    s(:str, "--disable=gems"),
                    s(:str, "-rlogger"),
                    s(:dstr,
                      s(:str, "-C"),
                      s(:begin,
                        s(:lvar, :tmpdir))),
                    s(:str, "-")))),
              s(:dstr,
                s(:str, "        begin\n"),
                s(:str, "          module FakeTime\n"),
                s(:str, "            attr_accessor :now\n"),
                s(:str, "          end\n"),
                s(:str, "\n"),
                s(:str, "          class << Time\n"),
                s(:str, "            prepend FakeTime\n"),
                s(:str, "          end\n"),
                s(:str, "\n"),
                s(:str, "          log = \"log\"\n"),
                s(:str, "          File.open(log, \"w\") {}\n"),
                s(:str, "          File.utime(*[Time.mktime(2014, 1, 1, 23, 59, 59)]*2, log)\n"),
                s(:str, "\n"),
                s(:str, "          Time.now = Time.mktime(2014, 1, 2, 23, 59, 59, 999000)\n"),
                s(:str, "          dev = Logger::LogDevice.new(log, shift_age: 'daily')\n"),
                s(:str, "          dev.write(\"\#{Time.now} hello-1\\n\")\n"),
                s(:str, "\n"),
                s(:str, "          Time.now = Time.mktime(2014, 1, 3, 1, 1, 1)\n"),
                s(:str, "          dev.write(\"\#{Time.now} hello-2\\n\")\n"),
                s(:str, "        ensure\n"),
                s(:str, "          dev.close\n"),
                s(:str, "        end\n"))),
            s(:lvasgn, :bug,
              s(:str, "[GH-539]")),
            s(:lvasgn, :log,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :tmpdir),
                s(:str, "log"))),
            s(:lvasgn, :cont,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :log))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "hello-2"),
                s(:regopt)),
              s(:lvar, :cont)),
            s(:send, nil, :assert_not_match,
              s(:regexp,
                s(:str, "hello-1"),
                s(:regopt)),
              s(:lvar, :cont)),
            s(:send,
              s(:send,
                s(:send, nil, :assert_file), :for,
                s(:lvar, :bug)), :exist?,
              s(:send,
                s(:lvar, :log), :+,
                s(:str, ".20140102"))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "hello-1"),
                s(:regopt)),
              s(:send,
                s(:const, nil, :File), :read,
                s(:send,
                  s(:lvar, :log), :+,
                  s(:str, ".20140102"))),
              s(:lvar, :bug))))),
      s(:lvasgn, :env_tz_works,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "linux|darwin|freebsd"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:if,
        s(:lvar, :env_tz_works),
        s(:def, :test_shifting_weekly,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :tmpdir)),
            s(:begin,
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:str, "TZ"),
                      s(:str, "UTC"))),
                  s(:splat,
                    s(:array,
                      s(:str, "-rlogger"),
                      s(:dstr,
                        s(:str, "-C"),
                        s(:begin,
                          s(:lvar, :tmpdir))),
                      s(:str, "-")))),
                s(:dstr,
                  s(:str, "        begin\n"),
                  s(:str, "          module FakeTime\n"),
                  s(:str, "            attr_accessor :now\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          class << Time\n"),
                  s(:str, "            prepend FakeTime\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          log = \"log\"\n"),
                  s(:str, "          File.open(log, \"w\") {}\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2015, 12, 14, 0, 1, 1)\n"),
                  s(:str, "          dev = Logger::LogDevice.new(\"log\", shift_age: 'weekly')\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2015, 12, 19, 12, 34, 56)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-1\\n\")\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2015, 12, 20, 0, 1, 1)\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-2\\n\")\n"),
                  s(:str, "        ensure\n"),
                  s(:str, "          dev.close if dev\n"),
                  s(:str, "        end\n"))),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :tmpdir),
                  s(:str, "log"))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-2"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send, nil, :assert_not_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:send,
                    s(:lvar, :log), :+,
                    s(:str, ".*")))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :log), :size)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :log)),
                s(:array,
                  s(:splat,
                    s(:lvar, :log)))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send, nil, :assert_equal,
                s(:str, "2015-12-19"),
                s(:send,
                  s(:lvar, :cont), :[],
                  s(:regexp,
                    s(:str, "^[-\\d]+"),
                    s(:regopt)))),
              s(:send, nil, :assert_equal,
                s(:str, "20151219"),
                s(:send,
                  s(:lvar, :log), :[],
                  s(:regexp,
                    s(:str, "\\d+\\z"),
                    s(:regopt))))))), nil),
      s(:if,
        s(:lvar, :env_tz_works),
        s(:def, :test_shifting_monthly,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :tmpdir)),
            s(:begin,
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:str, "TZ"),
                      s(:str, "UTC"))),
                  s(:splat,
                    s(:array,
                      s(:str, "-rlogger"),
                      s(:dstr,
                        s(:str, "-C"),
                        s(:begin,
                          s(:lvar, :tmpdir))),
                      s(:str, "-")))),
                s(:dstr,
                  s(:str, "        begin\n"),
                  s(:str, "          module FakeTime\n"),
                  s(:str, "            attr_accessor :now\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          class << Time\n"),
                  s(:str, "            prepend FakeTime\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          log = \"log\"\n"),
                  s(:str, "          File.open(log, \"w\") {}\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2015, 12, 14, 0, 1, 1)\n"),
                  s(:str, "          dev = Logger::LogDevice.new(\"log\", shift_age: 'monthly')\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2015, 12, 31, 12, 34, 56)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-1\\n\")\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2016, 1, 1, 0, 1, 1)\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-2\\n\")\n"),
                  s(:str, "        ensure\n"),
                  s(:str, "          dev.close if dev\n"),
                  s(:str, "        end\n"))),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :tmpdir),
                  s(:str, "log"))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-2"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send, nil, :assert_not_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:send,
                    s(:lvar, :log), :+,
                    s(:str, ".*")))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :log), :size)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :log)),
                s(:array,
                  s(:splat,
                    s(:lvar, :log)))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send, nil, :assert_equal,
                s(:str, "2015-12-31"),
                s(:send,
                  s(:lvar, :cont), :[],
                  s(:regexp,
                    s(:str, "^[-\\d]+"),
                    s(:regopt)))),
              s(:send, nil, :assert_equal,
                s(:str, "20151231"),
                s(:send,
                  s(:lvar, :log), :[],
                  s(:regexp,
                    s(:str, "\\d+\\z"),
                    s(:regopt))))))), nil),
      s(:if,
        s(:lvar, :env_tz_works),
        s(:def, :test_shifting_dst_change,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :tmpdir)),
            s(:begin,
              s(:send, nil, :assert_in_out_err,
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:str, "TZ"),
                      s(:str, "Europe/London"))),
                  s(:splat,
                    s(:array,
                      s(:str, "--disable=gems"),
                      s(:str, "-rlogger"),
                      s(:dstr,
                        s(:str, "-C"),
                        s(:begin,
                          s(:lvar, :tmpdir))),
                      s(:str, "-")))),
                s(:dstr,
                  s(:str, "        begin\n"),
                  s(:str, "          module FakeTime\n"),
                  s(:str, "            attr_accessor :now\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          class << Time\n"),
                  s(:str, "            prepend FakeTime\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          log = \"log\"\n"),
                  s(:str, "          File.open(log, \"w\") {}\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.mktime(2014, 3, 30, 0, 1, 1)\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "\n"),
                  s(:str, "          dev = Logger::LogDevice.new(log, shift_age: 'daily')\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-1\\n\")\n"),
                  s(:str, "          File.utime(*[Time.mktime(2014, 3, 30, 0, 2, 3)]*2, log)\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.mktime(2014, 3, 31, 0, 1, 1)\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-2\\n\")\n"),
                  s(:str, "        ensure\n"),
                  s(:str, "          dev.close\n"),
                  s(:str, "        end\n"))),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :tmpdir),
                  s(:str, "log"))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-2"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send, nil, :assert_not_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send,
                s(:send, nil, :assert_file), :exist?,
                s(:send,
                  s(:lvar, :log), :+,
                  s(:str, ".20140330")))))), nil),
      s(:if,
        s(:lvar, :env_tz_works),
        s(:def, :test_shifting_weekly_dst_change,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :tmpdir)),
            s(:begin,
              s(:send, nil, :assert_separately,
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:str, "TZ"),
                      s(:str, "Europe/London"))),
                  s(:splat,
                    s(:array,
                      s(:str, "-rlogger"),
                      s(:dstr,
                        s(:str, "-C"),
                        s(:begin,
                          s(:lvar, :tmpdir))),
                      s(:str, "-")))),
                s(:dstr,
                  s(:str, "        begin\n"),
                  s(:str, "          module FakeTime\n"),
                  s(:str, "            attr_accessor :now\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          class << Time\n"),
                  s(:str, "            prepend FakeTime\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          log = \"log\"\n"),
                  s(:str, "          File.open(log, \"w\") {}\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.mktime(2015, 10, 25, 0, 1, 1)\n"),
                  s(:str, "          dev = Logger::LogDevice.new(\"log\", shift_age: 'weekly')\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-1\\n\")\n"),
                  s(:str, "        ensure\n"),
                  s(:str, "          dev.close if dev\n"),
                  s(:str, "        end\n"))),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :tmpdir),
                  s(:str, "log"))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont))))), nil),
      s(:if,
        s(:lvar, :env_tz_works),
        s(:def, :test_shifting_monthly_dst_change,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :tmpdir)),
            s(:begin,
              s(:send, nil, :assert_separately,
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:str, "TZ"),
                      s(:str, "Europe/London"))),
                  s(:splat,
                    s(:array,
                      s(:str, "-rlogger"),
                      s(:dstr,
                        s(:str, "-C"),
                        s(:begin,
                          s(:lvar, :tmpdir))),
                      s(:str, "-")))),
                s(:dstr,
                  s(:str, "        begin\n"),
                  s(:str, "          module FakeTime\n"),
                  s(:str, "            attr_accessor :now\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          class << Time\n"),
                  s(:str, "            prepend FakeTime\n"),
                  s(:str, "          end\n"),
                  s(:str, "\n"),
                  s(:str, "          log = \"log\"\n"),
                  s(:str, "          File.open(log, \"w\") {}\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2016, 9, 1, 0, 1, 1)\n"),
                  s(:str, "          dev = Logger::LogDevice.new(\"log\", shift_age: 'monthly')\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2016, 9, 8, 7, 6, 5)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-1\\n\")\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2016, 10, 9, 8, 7, 6)\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-2\\n\")\n"),
                  s(:str, "\n"),
                  s(:str, "          Time.now = Time.utc(2016, 10, 9, 8, 7, 7)\n"),
                  s(:str, "          File.utime(Time.now, Time.now, log)\n"),
                  s(:str, "          dev.write(\"\#{Time.now} hello-3\\n\")\n"),
                  s(:str, "        ensure\n"),
                  s(:str, "          dev.close if dev\n"),
                  s(:str, "        end\n"))),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :tmpdir),
                  s(:str, "log"))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-2"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send, nil, :assert_not_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:lvasgn, :log,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:send,
                    s(:lvar, :log), :+,
                    s(:str, ".*")))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :log), :size)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :log)),
                s(:array,
                  s(:splat,
                    s(:lvar, :log)))),
              s(:lvasgn, :cont,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :log))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "hello-1"),
                  s(:regopt)),
                s(:lvar, :cont)),
              s(:send, nil, :assert_equal,
                s(:str, "2016-09-08"),
                s(:send,
                  s(:lvar, :cont), :[],
                  s(:regexp,
                    s(:str, "^[-\\d]+"),
                    s(:regopt)))),
              s(:send, nil, :assert_equal,
                s(:str, "20160930"),
                s(:send,
                  s(:lvar, :log), :[],
                  s(:regexp,
                    s(:str, "\\d+\\z"),
                    s(:regopt))))))), nil),
      s(:send, nil, :private),
      s(:def, :run_children,
        s(:args,
          s(:arg, :n),
          s(:arg, :args),
          s(:arg, :src)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :r),
              s(:lvasgn, :w)),
            s(:send,
              s(:const, nil, :IO), :pipe)),
          s(:send,
            s(:array,
              s(:lvar, :w),
              s(:splat,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 1),
                        s(:lvar, :n))), :map),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :f,
                      s(:send,
                        s(:const, nil, :IO), :popen,
                        s(:array,
                          s(:send,
                            s(:const, nil, :EnvUtil), :rubybin),
                          s(:splat,
                            s(:array,
                              s(:str, "--disable=gems"),
                              s(:str, "-rlogger"),
                              s(:str, "-"))),
                          s(:splat,
                            s(:lvar, :args))),
                        s(:str, "w"),
                        s(:hash,
                          s(:pair,
                            s(:sym, :err),
                            s(:lvar, :w))))),
                    s(:send,
                      s(:lvar, :f), :puts,
                      s(:lvar, :src)),
                    s(:lvar, :f))))), :each,
            s(:block_pass,
              s(:sym, :close))),
          s(:lvasgn, :stderr,
            s(:send,
              s(:lvar, :r), :read)),
          s(:send,
            s(:lvar, :r), :close),
          s(:lvar, :stderr))))))
