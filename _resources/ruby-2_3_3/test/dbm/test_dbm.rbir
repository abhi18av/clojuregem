s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "dbm")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :DBM)),
    s(:begin,
      s(:send, nil, :require,
        s(:str, "tmpdir")),
      s(:send, nil, :require,
        s(:str, "fileutils")),
      s(:class,
        s(:const, nil, :TestDBM_RDONLY),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:defs,
            s(:const, nil, :TestDBM_RDONLY), :uname_s,
            s(:args),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "rbconfig")),
              s(:case,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "target_os")),
                s(:when,
                  s(:str, "cygwin"),
                  s(:begin,
                    s(:send, nil, :require,
                      s(:str, "etc")),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Etc), :uname), :[],
                      s(:sym, :sysname)))),
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "target_os"))))),
          s(:casgn, nil, :SYSTEM,
            s(:send, nil, :uname_s)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@tmpdir,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir,
                  s(:str, "tmptest_dbm"))),
              s(:ivasgn, :@prefix,
                s(:dstr,
                  s(:str, "tmptest_dbm_"),
                  s(:begin,
                    s(:gvar, :$$)))),
              s(:ivasgn, :@path,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix)),
                  s(:str, "_"))),
              s(:block,
                s(:send,
                  s(:const, nil, :DBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix)),
                    s(:str, "_rdonly"))),
                s(:args,
                  s(:arg, :dbm)),
                s(:send,
                  s(:lvar, :dbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "FOO"))),
              s(:send,
                s(:const, nil, :File), :chmod,
                s(:int, 256),
                s(:splat,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix)),
                      s(:str, "_rdonly.*"))))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :DBM),
                s(:ivasgn, :@dbm_rdonly,
                  s(:send,
                    s(:const, nil, :DBM), :new,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix)),
                      s(:str, "_rdonly")),
                    s(:nil)))))),
          s(:def, :teardown,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@dbm_rdonly), :close)),
              s(:block,
                s(:send,
                  s(:const, nil, :ObjectSpace), :each_object,
                  s(:const, nil, :DBM)),
                s(:args,
                  s(:arg, :obj)),
                s(:if,
                  s(:send,
                    s(:lvar, :obj), :closed?), nil,
                  s(:send,
                    s(:lvar, :obj), :close))),
              s(:send,
                s(:const, nil, :FileUtils), :remove_entry_secure,
                s(:ivar, :@tmpdir)))),
          s(:def, :test_delete_rdonly,
            s(:args),
            s(:if,
              s(:send,
                s(:regexp,
                  s(:str, "^CYGWIN_9"),
                  s(:regopt)), :!~,
                s(:const, nil, :SYSTEM)),
              s(:begin,
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :DBMError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@dbm_rdonly), :delete,
                    s(:str, "foo"))),
                s(:send, nil, :assert_nil,
                  s(:send,
                    s(:ivar, :@dbm_rdonly), :delete,
                    s(:str, "bar")))), nil)),
          s(:def, :test_fetch_not_found,
            s(:args),
            s(:begin,
              s(:lvasgn, :notfound,
                s(:nil)),
              s(:lvasgn, :result,
                s(:send,
                  s(:const, nil, :Object), :new)),
              s(:send, nil, :assert_same,
                s(:lvar, :result),
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm_rdonly), :fetch,
                    s(:str, "bar")),
                  s(:args,
                    s(:arg, :k)),
                  s(:begin,
                    s(:lvasgn, :notfound,
                      s(:lvar, :k)),
                    s(:lvar, :result)))),
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:lvar, :notfound)),
              s(:send, nil, :assert_predicate,
                s(:lvar, :notfound),
                s(:sym, :tainted?)))))),
      s(:class,
        s(:const, nil, :TestDBM),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:ivasgn, :@tmpdir,
                s(:send,
                  s(:const, nil, :Dir), :mktmpdir,
                  s(:str, "tmptest_dbm"))),
              s(:ivasgn, :@prefix,
                s(:dstr,
                  s(:str, "tmptest_dbm_"),
                  s(:begin,
                    s(:gvar, :$$)))),
              s(:ivasgn, :@path,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:ivar, :@prefix)),
                  s(:str, "_"))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :DBM),
                s(:ivasgn, :@dbm,
                  s(:send,
                    s(:const, nil, :DBM), :new,
                    s(:ivar, :@path)))))),
          s(:def, :teardown,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@dbm), :closed?), nil,
                s(:send, nil, :assert_nil,
                  s(:send,
                    s(:ivar, :@dbm), :close))),
              s(:block,
                s(:send,
                  s(:const, nil, :ObjectSpace), :each_object,
                  s(:const, nil, :DBM)),
                s(:args,
                  s(:arg, :obj)),
                s(:if,
                  s(:send,
                    s(:lvar, :obj), :closed?), nil,
                  s(:send,
                    s(:lvar, :obj), :close))),
              s(:send,
                s(:const, nil, :FileUtils), :remove_entry_secure,
                s(:ivar, :@tmpdir)))),
          s(:def, :check_size,
            s(:args,
              s(:arg, :expect),
              s(:optarg, :dbm,
                s(:ivar, :@dbm))),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :expect),
                s(:send,
                  s(:lvar, :dbm), :size)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:lvar, :dbm), :each),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expect),
                s(:lvar, :n)),
              s(:if,
                s(:send,
                  s(:lvar, :expect), :==,
                  s(:int, 0)),
                s(:send, nil, :assert_equal,
                  s(:true),
                  s(:send,
                    s(:lvar, :dbm), :empty?)),
                s(:send, nil, :assert_equal,
                  s(:false),
                  s(:send,
                    s(:lvar, :dbm), :empty?))))),
          s(:def, :test_dbmfile_suffix,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@dbm), :close),
              s(:lvasgn, :prefix,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:ivar, :@path))),
              s(:lvasgn, :suffixes,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Dir), :entries,
                        s(:ivar, :@tmpdir)), :grep,
                      s(:regexp,
                        s(:str, "\\A"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Regexp), :escape,
                            s(:lvar, :prefix))),
                        s(:regopt))),
                    s(:args),
                    s(:back_ref, :$')), :sort)),
              s(:lvasgn, :pagname,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@path)),
                  s(:str, ".pag"))),
              s(:lvasgn, :dirname,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@path)),
                  s(:str, ".dir"))),
              s(:lvasgn, :dbname,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@path)),
                  s(:str, ".db"))),
              s(:case,
                s(:const,
                  s(:const, nil, :DBM), :VERSION),
                s(:when,
                  s(:regexp,
                    s(:str, "\\bNDBM\\b"),
                    s(:regopt)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, ".dir"),
                        s(:str, ".pag")),
                      s(:lvar, :suffixes)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:const, nil, :File), :zero?,
                        s(:lvar, :pagname))),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:const, nil, :File), :zero?,
                        s(:lvar, :dirname))))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\bGDBM\\b"),
                    s(:regopt)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, ".dir"),
                        s(:str, ".pag")),
                      s(:lvar, :suffixes)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:const, nil, :File), :zero?,
                          s(:lvar, :pagname)), :!)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:const, nil, :File), :zero?,
                          s(:lvar, :dirname)), :!)),
                    s(:lvasgn, :pag,
                      s(:send,
                        s(:const, nil, :File), :binread,
                        s(:lvar, :pagname),
                        s(:int, 16))),
                    s(:lvasgn, :pag_magics,
                      s(:array,
                        s(:int, 324508366),
                        s(:int, 324508365),
                        s(:int, 324508367))),
                    s(:send, nil, :assert_operator,
                      s(:lvar, :pag_magics),
                      s(:sym, :include?),
                      s(:send,
                        s(:send,
                          s(:lvar, :pag), :unpack,
                          s(:str, "i")), :[],
                        s(:int, 0))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:const, nil, :File), :identical?,
                          s(:lvar, :pagname),
                          s(:lvar, :dirname)), :!),
                      s(:begin,
                        s(:lvasgn, :dir,
                          s(:send,
                            s(:const, nil, :File), :binread,
                            s(:lvar, :dirname),
                            s(:int, 16))),
                        s(:send, nil, :assert_equal,
                          s(:str, "GDBM"),
                          s(:send,
                            s(:lvar, :dir), :[],
                            s(:int, 0),
                            s(:int, 4)))), nil))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\bBerkeley DB\\b"),
                    s(:regopt)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, ".db")),
                      s(:lvar, :suffixes)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:const, nil, :File), :zero?,
                          s(:lvar, :dbname)), :!)),
                    s(:lvasgn, :db,
                      s(:send,
                        s(:const, nil, :File), :binread,
                        s(:lvar, :dbname),
                        s(:int, 16))),
                    s(:send, nil, :assert,
                      s(:or,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :db), :[],
                              s(:int, 0),
                              s(:int, 4)), :unpack,
                            s(:str, "N")), :==,
                          s(:array,
                            s(:int, 398689))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :db), :[],
                              s(:int, 12),
                              s(:int, 4)), :unpack,
                            s(:str, "L")), :==,
                          s(:array,
                            s(:int, 398689))))))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\bQDBM\\b"),
                    s(:regopt)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:array,
                        s(:str, ".dir"),
                        s(:str, ".pag")),
                      s(:lvar, :suffixes)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:const, nil, :File), :zero?,
                          s(:lvar, :pagname)), :!)),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:const, nil, :File), :zero?,
                          s(:lvar, :dirname)), :!)),
                    s(:lvasgn, :dir,
                      s(:send,
                        s(:const, nil, :File), :binread,
                        s(:lvar, :dirname),
                        s(:int, 16))),
                    s(:send, nil, :assert_equal,
                      s(:str, "[depot]\u0000\v"),
                      s(:send,
                        s(:lvar, :dir), :[],
                        s(:int, 0),
                        s(:int, 9))),
                    s(:lvasgn, :pag,
                      s(:send,
                        s(:const, nil, :File), :binread,
                        s(:lvar, :pagname),
                        s(:int, 16))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:array,
                            s(:int, 1)), :pack,
                          s(:str, "s")), :==,
                        s(:str, "\u0000\u0001")),
                      s(:send, nil, :assert_equal,
                        s(:str, "[DEPOT]\n\f"),
                        s(:send,
                          s(:lvar, :pag), :[],
                          s(:int, 0),
                          s(:int, 9))),
                      s(:send, nil, :assert_equal,
                        s(:str, "[depot]\n\f"),
                        s(:send,
                          s(:lvar, :pag), :[],
                          s(:int, 0),
                          s(:int, 9)))))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :suffixes), :==,
                  s(:array,
                    s(:str, ".db"))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "\\bBerkeley DB\\b"),
                    s(:regopt)),
                  s(:const,
                    s(:const, nil, :DBM), :VERSION)), nil))),
          s(:def, :test_s_new_has_no_block,
            s(:args),
            s(:begin,
              s(:lvasgn, :foo,
                s(:true)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :DBM),
                s(:lvasgn, :dbm,
                  s(:block,
                    s(:send,
                      s(:const, nil, :DBM), :new,
                      s(:dstr,
                        s(:begin,
                          s(:ivar, :@tmpdir)),
                        s(:str, "/"),
                        s(:begin,
                          s(:ivar, :@prefix)))),
                    s(:args),
                    s(:lvasgn, :foo,
                      s(:false))))),
              s(:send, nil, :assert_equal,
                s(:lvar, :foo),
                s(:true)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :dbm), :close)))),
          s(:def, :test_s_open_no_create,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "GDBM version 1\\.(?:[0-7]\\b|8\\.0)"),
                      s(:regopt)),
                    s(:const,
                      s(:const, nil, :DBM), :VERSION)),
                  s(:send, nil, :skip,
                    s(:dstr,
                      s(:str, "dbm_open() is broken on libgdbm 1.8.0 or prior ("),
                      s(:begin,
                        s(:const,
                          s(:const, nil, :DBM), :VERSION)),
                      s(:str, ")"))), nil),
                s(:send, nil, :assert_nil,
                  s(:lvasgn, :dbm,
                    s(:send,
                      s(:const, nil, :DBM), :open,
                      s(:dstr,
                        s(:begin,
                          s(:ivar, :@tmpdir)),
                        s(:str, "/"),
                        s(:begin,
                          s(:ivar, :@prefix))),
                      s(:nil))))),
              s(:if,
                s(:lvar, :dbm),
                s(:send,
                  s(:lvar, :dbm), :close), nil))),
          s(:def, :test_s_open_with_block,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:block,
                s(:send,
                  s(:const, nil, :DBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmpdir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:ivar, :@prefix)))),
                s(:args),
                s(:sym, :foo)),
              s(:sym, :foo))),
          s(:def, :test_close,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :DBM),
                s(:lvasgn, :dbm,
                  s(:send,
                    s(:const, nil, :DBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmpdir)),
                      s(:str, "/"),
                      s(:begin,
                        s(:ivar, :@prefix)))))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:lvar, :dbm), :close)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :DBMError)),
                s(:args),
                s(:send,
                  s(:lvar, :dbm), :close)))),
          s(:def, :test_aref,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@dbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@dbm), :[],
                  s(:str, "foo"))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@dbm), :[],
                  s(:str, "bar"))))),
          s(:def, :test_fetch,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@dbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@dbm), :fetch,
                  s(:str, "foo"))),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :IndexError)),
                s(:args),
                s(:send,
                  s(:ivar, :@dbm), :fetch,
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "baz"),
                s(:send,
                  s(:ivar, :@dbm), :fetch,
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:send, nil, :assert_equal,
                s(:str, "foobar"),
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :fetch,
                    s(:str, "bar")),
                  s(:args,
                    s(:arg, :key)),
                  s(:send,
                    s(:str, "foo"), :+,
                    s(:lvar, :key)))))),
          s(:def, :test_aset,
            s(:args),
            s(:begin,
              s(:lvasgn, :num,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:int, 2), :times),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:send,
                      s(:ivar, :@dbm), :[]=,
                      s(:str, "foo"),
                      s(:str, "foo"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "foo"),
                    s(:send,
                      s(:ivar, :@dbm), :[],
                      s(:str, "foo"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "bar"),
                    s(:send,
                      s(:ivar, :@dbm), :[]=,
                      s(:str, "foo"),
                      s(:str, "bar"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "bar"),
                    s(:send,
                      s(:ivar, :@dbm), :[],
                      s(:str, "foo"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@dbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@dbm), :[]=,
                      s(:str, "bar"),
                      s(:str, ""))),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@dbm), :[],
                      s(:str, "bar"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@dbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@dbm), :[]=,
                      s(:str, ""),
                      s(:str, ""))),
                  s(:send, nil, :assert_equal,
                    s(:str, ""),
                    s(:send,
                      s(:ivar, :@dbm), :[],
                      s(:str, ""))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@dbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:str, "200"),
                    s(:send,
                      s(:ivar, :@dbm), :[]=,
                      s(:str, "100"),
                      s(:str, "200"))),
                  s(:send, nil, :assert_equal,
                    s(:str, "200"),
                    s(:send,
                      s(:ivar, :@dbm), :[],
                      s(:str, "100"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@dbm), :size)),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:str, "y"), :*,
                      s(:int, 100)),
                    s(:send,
                      s(:ivar, :@dbm), :[]=,
                      s(:send,
                        s(:str, "x"), :*,
                        s(:int, 100)),
                      s(:send,
                        s(:str, "y"), :*,
                        s(:int, 100)))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:str, "y"), :*,
                      s(:int, 100)),
                    s(:send,
                      s(:ivar, :@dbm), :[],
                      s(:send,
                        s(:str, "x"), :*,
                        s(:int, 100)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :i), :==,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)), nil),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :num),
                    s(:send,
                      s(:ivar, :@dbm), :size)))))),
          s(:def, :test_key,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@dbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:str, "foo"),
                s(:send,
                  s(:ivar, :@dbm), :key,
                  s(:str, "bar"))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@dbm), :[],
                  s(:str, "bar"))))),
          s(:def, :test_values_at,
            s(:args),
            s(:begin,
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :values), :reverse),
                s(:send,
                  s(:ivar, :@dbm), :values_at,
                  s(:splat,
                    s(:send,
                      s(:lvar, :keys), :reverse)))))),
          s(:def, :test_select_with_block,
            s(:args),
            s(:begin,
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :select),
                  s(:args,
                    s(:arg, :k),
                    s(:arg, :v)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:lvar, :k), :upcase),
                      s(:lvar, :v)),
                    s(:send,
                      s(:lvar, :k), :!=,
                      s(:str, "bar"))))),
              s(:send, nil, :assert_equal,
                s(:array,
                  s(:array,
                    s(:str, "baz"),
                    s(:str, "BAZ")),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "FOO"))),
                s(:send,
                  s(:lvar, :ret), :sort)))),
          s(:def, :test_length,
            s(:args),
            s(:begin,
              s(:lvasgn, :num,
                s(:int, 10)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :num), :times),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:send,
                      s(:lvar, :i), :to_s)),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :i),
                    s(:lvar, :i)))),
              s(:send, nil, :assert_equal,
                s(:lvar, :num),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:send,
                s(:ivar, :@dbm), :shift),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :num), :-,
                  s(:int, 1)),
                s(:send,
                  s(:ivar, :@dbm), :size)))),
          s(:def, :test_empty?,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:ivar, :@dbm), :empty?)),
              s(:send,
                s(:ivar, :@dbm), :[]=,
                s(:str, "foo"),
                s(:str, "FOO")),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@dbm), :empty?)))),
          s(:def, :test_each_pair,
            s(:args),
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@dbm), :each_pair),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :each_pair),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:begin,
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :i,
                        s(:send,
                          s(:lvar, :keys), :index,
                          s(:lvar, :key)))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :val),
                      s(:send,
                        s(:lvar, :values), :[],
                        s(:lvar, :i))),
                    s(:op_asgn,
                      s(:lvasgn, :n), :+,
                      s(:int, 1))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :size),
                s(:lvar, :n)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@dbm),
                s(:lvar, :ret)))),
          s(:def, :test_each_value,
            s(:args),
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@dbm), :each_value),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :each_value),
                  s(:args,
                    s(:arg, :val)),
                  s(:begin,
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :key,
                        s(:send,
                          s(:ivar, :@dbm), :key,
                          s(:lvar, :val)))),
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :i,
                        s(:send,
                          s(:lvar, :keys), :index,
                          s(:lvar, :key)))),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :val),
                      s(:send,
                        s(:lvar, :values), :[],
                        s(:lvar, :i))),
                    s(:op_asgn,
                      s(:lvasgn, :n), :+,
                      s(:int, 1))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :size),
                s(:lvar, :n)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@dbm),
                s(:lvar, :ret)))),
          s(:def, :test_each_key,
            s(:args),
            s(:begin,
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@dbm), :each_key),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :n)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :each_key),
                  s(:args,
                    s(:arg, :key)),
                  s(:begin,
                    s(:send, nil, :assert_not_nil,
                      s(:lvasgn, :i,
                        s(:send,
                          s(:lvar, :keys), :index,
                          s(:lvar, :key)))),
                    s(:send, nil, :assert_equal,
                      s(:send,
                        s(:ivar, :@dbm), :[],
                        s(:lvar, :key)),
                      s(:send,
                        s(:lvar, :values), :[],
                        s(:lvar, :i))),
                    s(:op_asgn,
                      s(:lvasgn, :n), :+,
                      s(:int, 1))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :size),
                s(:lvar, :n)),
              s(:send, nil, :assert_equal,
                s(:ivar, :@dbm),
                s(:lvar, :ret)))),
          s(:def, :test_keys,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@dbm), :keys)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :sort),
                s(:send,
                  s(:send,
                    s(:ivar, :@dbm), :keys), :sort)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :values), :sort),
                s(:send,
                  s(:send,
                    s(:ivar, :@dbm), :values), :sort)))),
          s(:def, :test_values,
            s(:args),
            s(:send, nil, :test_keys)),
          s(:def, :test_shift,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@dbm), :shift)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:lvasgn, :ret_keys,
                s(:array)),
              s(:lvasgn, :ret_values,
                s(:array)),
              s(:while,
                s(:lvasgn, :ret,
                  s(:send,
                    s(:ivar, :@dbm), :shift)),
                s(:begin,
                  s(:send,
                    s(:lvar, :ret_keys), :push,
                    s(:send,
                      s(:lvar, :ret), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:lvar, :ret_values), :push,
                    s(:send,
                      s(:lvar, :ret), :[],
                      s(:int, 1))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:send,
                        s(:lvar, :keys), :size), :-,
                      s(:send,
                        s(:lvar, :ret_keys), :size)),
                    s(:send,
                      s(:ivar, :@dbm), :size)))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :keys), :sort),
                s(:send,
                  s(:lvar, :ret_keys), :sort)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :values), :sort),
                s(:send,
                  s(:lvar, :ret_values), :sort)))),
          s(:def, :test_delete,
            s(:args),
            s(:begin,
              s(:lvasgn, :keys,
                s(:array,
                  s(:str, "foo"),
                  s(:str, "bar"),
                  s(:str, "baz"))),
              s(:lvasgn, :values,
                s(:array,
                  s(:str, "FOO"),
                  s(:str, "BAR"),
                  s(:str, "BAZ"))),
              s(:lvasgn, :key,
                s(:send,
                  s(:lvar, :keys), :[],
                  s(:int, 1))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@dbm), :delete,
                  s(:lvar, :key))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:int, 2)))),
                s(:lvar, :values)),
              s(:send, nil, :assert_equal,
                s(:str, "BAR"),
                s(:send,
                  s(:ivar, :@dbm), :delete,
                  s(:lvar, :key))),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@dbm), :[],
                  s(:lvar, :key))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:send, nil, :assert_nil,
                s(:send,
                  s(:ivar, :@dbm), :delete,
                  s(:lvar, :key))))),
          s(:def, :test_delete_with_block,
            s(:args),
            s(:begin,
              s(:lvasgn, :key,
                s(:str, "no called block")),
              s(:send,
                s(:ivar, :@dbm), :[]=,
                s(:lvar, :key),
                s(:str, "foo")),
              s(:send, nil, :assert_equal,
                s(:str, "foo"),
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :delete,
                    s(:lvar, :key)),
                  s(:args,
                    s(:arg, :k)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :replace,
                      s(:str, "called block")),
                    s(:sym, :blockval)))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:lvasgn, :key,
                s(:str, "no called block")),
              s(:send, nil, :assert_equal,
                s(:sym, :blockval),
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :delete,
                    s(:lvar, :key)),
                  s(:args,
                    s(:arg, :k)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :replace,
                      s(:str, "called block")),
                    s(:sym, :blockval)))),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:send,
                  s(:ivar, :@dbm), :size)))),
          s(:def, :test_delete_if,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :delete_if),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :<,
                    s(:int, 50)))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@dbm),
                s(:lvar, :ret)),
              s(:send, nil, :check_size,
                s(:int, 50),
                s(:ivar, :@dbm)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :delete_if),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :>=,
                    s(:int, 50)))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@dbm),
                s(:lvar, :ret)),
              s(:send, nil, :check_size,
                s(:int, 0),
                s(:ivar, :@dbm)),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:send, nil, :check_size,
                s(:int, 100),
                s(:ivar, :@dbm)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@dbm), :delete_if),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :n), :>,
                      s(:int, 50)),
                    s(:break), nil),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)),
                  s(:true))),
              s(:send, nil, :assert_equal,
                s(:int, 51),
                s(:lvar, :n)),
              s(:send, nil, :check_size,
                s(:int, 49),
                s(:ivar, :@dbm)),
              s(:send,
                s(:ivar, :@dbm), :clear),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:send, nil, :check_size,
                s(:int, 100),
                s(:ivar, :@dbm)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:kwbegin,
                s(:rescue,
                  s(:block,
                    s(:send,
                      s(:ivar, :@dbm), :delete_if),
                    s(:args,
                      s(:arg, :key),
                      s(:arg, :val)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 50)),
                        s(:send, nil, :raise,
                          s(:str, "runtime error")), nil),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:int, 1)),
                      s(:true))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :RuntimeError)), nil, nil), nil)),
              s(:send, nil, :assert_equal,
                s(:int, 51),
                s(:lvar, :n)),
              s(:send, nil, :check_size,
                s(:int, 49),
                s(:ivar, :@dbm)))),
          s(:def, :test_reject,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:lvasgn, :hash,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :reject),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :<,
                    s(:int, 50)))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:send, nil, :assert_equal,
                s(:int, 50),
                s(:send,
                  s(:lvar, :hash), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :hash), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:false),
                    s(:send,
                      s(:send,
                        s(:lvar, :key), :to_i), :<,
                      s(:int, 50))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :key),
                    s(:lvar, :val)))),
              s(:lvasgn, :hash,
                s(:block,
                  s(:send,
                    s(:ivar, :@dbm), :reject),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_i), :<,
                    s(:int, 100)))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:lvar, :hash), :empty?)))),
          s(:def, :test_clear,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "1")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:send, nil, :assert_equal,
                s(:ivar, :@dbm),
                s(:send,
                  s(:ivar, :@dbm), :clear)),
              s(:lvasgn, :i,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@dbm), :each),
                s(:args),
                s(:op_asgn,
                  s(:lvasgn, :i), :+,
                  s(:int, 1))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@dbm), :size),
                s(:lvar, :i)),
              s(:send, nil, :assert_equal,
                s(:int, 0),
                s(:lvar, :i)))),
          s(:def, :test_invert,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)),
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)))),
              s(:lvasgn, :hash,
                s(:send,
                  s(:ivar, :@dbm), :invert)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:lvar, :hash), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :hash), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_update,
            s(:args),
            s(:begin,
              s(:lvasgn, :hash,
                s(:hash)),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:lvar, :hash), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:send,
                s(:ivar, :@dbm), :[]=,
                s(:str, "101"),
                s(:str, "101")),
              s(:send,
                s(:ivar, :@dbm), :update,
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 101),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:block,
                s(:send,
                  s(:ivar, :@dbm), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_replace,
            s(:args),
            s(:begin,
              s(:lvasgn, :hash,
                s(:hash)),
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:lvar, :hash), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:send,
                s(:ivar, :@dbm), :[]=,
                s(:str, "101"),
                s(:str, "101")),
              s(:send,
                s(:ivar, :@dbm), :replace,
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:ivar, :@dbm), :size)),
              s(:block,
                s(:send,
                  s(:ivar, :@dbm), :each_pair),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_haskey?,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@dbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:ivar, :@dbm), :has_key?,
                  s(:str, "foo"))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@dbm), :has_key?,
                  s(:str, "bar"))))),
          s(:def, :test_has_value?,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:str, "bar"),
                s(:send,
                  s(:ivar, :@dbm), :[]=,
                  s(:str, "foo"),
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:ivar, :@dbm), :has_value?,
                  s(:str, "bar"))),
              s(:send, nil, :assert_equal,
                s(:false),
                s(:send,
                  s(:ivar, :@dbm), :has_value?,
                  s(:str, "foo"))))),
          s(:def, :test_to_a,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:lvasgn, :ary,
                s(:send,
                  s(:ivar, :@dbm), :to_a)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Array),
                s(:lvar, :ary)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:lvar, :ary), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :ary), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))),
          s(:def, :test_to_hash,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:str, "0")),
              s(:block,
                s(:send,
                  s(:int, 100), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:lvar, :v), :next)),
                  s(:send,
                    s(:ivar, :@dbm), :[]=,
                    s(:lvar, :v),
                    s(:lvar, :v)))),
              s(:lvasgn, :hash,
                s(:send,
                  s(:ivar, :@dbm), :to_hash)),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Hash),
                s(:lvar, :hash)),
              s(:send, nil, :assert_equal,
                s(:int, 100),
                s(:send,
                  s(:lvar, :hash), :size)),
              s(:block,
                s(:send,
                  s(:lvar, :hash), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :key), :to_i),
                  s(:send,
                    s(:lvar, :val), :to_i))))))),
      s(:class,
        s(:const, nil, :TestDBM2),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:ivasgn, :@tmproot,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir,
                s(:str, "ruby-dbm")))),
          s(:def, :teardown,
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:ivar, :@tmproot)),
              s(:send,
                s(:const, nil, :FileUtils), :remove_entry_secure,
                s(:ivar, :@tmproot)), nil)),
          s(:def, :test_version,
            s(:args),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :String),
              s(:const,
                s(:const, nil, :DBM), :VERSION))),
          s(:def, :test_reader_open_notexist,
            s(:args),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)),
              s(:args),
              s(:send,
                s(:const, nil, :DBM), :open,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmproot)),
                  s(:str, "/a")),
                s(:int, 438),
                s(:const,
                  s(:const, nil, :DBM), :READER)))),
          s(:def, :test_writer_open_notexist,
            s(:args),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "GDBM version 1\\.(?:[0-7]\\b|8\\.0)"),
                    s(:regopt)),
                  s(:const,
                    s(:const, nil, :DBM), :VERSION)),
                s(:send, nil, :skip,
                  s(:dstr,
                    s(:str, "dbm_open() is broken on libgdbm 1.8.0 or prior ("),
                    s(:begin,
                      s(:const,
                        s(:const, nil, :DBM), :VERSION)),
                    s(:str, ")"))), nil),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT)),
                s(:args),
                s(:send,
                  s(:const, nil, :DBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a")),
                  s(:int, 438),
                  s(:const,
                    s(:const, nil, :DBM), :WRITER))))),
          s(:def, :test_wrcreat_open_notexist,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :DBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a")),
                  s(:int, 438),
                  s(:const,
                    s(:const, nil, :DBM), :WRCREAT))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :DBM),
                s(:lvar, :v)),
              s(:send,
                s(:lvar, :v), :close))),
          s(:def, :test_newdb_open_notexist,
            s(:args),
            s(:begin,
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :DBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a")),
                  s(:int, 438),
                  s(:const,
                    s(:const, nil, :DBM), :NEWDB))),
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :DBM),
                s(:lvar, :v)),
              s(:send,
                s(:lvar, :v), :close))),
          s(:def, :test_reader_open,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :DBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a"))),
                s(:args), nil),
              s(:lvasgn, :v,
                s(:block,
                  s(:send,
                    s(:const, nil, :DBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmproot)),
                      s(:str, "/a")),
                    s(:nil),
                    s(:const,
                      s(:const, nil, :DBM), :READER)),
                  s(:args,
                    s(:arg, :d)),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :assert_raise,
                        s(:const,
                          s(:const, nil, :Errno), :EPERM),
                        s(:const, nil, :DBMError)),
                      s(:args),
                      s(:send,
                        s(:lvar, :d), :[]=,
                        s(:str, "k"),
                        s(:str, "v"))),
                    s(:true)))),
              s(:send, nil, :assert,
                s(:lvar, :v)))),
          s(:def, :test_newdb_open,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :DBM), :open,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@tmproot)),
                    s(:str, "/a"))),
                s(:args,
                  s(:arg, :dbm)),
                s(:send,
                  s(:lvar, :dbm), :[]=,
                  s(:str, "k"),
                  s(:str, "v"))),
              s(:lvasgn, :v,
                s(:block,
                  s(:send,
                    s(:const, nil, :DBM), :open,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@tmproot)),
                      s(:str, "/a")),
                    s(:nil),
                    s(:const,
                      s(:const, nil, :DBM), :NEWDB)),
                  s(:args,
                    s(:arg, :d)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:int, 0),
                      s(:send,
                        s(:lvar, :d), :length)),
                    s(:send, nil, :assert_nil,
                      s(:send,
                        s(:lvar, :d), :[],
                        s(:str, "k"))),
                    s(:true)))),
              s(:send, nil, :assert,
                s(:lvar, :v)))),
          s(:def, :test_freeze,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :DBM), :open,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@tmproot)),
                  s(:str, "/a"))),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:send,
                  s(:lvar, :d), :freeze),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const, nil, :RuntimeError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :d), :[]=,
                    s(:str, "k"),
                    s(:str, "v"))))))))), nil))
