s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "test_optparse")),
  s(:module,
    s(:const,
      s(:const, nil, :TestOptionParser), :ReqArg),
    s(:begin,
      s(:class,
        s(:const, nil, :Def1),
        s(:const, nil, :TestOptionParser),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :ReqArg)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:block,
                s(:send,
                  s(:ivar, :@opt), :def_option,
                  s(:str, "-xVAL")),
                s(:args,
                  s(:arg, :x)),
                s(:ivasgn, :@flag,
                  s(:lvar, :x))),
              s(:block,
                s(:send,
                  s(:ivar, :@opt), :def_option,
                  s(:str, "--option=VAL")),
                s(:args,
                  s(:arg, :x)),
                s(:ivasgn, :@flag,
                  s(:lvar, :x))),
              s(:block,
                s(:send,
                  s(:ivar, :@opt), :def_option,
                  s(:str, "--regexp=REGEXP"),
                  s(:const, nil, :Regexp)),
                s(:args,
                  s(:arg, :x)),
                s(:ivasgn, :@reopt,
                  s(:lvar, :x))),
              s(:ivasgn, :@reopt,
                s(:nil)))))),
      s(:class,
        s(:const, nil, :Def2),
        s(:const, nil, :TestOptionParser),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :ReqArg)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:block,
                s(:send,
                  s(:ivar, :@opt), :def_option,
                  s(:str, "-x"),
                  s(:str, "--option=VAL")),
                s(:args,
                  s(:arg, :x)),
                s(:ivasgn, :@flag,
                  s(:lvar, :x))))))),
      s(:class,
        s(:const, nil, :Def3),
        s(:const, nil, :TestOptionParser),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :ReqArg)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:block,
                s(:send,
                  s(:ivar, :@opt), :def_option,
                  s(:str, "--option=VAL"),
                  s(:str, "-x")),
                s(:args,
                  s(:arg, :x)),
                s(:ivasgn, :@flag,
                  s(:lvar, :x))))))),
      s(:class,
        s(:const, nil, :Def4),
        s(:const, nil, :TestOptionParser),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :ReqArg)),
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:block,
                s(:send,
                  s(:ivar, :@opt), :def_option,
                  s(:str, "-xVAL"),
                  s(:str, "--option=VAL")),
                s(:args,
                  s(:arg, :x)),
                s(:ivasgn, :@flag,
                  s(:lvar, :x))))))),
      s(:def, :test_short,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :OptionParser), :MissingArgument)),
            s(:args),
            s(:send,
              s(:ivar, :@opt), :parse!,
              s(:array,
                s(:str, "-x")))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "-x"),
                  s(:str, "foo"))))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:ivar, :@flag)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "-xbar"))))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:ivar, :@flag)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "-x="))))),
          s(:send, nil, :assert_equal,
            s(:str, "="),
            s(:ivar, :@flag)))),
      s(:def, :test_abbrev,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :OptionParser), :MissingArgument)),
            s(:args),
            s(:send,
              s(:ivar, :@opt), :parse!,
              s(:array,
                s(:str, "-o")))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "-o"),
                  s(:str, "foo"))))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:ivar, :@flag)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "-obar"))))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:ivar, :@flag)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "-o="))))),
          s(:send, nil, :assert_equal,
            s(:str, "="),
            s(:ivar, :@flag)))),
      s(:def, :test_long,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :OptionParser), :MissingArgument)),
            s(:args),
            s(:send,
              s(:ivar, :@opt), :parse!,
              s(:array,
                s(:str, "--opt")))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "--opt"),
                  s(:str, "foo"))))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:ivar, :@flag)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo")),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "--opt="),
                  s(:str, "foo"))))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:ivar, :@flag)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "--opt=foo"))))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:ivar, :@flag)))),
      s(:class,
        s(:const,
          s(:const, nil, :TestOptionParser), :WithPattern),
        s(:const, nil, :TestOptionParser),
        s(:def, :test_pattern,
          s(:args),
          s(:begin,
            s(:lvasgn, :pat,
              s(:lvasgn, :num,
                s(:nil))),
            s(:block,
              s(:send,
                s(:ivar, :@opt), :def_option,
                s(:str, "--pattern=VAL"),
                s(:regexp,
                  s(:str, "(\\w+)(?:\\s*:\\s*(\\w+))?"),
                  s(:regopt))),
              s(:args,
                s(:arg, :x),
                s(:arg, :y),
                s(:arg, :z)),
              s(:lvasgn, :pat,
                s(:array,
                  s(:lvar, :x),
                  s(:lvar, :y),
                  s(:lvar, :z)))),
            s(:block,
              s(:send,
                s(:ivar, :@opt), :def_option,
                s(:str, "-T NUM"),
                s(:regexp,
                  s(:str, "\\A[1-4]\\z"),
                  s(:regopt))),
              s(:args,
                s(:arg, :n)),
              s(:lvasgn, :num,
                s(:lvar, :n))),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "--pattern=key:val")))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "key:val"),
                s(:str, "key"),
                s(:str, "val")),
              s(:lvar, :pat),
              s(:str, "[ruby-list:45645]")),
            s(:block,
              s(:send, nil, :no_error),
              s(:args),
              s(:send,
                s(:ivar, :@opt), :parse!,
                s(:array,
                  s(:str, "-T"),
                  s(:str, "4")))),
            s(:send, nil, :assert_equal,
              s(:str, "4"),
              s(:lvar, :num),
              s(:str, "[ruby-dev:37514]"))))))))
