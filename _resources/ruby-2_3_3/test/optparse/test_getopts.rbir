s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:class,
    s(:const, nil, :TestOptionParser),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase), nil),
  s(:class,
    s(:const,
      s(:const, nil, :TestOptionParser), :Getopts),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@opt,
          s(:send,
            s(:const, nil, :OptionParser), :new))),
      s(:def, :test_short_noarg,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:ivar, :@opt), :getopts,
              s(:array,
                s(:str, "-a")),
              s(:str, "ab"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "b"))))),
      s(:def, :test_short_arg,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:ivar, :@opt), :getopts,
              s(:array,
                s(:str, "-a1")),
              s(:str, "a:b:"))),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "b"))))),
      s(:def, :test_long_noarg,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:ivar, :@opt), :getopts,
              s(:array,
                s(:str, "--foo")),
              s(:str, ""),
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "bar"))))),
      s(:def, :test_long_arg,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:ivar, :@opt), :getopts,
              s(:array,
                s(:str, "--bar"),
                s(:str, "ZOT")),
              s(:str, ""),
              s(:str, "foo:FOO"),
              s(:str, "bar:BAR"))),
          s(:send, nil, :assert_equal,
            s(:str, "FOO"),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "ZOT"),
            s(:send,
              s(:lvar, :o), :[],
              s(:str, "bar"))))))))
