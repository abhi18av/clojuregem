s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "optparse/ac")),
  s(:class,
    s(:const, nil, :TestOptionParser),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase), nil),
  s(:class,
    s(:const,
      s(:const, nil, :TestOptionParser), :AutoConf),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@opt,
            s(:send,
              s(:const,
                s(:const, nil, :OptionParser), :AC), :new)),
          s(:ivasgn, :@foo,
            s(:ivasgn, :@bar,
              s(:send,
                s(:self), :class))),
          s(:block,
            s(:send,
              s(:ivar, :@opt), :ac_arg_enable,
              s(:str, "foo"),
              s(:str, "foo option")),
            s(:args,
              s(:arg, :x)),
            s(:ivasgn, :@foo,
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:ivar, :@opt), :ac_arg_disable,
              s(:str, "bar"),
              s(:str, "bar option")),
            s(:args,
              s(:arg, :x)),
            s(:ivasgn, :@bar,
              s(:lvar, :x))),
          s(:block,
            s(:send,
              s(:ivar, :@opt), :ac_arg_with,
              s(:str, "zot"),
              s(:str, "zot option")),
            s(:args,
              s(:arg, :x)),
            s(:ivasgn, :@zot,
              s(:lvar, :x))))),
      s(:class,
        s(:const, nil, :DummyOutput),
        s(:const, nil, :String),
        s(:alias,
          s(:sym, :write),
          s(:sym, :<<))),
      s(:def, :no_error,
        s(:args,
          s(:restarg, :args)),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:gvasgn, :$stderr),
                s(:lvasgn, :stderr)),
              s(:array,
                s(:send,
                  s(:const, nil, :DummyOutput), :new),
                s(:gvar, :$stderr))),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:splat,
                  s(:lvar, :args))),
              s(:args),
              s(:return,
                s(:yield)))),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :stderr),
                s(:gvasgn, :$stderr)),
              s(:array,
                s(:gvar, :$stderr),
                s(:lvar, :stderr))),
            s(:if,
              s(:gvar, :$!),
              s(:block,
                s(:send,
                  s(:send,
                    s(:gvar, :$!), :backtrace), :delete_if),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:regexp,
                    s(:str, "\\A"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Regexp), :quote,
                        s(:str, "(string)"))),
                    s(:str, ":"),
                    s(:begin,
                      s(:send,
                        s(:int, 24), :-,
                        s(:int, 2))),
                    s(:regopt, :o)), :=~,
                  s(:lvar, :e))), nil),
            s(:send, nil, :assert_empty,
              s(:lvar, :stderr))))),
      s(:def, :test_enable,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@opt), :parse!,
            s(:array,
              s(:str, "--enable-foo"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:ivar, :@foo)),
          s(:send,
            s(:ivar, :@opt), :parse!,
            s(:array,
              s(:str, "--enable-bar"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:ivar, :@bar)))),
      s(:def, :test_disable,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@opt), :parse!,
            s(:array,
              s(:str, "--disable-foo"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:ivar, :@foo)),
          s(:send,
            s(:ivar, :@opt), :parse!,
            s(:array,
              s(:str, "--disable-bar"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:ivar, :@bar)))),
      s(:def, :test_with,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@opt), :parse!,
            s(:array,
              s(:str, "--with-zot=foobar"))),
          s(:send, nil, :assert_equal,
            s(:str, "foobar"),
            s(:ivar, :@zot)),
          s(:send,
            s(:ivar, :@opt), :parse!,
            s(:array,
              s(:str, "--without-zot"))),
          s(:send, nil, :assert_nil,
            s(:ivar, :@zot)))),
      s(:def, :test_without,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@opt), :parse!,
            s(:array,
              s(:str, "--without-zot"))),
          s(:send, nil, :assert_nil,
            s(:ivar, :@zot)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :OptionParser), :NeedlessArgument)),
            s(:args),
            s(:send,
              s(:ivar, :@opt), :parse!,
              s(:array,
                s(:str, "--without-zot=foobar")))))),
      s(:def, :test_help,
        s(:args),
        s(:begin,
          s(:lvasgn, :help,
            s(:send,
              s(:ivar, :@opt), :help)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "--enable-foo"),
              s(:regopt)),
            s(:lvar, :help)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "--disable-bar"),
              s(:regopt)),
            s(:lvar, :help)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "--with-zot"),
              s(:regopt)),
            s(:lvar, :help)),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "--disable-foo"),
              s(:regopt)),
            s(:lvar, :help)),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "--enable-bar"),
              s(:regopt)),
            s(:lvar, :help)),
          s(:send, nil, :assert_not_match,
            s(:regexp,
              s(:str, "--without"),
              s(:regopt)),
            s(:lvar, :help)))))))
