s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:class,
    s(:const, nil, :TestOptionParser),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase), nil),
  s(:class,
    s(:const,
      s(:const, nil, :TestOptionParser), :BashCompletion),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@opt,
            s(:send,
              s(:const, nil, :OptionParser), :new)),
          s(:block,
            s(:send,
              s(:ivar, :@opt), :define,
              s(:str, "-z"),
              s(:str, "zzz")),
            s(:args), nil),
          s(:block,
            s(:send,
              s(:ivar, :@opt), :define,
              s(:str, "--foo")),
            s(:args), nil),
          s(:block,
            s(:send,
              s(:ivar, :@opt), :define,
              s(:str, "--bar=BAR")),
            s(:args), nil),
          s(:block,
            s(:send,
              s(:ivar, :@opt), :define,
              s(:str, "--for=TYPE"),
              s(:array,
                s(:sym, :hello),
                s(:sym, :help),
                s(:sym, :zot))),
            s(:args), nil))),
      s(:def, :test_compsys,
        s(:args),
        s(:begin,
          s(:lvasgn, :compsys,
            s(:send,
              s(:ivar, :@opt), :compsys,
              s(:str, ""),
              s(:str, "zshcompsys"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\\"-z\\[zzz\\]\\\""),
              s(:regopt)),
            s(:lvar, :compsys)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\\"--foo\\[\\]\\\""),
              s(:regopt)),
            s(:lvar, :compsys)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\\"--bar\\[\\]\\\""),
              s(:regopt)),
            s(:lvar, :compsys)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\\"--for\\[\\]\\\""),
              s(:regopt)),
            s(:lvar, :compsys)))))))
