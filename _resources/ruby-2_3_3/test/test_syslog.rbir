s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "syslog")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const, nil, :Syslog)),
    s(:class,
      s(:const, nil, :TestSyslog),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_new,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Syslog), :new))),
        s(:def, :test_instance,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :sl1,
                s(:send,
                  s(:const, nil, :Syslog), :instance)),
              s(:lvasgn, :sl2,
                s(:send,
                  s(:const, nil, :Syslog), :open)),
              s(:lvasgn, :sl3,
                s(:send,
                  s(:const, nil, :Syslog), :instance)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :Syslog),
                s(:lvar, :sl1)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :Syslog),
                s(:lvar, :sl2)),
              s(:send, nil, :assert_equal,
                s(:const, nil, :Syslog),
                s(:lvar, :sl3))),
            s(:if,
              s(:send,
                s(:const, nil, :Syslog), :opened?),
              s(:send,
                s(:const, nil, :Syslog), :close), nil))),
        s(:def, :test_open,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:send,
                s(:const, nil, :Syslog), :open),
              s(:send, nil, :assert_equal,
                s(:gvar, :$0),
                s(:send,
                  s(:const, nil, :Syslog), :ident)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_PID), :|,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_CONS)),
                s(:send,
                  s(:const, nil, :Syslog), :options)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Syslog), :LOG_USER),
                s(:send,
                  s(:const, nil, :Syslog), :facility)),
              s(:block,
                s(:send, nil, :assert_raise,
                  s(:const, nil, :RuntimeError)),
                s(:args),
                s(:send,
                  s(:const, nil, :Syslog), :open)),
              s(:send,
                s(:const, nil, :Syslog), :close),
              s(:lvasgn, :options,
                s(:send,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_NDELAY), :|,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_PID))),
              s(:send,
                s(:const, nil, :Syslog), :open,
                s(:str, "foo"),
                s(:lvar, :options),
                s(:const,
                  s(:const, nil, :Syslog), :LOG_DAEMON)),
              s(:send, nil, :assert_equal,
                s(:str, "foo"),
                s(:send,
                  s(:const, nil, :Syslog), :ident)),
              s(:send, nil, :assert_equal,
                s(:lvar, :options),
                s(:send,
                  s(:const, nil, :Syslog), :options)),
              s(:send, nil, :assert_equal,
                s(:const,
                  s(:const, nil, :Syslog), :LOG_DAEMON),
                s(:send,
                  s(:const, nil, :Syslog), :facility)),
              s(:send,
                s(:const, nil, :Syslog), :close),
              s(:send,
                s(:const, nil, :Syslog), :open),
              s(:send,
                s(:const, nil, :Syslog), :close),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:const, nil, :Syslog), :ident)),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:const, nil, :Syslog), :options)),
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:const, nil, :Syslog), :facility)),
              s(:lvasgn, :param,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:const, nil, :Syslog), :open),
                s(:args,
                  s(:arg, :syslog)),
                s(:lvasgn, :param,
                  s(:lvar, :syslog))),
              s(:send, nil, :assert_equal,
                s(:const, nil, :Syslog),
                s(:lvar, :param))),
            s(:if,
              s(:send,
                s(:const, nil, :Syslog), :opened?),
              s(:send,
                s(:const, nil, :Syslog), :close), nil))),
        s(:def, :test_opened?,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :Syslog), :opened?)),
            s(:send,
              s(:const, nil, :Syslog), :open),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const, nil, :Syslog), :opened?)),
            s(:send,
              s(:const, nil, :Syslog), :close),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :Syslog), :opened?)),
            s(:block,
              s(:send,
                s(:const, nil, :Syslog), :open),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:true),
                s(:send,
                  s(:const, nil, :Syslog), :opened?))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :Syslog), :opened?)))),
        s(:def, :test_close,
          s(:args),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Syslog), :close))),
        s(:def, :test_mask,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:nil),
                s(:send,
                  s(:const, nil, :Syslog), :mask)),
              s(:send,
                s(:const, nil, :Syslog), :open),
              s(:lvasgn, :orig,
                s(:send,
                  s(:const, nil, :Syslog), :mask)),
              s(:send,
                s(:const, nil, :Syslog), :mask=,
                s(:send,
                  s(:const, nil, :Syslog), :LOG_UPTO,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_ERR))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Syslog), :LOG_UPTO,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_ERR)),
                s(:send,
                  s(:const, nil, :Syslog), :mask)),
              s(:send,
                s(:const, nil, :Syslog), :mask=,
                s(:send,
                  s(:const, nil, :Syslog), :LOG_MASK,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_CRIT))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :Syslog), :LOG_MASK,
                  s(:const,
                    s(:const, nil, :Syslog), :LOG_CRIT)),
                s(:send,
                  s(:const, nil, :Syslog), :mask)),
              s(:send,
                s(:const, nil, :Syslog), :mask=,
                s(:lvar, :orig))),
            s(:if,
              s(:send,
                s(:const, nil, :Syslog), :opened?),
              s(:send,
                s(:const, nil, :Syslog), :close), nil))),
        s(:def, :syslog_line_regex,
          s(:args,
            s(:arg, :ident),
            s(:arg, :message)),
          s(:regexp,
            s(:str, "(?:^| )"),
            s(:begin,
              s(:send,
                s(:const, nil, :Regexp), :quote,
                s(:lvar, :ident))),
            s(:str, "(?:\\[([1-9][0-9]*)\\])?(?: |[: ].* )"),
            s(:begin,
              s(:send,
                s(:const, nil, :Regexp), :quote,
                s(:lvar, :message))),
            s(:str, "$"),
            s(:regopt))),
        s(:def, :test_log,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :pipe),
            s(:args,
              s(:arg, :stderr)),
            s(:begin,
              s(:lvasgn, :pid,
                s(:block,
                  s(:send, nil, :fork),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :stderr), :[],
                        s(:int, 0)), :close),
                    s(:send,
                      s(:const, nil, :STDERR), :reopen,
                      s(:send,
                        s(:lvar, :stderr), :[],
                        s(:int, 1))),
                    s(:send,
                      s(:send,
                        s(:lvar, :stderr), :[],
                        s(:int, 1)), :close),
                    s(:lvasgn, :options,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Syslog), :LOG_PERROR), :|,
                        s(:const,
                          s(:const, nil, :Syslog), :LOG_NDELAY))),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Syslog), :open,
                        s(:str, "syslog_test"),
                        s(:lvar, :options)),
                      s(:args,
                        s(:arg, :sl)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :sl), :log,
                          s(:const,
                            s(:const, nil, :Syslog), :LOG_NOTICE),
                          s(:str, "test1 - hello, %s!"),
                          s(:str, "world")),
                        s(:send,
                          s(:lvar, :sl), :notice,
                          s(:str, "test1 - hello, %s!"),
                          s(:str, "world")))),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Syslog), :open,
                        s(:str, "syslog_test"),
                        s(:send,
                          s(:lvar, :options), :|,
                          s(:const,
                            s(:const, nil, :Syslog), :LOG_PID))),
                      s(:args,
                        s(:arg, :sl)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :sl), :log,
                          s(:const,
                            s(:const, nil, :Syslog), :LOG_CRIT),
                          s(:str, "test2 - pid")),
                        s(:send,
                          s(:lvar, :sl), :crit,
                          s(:str, "test2 - pid")))),
                    s(:send, nil, :exit!)))),
              s(:send,
                s(:send,
                  s(:lvar, :stderr), :[],
                  s(:int, 1)), :close),
              s(:send,
                s(:const, nil, :Process), :waitpid,
                s(:lvar, :pid)),
              s(:if,
                s(:send,
                  s(:const, nil, :Syslog), :const_defined?,
                  s(:sym, :LOG_PERROR)), nil,
                s(:return)),
              s(:block,
                s(:send,
                  s(:int, 2), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :re,
                    s(:send, nil, :syslog_line_regex,
                      s(:str, "syslog_test"),
                      s(:str, "test1 - hello, world!"))),
                  s(:lvasgn, :line,
                    s(:send,
                      s(:send,
                        s(:lvar, :stderr), :[],
                        s(:int, 0)), :gets)),
                  s(:if,
                    s(:and,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "aix"),
                          s(:regopt)),
                        s(:const, nil, :RUBY_PLATFORM)),
                      s(:send,
                        s(:lvar, :line), :=~,
                        s(:regexp,
                          s(:str, "^$"),
                          s(:regopt)))),
                    s(:lvasgn, :line,
                      s(:send,
                        s(:send,
                          s(:lvar, :stderr), :[],
                          s(:int, 0)), :gets)), nil),
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :re), :match,
                      s(:lvar, :line))),
                  s(:send, nil, :assert_not_nil,
                    s(:lvar, :m)),
                  s(:if,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 1)),
                    s(:send, nil, :assert_equal,
                      s(:lvar, :pid),
                      s(:send,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:int, 1)), :to_i)), nil))),
              s(:block,
                s(:send,
                  s(:int, 2), :times),
                s(:args),
                s(:begin,
                  s(:lvasgn, :re,
                    s(:send, nil, :syslog_line_regex,
                      s(:str, "syslog_test"),
                      s(:str, "test2 - pid"))),
                  s(:lvasgn, :line,
                    s(:send,
                      s(:send,
                        s(:lvar, :stderr), :[],
                        s(:int, 0)), :gets)),
                  s(:if,
                    s(:and,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "aix"),
                          s(:regopt)),
                        s(:const, nil, :RUBY_PLATFORM)),
                      s(:send,
                        s(:lvar, :line), :=~,
                        s(:regexp,
                          s(:str, "^$"),
                          s(:regopt)))),
                    s(:lvasgn, :line,
                      s(:send,
                        s(:send,
                          s(:lvar, :stderr), :[],
                          s(:int, 0)), :gets)), nil),
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :re), :match,
                      s(:lvar, :line))),
                  s(:send, nil, :assert_not_nil,
                    s(:lvar, :m)),
                  s(:send, nil, :assert_not_nil,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 1))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :pid),
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:int, 1)), :to_i))))))),
        s(:def, :test_inspect,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:const, nil, :Syslog), :open),
              s(:args,
                s(:arg, :sl)),
              s(:send, nil, :assert_equal,
                s(:send, nil, :format,
                  s(:str, "<#%s: opened=true, ident=\"%s\", options=%d, facility=%d, mask=%d>"),
                  s(:const, nil, :Syslog),
                  s(:send,
                    s(:lvar, :sl), :ident),
                  s(:send,
                    s(:lvar, :sl), :options),
                  s(:send,
                    s(:lvar, :sl), :facility),
                  s(:send,
                    s(:lvar, :sl), :mask)),
                s(:send,
                  s(:lvar, :sl), :inspect))),
            s(:send, nil, :assert_equal,
              s(:send, nil, :format,
                s(:str, "<#%s: opened=false>"),
                s(:const, nil, :Syslog)),
              s(:send,
                s(:const, nil, :Syslog), :inspect)))))), nil))
