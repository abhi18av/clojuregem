s(:begin,
  s(:send, nil, :require,
    s(:str, "prettyprint")),
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:module,
    s(:const, nil, :PrettyPrintTest),
    s(:begin,
      s(:class,
        s(:const, nil, :WadlerExample),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:ivasgn, :@tree,
              s(:send,
                s(:const, nil, :Tree), :new,
                s(:str, "aaaa"),
                s(:send,
                  s(:const, nil, :Tree), :new,
                  s(:str, "bbbbb"),
                  s(:send,
                    s(:const, nil, :Tree), :new,
                    s(:str, "ccc")),
                  s(:send,
                    s(:const, nil, :Tree), :new,
                    s(:str, "dd"))),
                s(:send,
                  s(:const, nil, :Tree), :new,
                  s(:str, "eee")),
                s(:send,
                  s(:const, nil, :Tree), :new,
                  s(:str, "ffff"),
                  s(:send,
                    s(:const, nil, :Tree), :new,
                    s(:str, "gg")),
                  s(:send,
                    s(:const, nil, :Tree), :new,
                    s(:str, "hhh")),
                  s(:send,
                    s(:const, nil, :Tree), :new,
                    s(:str, "ii")))))),
          s(:def, :hello,
            s(:args,
              s(:arg, :width)),
            s(:block,
              s(:send,
                s(:const, nil, :PrettyPrint), :format,
                s(:send,
                  s(:str, ""), :dup),
                s(:lvar, :width)),
              s(:args,
                s(:arg, :hello)),
              s(:block,
                s(:send,
                  s(:lvar, :hello), :group),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :hello), :group),
                    s(:args),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:lvar, :hello), :group),
                        s(:args),
                        s(:begin,
                          s(:block,
                            s(:send,
                              s(:lvar, :hello), :group),
                            s(:args),
                            s(:begin,
                              s(:send,
                                s(:lvar, :hello), :text,
                                s(:str, "hello")),
                              s(:send,
                                s(:lvar, :hello), :breakable),
                              s(:send,
                                s(:lvar, :hello), :text,
                                s(:str, "a")))),
                          s(:send,
                            s(:lvar, :hello), :breakable),
                          s(:send,
                            s(:lvar, :hello), :text,
                            s(:str, "b")))),
                      s(:send,
                        s(:lvar, :hello), :breakable),
                      s(:send,
                        s(:lvar, :hello), :text,
                        s(:str, "c")))),
                  s(:send,
                    s(:lvar, :hello), :breakable),
                  s(:send,
                    s(:lvar, :hello), :text,
                    s(:str, "d")))))),
          s(:def, :test_hello_00_06,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "hello\n"),
                    s(:str, "a\n"),
                    s(:str, "b\n"),
                    s(:str, "c\n"),
                    s(:str, "d\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :hello,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :hello,
                  s(:int, 6))))),
          s(:def, :test_hello_07_08,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "hello a\n"),
                    s(:str, "b\n"),
                    s(:str, "c\n"),
                    s(:str, "d\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :hello,
                  s(:int, 7))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :hello,
                  s(:int, 8))))),
          s(:def, :test_hello_09_10,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "hello a b\n"),
                    s(:str, "c\n"),
                    s(:str, "d\n")), :chomp)),
              s(:lvasgn, :out,
                s(:send, nil, :hello,
                  s(:int, 9))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:lvar, :out)),
              s(:lvasgn, :out,
                s(:send, nil, :hello,
                  s(:int, 10))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:lvar, :out)))),
          s(:def, :test_hello_11_12,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "hello a b c\n"),
                    s(:str, "d\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :hello,
                  s(:int, 11))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :hello,
                  s(:int, 12))))),
          s(:def, :test_hello_13,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:str, "hello a b c d\n"), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :hello,
                  s(:int, 13))))),
          s(:def, :tree,
            s(:args,
              s(:arg, :width)),
            s(:block,
              s(:send,
                s(:const, nil, :PrettyPrint), :format,
                s(:send,
                  s(:str, ""), :dup),
                s(:lvar, :width)),
              s(:args,
                s(:arg, :q)),
              s(:send,
                s(:ivar, :@tree), :show,
                s(:lvar, :q)))),
          s(:def, :test_tree_00_19,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "aaaa[bbbbb[ccc,\n"),
                    s(:str, "           dd],\n"),
                    s(:str, "     eee,\n"),
                    s(:str, "     ffff[gg,\n"),
                    s(:str, "          hhh,\n"),
                    s(:str, "          ii]]\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree,
                  s(:int, 19))))),
          s(:def, :test_tree_20_22,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "aaaa[bbbbb[ccc, dd],\n"),
                    s(:str, "     eee,\n"),
                    s(:str, "     ffff[gg,\n"),
                    s(:str, "          hhh,\n"),
                    s(:str, "          ii]]\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree,
                  s(:int, 20))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree,
                  s(:int, 22))))),
          s(:def, :test_tree_23_43,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "aaaa[bbbbb[ccc, dd],\n"),
                    s(:str, "     eee,\n"),
                    s(:str, "     ffff[gg, hhh, ii]]\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree,
                  s(:int, 23))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree,
                  s(:int, 43))))),
          s(:def, :test_tree_44,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:str, "aaaa[bbbbb[ccc, dd], eee, ffff[gg, hhh, ii]]\n"), :chomp),
              s(:send, nil, :tree,
                s(:int, 44)))),
          s(:def, :tree_alt,
            s(:args,
              s(:arg, :width)),
            s(:block,
              s(:send,
                s(:const, nil, :PrettyPrint), :format,
                s(:send,
                  s(:str, ""), :dup),
                s(:lvar, :width)),
              s(:args,
                s(:arg, :q)),
              s(:send,
                s(:ivar, :@tree), :altshow,
                s(:lvar, :q)))),
          s(:def, :test_tree_alt_00_18,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "aaaa[\n"),
                    s(:str, "  bbbbb[\n"),
                    s(:str, "    ccc,\n"),
                    s(:str, "    dd\n"),
                    s(:str, "  ],\n"),
                    s(:str, "  eee,\n"),
                    s(:str, "  ffff[\n"),
                    s(:str, "    gg,\n"),
                    s(:str, "    hhh,\n"),
                    s(:str, "    ii\n"),
                    s(:str, "  ]\n"),
                    s(:str, "]\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree_alt,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree_alt,
                  s(:int, 18))))),
          s(:def, :test_tree_alt_19_20,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "aaaa[\n"),
                    s(:str, "  bbbbb[ ccc, dd ],\n"),
                    s(:str, "  eee,\n"),
                    s(:str, "  ffff[\n"),
                    s(:str, "    gg,\n"),
                    s(:str, "    hhh,\n"),
                    s(:str, "    ii\n"),
                    s(:str, "  ]\n"),
                    s(:str, "]\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree_alt,
                  s(:int, 19))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree_alt,
                  s(:int, 20))))),
          s(:def, :test_tree_alt_20_49,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "aaaa[\n"),
                    s(:str, "  bbbbb[ ccc, dd ],\n"),
                    s(:str, "  eee,\n"),
                    s(:str, "  ffff[ gg, hhh, ii ]\n"),
                    s(:str, "]\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree_alt,
                  s(:int, 21))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree_alt,
                  s(:int, 49))))),
          s(:def, :test_tree_alt_50,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:str, "aaaa[ bbbbb[ ccc, dd ], eee, ffff[ gg, hhh, ii ] ]\n"), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :tree_alt,
                  s(:int, 50))))),
          s(:class,
            s(:const, nil, :Tree), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:arg, :string),
                  s(:restarg, :children)),
                s(:begin,
                  s(:ivasgn, :@string,
                    s(:lvar, :string)),
                  s(:ivasgn, :@children,
                    s(:lvar, :children)))),
              s(:def, :show,
                s(:args,
                  s(:arg, :q)),
                s(:block,
                  s(:send,
                    s(:lvar, :q), :group),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :q), :text,
                      s(:ivar, :@string)),
                    s(:block,
                      s(:send,
                        s(:lvar, :q), :nest,
                        s(:send,
                          s(:ivar, :@string), :length)),
                      s(:args),
                      s(:if,
                        s(:send,
                          s(:ivar, :@children), :empty?), nil,
                        s(:begin,
                          s(:send,
                            s(:lvar, :q), :text,
                            s(:str, "[")),
                          s(:block,
                            s(:send,
                              s(:lvar, :q), :nest,
                              s(:int, 1)),
                            s(:args),
                            s(:begin,
                              s(:lvasgn, :first,
                                s(:true)),
                              s(:block,
                                s(:send,
                                  s(:ivar, :@children), :each),
                                s(:args,
                                  s(:arg, :t)),
                                s(:begin,
                                  s(:if,
                                    s(:lvar, :first),
                                    s(:lvasgn, :first,
                                      s(:false)),
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :q), :text,
                                        s(:str, ",")),
                                      s(:send,
                                        s(:lvar, :q), :breakable))),
                                  s(:send,
                                    s(:lvar, :t), :show,
                                    s(:lvar, :q)))))),
                          s(:send,
                            s(:lvar, :q), :text,
                            s(:str, "]")))))))),
              s(:def, :altshow,
                s(:args,
                  s(:arg, :q)),
                s(:block,
                  s(:send,
                    s(:lvar, :q), :group),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:lvar, :q), :text,
                      s(:ivar, :@string)),
                    s(:if,
                      s(:send,
                        s(:ivar, :@children), :empty?), nil,
                      s(:begin,
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "[")),
                        s(:block,
                          s(:send,
                            s(:lvar, :q), :nest,
                            s(:int, 2)),
                          s(:args),
                          s(:begin,
                            s(:send,
                              s(:lvar, :q), :breakable),
                            s(:lvasgn, :first,
                              s(:true)),
                            s(:block,
                              s(:send,
                                s(:ivar, :@children), :each),
                              s(:args,
                                s(:arg, :t)),
                              s(:begin,
                                s(:if,
                                  s(:lvar, :first),
                                  s(:lvasgn, :first,
                                    s(:false)),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :q), :text,
                                      s(:str, ",")),
                                    s(:send,
                                      s(:lvar, :q), :breakable))),
                                s(:send,
                                  s(:lvar, :t), :altshow,
                                  s(:lvar, :q)))))),
                        s(:send,
                          s(:lvar, :q), :breakable),
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "]"))))))))))),
      s(:class,
        s(:const, nil, :StrictPrettyExample),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :prog,
            s(:args,
              s(:arg, :width)),
            s(:block,
              s(:send,
                s(:const, nil, :PrettyPrint), :format,
                s(:send,
                  s(:str, ""), :dup),
                s(:lvar, :width)),
              s(:args,
                s(:arg, :q)),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :q), :group),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:lvar, :q), :nest,
                        s(:int, 2)),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "if")),
                        s(:send,
                          s(:lvar, :q), :breakable),
                        s(:block,
                          s(:send,
                            s(:lvar, :q), :group),
                          s(:args),
                          s(:block,
                            s(:send,
                              s(:lvar, :q), :nest,
                              s(:int, 2)),
                            s(:args),
                            s(:begin,
                              s(:block,
                                s(:send,
                                  s(:lvar, :q), :group),
                                s(:args),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :q), :text,
                                    s(:str, "a")),
                                  s(:send,
                                    s(:lvar, :q), :breakable),
                                  s(:send,
                                    s(:lvar, :q), :text,
                                    s(:str, "==")))),
                              s(:send,
                                s(:lvar, :q), :breakable),
                              s(:send,
                                s(:lvar, :q), :text,
                                s(:str, "b")))))))),
                  s(:send,
                    s(:lvar, :q), :breakable),
                  s(:block,
                    s(:send,
                      s(:lvar, :q), :group),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:lvar, :q), :nest,
                        s(:int, 2)),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "then")),
                        s(:send,
                          s(:lvar, :q), :breakable),
                        s(:block,
                          s(:send,
                            s(:lvar, :q), :group),
                          s(:args),
                          s(:block,
                            s(:send,
                              s(:lvar, :q), :nest,
                              s(:int, 2)),
                            s(:args),
                            s(:begin,
                              s(:block,
                                s(:send,
                                  s(:lvar, :q), :group),
                                s(:args),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :q), :text,
                                    s(:str, "a")),
                                  s(:send,
                                    s(:lvar, :q), :breakable),
                                  s(:send,
                                    s(:lvar, :q), :text,
                                    s(:str, "<<")))),
                              s(:send,
                                s(:lvar, :q), :breakable),
                              s(:send,
                                s(:lvar, :q), :text,
                                s(:str, "2")))))))),
                  s(:send,
                    s(:lvar, :q), :breakable),
                  s(:block,
                    s(:send,
                      s(:lvar, :q), :group),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:lvar, :q), :nest,
                        s(:int, 2)),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "else")),
                        s(:send,
                          s(:lvar, :q), :breakable),
                        s(:block,
                          s(:send,
                            s(:lvar, :q), :group),
                          s(:args),
                          s(:block,
                            s(:send,
                              s(:lvar, :q), :nest,
                              s(:int, 2)),
                            s(:args),
                            s(:begin,
                              s(:block,
                                s(:send,
                                  s(:lvar, :q), :group),
                                s(:args),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :q), :text,
                                    s(:str, "a")),
                                  s(:send,
                                    s(:lvar, :q), :breakable),
                                  s(:send,
                                    s(:lvar, :q), :text,
                                    s(:str, "+")))),
                              s(:send,
                                s(:lvar, :q), :breakable),
                              s(:send,
                                s(:lvar, :q), :text,
                                s(:str, "b")))))))))))),
          s(:def, :test_00_04,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if\n"),
                    s(:str, "  a\n"),
                    s(:str, "    ==\n"),
                    s(:str, "    b\n"),
                    s(:str, "then\n"),
                    s(:str, "  a\n"),
                    s(:str, "    <<\n"),
                    s(:str, "    2\n"),
                    s(:str, "else\n"),
                    s(:str, "  a\n"),
                    s(:str, "    +\n"),
                    s(:str, "    b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 4))))),
          s(:def, :test_05,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if\n"),
                    s(:str, "  a\n"),
                    s(:str, "    ==\n"),
                    s(:str, "    b\n"),
                    s(:str, "then\n"),
                    s(:str, "  a\n"),
                    s(:str, "    <<\n"),
                    s(:str, "    2\n"),
                    s(:str, "else\n"),
                    s(:str, "  a +\n"),
                    s(:str, "    b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 5))))),
          s(:def, :test_06,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if\n"),
                    s(:str, "  a ==\n"),
                    s(:str, "    b\n"),
                    s(:str, "then\n"),
                    s(:str, "  a <<\n"),
                    s(:str, "    2\n"),
                    s(:str, "else\n"),
                    s(:str, "  a +\n"),
                    s(:str, "    b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 6))))),
          s(:def, :test_07,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if\n"),
                    s(:str, "  a ==\n"),
                    s(:str, "    b\n"),
                    s(:str, "then\n"),
                    s(:str, "  a <<\n"),
                    s(:str, "    2\n"),
                    s(:str, "else\n"),
                    s(:str, "  a + b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 7))))),
          s(:def, :test_08,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if\n"),
                    s(:str, "  a == b\n"),
                    s(:str, "then\n"),
                    s(:str, "  a << 2\n"),
                    s(:str, "else\n"),
                    s(:str, "  a + b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 8))))),
          s(:def, :test_09,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if a == b\n"),
                    s(:str, "then\n"),
                    s(:str, "  a << 2\n"),
                    s(:str, "else\n"),
                    s(:str, "  a + b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 9))))),
          s(:def, :test_10,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if a == b\n"),
                    s(:str, "then\n"),
                    s(:str, "  a << 2\n"),
                    s(:str, "else a + b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 10))))),
          s(:def, :test_11_31,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "if a == b\n"),
                    s(:str, "then a << 2\n"),
                    s(:str, "else a + b\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 11))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 15))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 31))))),
          s(:def, :test_32,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:str, "if a == b then a << 2 else a + b\n"), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :prog,
                  s(:int, 32))))))),
      s(:class,
        s(:const, nil, :TailGroup),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:def, :test_1,
          s(:args),
          s(:begin,
            s(:lvasgn, :out,
              s(:block,
                s(:send,
                  s(:const, nil, :PrettyPrint), :format,
                  s(:send,
                    s(:str, ""), :dup),
                  s(:int, 10)),
                s(:args,
                  s(:arg, :q)),
                s(:block,
                  s(:send,
                    s(:lvar, :q), :group),
                  s(:args),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:lvar, :q), :group),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "abc")),
                        s(:send,
                          s(:lvar, :q), :breakable),
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "def")))),
                    s(:block,
                      s(:send,
                        s(:lvar, :q), :group),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "ghi")),
                        s(:send,
                          s(:lvar, :q), :breakable),
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:str, "jkl")))))))),
            s(:send, nil, :assert_equal,
              s(:str, "abc defghi\njkl"),
              s(:lvar, :out))))),
      s(:class,
        s(:const, nil, :NonString),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :format,
            s(:args,
              s(:arg, :width)),
            s(:block,
              s(:send,
                s(:const, nil, :PrettyPrint), :format,
                s(:array),
                s(:lvar, :width),
                s(:str, "newline"),
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :n)),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, " spaces")))),
              s(:args,
                s(:arg, :q)),
              s(:begin,
                s(:send,
                  s(:lvar, :q), :text,
                  s(:int, 3),
                  s(:int, 3)),
                s(:send,
                  s(:lvar, :q), :breakable,
                  s(:int, 1),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:int, 3),
                  s(:int, 3))))),
          s(:def, :test_6,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 3),
                s(:str, "newline"),
                s(:str, "0 spaces"),
                s(:int, 3)),
              s(:send, nil, :format,
                s(:int, 6)))),
          s(:def, :test_7,
            s(:args),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:int, 3),
                s(:int, 1),
                s(:int, 3)),
              s(:send, nil, :format,
                s(:int, 7)))))),
      s(:class,
        s(:const, nil, :Fill),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :format,
            s(:args,
              s(:arg, :width)),
            s(:block,
              s(:send,
                s(:const, nil, :PrettyPrint), :format,
                s(:send,
                  s(:str, ""), :dup),
                s(:lvar, :width)),
              s(:args,
                s(:arg, :q)),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "abc")),
                  s(:send,
                    s(:lvar, :q), :fill_breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "def")),
                  s(:send,
                    s(:lvar, :q), :fill_breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "ghi")),
                  s(:send,
                    s(:lvar, :q), :fill_breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "jkl")),
                  s(:send,
                    s(:lvar, :q), :fill_breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "mno")),
                  s(:send,
                    s(:lvar, :q), :fill_breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "pqr")),
                  s(:send,
                    s(:lvar, :q), :fill_breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "stu")))))),
          s(:def, :test_00_06,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "abc\n"),
                    s(:str, "def\n"),
                    s(:str, "ghi\n"),
                    s(:str, "jkl\n"),
                    s(:str, "mno\n"),
                    s(:str, "pqr\n"),
                    s(:str, "stu\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 0))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 6))))),
          s(:def, :test_07_10,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "abc def\n"),
                    s(:str, "ghi jkl\n"),
                    s(:str, "mno pqr\n"),
                    s(:str, "stu\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 7))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 10))))),
          s(:def, :test_11_14,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "abc def ghi\n"),
                    s(:str, "jkl mno pqr\n"),
                    s(:str, "stu\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 11))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 14))))),
          s(:def, :test_15_18,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "abc def ghi jkl\n"),
                    s(:str, "mno pqr stu\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 15))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 18))))),
          s(:def, :test_19_22,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "abc def ghi jkl mno\n"),
                    s(:str, "pqr stu\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 19))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 22))))),
          s(:def, :test_23_26,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:dstr,
                    s(:str, "abc def ghi jkl mno pqr\n"),
                    s(:str, "stu\n")), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 23))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 26))))),
          s(:def, :test_27,
            s(:args),
            s(:begin,
              s(:lvasgn, :expected,
                s(:send,
                  s(:str, "abc def ghi jkl mno pqr stu\n"), :chomp)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send, nil, :format,
                  s(:int, 27))))))))))
