s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:class,
    s(:const, nil, :TestMathn),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_power,
        s(:args),
        s(:begin,
          s(:lvasgn, :stderr,
            s(:if,
              s(:gvar, :$VERBOSE),
              s(:array,
                s(:str, "lib/mathn.rb is deprecated")),
              s(:array))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-r"),
              s(:str, "mathn"),
              s(:str, "-e"),
              s(:str, "a=1**2;!a")),
            s(:str, ""),
            s(:array),
            s(:lvar, :stderr),
            s(:str, "[ruby-core:25740]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-r"),
              s(:str, "mathn"),
              s(:str, "-e"),
              s(:str, "a=(1 << 126)**2;!a")),
            s(:str, ""),
            s(:array),
            s(:lvar, :stderr),
            s(:str, "[ruby-core:25740]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-r"),
              s(:str, "mathn/complex"),
              s(:str, "-e"),
              s(:str, "a=Complex(0,1)**4;!a")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:str, "[ruby-core:44170]")),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-r"),
              s(:str, "mathn/complex"),
              s(:str, "-e"),
              s(:str, "a=Complex(0,1)**5;!a")),
            s(:str, ""),
            s(:array),
            s(:array),
            s(:str, "[ruby-core:44170]")))),
      s(:def, :test_quo,
        s(:args),
        s(:begin,
          s(:lvasgn, :stderr,
            s(:if,
              s(:gvar, :$VERBOSE),
              s(:array,
                s(:str, "lib/mathn.rb is deprecated")),
              s(:array))),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-r"),
              s(:str, "mathn")),
            s(:str, "      1.quo(2); puts :OK\n"),
            s(:array,
              s(:str, "OK")),
            s(:lvar, :stderr),
            s(:str, "[ruby-core:41575]")))),
      s(:def, :test_floor,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "-rmathn")),
          s(:dstr,
            s(:str, "      assert_equal( 2, ( 13/5).floor)\n"),
            s(:str, "      assert_equal( 2, (  5/2).floor)\n"),
            s(:str, "      assert_equal( 2, ( 12/5).floor)\n"),
            s(:str, "      assert_equal(-3, (-12/5).floor)\n"),
            s(:str, "      assert_equal(-3, ( -5/2).floor)\n"),
            s(:str, "      assert_equal(-3, (-13/5).floor)\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal( 2, ( 13/5).floor(0))\n"),
            s(:str, "      assert_equal( 2, (  5/2).floor(0))\n"),
            s(:str, "      assert_equal( 2, ( 12/5).floor(0))\n"),
            s(:str, "      assert_equal(-3, (-12/5).floor(0))\n"),
            s(:str, "      assert_equal(-3, ( -5/2).floor(0))\n"),
            s(:str, "      assert_equal(-3, (-13/5).floor(0))\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal(( 13/5), ( 13/5).floor(2))\n"),
            s(:str, "      assert_equal((  5/2), (  5/2).floor(2))\n"),
            s(:str, "      assert_equal(( 12/5), ( 12/5).floor(2))\n"),
            s(:str, "      assert_equal((-12/5), (-12/5).floor(2))\n"),
            s(:str, "      assert_equal(( -5/2), ( -5/2).floor(2))\n"),
            s(:str, "      assert_equal((-13/5), (-13/5).floor(2))\n")),
          s(:hash,
            s(:pair,
              s(:sym, :ignore_stderr),
              s(:true))))),
      s(:def, :test_ceil,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "-rmathn")),
          s(:dstr,
            s(:str, "      assert_equal( 3, ( 13/5).ceil)\n"),
            s(:str, "      assert_equal( 3, (  5/2).ceil)\n"),
            s(:str, "      assert_equal( 3, ( 12/5).ceil)\n"),
            s(:str, "      assert_equal(-2, (-12/5).ceil)\n"),
            s(:str, "      assert_equal(-2, ( -5/2).ceil)\n"),
            s(:str, "      assert_equal(-2, (-13/5).ceil)\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal( 3, ( 13/5).ceil(0))\n"),
            s(:str, "      assert_equal( 3, (  5/2).ceil(0))\n"),
            s(:str, "      assert_equal( 3, ( 12/5).ceil(0))\n"),
            s(:str, "      assert_equal(-2, (-12/5).ceil(0))\n"),
            s(:str, "      assert_equal(-2, ( -5/2).ceil(0))\n"),
            s(:str, "      assert_equal(-2, (-13/5).ceil(0))\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal(( 13/5), ( 13/5).ceil(2))\n"),
            s(:str, "      assert_equal((  5/2), (  5/2).ceil(2))\n"),
            s(:str, "      assert_equal(( 12/5), ( 12/5).ceil(2))\n"),
            s(:str, "      assert_equal((-12/5), (-12/5).ceil(2))\n"),
            s(:str, "      assert_equal(( -5/2), ( -5/2).ceil(2))\n"),
            s(:str, "      assert_equal((-13/5), (-13/5).ceil(2))\n")),
          s(:hash,
            s(:pair,
              s(:sym, :ignore_stderr),
              s(:true))))),
      s(:def, :test_truncate,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "-rmathn")),
          s(:dstr,
            s(:str, "      assert_equal( 2, ( 13/5).truncate)\n"),
            s(:str, "      assert_equal( 2, (  5/2).truncate)\n"),
            s(:str, "      assert_equal( 2, ( 12/5).truncate)\n"),
            s(:str, "      assert_equal(-2, (-12/5).truncate)\n"),
            s(:str, "      assert_equal(-2, ( -5/2).truncate)\n"),
            s(:str, "      assert_equal(-2, (-13/5).truncate)\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal( 2, ( 13/5).truncate(0))\n"),
            s(:str, "      assert_equal( 2, (  5/2).truncate(0))\n"),
            s(:str, "      assert_equal( 2, ( 12/5).truncate(0))\n"),
            s(:str, "      assert_equal(-2, (-12/5).truncate(0))\n"),
            s(:str, "      assert_equal(-2, ( -5/2).truncate(0))\n"),
            s(:str, "      assert_equal(-2, (-13/5).truncate(0))\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal(( 13/5), ( 13/5).truncate(2))\n"),
            s(:str, "      assert_equal((  5/2), (  5/2).truncate(2))\n"),
            s(:str, "      assert_equal(( 12/5), ( 12/5).truncate(2))\n"),
            s(:str, "      assert_equal((-12/5), (-12/5).truncate(2))\n"),
            s(:str, "      assert_equal(( -5/2), ( -5/2).truncate(2))\n"),
            s(:str, "      assert_equal((-13/5), (-13/5).truncate(2))\n")),
          s(:hash,
            s(:pair,
              s(:sym, :ignore_stderr),
              s(:true))))),
      s(:def, :test_round,
        s(:args),
        s(:send, nil, :assert_separately,
          s(:array,
            s(:str, "-rmathn")),
          s(:dstr,
            s(:str, "      assert_equal( 3, ( 13/5).round)\n"),
            s(:str, "      assert_equal( 3, (  5/2).round)\n"),
            s(:str, "      assert_equal( 2, ( 12/5).round)\n"),
            s(:str, "      assert_equal(-2, (-12/5).round)\n"),
            s(:str, "      assert_equal(-3, ( -5/2).round)\n"),
            s(:str, "      assert_equal(-3, (-13/5).round)\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal( 3, ( 13/5).round(0))\n"),
            s(:str, "      assert_equal( 3, (  5/2).round(0))\n"),
            s(:str, "      assert_equal( 2, ( 12/5).round(0))\n"),
            s(:str, "      assert_equal(-2, (-12/5).round(0))\n"),
            s(:str, "      assert_equal(-3, ( -5/2).round(0))\n"),
            s(:str, "      assert_equal(-3, (-13/5).round(0))\n"),
            s(:str, "\n"),
            s(:str, "      assert_equal(( 13/5), ( 13/5).round(2))\n"),
            s(:str, "      assert_equal((  5/2), (  5/2).round(2))\n"),
            s(:str, "      assert_equal(( 12/5), ( 12/5).round(2))\n"),
            s(:str, "      assert_equal((-12/5), (-12/5).round(2))\n"),
            s(:str, "      assert_equal(( -5/2), ( -5/2).round(2))\n"),
            s(:str, "      assert_equal((-13/5), (-13/5).round(2))\n")),
          s(:hash,
            s(:pair,
              s(:sym, :ignore_stderr),
              s(:true))))))))
