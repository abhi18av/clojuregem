s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const, nil, :TestRubyMode),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :MISCDIR,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "../../../misc"),
          s(:str, "(string)"))),
      s(:lvasgn, :e,
        s(:or,
          s(:send,
            s(:const, nil, :ENV), :[],
            s(:str, "EMACS")),
          s(:str, "emacs"))),
      s(:lvasgn, :emacs,
        s(:array,
          s(:dstr,
            s(:begin,
              s(:lvar, :e))),
          s(:str, "-q"),
          s(:str, "--no-site-file"),
          s(:str, "--batch"),
          s(:str, "--load"),
          s(:dstr,
            s(:begin,
              s(:const, nil, :MISCDIR)),
            s(:str, "/ruby-mode.el")))),
      s(:kwbegin,
        s(:rescue,
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :IO), :popen,
                        s(:array,
                          s(:lvar, :e),
                          s(:str, "--version"),
                          s(:hash,
                            s(:pair,
                              s(:sym, :err),
                              s(:array,
                                s(:sym, :child),
                                s(:sym, :out)))))),
                      s(:args,
                        s(:arg, :f)),
                      s(:send,
                        s(:lvar, :f), :read)), :[],
                    s(:regexp,
                      s(:str, "[0-9]+"),
                      s(:regopt))), :to_i), :<,
                s(:int, 23)),
              s(:send, nil, :raise), nil),
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:array,
                  s(:splat,
                    s(:lvar, :emacs)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :err),
                      s(:array,
                        s(:sym, :child),
                        s(:sym, :out)))))),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :read))),
          s(:resbody, nil, nil,
            s(:casgn, nil, :EMACS,
              s(:nil))),
          s(:casgn, nil, :EMACS,
            s(:begin,
              s(:if,
                s(:and,
                  s(:gvar, :$?),
                  s(:send,
                    s(:gvar, :$?), :success?)),
                s(:lvar, :emacs), nil))))))),
  s(:if,
    s(:const,
      s(:const, nil, :TestRubyMode), :EMACS),
    s(:class,
      s(:const, nil, :TestRubyMode), nil,
      s(:begin,
        s(:casgn, nil, :EVAL_OPT,
          s(:str, "--eval")),
        s(:casgn, nil, :EXPR_SAVE,
          s(:str, "(save-buffer)")),
        s(:casgn, nil, :EXPR_RUBYMODE,
          s(:str, "(ruby-mode)")),
        s(:casgn, nil, :EXPR_NOBACKUP,
          s(:dstr,
            s(:str, "(progn"),
            s(:str, " (set (make-local-variable 'backup-inhibited) t)"),
            s(:str, " (set-buffer-modified-p t)"),
            s(:str, ")"))),
        s(:def, :run_emacs,
          s(:args,
            s(:arg, :src),
            s(:restarg, :exprs)),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :tmp,
                s(:send,
                  s(:const, nil, :Tempfile), :new,
                  s(:array,
                    s(:str, "ruby-mode.test."),
                    s(:str, ".rb")))),
              s(:send,
                s(:lvar, :tmp), :puts,
                s(:lvar, :src)),
              s(:send,
                s(:lvar, :tmp), :close),
              s(:lvasgn, :exprs,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :exprs), :map),
                    s(:args,
                      s(:arg, :expr)),
                    s(:array,
                      s(:const, nil, :EVAL_OPT),
                      s(:lvar, :expr))), :flatten)),
              s(:send,
                s(:lvar, :exprs), :unshift,
                s(:const, nil, :EVAL_OPT),
                s(:const, nil, :EXPR_RUBYMODE)),
              s(:send,
                s(:lvar, :exprs), :unshift,
                s(:const, nil, :EVAL_OPT),
                s(:const, nil, :EXPR_NOBACKUP)),
              s(:lvasgn, :output,
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:splat,
                        s(:const, nil, :EMACS)),
                      s(:send,
                        s(:lvar, :tmp), :path),
                      s(:splat,
                        s(:lvar, :exprs)),
                      s(:hash,
                        s(:pair,
                          s(:sym, :err),
                          s(:array,
                            s(:sym, :child),
                            s(:sym, :out))))),
                    s(:str, "r")),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :read))),
              s(:send,
                s(:lvar, :tmp), :open),
              s(:lvasgn, :result,
                s(:send,
                  s(:lvar, :tmp), :read)),
              s(:return,
                s(:lvar, :result),
                s(:lvar, :output))),
            s(:send,
              s(:lvar, :tmp), :close!))),
        s(:class,
          s(:const, nil, :TestIndent),
          s(:self),
          s(:begin,
            s(:casgn, nil, :EXPR_INDENT,
              s(:str, "(indent-region (point-min) (point-max))")),
            s(:def, :assert_indent,
              s(:args,
                s(:arg, :expected),
                s(:arg, :source),
                s(:restarg, :message)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :space,
                    s(:send,
                      s(:lvar, :expected), :[],
                      s(:regexp,
                        s(:str, "\\A\\n?(\\s*\\|)"),
                        s(:regopt)),
                      s(:int, 1))),
                  s(:begin,
                    s(:lvasgn, :space,
                      s(:regexp,
                        s(:str, "^"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Regexp), :quote,
                            s(:lvar, :space))),
                        s(:regopt, :m))),
                    s(:send,
                      s(:lvar, :expected), :gsub!,
                      s(:lvar, :space),
                      s(:str, "")),
                    s(:send,
                      s(:lvar, :source), :gsub!,
                      s(:lvar, :space),
                      s(:str, ""))), nil),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :result),
                    s(:lvasgn, :output)),
                  s(:send, nil, :run_emacs,
                    s(:lvar, :source),
                    s(:const, nil, :EXPR_INDENT),
                    s(:const, nil, :EXPR_SAVE))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^Wrote "),
                    s(:regopt)),
                  s(:lvar, :output)),
                s(:send, nil, :assert_equal,
                  s(:lvar, :expected),
                  s(:lvar, :result),
                  s(:block,
                    s(:send, nil, :message,
                      s(:splat,
                        s(:lvar, :message))),
                    s(:args),
                    s(:send, nil, :diff,
                      s(:lvar, :expected),
                      s(:lvar, :result)))))),
            s(:def, :test_simple,
              s(:args),
              s(:send, nil, :assert_indent,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |if foo\n"),
                  s(:str, "      |  bar\n"),
                  s(:str, "      |end\n"),
                  s(:str, "      |zot\n"),
                  s(:str, "      |")),
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |if foo\n"),
                  s(:str, "      |bar\n"),
                  s(:str, "      |  end\n"),
                  s(:str, "      |    zot\n"),
                  s(:str, "      |")))),
            s(:def, :test_keyword_label,
              s(:args),
              s(:send, nil, :assert_indent,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |bar(class: XXX) do\n"),
                  s(:str, "      |  foo\n"),
                  s(:str, "      |end\n"),
                  s(:str, "      |bar\n"),
                  s(:str, "      |")),
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |bar(class: XXX) do\n"),
                  s(:str, "      |     foo\n"),
                  s(:str, "      |  end\n"),
                  s(:str, "      |    bar\n"),
                  s(:str, "      |")))),
            s(:def, :test_method_with_question_mark,
              s(:args),
              s(:send, nil, :assert_indent,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |if x.is_a?(XXX)\n"),
                  s(:str, "      |  foo\n"),
                  s(:str, "      |end\n"),
                  s(:str, "      |")),
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |if x.is_a?(XXX)\n"),
                  s(:str, "      | foo\n"),
                  s(:str, "      |   end\n"),
                  s(:str, "      |")))),
            s(:def, :test_expr_in_regexp,
              s(:args),
              s(:send, nil, :assert_indent,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |if /\#{foo}/ =~ s\n"),
                  s(:str, "      |  x = 1\n"),
                  s(:str, "      |end\n"),
                  s(:str, "      |")),
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |if /\#{foo}/ =~ s\n"),
                  s(:str, "      | x = 1\n"),
                  s(:str, "      |  end\n"),
                  s(:str, "      |")))),
            s(:def, :test_singleton_class,
              s(:args),
              s(:begin,
                s(:send, nil, :skip,
                  s(:str, "pending")),
                s(:send, nil, :assert_indent,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "      |class<<bar\n"),
                    s(:str, "      |  foo\n"),
                    s(:str, "      |end\n"),
                    s(:str, "      |")),
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "      |class<<bar\n"),
                    s(:str, "      |foo\n"),
                    s(:str, "      |   end\n"),
                    s(:str, "      |"))))),
            s(:def, :test_array_literal,
              s(:args),
              s(:begin,
                s(:send, nil, :assert_indent,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "      |foo = [\n"),
                    s(:str, "      |  bar\n"),
                    s(:str, "      |]\n"),
                    s(:str, "      |")),
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "      |foo = [\n"),
                    s(:str, "      | bar\n"),
                    s(:str, "      |  ]\n"),
                    s(:str, "      |"))),
                s(:send, nil, :assert_indent,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "      |foo do\n"),
                    s(:str, "      |  [bar]\n"),
                    s(:str, "      |end\n"),
                    s(:str, "      |")),
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "      |foo do\n"),
                    s(:str, "      |[bar]\n"),
                    s(:str, "      |  end\n"),
                    s(:str, "      |"))))),
            s(:def, :test_begin_end,
              s(:args),
              s(:send, nil, :assert_indent,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |begin\n"),
                  s(:str, "      |  a[b]\n"),
                  s(:str, "      |end\n"),
                  s(:str, "      |")),
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |begin\n"),
                  s(:str, "      | a[b]\n"),
                  s(:str, "      |  end\n"),
                  s(:str, "      |")))),
            s(:def, :test_array_after_paren_and_space,
              s(:args),
              s(:send, nil, :assert_indent,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |class A\n"),
                  s(:str, "      |  def foo\n"),
                  s(:str, "      |    foo( [])\n"),
                  s(:str, "      |  end\n"),
                  s(:str, "      |end\n"),
                  s(:str, "      |")),
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |class A\n"),
                  s(:str, "      | def foo\n"),
                  s(:str, "      |foo( [])\n"),
                  s(:str, "      |end\n"),
                  s(:str, "      |  end\n"),
                  s(:str, "      |")))),
            s(:def, :test_spread_arguments,
              s(:args),
              s(:send, nil, :assert_indent,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |foo(1,\n"),
                  s(:str, "      |    2,\n"),
                  s(:str, "      |    3)\n"),
                  s(:str, "      |")),
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      |foo(1,\n"),
                  s(:str, "      | 2,\n"),
                  s(:str, "      |  3)\n"),
                  s(:str, "      |")))))))), nil))
