s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "matrix")),
  s(:class,
    s(:const, nil, :TestVector),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@v1,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:ivasgn, :@v2,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:ivasgn, :@v3,
            s(:send,
              s(:ivar, :@v1), :clone)),
          s(:ivasgn, :@v4,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:float, 1.0),
              s(:float, 2.0),
              s(:float, 3.0))),
          s(:ivasgn, :@w1,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))))),
      s(:def, :test_basis,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:const, nil, :Vector), :basis,
              s(:hash,
                s(:pair,
                  s(:sym, :size),
                  s(:int, 3)),
                s(:pair,
                  s(:sym, :index),
                  s(:int, 0))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Vector), :basis,
              s(:hash,
                s(:pair,
                  s(:sym, :size),
                  s(:int, -1)),
                s(:pair,
                  s(:sym, :index),
                  s(:int, 2))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Vector), :basis,
              s(:hash,
                s(:pair,
                  s(:sym, :size),
                  s(:int, 4)),
                s(:pair,
                  s(:sym, :index),
                  s(:int, -1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Vector), :basis,
              s(:hash,
                s(:pair,
                  s(:sym, :size),
                  s(:int, 3)),
                s(:pair,
                  s(:sym, :index),
                  s(:int, 3))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Vector), :basis,
              s(:hash,
                s(:pair,
                  s(:sym, :size),
                  s(:int, 3))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Vector), :basis,
              s(:hash,
                s(:pair,
                  s(:sym, :index),
                  s(:int, 3))))))),
      s(:def, :test_identity,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_same,
            s(:ivar, :@v1),
            s(:ivar, :@v1)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@v1),
            s(:ivar, :@v2)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@v1),
            s(:ivar, :@v3)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@v1),
            s(:ivar, :@v4)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@v1),
            s(:ivar, :@w1)))),
      s(:def, :test_equality,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@v1),
            s(:ivar, :@v1)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@v1),
            s(:ivar, :@v2)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@v1),
            s(:ivar, :@v3)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@v1),
            s(:ivar, :@v4)),
          s(:send, nil, :assert_not_equal,
            s(:ivar, :@v1),
            s(:ivar, :@w1)))),
      s(:def, :test_hash_equality,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@v1), :eql?,
              s(:ivar, :@v1))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@v1), :eql?,
              s(:ivar, :@v2))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@v1), :eql?,
              s(:ivar, :@v3))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@v1), :eql?,
                s(:ivar, :@v4)), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@v1), :eql?,
                s(:ivar, :@w1)), :!)),
          s(:lvasgn, :hash,
            s(:hash,
              s(:pair,
                s(:ivar, :@v1),
                s(:sym, :value)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :hash), :key?,
              s(:ivar, :@v1))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :hash), :key?,
              s(:ivar, :@v2))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :hash), :key?,
              s(:ivar, :@v3))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :hash), :key?,
                s(:ivar, :@v4)), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :hash), :key?,
                s(:ivar, :@w1)), :!)))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@v1), :hash),
            s(:send,
              s(:ivar, :@v1), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@v1), :hash),
            s(:send,
              s(:ivar, :@v2), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@v1), :hash),
            s(:send,
              s(:ivar, :@v3), :hash)))),
      s(:def, :test_aref,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@v1), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@v1), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@v1), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@v1), :[],
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@v1), :[],
              s(:int, 3))))),
      s(:def, :test_size,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 3),
          s(:send,
            s(:ivar, :@v1), :size))),
      s(:def, :test_each2,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@v1), :each2,
              s(:ivar, :@v4)),
            s(:args,
              s(:arg, :x),
              s(:arg, :y)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:array,
                s(:lvar, :x),
                s(:lvar, :y)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:float, 1.0)),
              s(:array,
                s(:int, 2),
                s(:float, 2.0)),
              s(:array,
                s(:int, 3),
                s(:float, 3.0))),
            s(:lvar, :a)))),
      s(:def, :test_collect,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:ivar, :@v1), :collect),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :+,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:lvar, :a)))),
      s(:def, :test_collect2,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:ivar, :@v1), :collect2,
                s(:ivar, :@v4)),
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:send,
                s(:lvar, :x), :+,
                s(:lvar, :y)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:float, 2.0),
              s(:float, 4.0),
              s(:float, 6.0)),
            s(:lvar, :a)))),
      s(:def, :test_map2,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send,
                s(:ivar, :@v1), :map2,
                s(:ivar, :@v4)),
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:send,
                s(:lvar, :x), :+,
                s(:lvar, :y)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:float, 2.0),
              s(:float, 4.0),
              s(:float, 6.0)),
            s(:lvar, :a)))),
      s(:def, :test_independent?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :Vector), :independent?,
              s(:ivar, :@v1),
              s(:ivar, :@w1))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :Vector), :independent?,
              s(:send,
                s(:const, nil, :Vector), :basis,
                s(:hash,
                  s(:pair,
                    s(:sym, :size),
                    s(:int, 3)),
                  s(:pair,
                    s(:sym, :index),
                    s(:int, 0)))),
              s(:send,
                s(:const, nil, :Vector), :basis,
                s(:hash,
                  s(:pair,
                    s(:sym, :size),
                    s(:int, 3)),
                  s(:pair,
                    s(:sym, :index),
                    s(:int, 1)))),
              s(:send,
                s(:const, nil, :Vector), :basis,
                s(:hash,
                  s(:pair,
                    s(:sym, :size),
                    s(:int, 3)),
                  s(:pair,
                    s(:sym, :index),
                    s(:int, 2)))))),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :Vector), :independent?,
              s(:ivar, :@v1),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 2),
                s(:int, 4),
                s(:int, 6)))),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :Vector), :independent?,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 2),
                s(:int, 4)),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 3)),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 5),
                s(:int, 6)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Vector), :independent?,
              s(:ivar, :@v1),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Vector), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:const, nil, :Vector), :independent?,
              s(:ivar, :@v1),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 2),
                s(:int, 4)))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@v1), :independent?,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 4)),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 3),
                s(:int, 4)))))),
      s(:def, :test_mul,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 2),
              s(:int, 4),
              s(:int, 6)),
            s(:send,
              s(:ivar, :@v1), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 4),
                s(:int, 9)),
              s(:array,
                s(:int, 2),
                s(:int, 8),
                s(:int, 18)),
              s(:array,
                s(:int, 3),
                s(:int, 12),
                s(:int, 27))),
            s(:send,
              s(:ivar, :@v1), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 4),
                  s(:int, 9))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:ivar, :@v1), :*,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 4),
                s(:int, 9)))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :*,
              s(:lvar, :o))))),
      s(:def, :test_add,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 2),
              s(:int, 4),
              s(:int, 6)),
            s(:send,
              s(:ivar, :@v1), :+,
              s(:ivar, :@v1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2)),
              s(:array,
                s(:int, 6)),
              s(:array,
                s(:int, 12))),
            s(:send,
              s(:ivar, :@v1), :+,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1)),
                s(:array,
                  s(:int, 4)),
                s(:array,
                  s(:int, 9))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :+,
              s(:lvar, :o))))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@v1), :-,
              s(:ivar, :@v1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0)),
              s(:array,
                s(:int, -2)),
              s(:array,
                s(:int, -6))),
            s(:send,
              s(:ivar, :@v1), :-,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1)),
                s(:array,
                  s(:int, 4)),
                s(:array,
                  s(:int, 9))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :-,
              s(:lvar, :o))))),
      s(:def, :test_uplus,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@v1),
          s(:send,
            s(:ivar, :@v1), :+@))),
      s(:def, :test_negate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, -1),
              s(:int, -2),
              s(:int, -3)),
            s(:send,
              s(:ivar, :@v1), :-@)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@v1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@v1), :-@)), :-@)))),
      s(:def, :test_inner_product,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 1), :+,
                s(:int, 4)), :+,
              s(:int, 9)),
            s(:send,
              s(:ivar, :@v1), :inner_product,
              s(:ivar, :@v1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 1), :+,
                s(:int, 4)), :+,
              s(:int, 9)),
            s(:send,
              s(:ivar, :@v1), :dot,
              s(:ivar, :@v1))))),
      s(:def, :test_r,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:int, 5),
          s(:send,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 3),
              s(:int, 4)), :r))),
      s(:def, :test_round,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:float, 1.234),
              s(:float, 2.345),
              s(:float, 3.4)), :round,
            s(:int, 2)),
          s(:send,
            s(:const, nil, :Vector), :[],
            s(:float, 1.23),
            s(:float, 2.35),
            s(:float, 3.4)))),
      s(:def, :test_covector,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send,
            s(:ivar, :@v1), :covector))),
      s(:def, :test_to_s,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "Vector[1, 2, 3]"),
          s(:send,
            s(:ivar, :@v1), :to_s))),
      s(:def, :test_inspect,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "Vector[1, 2, 3]"),
          s(:send,
            s(:ivar, :@v1), :inspect))),
      s(:def, :test_magnitude,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_epsilon,
            s(:float, 3.7416573867739413),
            s(:send,
              s(:ivar, :@v1), :norm)),
          s(:send, nil, :assert_in_epsilon,
            s(:float, 3.7416573867739413),
            s(:send,
              s(:ivar, :@v4), :norm)))),
      s(:def, :test_complex_magnitude,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug6966,
            s(:str, "[ruby-dev:46100]")),
          s(:lvasgn, :v,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, 1)),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:float, 1.0),
            s(:send,
              s(:lvar, :v), :norm),
            s(:lvar, :bug6966)))),
      s(:def, :test_rational_magnitude,
        s(:args),
        s(:begin,
          s(:lvasgn, :v,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:float, 0.5),
            s(:send,
              s(:lvar, :v), :norm)))),
      s(:def, :test_cross_product,
        s(:args),
        s(:begin,
          s(:lvasgn, :v,
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)), :cross_product,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 1),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 0),
              s(:int, 0),
              s(:int, 1)),
            s(:lvar, :v)),
          s(:lvasgn, :v2,
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2)), :cross_product)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, -2),
              s(:int, 1)),
            s(:lvar, :v2)),
          s(:lvasgn, :v3,
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 3),
                s(:int, 5),
                s(:int, 2),
                s(:int, 1)), :cross,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 4),
                s(:int, 3),
                s(:int, 1),
                s(:int, 8)),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 2),
                s(:int, 9),
                s(:int, 4),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 16),
              s(:int, -65),
              s(:int, 139),
              s(:int, -1)),
            s(:lvar, :v3)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 0),
              s(:int, 0),
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)), :cross,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 0),
                s(:int, 1),
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 0),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)), :cross,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 1),
                s(:int, 0)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Vector), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :cross_product,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 4)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :cross_product,
              s(:int, 42))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2)), :cross_product,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 2),
                s(:int, -1)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Vector), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1)), :cross_product)))),
      s(:def, :test_angle_with,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_in_epsilon,
            s(:const,
              s(:const, nil, :Math), :PI),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 0)), :angle_with,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, -1),
                s(:int, 0)))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const,
                s(:const, nil, :Math), :PI), :/,
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 0)), :angle_with,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, -1)))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:const,
                s(:const, nil, :Math), :PI), :/,
              s(:int, 4)),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 2),
                s(:int, 2)), :angle_with,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 1)))),
          s(:send, nil, :assert_in_delta,
            s(:float, 0.0),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 1)), :angle_with,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 1))),
            s(:float, 1.0e-05)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Vector), :ZeroVectorError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 1)), :angle_with,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 0)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Vector), :ZeroVectorError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 0)), :angle_with,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 1)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)), :angle_with,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0),
                s(:int, 1)))))))))
