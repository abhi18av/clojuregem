s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "matrix")),
  s(:class,
    s(:const, nil, :SubMatrix),
    s(:const, nil, :Matrix), nil),
  s(:class,
    s(:const, nil, :TestMatrix),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@m1,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)))),
          s(:ivasgn, :@m2,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)))),
          s(:ivasgn, :@m3,
            s(:send,
              s(:ivar, :@m1), :clone)),
          s(:ivasgn, :@m4,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:float, 1.0),
                s(:float, 2.0),
                s(:float, 3.0)),
              s(:array,
                s(:float, 4.0),
                s(:float, 5.0),
                s(:float, 6.0)))),
          s(:ivasgn, :@n1,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2),
                s(:int, 3),
                s(:int, 4)),
              s(:array,
                s(:int, 5),
                s(:int, 6),
                s(:int, 7)))),
          s(:ivasgn, :@c1,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:send, nil, :Complex,
                  s(:int, 1),
                  s(:int, 2)),
                s(:send, nil, :Complex,
                  s(:int, 0),
                  s(:int, 1)),
                s(:int, 0)),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:ivasgn, :@e1,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 2),
              s(:int, 0))),
          s(:ivasgn, :@e2,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 3))),
          s(:ivasgn, :@a3,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 1),
                s(:int, -3)),
              s(:array,
                s(:int, 0),
                s(:int, 3),
                s(:int, 7)),
              s(:array,
                s(:int, 11),
                s(:int, -4),
                s(:int, 2)))),
          s(:ivasgn, :@a5,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2),
                s(:int, 0),
                s(:int, 9),
                s(:int, 3),
                s(:int, 9)),
              s(:array,
                s(:int, 8),
                s(:int, 7),
                s(:int, 0),
                s(:int, 1),
                s(:int, 9)),
              s(:array,
                s(:int, 7),
                s(:int, 5),
                s(:int, 6),
                s(:int, 6),
                s(:int, 5)),
              s(:array,
                s(:int, 0),
                s(:int, 7),
                s(:int, 8),
                s(:int, 3),
                s(:int, 0)),
              s(:array,
                s(:int, 7),
                s(:int, 8),
                s(:int, 2),
                s(:int, 3),
                s(:int, 1)))),
          s(:ivasgn, :@b3,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, -7),
                s(:int, 7),
                s(:int, -10)),
              s(:array,
                s(:int, 9),
                s(:int, -3),
                s(:int, -2)),
              s(:array,
                s(:int, -1),
                s(:int, 3),
                s(:int, 9)))))),
      s(:def, :test_matrix,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@m1), :[],
              s(:int, 0),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@m1), :[],
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@m1), :[],
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@m1), :[],
              s(:int, 1),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:ivar, :@m1), :[],
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:ivar, :@m1), :[],
              s(:int, 1),
              s(:int, 2))))),
      s(:def, :test_identity,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_same,
            s(:ivar, :@m1),
            s(:ivar, :@m1)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@m1),
            s(:ivar, :@m2)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@m1),
            s(:ivar, :@m3)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@m1),
            s(:ivar, :@m4)),
          s(:send, nil, :assert_not_same,
            s(:ivar, :@m1),
            s(:ivar, :@n1)))),
      s(:def, :test_equality,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:ivar, :@m1)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:ivar, :@m2)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:ivar, :@m3)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:ivar, :@m4)),
          s(:send, nil, :assert_not_equal,
            s(:ivar, :@m1),
            s(:ivar, :@n1)))),
      s(:def, :test_hash_equality,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@m1), :eql?,
              s(:ivar, :@m1))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@m1), :eql?,
              s(:ivar, :@m2))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@m1), :eql?,
              s(:ivar, :@m3))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@m1), :eql?,
                s(:ivar, :@m4)), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@m1), :eql?,
                s(:ivar, :@n1)), :!)),
          s(:lvasgn, :hash,
            s(:hash,
              s(:pair,
                s(:ivar, :@m1),
                s(:sym, :value)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :hash), :key?,
              s(:ivar, :@m1))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :hash), :key?,
              s(:ivar, :@m2))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :hash), :key?,
              s(:ivar, :@m3))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :hash), :key?,
                s(:ivar, :@m4)), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :hash), :key?,
                s(:ivar, :@n1)), :!)))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@m1), :hash),
            s(:send,
              s(:ivar, :@m1), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@m1), :hash),
            s(:send,
              s(:ivar, :@m2), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@m1), :hash),
            s(:send,
              s(:ivar, :@m3), :hash)))),
      s(:def, :test_uplus,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@m1),
          s(:send,
            s(:ivar, :@m1), :+@))),
      s(:def, :test_negate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, -1),
                s(:int, -2),
                s(:int, -3)),
              s(:array,
                s(:int, -4),
                s(:int, -5),
                s(:int, -6))),
            s(:send,
              s(:ivar, :@m1), :-@)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@m1), :-@)), :-@)))),
      s(:def, :test_rank,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)))), :each),
            s(:args,
              s(:arg, :rows)),
            s(:send, nil, :assert_equal,
              s(:int, 0),
              s(:send,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:splat,
                    s(:lvar, :rows))), :rank))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1)),
                  s(:array,
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)))), :each),
            s(:args,
              s(:arg, :rows)),
            s(:begin,
              s(:lvasgn, :matrix,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:splat,
                    s(:lvar, :rows)))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :matrix), :rank)),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :matrix), :transpose), :rank)))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 2)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1)))), :each),
            s(:args,
              s(:arg, :rows)),
            s(:begin,
              s(:lvasgn, :m,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:splat,
                    s(:lvar, :rows)))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :m), :rank)),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:send,
                    s(:lvar, :m), :transpose), :rank)))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 0))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1))),
                s(:array,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 1),
                    s(:int, 2)),
                  s(:array,
                    s(:int, 1),
                    s(:int, 3),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 4),
                    s(:int, 1),
                    s(:int, 1)))), :each),
            s(:args,
              s(:arg, :rows)),
            s(:begin,
              s(:lvasgn, :m,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:splat,
                    s(:lvar, :rows)))),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:lvar, :m), :rank)),
              s(:send, nil, :assert_equal,
                s(:int, 3),
                s(:send,
                  s(:send,
                    s(:lvar, :m), :transpose), :rank)))))),
      s(:def, :test_inverse,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :empty), :inverse)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, -1),
                s(:int, 1)),
              s(:array,
                s(:int, 0),
                s(:int, -1))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, -1),
                  s(:int, -1)),
                s(:array,
                  s(:int, 0),
                  s(:int, -1))), :inverse)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :ExceptionForMatrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :inverse)))),
      s(:def, :test_determinant,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0))), :determinant)),
          s(:send, nil, :assert_equal,
            s(:int, 45),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :determinant)),
          s(:send, nil, :assert_equal,
            s(:int, -18),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, -2),
                  s(:int, 2)),
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))), :determinant)),
          s(:send, nil, :assert_equal,
            s(:int, -7),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 1),
                  s(:int, 3),
                  s(:int, 9))), :determinant)),
          s(:send, nil, :assert_equal,
            s(:int, 42),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 0),
                  s(:int, 12)),
                s(:array,
                  s(:int, 8),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 9),
                  s(:int, 1)),
                s(:array,
                  s(:int, 4),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, -7),
                  s(:int, 17)),
                s(:array,
                  s(:int, -1),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, -4),
                  s(:int, 8)),
                s(:array,
                  s(:int, 10),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 8),
                  s(:int, 6))), :determinant)))),
      s(:def, :test_new_matrix,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :to_ary,
            s(:args),
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:lvar, :o),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)))))),
      s(:def, :test_round,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:float, 1.0111),
                s(:float, 2.3232),
                s(:float, 3.04343)),
              s(:array,
                s(:float, 4.81),
                s(:float, 5.0),
                s(:float, 6.997)))),
          s(:lvasgn, :b,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:float, 1.01),
                s(:float, 2.32),
                s(:float, 3.04)),
              s(:array,
                s(:float, 4.81),
                s(:float, 5.0),
                s(:float, 7.0)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :a), :round,
              s(:int, 2)),
            s(:lvar, :b)))),
      s(:def, :test_rows,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@m1),
          s(:send,
            s(:const, nil, :Matrix), :rows,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)))))),
      s(:def, :test_rows_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :rows1,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 1)))),
          s(:lvasgn, :rows2,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 1)))),
          s(:lvasgn, :m1,
            s(:send,
              s(:const, nil, :Matrix), :rows,
              s(:lvar, :rows1),
              s(:lvasgn, :copy,
                s(:false)))),
          s(:lvasgn, :m2,
            s(:send,
              s(:const, nil, :Matrix), :rows,
              s(:lvar, :rows2),
              s(:lvasgn, :copy,
                s(:true)))),
          s(:send,
            s(:lvar, :rows1), :uniq!),
          s(:send,
            s(:lvar, :rows2), :uniq!),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:lvar, :m1), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1)),
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:lvar, :m2), :to_a)))),
      s(:def, :test_columns,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@m1),
          s(:send,
            s(:const, nil, :Matrix), :columns,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 4)),
              s(:array,
                s(:int, 2),
                s(:int, 5)),
              s(:array,
                s(:int, 3),
                s(:int, 6)))))),
      s(:def, :test_diagonal,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:const, nil, :Matrix), :diagonal)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 3),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 1))),
            s(:send,
              s(:const, nil, :Matrix), :diagonal,
              s(:int, 3),
              s(:int, 2),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 3),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 1))),
            s(:send,
              s(:const, nil, :Matrix), :diagonal,
              s(:int, 4),
              s(:int, 3),
              s(:int, 2),
              s(:int, 1))))),
      s(:def, :test_scalar,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:const, nil, :Matrix), :scalar,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 2))),
            s(:send,
              s(:const, nil, :Matrix), :scalar,
              s(:int, 3),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 2),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 2),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 2))),
            s(:send,
              s(:const, nil, :Matrix), :scalar,
              s(:int, 4),
              s(:int, 2))))),
      s(:def, :test_identity2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 1))),
            s(:send,
              s(:const, nil, :Matrix), :identity,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 1))),
            s(:send,
              s(:const, nil, :Matrix), :unit,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 1))),
            s(:send,
              s(:const, nil, :Matrix), :I,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 1))),
            s(:send,
              s(:const, nil, :Matrix), :identity,
              s(:int, 4))))),
      s(:def, :test_zero,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0))),
            s(:send,
              s(:const, nil, :Matrix), :zero,
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0),
                s(:int, 0))),
            s(:send,
              s(:const, nil, :Matrix), :zero,
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0))),
            s(:send,
              s(:const, nil, :Matrix), :zero,
              s(:int, 1))))),
      s(:def, :test_row_vector,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))),
          s(:send,
            s(:const, nil, :Matrix), :row_vector,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))))),
      s(:def, :test_column_vector,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:int, 1)),
            s(:array,
              s(:int, 2)),
            s(:array,
              s(:int, 3)),
            s(:array,
              s(:int, 4))),
          s(:send,
            s(:const, nil, :Matrix), :column_vector,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4))))),
      s(:def, :test_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 2),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array),
              s(:array)),
            s(:lvar, :m)),
          s(:lvasgn, :n,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :columns,
              s(:array,
                s(:array),
                s(:array),
                s(:array))),
            s(:lvar, :n)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0))),
            s(:send,
              s(:lvar, :m), :*,
              s(:lvar, :n))))),
      s(:def, :test_row,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@m1), :row,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 4),
              s(:int, 5),
              s(:int, 6)),
            s(:send,
              s(:ivar, :@m1), :row,
              s(:int, 1))),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@m1), :row,
              s(:int, 0)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:lvar, :a)))),
      s(:def, :test_column,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:ivar, :@m1), :column,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 2),
              s(:int, 5)),
            s(:send,
              s(:ivar, :@m1), :column,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 3),
              s(:int, 6)),
            s(:send,
              s(:ivar, :@m1), :column,
              s(:int, 2))),
          s(:lvasgn, :a,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@m1), :column,
              s(:int, 0)),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :a), :<<,
              s(:lvar, :x))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 4)),
            s(:lvar, :a)))),
      s(:def, :test_collect,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:int, 1),
              s(:int, 4),
              s(:int, 9)),
            s(:array,
              s(:int, 16),
              s(:int, 25),
              s(:int, 36))),
          s(:block,
            s(:send,
              s(:ivar, :@m1), :collect),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:lvar, :x), :**,
              s(:int, 2))))),
      s(:def, :test_minor,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 4),
                s(:int, 5))),
            s(:send,
              s(:ivar, :@m1), :minor,
              s(:irange,
                s(:int, 0),
                s(:int, 1)),
              s(:irange,
                s(:int, 0),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2)),
              s(:array,
                s(:int, 5))),
            s(:send,
              s(:ivar, :@m1), :minor,
              s(:irange,
                s(:int, 0),
                s(:int, 1)),
              s(:irange,
                s(:int, 1),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 5))),
            s(:send,
              s(:ivar, :@m1), :minor,
              s(:irange,
                s(:int, 1),
                s(:int, 1)),
              s(:irange,
                s(:int, 0),
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 4),
                s(:int, 5))),
            s(:send,
              s(:ivar, :@m1), :minor,
              s(:int, 0),
              s(:int, 2),
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 5))),
            s(:send,
              s(:ivar, :@m1), :minor,
              s(:int, 1),
              s(:int, 1),
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2)),
              s(:array,
                s(:int, 5))),
            s(:send,
              s(:ivar, :@m1), :minor,
              s(:int, 0),
              s(:int, 2),
              s(:int, 1),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :minor,
              s(:int, 0))))),
      s(:def, :test_first_minor,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))), :first_minor,
              s(:int, 0),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 4),
                  s(:int, 2))), :first_minor,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 3))),
            s(:send,
              s(:ivar, :@m1), :first_minor,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 6))),
            s(:send,
              s(:ivar, :@m1), :first_minor,
              s(:int, 0),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:ivar, :@m1), :first_minor,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :empty,
                s(:int, 0),
                s(:int, 0)), :first_minor,
              s(:int, 0),
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :first_minor,
              s(:int, 4),
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :first_minor,
              s(:int, 0),
              s(:int, -1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :first_minor,
              s(:int, -1),
              s(:int, 4))))),
      s(:def, :test_cofactor,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))), :cofactor,
              s(:int, 0),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :cofactor,
              s(:int, 0),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0))), :cofactor,
              s(:int, 0),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 1),
                  s(:int, 3),
                  s(:int, 9))), :cofactor,
              s(:int, 1),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, -21),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 0),
                  s(:int, 12)),
                s(:array,
                  s(:int, 8),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 9),
                  s(:int, 1)),
                s(:array,
                  s(:int, 4),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, -7),
                  s(:int, 17)),
                s(:array,
                  s(:int, -1),
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, -4),
                  s(:int, 8)),
                s(:array,
                  s(:int, 10),
                  s(:int, 1),
                  s(:int, 1),
                  s(:int, 8),
                  s(:int, 6))), :cofactor,
              s(:int, 2),
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :empty,
                s(:int, 0),
                s(:int, 0)), :cofactor,
              s(:int, 0),
              s(:int, 0))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0))), :cofactor,
              s(:int, -1),
              s(:int, 4))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :ExceptionForMatrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, -2),
                  s(:int, 2))), :cofactor,
              s(:int, 0),
              s(:int, 0))))),
      s(:def, :test_adjugate,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :empty), :adjugate)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 5))), :adjugate)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 9),
                s(:int, -6)),
              s(:array,
                s(:int, -3),
                s(:int, 7))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :adjugate)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 45),
                s(:int, 3),
                s(:int, -7)),
              s(:array,
                s(:int, 6),
                s(:int, -1),
                s(:int, 0)),
              s(:array,
                s(:int, -7),
                s(:int, 0),
                s(:int, 0))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 1),
                  s(:int, 3),
                  s(:int, 9))), :adjugate)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :identity,
              s(:int, 5)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:ivar, :@a5), :adjugate), :*,
                  s(:ivar, :@a5))), :/,
              s(:send,
                s(:ivar, :@a5), :det))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :I,
              s(:int, 3)),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :I,
                s(:int, 3)), :adjugate)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@a3), :*,
                  s(:ivar, :@b3))), :adjugate),
            s(:send,
              s(:send,
                s(:ivar, :@b3), :adjugate), :*,
              s(:send,
                s(:ivar, :@a3), :adjugate))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:int, 4), :**,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:ivar, :@a3), :row_count), :-,
                    s(:int, 1)))), :*,
              s(:send,
                s(:ivar, :@a3), :adjugate)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 4), :*,
                  s(:ivar, :@a3))), :adjugate)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :ExceptionForMatrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :adjugate)))),
      s(:def, :test_laplace_expansion,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :row),
                  s(:int, 0))))),
          s(:send, nil, :assert_equal,
            s(:int, 45),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :row),
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :column),
                  s(:int, 0))))),
          s(:send, nil, :assert_equal,
            s(:int, -7),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 1),
                  s(:int, 3),
                  s(:int, 9))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :column),
                  s(:int, 2))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 3),
              s(:int, -2)),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:send,
                    s(:const, nil, :Vector), :[],
                    s(:int, 1),
                    s(:int, 0)),
                  s(:send,
                    s(:const, nil, :Vector), :[],
                    s(:int, 0),
                    s(:int, 1))),
                s(:array,
                  s(:int, 2),
                  s(:int, 3))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :row),
                  s(:int, 0))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :ExceptionForMatrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :row),
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :laplace_expansion)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :foo),
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :row),
                  s(:int, 1)),
                s(:pair,
                  s(:sym, :column),
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :row),
                  s(:int, 2))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 1),
                  s(:int, 3),
                  s(:int, 9))), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :column),
                  s(:int, -1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :empty,
                s(:int, 0),
                s(:int, 0)), :laplace_expansion,
              s(:hash,
                s(:pair,
                  s(:sym, :row),
                  s(:int, 0))))))),
      s(:def, :test_regular?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 1))), :regular?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1))), :regular?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 1)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 1))), :regular?), :!)))),
      s(:def, :test_singular?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:array,
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1))), :singular?), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 0),
                    s(:int, 1))), :singular?), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1))), :singular?)))),
      s(:def, :test_square?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 1))), :square?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 1),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1))), :square?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1))), :square?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Matrix), :[],
                  s(:array,
                    s(:int, 1),
                    s(:int, 0),
                    s(:int, 0)),
                  s(:array,
                    s(:int, 0),
                    s(:int, 1),
                    s(:int, 0))), :square?), :!)))),
      s(:def, :test_mul,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2),
                s(:int, 4)),
              s(:array,
                s(:int, 6),
                s(:int, 8))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2),
                  s(:int, 4)),
                s(:array,
                  s(:int, 6),
                  s(:int, 8))), :*,
              s(:send,
                s(:const, nil, :Matrix), :I,
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 8)),
              s(:array,
                s(:int, 12),
                s(:int, 16))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2),
                  s(:int, 4)),
                s(:array,
                  s(:int, 6),
                  s(:int, 8))), :*,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 8)),
              s(:array,
                s(:int, 12),
                s(:int, 16))),
            s(:send,
              s(:int, 2), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2),
                  s(:int, 4)),
                s(:array,
                  s(:int, 6),
                  s(:int, 8))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 14),
                s(:int, 32)),
              s(:array,
                s(:int, 32),
                s(:int, 77))),
            s(:send,
              s(:ivar, :@m1), :*,
              s(:send,
                s(:ivar, :@m1), :transpose))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 17),
                s(:int, 22),
                s(:int, 27)),
              s(:array,
                s(:int, 22),
                s(:int, 29),
                s(:int, 36)),
              s(:array,
                s(:int, 27),
                s(:int, 36),
                s(:int, 45))),
            s(:send,
              s(:send,
                s(:ivar, :@m1), :transpose), :*,
              s(:ivar, :@m1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 14),
              s(:int, 32)),
            s(:send,
              s(:ivar, :@m1), :*,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :m)),
            s(:array,
              s(:lvar, :m),
              s(:send,
                s(:lvar, :m), :transpose))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 14),
                s(:int, 32)),
              s(:array,
                s(:int, 32),
                s(:int, 77))),
            s(:send,
              s(:ivar, :@m1), :*,
              s(:lvar, :o))))),
      s(:def, :test_add,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 6),
                s(:int, 0)),
              s(:array,
                s(:int, -4),
                s(:int, 12))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :scalar,
                s(:int, 2),
                s(:int, 5)), :+,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0)),
                s(:array,
                  s(:int, -4),
                  s(:int, 7))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 3),
                s(:int, 5),
                s(:int, 7)),
              s(:array,
                s(:int, 9),
                s(:int, 11),
                s(:int, 13))),
            s(:send,
              s(:ivar, :@m1), :+,
              s(:ivar, :@n1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 3),
                s(:int, 5),
                s(:int, 7)),
              s(:array,
                s(:int, 9),
                s(:int, 11),
                s(:int, 13))),
            s(:send,
              s(:ivar, :@n1), :+,
              s(:ivar, :@m1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2)),
              s(:array,
                s(:int, 4)),
              s(:array,
                s(:int, 6))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1)),
                s(:array,
                  s(:int, 2)),
                s(:array,
                  s(:int, 3))), :+,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :+,
              s(:int, 1))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :m)),
            s(:array,
              s(:lvar, :m),
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2),
                s(:int, 4),
                s(:int, 6)),
              s(:array,
                s(:int, 8),
                s(:int, 10),
                s(:int, 12))),
            s(:send,
              s(:ivar, :@m1), :+,
              s(:lvar, :o))))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 4),
                s(:int, 0)),
              s(:array,
                s(:int, 4),
                s(:int, -2))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :scalar,
                s(:int, 2),
                s(:int, 5)), :-,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1),
                  s(:int, 0)),
                s(:array,
                  s(:int, -4),
                  s(:int, 7))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, -1),
                s(:int, -1),
                s(:int, -1)),
              s(:array,
                s(:int, -1),
                s(:int, -1),
                s(:int, -1))),
            s(:send,
              s(:ivar, :@m1), :-,
              s(:ivar, :@n1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 1),
                s(:int, 1),
                s(:int, 1))),
            s(:send,
              s(:ivar, :@n1), :-,
              s(:ivar, :@m1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0)),
              s(:array,
                s(:int, 0)),
              s(:array,
                s(:int, 0))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1)),
                s(:array,
                  s(:int, 2)),
                s(:array,
                  s(:int, 3))), :-,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :-,
              s(:int, 1))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :m)),
            s(:array,
              s(:lvar, :m),
              s(:lvar, :m))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0))),
            s(:send,
              s(:ivar, :@m1), :-,
              s(:lvar, :o))))),
      s(:def, :test_div,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 0),
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 2),
                s(:int, 2),
                s(:int, 3))),
            s(:send,
              s(:ivar, :@m1), :/,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 1),
                s(:int, 1))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2),
                  s(:int, 2)),
                s(:array,
                  s(:int, 2),
                  s(:int, 2))), :/,
              s(:send,
                s(:const, nil, :Matrix), :scalar,
                s(:int, 2),
                s(:int, 2)))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :m)),
            s(:array,
              s(:lvar, :m),
              s(:send,
                s(:const, nil, :Matrix), :scalar,
                s(:int, 2),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 1)),
              s(:array,
                s(:int, 1),
                s(:int, 1))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2),
                  s(:int, 2)),
                s(:array,
                  s(:int, 2),
                  s(:int, 2))), :/,
              s(:lvar, :o))))),
      s(:def, :test_exp,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 67),
                s(:int, 96)),
              s(:array,
                s(:int, 48),
                s(:int, 99))),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :**,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :I,
              s(:int, 5)),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :I,
                s(:int, 5)), :**,
              s(:int, -1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :I,
                s(:int, 5)), :**,
              s(:send,
                s(:const, nil, :Object), :new))))),
      s(:def, :test_det,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :instance_method,
            s(:sym, :determinant)),
          s(:send,
            s(:const, nil, :Matrix), :instance_method,
            s(:sym, :det)))),
      s(:def, :test_rank2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 3),
                  s(:int, 9))), :rank)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0)),
                s(:array,
                  s(:int, 0),
                  s(:int, 0))), :rank)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 7),
                  s(:int, 6)),
                s(:array,
                  s(:int, 1),
                  s(:int, 3),
                  s(:int, 9))), :rank)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 1)),
                s(:array,
                  s(:int, 0),
                  s(:int, 1))), :rank)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@m1), :rank)))),
      s(:def, :test_trace,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:send,
              s(:int, 1), :+,
              s(:int, 5)), :+,
            s(:int, 9)),
          s(:send,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 8),
                s(:int, 9))), :trace))),
      s(:def, :test_transpose,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:int, 1),
              s(:int, 4)),
            s(:array,
              s(:int, 2),
              s(:int, 5)),
            s(:array,
              s(:int, 3),
              s(:int, 6))),
          s(:send,
            s(:ivar, :@m1), :transpose))),
      s(:def, :test_conjugate,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:send, nil, :Complex,
                s(:int, 1),
                s(:int, -2)),
              s(:send, nil, :Complex,
                s(:int, 0),
                s(:int, -1)),
              s(:int, 0)),
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send,
            s(:ivar, :@c1), :conjugate))),
      s(:def, :test_eigensystem,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 3),
                s(:int, 4)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :v),
              s(:lvasgn, :d),
              s(:lvasgn, :v_inv)),
            s(:send,
              s(:lvar, :m), :eigensystem)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :d), :diagonal?)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :v), :inv),
            s(:lvar, :v_inv)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :*,
                    s(:lvar, :d)), :*,
                  s(:lvar, :v_inv))), :round,
              s(:int, 5)),
            s(:lvar, :m)))),
      s(:def, :test_imaginary,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:int, 2),
              s(:int, 1),
              s(:int, 0)),
            s(:array,
              s(:int, 0),
              s(:int, 0),
              s(:int, 0))),
          s(:send,
            s(:ivar, :@c1), :imaginary))),
      s(:def, :test_lup,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2)),
              s(:array,
                s(:int, 3),
                s(:int, 4)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :l),
              s(:lvasgn, :u),
              s(:lvasgn, :p)),
            s(:send,
              s(:lvar, :m), :lup)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :l), :lower_triangular?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :u), :upper_triangular?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :p), :permutation?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :l), :*,
                s(:lvar, :u)), :==,
              s(:send,
                s(:lvar, :p), :*,
                s(:lvar, :m)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :m), :lup), :solve,
              s(:array,
                s(:int, 2),
                s(:int, 5))),
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 2)))))),
      s(:def, :test_real,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :Matrix), :[],
            s(:array,
              s(:int, 1),
              s(:int, 0),
              s(:int, 0)),
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send,
            s(:ivar, :@c1), :real))),
      s(:def, :test_rect,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 0),
                s(:int, 0)),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3))),
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2),
                s(:int, 1),
                s(:int, 0)),
              s(:array,
                s(:int, 0),
                s(:int, 0),
                s(:int, 0)))),
          s(:send,
            s(:ivar, :@c1), :rect))),
      s(:def, :test_row_vectors,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 4),
              s(:int, 5),
              s(:int, 6))),
          s(:send,
            s(:ivar, :@m1), :row_vectors))),
      s(:def, :test_column_vectors,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 1),
              s(:int, 4)),
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 2),
              s(:int, 5)),
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 3),
              s(:int, 6))),
          s(:send,
            s(:ivar, :@m1), :column_vectors))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "Matrix[[1, 2, 3], [4, 5, 6]]"),
            s(:send,
              s(:ivar, :@m1), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "Matrix.empty(0, 0)"),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[]), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "Matrix.empty(1, 0)"),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array)), :to_s)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "Matrix[[1, 2, 3], [4, 5, 6]]"),
            s(:send,
              s(:ivar, :@m1), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "Matrix.empty(0, 0)"),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[]), :inspect)),
          s(:send, nil, :assert_equal,
            s(:str, "Matrix.empty(1, 0)"),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array)), :inspect)))),
      s(:def, :test_scalar_add,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send,
              s(:send,
                s(:ivar, :@m1), :coerce,
                s(:int, 1)), :first)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :+,
                  s(:int, 0))), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:lvar, :s1), :+,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:lvar, :s1), :+,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :s1), :+,
              s(:lvar, :o))))),
      s(:def, :test_scalar_sub,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send,
              s(:send,
                s(:ivar, :@m1), :coerce,
                s(:int, 1)), :first)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :-,
                  s(:int, 0))), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:lvar, :s1), :-,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:lvar, :s1), :-,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 0))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :s1), :-,
              s(:lvar, :o))))),
      s(:def, :test_scalar_mul,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send,
              s(:send,
                s(:ivar, :@m1), :coerce,
                s(:int, 1)), :first)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :*,
                  s(:int, 1))), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Vector), :[],
              s(:int, 2)),
            s(:send,
              s(:lvar, :s1), :*,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 2))),
            s(:send,
              s(:lvar, :s1), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :s1), :*,
              s(:lvar, :o))))),
      s(:def, :test_scalar_div,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send,
              s(:send,
                s(:ivar, :@m1), :coerce,
                s(:int, 1)), :first)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :/,
                  s(:int, 1))), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:lvar, :s1), :/,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:send, nil, :Rational,
                  s(:int, 1),
                  s(:int, 2)))),
            s(:send,
              s(:lvar, :s1), :/,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 2))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :s1), :/,
              s(:lvar, :o))))),
      s(:def, :test_scalar_pow,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send,
              s(:send,
                s(:ivar, :@m1), :coerce,
                s(:int, 1)), :first)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1))),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :s1), :**,
                  s(:int, 1))), :*,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotDefined)),
            s(:args),
            s(:send,
              s(:lvar, :s1), :**,
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:int, 0)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrOperationNotImplemented)),
            s(:args),
            s(:send,
              s(:lvar, :s1), :**,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:array,
                  s(:int, 1))))),
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :coerce,
            s(:args,
              s(:arg, :x)),
            s(:array,
              s(:int, 1),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :s1), :**,
              s(:lvar, :o))))),
      s(:def, :test_hstack,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6),
                s(:int, 5),
                s(:int, 6),
                s(:int, 7),
                s(:int, 4),
                s(:int, 5),
                s(:int, 6))),
            s(:send,
              s(:ivar, :@m1), :hstack,
              s(:ivar, :@n1),
              s(:ivar, :@m1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :hstack,
              s(:int, 42))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Matrix), :hstack,
              s(:int, 42),
              s(:ivar, :@m1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :hstack,
              s(:send,
                s(:const, nil, :Matrix), :identity,
                s(:int, 3)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:ivar, :@e1), :hstack,
              s(:ivar, :@e2))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:send,
              s(:ivar, :@m1), :hstack)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@e1),
            s(:send,
              s(:ivar, :@e1), :hstack,
              s(:ivar, :@e1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 0),
              s(:int, 6)),
            s(:send,
              s(:ivar, :@e2), :hstack,
              s(:ivar, :@e2))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :SubMatrix),
            s(:send,
              s(:send,
                s(:const, nil, :SubMatrix), :hstack,
                s(:ivar, :@e1)), :class)))),
      s(:def, :test_vstack,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 2),
                s(:int, 3),
                s(:int, 4)),
              s(:array,
                s(:int, 5),
                s(:int, 6),
                s(:int, 7)),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6))),
            s(:send,
              s(:ivar, :@m1), :vstack,
              s(:ivar, :@n1),
              s(:ivar, :@m1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :vstack,
              s(:int, 42))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:const, nil, :Matrix), :vstack,
              s(:int, 42),
              s(:ivar, :@m1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:ivar, :@m1), :vstack,
              s(:send,
                s(:const, nil, :Matrix), :identity,
                s(:int, 2)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrDimensionMismatch)),
            s(:args),
            s(:send,
              s(:ivar, :@e1), :vstack,
              s(:ivar, :@e2))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@m1),
            s(:send,
              s(:ivar, :@m1), :vstack)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Matrix), :empty,
              s(:int, 4),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@e1), :vstack,
              s(:ivar, :@e1))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@e2),
            s(:send,
              s(:ivar, :@e2), :vstack,
              s(:ivar, :@e2))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :SubMatrix),
            s(:send,
              s(:send,
                s(:const, nil, :SubMatrix), :vstack,
                s(:ivar, :@e1)), :class)))),
      s(:def, :test_eigenvalues_and_eigenvectors_symmetric,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 8),
                s(:int, 1)),
              s(:array,
                s(:int, 1),
                s(:int, 8)))),
          s(:lvasgn, :values,
            s(:send,
              s(:send,
                s(:lvar, :m), :eigensystem), :eigenvalues)),
          s(:send, nil, :assert_in_epsilon,
            s(:float, 7.0),
            s(:send,
              s(:lvar, :values), :[],
              s(:int, 0))),
          s(:send, nil, :assert_in_epsilon,
            s(:float, 9.0),
            s(:send,
              s(:lvar, :values), :[],
              s(:int, 1))),
          s(:lvasgn, :vectors,
            s(:send,
              s(:send,
                s(:lvar, :m), :eigensystem), :eigenvectors)),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :vectors), :[],
                  s(:int, 0)), :[],
                s(:int, 0)), :-@),
            s(:send,
              s(:send,
                s(:lvar, :vectors), :[],
                s(:int, 0)), :[],
              s(:int, 1))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:send,
                s(:lvar, :vectors), :[],
                s(:int, 1)), :[],
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:lvar, :vectors), :[],
                s(:int, 1)), :[],
              s(:int, 1))))),
      s(:def, :test_eigenvalues_and_eigenvectors_nonsymmetric,
        s(:args),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :Matrix), :[],
              s(:array,
                s(:int, 8),
                s(:int, 1)),
              s(:array,
                s(:int, 4),
                s(:int, 5)))),
          s(:lvasgn, :values,
            s(:send,
              s(:send,
                s(:lvar, :m), :eigensystem), :eigenvalues)),
          s(:send, nil, :assert_in_epsilon,
            s(:float, 9.0),
            s(:send,
              s(:lvar, :values), :[],
              s(:int, 0))),
          s(:send, nil, :assert_in_epsilon,
            s(:float, 4.0),
            s(:send,
              s(:lvar, :values), :[],
              s(:int, 1))),
          s(:lvasgn, :vectors,
            s(:send,
              s(:send,
                s(:lvar, :m), :eigensystem), :eigenvectors)),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:send,
                s(:lvar, :vectors), :[],
                s(:int, 0)), :[],
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:lvar, :vectors), :[],
                s(:int, 0)), :[],
              s(:int, 1))),
          s(:send, nil, :assert_in_epsilon,
            s(:send,
              s(:int, -4), :*,
              s(:send,
                s(:send,
                  s(:lvar, :vectors), :[],
                  s(:int, 1)), :[],
                s(:int, 0))),
            s(:send,
              s(:send,
                s(:lvar, :vectors), :[],
                s(:int, 1)), :[],
              s(:int, 1))))))))
