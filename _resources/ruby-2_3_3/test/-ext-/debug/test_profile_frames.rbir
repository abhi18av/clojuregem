s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/debug")),
  s(:class,
    s(:const, nil, :SampleClassForTestProfileFrames), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :Sample2), nil,
        s(:def, :baz,
          s(:args,
            s(:arg, :block)),
          s(:begin,
            s(:send, nil, :instance_eval,
              s(:str, "def zab(block) block.call end")),
            s(:array,
              s(:self),
              s(:send, nil, :zab,
                s(:lvar, :block)))))),
      s(:defs,
        s(:self), :bar,
        s(:args,
          s(:arg, :block)),
        s(:send,
          s(:send,
            s(:const, nil, :Sample2), :new), :baz,
          s(:lvar, :block))),
      s(:def, :foo,
        s(:args,
          s(:arg, :block)),
        s(:send,
          s(:send,
            s(:self), :class), :bar,
          s(:lvar, :block))))),
  s(:class,
    s(:const, nil, :TestProfileFrames),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_profile_frames,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :obj),
              s(:lvasgn, :frames)),
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Fiber), :new),
                s(:args),
                s(:send,
                  s(:const, nil, :Fiber), :yield,
                  s(:send,
                    s(:send,
                      s(:const, nil, :SampleClassForTestProfileFrames), :new), :foo,
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args),
                      s(:send,
                        s(:const,
                          s(:const, nil, :Bug), :Debug), :profile_frames,
                        s(:int, 0),
                        s(:int, 10)))))), :resume)),
          s(:lvasgn, :labels,
            s(:array,
              s(:str, "test_profile_frames"),
              s(:str, "zab"),
              s(:str, "baz"),
              s(:str, "bar"),
              s(:str, "foo"),
              s(:str, "test_profile_frames"))),
          s(:lvasgn, :base_labels,
            s(:array,
              s(:str, "test_profile_frames"),
              s(:str, "zab"),
              s(:str, "baz"),
              s(:str, "bar"),
              s(:str, "foo"),
              s(:str, "test_profile_frames"))),
          s(:lvasgn, :full_labels,
            s(:array,
              s(:str, "TestProfileFrames#test_profile_frames"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :obj), :inspect)),
                s(:str, ".zab")),
              s(:str, "SampleClassForTestProfileFrames::Sample2#baz"),
              s(:str, "SampleClassForTestProfileFrames.bar"),
              s(:str, "SampleClassForTestProfileFrames#foo"),
              s(:str, "TestProfileFrames#test_profile_frames"))),
          s(:lvasgn, :classes,
            s(:array,
              s(:const, nil, :TestProfileFrames),
              s(:lvar, :obj),
              s(:const,
                s(:const, nil, :SampleClassForTestProfileFrames), :Sample2),
              s(:const, nil, :SampleClassForTestProfileFrames),
              s(:const, nil, :SampleClassForTestProfileFrames),
              s(:const, nil, :TestProfileFrames))),
          s(:lvasgn, :singleton_method_p,
            s(:array,
              s(:false),
              s(:true),
              s(:false),
              s(:true),
              s(:false),
              s(:false),
              s(:false))),
          s(:lvasgn, :method_names,
            s(:array,
              s(:str, "test_profile_frames"),
              s(:str, "zab"),
              s(:str, "baz"),
              s(:str, "bar"),
              s(:str, "foo"),
              s(:str, "test_profile_frames"))),
          s(:lvasgn, :qualified_method_names,
            s(:array,
              s(:str, "TestProfileFrames#test_profile_frames"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :obj), :inspect)),
                s(:str, ".zab")),
              s(:str, "SampleClassForTestProfileFrames::Sample2#baz"),
              s(:str, "SampleClassForTestProfileFrames.bar"),
              s(:str, "SampleClassForTestProfileFrames#foo"),
              s(:str, "TestProfileFrames#test_profile_frames"))),
          s(:lvasgn, :paths,
            s(:array,
              s(:lvasgn, :file,
                s(:str, "(string)")),
              s(:str, "(eval)"),
              s(:lvar, :file),
              s(:lvar, :file),
              s(:lvar, :file),
              s(:lvar, :file))),
          s(:lvasgn, :absolute_paths,
            s(:array,
              s(:lvar, :file),
              s(:nil),
              s(:lvar, :file),
              s(:lvar, :file),
              s(:lvar, :file),
              s(:lvar, :file))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :labels), :size),
            s(:send,
              s(:lvar, :frames), :size)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :frames), :each), :with_index),
            s(:args,
              s(:mlhs,
                s(:arg, :path),
                s(:arg, :absolute_path),
                s(:arg, :label),
                s(:arg, :base_label),
                s(:arg, :full_label),
                s(:arg, :first_lineno),
                s(:arg, :classpath),
                s(:arg, :singleton_p),
                s(:arg, :method_name),
                s(:arg, :qualified_method_name)),
              s(:arg, :i)),
            s(:begin,
              s(:lvasgn, :err_msg,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :i)),
                  s(:str, "th frame"))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :paths), :[],
                  s(:lvar, :i)),
                s(:lvar, :path),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :absolute_paths), :[],
                  s(:lvar, :i)),
                s(:lvar, :absolute_path),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :labels), :[],
                  s(:lvar, :i)),
                s(:lvar, :label),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :base_labels), :[],
                  s(:lvar, :i)),
                s(:lvar, :base_label),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :singleton_method_p), :[],
                  s(:lvar, :i)),
                s(:lvar, :singleton_p),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :method_names), :[],
                  s(:lvar, :i)),
                s(:lvar, :method_name),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_match,
                s(:send,
                  s(:lvar, :qualified_method_names), :[],
                  s(:lvar, :i)),
                s(:lvar, :qualified_method_name),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_match,
                s(:send,
                  s(:lvar, :full_labels), :[],
                  s(:lvar, :i)),
                s(:lvar, :full_label),
                s(:lvar, :err_msg)),
              s(:send, nil, :assert_match,
                s(:send,
                  s(:send,
                    s(:lvar, :classes), :[],
                    s(:lvar, :i)), :inspect),
                s(:lvar, :classpath),
                s(:lvar, :err_msg)),
              s(:if,
                s(:send,
                  s(:lvar, :label), :==,
                  s(:lvar, :method_name)),
                s(:begin,
                  s(:lvasgn, :c,
                    s(:send,
                      s(:lvar, :classes), :[],
                      s(:lvar, :i))),
                  s(:lvasgn, :m,
                    s(:if,
                      s(:lvar, :singleton_p),
                      s(:send,
                        s(:lvar, :c), :method,
                        s(:lvar, :method_name)),
                      s(:send,
                        s(:lvar, :c), :instance_method,
                        s(:lvar, :method_name)))),
                  s(:send, nil, :assert_equal,
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :source_location), :[],
                      s(:int, 1)),
                    s(:lvar, :first_lineno),
                    s(:lvar, :err_msg))), nil))))),
      s(:def, :test_ifunc_frame,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug11851,
            s(:str, "[ruby-core:72409] [Bug #11851]")),
          s(:send, nil, :assert_ruby_status,
            s(:array),
            s(:dstr,
              s(:str, "require '-test-/debug'\n"),
              s(:str, "class A\n"),
              s(:str, "  include Bug::Debug\n"),
              s(:str, "  def x\n"),
              s(:str, "    profile_frames(0, 10)\n"),
              s(:str, "  end\n"),
              s(:str, "end\n"),
              s(:str, "def a\n"),
              s(:str, "  [A.new].each(&:x)\n"),
              s(:str, "end\n"),
              s(:str, "a\n")),
            s(:lvar, :bug11851)))))))
