s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/hash")),
  s(:class,
    s(:const, nil, :TestHash),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:class,
      s(:const, nil, :TestDelete),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:def, :test_delete,
        s(:args),
        s(:begin,
          s(:lvasgn, :hash,
            s(:send,
              s(:const,
                s(:const, nil, :Bug), :Hash), :new)),
          s(:send,
            s(:lvar, :hash), :[]=,
            s(:int, 1),
            s(:int, 2)),
          s(:lvasgn, :called,
            s(:false)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :hash), :size)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:lvar, :hash), :delete!,
                s(:int, 1)),
              s(:args),
              s(:lvasgn, :called,
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:lvar, :called),
            s(:str, "block called")),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :hash), :size)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:block,
              s(:send,
                s(:lvar, :hash), :delete!,
                s(:int, 1)),
              s(:args),
              s(:lvasgn, :called,
                s(:true)))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:lvar, :called),
            s(:str, "block called")),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :hash), :size)))))))
