s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/tracepoint")),
  s(:class,
    s(:const, nil, :TestTracepointObj),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_not_available_from_ruby,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :TracePoint), :trace,
              s(:sym, :obj_new)),
            s(:args), nil))),
      s(:def, :test_tracks_objspace_events,
        s(:args),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:const, nil, :Bug), :tracepoint_track_objspace_events),
              s(:args),
              s(:begin,
                s(:int, 99),
                s(:str, "abc"),
                s(:lvasgn, :_,
                  s(:str, "foobar")),
                s(:send,
                  s(:const, nil, :Object), :new),
                s(:nil)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :newobj_count),
              s(:lvasgn, :free_count),
              s(:lvasgn, :gc_start_count),
              s(:lvasgn, :gc_end_mark_count),
              s(:lvasgn, :gc_end_sweep_count),
              s(:splat,
                s(:lvasgn, :newobjs))),
            s(:array,
              s(:splat,
                s(:lvar, :result)))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:lvar, :newobj_count)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :newobjs), :size)),
          s(:send, nil, :assert_equal,
            s(:str, "foobar"),
            s(:send,
              s(:lvar, :newobjs), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :Object),
            s(:send,
              s(:send,
                s(:lvar, :newobjs), :[],
                s(:int, 1)), :class)),
          s(:send, nil, :assert_operator,
            s(:lvar, :free_count),
            s(:sym, :>=),
            s(:int, 0)),
          s(:send, nil, :assert_operator,
            s(:lvar, :gc_start_count),
            s(:sym, :==),
            s(:lvar, :gc_end_mark_count)),
          s(:send, nil, :assert_operator,
            s(:lvar, :gc_start_count),
            s(:sym, :>=),
            s(:lvar, :gc_end_sweep_count)))),
      s(:def, :test_tracks_objspace_count,
        s(:args),
        s(:begin,
          s(:lvasgn, :stat1,
            s(:hash)),
          s(:lvasgn, :stat2,
            s(:hash)),
          s(:send,
            s(:const, nil, :GC), :disable),
          s(:send,
            s(:const, nil, :GC), :stat,
            s(:lvar, :stat1)),
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:const, nil, :Bug), :tracepoint_track_objspace_events),
              s(:args),
              s(:begin,
                s(:send,
                  s(:const, nil, :GC), :enable),
                s(:block,
                  s(:send,
                    s(:int, 1000000), :times),
                  s(:args),
                  s(:str, "")),
                s(:send,
                  s(:const, nil, :GC), :disable)))),
          s(:send,
            s(:const, nil, :GC), :stat,
            s(:lvar, :stat2)),
          s(:send,
            s(:const, nil, :GC), :enable),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :newobj_count),
              s(:lvasgn, :free_count),
              s(:lvasgn, :gc_start_count),
              s(:lvasgn, :gc_end_mark_count),
              s(:lvasgn, :gc_end_sweep_count),
              s(:splat,
                s(:lvasgn, :newobjs))),
            s(:array,
              s(:splat,
                s(:lvar, :result)))),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:send,
                s(:lvar, :stat2), :[],
                s(:sym, :total_allocated_objects)), :-,
              s(:send,
                s(:lvar, :stat1), :[],
                s(:sym, :total_allocated_objects))),
            s(:sym, :>=),
            s(:lvar, :newobj_count)),
          s(:send, nil, :assert_operator,
            s(:int, 1000000),
            s(:sym, :<=),
            s(:lvar, :newobj_count)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :stat2), :[],
                  s(:sym, :total_freed_objects)), :+,
                s(:send,
                  s(:lvar, :stat2), :[],
                  s(:sym, :heap_final_slots))), :-,
              s(:send,
                s(:lvar, :stat1), :[],
                s(:sym, :total_freed_objects))),
            s(:sym, :>=),
            s(:lvar, :free_count)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:send,
                s(:lvar, :stat2), :[],
                s(:sym, :count)), :-,
              s(:send,
                s(:lvar, :stat1), :[],
                s(:sym, :count))),
            s(:sym, :==),
            s(:lvar, :gc_start_count)),
          s(:send, nil, :assert_operator,
            s(:lvar, :gc_start_count),
            s(:sym, :==),
            s(:lvar, :gc_end_mark_count)),
          s(:send, nil, :assert_operator,
            s(:lvar, :gc_start_count),
            s(:sym, :>=),
            s(:lvar, :gc_end_sweep_count)),
          s(:send, nil, :assert_operator,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :stat2), :[],
                  s(:sym, :count)), :-,
                s(:send,
                  s(:lvar, :stat1), :[],
                  s(:sym, :count))), :-,
              s(:int, 1)),
            s(:sym, :<=),
            s(:lvar, :gc_end_sweep_count)))),
      s(:def, :test_tracepoint_specify_normal_and_internal_events,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :TypeError)),
          s(:args),
          s(:send,
            s(:const, nil, :Bug), :tracepoint_specify_normal_and_internal_events))),
      s(:def, :test_after_gc_start_hook_with_GC_stress,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug8492,
            s(:str, "[ruby-dev:47400] [Bug #8492]: infinite after_gc_start_hook reentrance")),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const,
                s(:const, nil, :Timeout), :Error),
              s(:lvar, :bug8492)),
            s(:args),
            s(:send, nil, :assert_in_out_err,
              s(:array,
                s(:str, "-r-test-/tracepoint")),
              s(:dstr,
                s(:str, "        stress, GC.stress = GC.stress, false\n"),
                s(:str, "        count = 0\n"),
                s(:str, "        Bug.after_gc_start_hook = proc {count += 1}\n"),
                s(:str, "        begin\n"),
                s(:str, "          GC.stress = true\n"),
                s(:str, "          3.times {Object.new}\n"),
                s(:str, "        ensure\n"),
                s(:str, "          GC.stress = stress\n"),
                s(:str, "          Bug.after_gc_start_hook = nil\n"),
                s(:str, "        end\n"),
                s(:str, "        puts count\n")),
              s(:regexp,
                s(:str, "\\A[1-9]"),
                s(:regopt)),
              s(:hash,
                s(:pair,
                  s(:sym, :timeout),
                  s(:int, 2))))))))))
