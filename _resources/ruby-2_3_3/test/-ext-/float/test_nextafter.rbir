s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/float")),
  s(:class,
    s(:const, nil, :TestFloatExt),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :NEXTAFTER_VALUES,
        s(:array,
          s(:send,
            s(:const,
              s(:const, nil, :Float), :INFINITY), :-@),
          s(:send,
            s(:const,
              s(:const, nil, :Float), :MAX), :-@),
          s(:float, -100.0),
          s(:send,
            s(:float, -1.0), :-,
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:float, -1.0),
          s(:send,
            s(:const,
              s(:const, nil, :Float), :EPSILON), :-@),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Float), :MIN), :-@), :/,
            s(:int, 2)),
          s(:send,
            s(:send,
              s(:const, nil, :Math), :ldexp,
              s(:float, 0.5),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :MIN_EXP), :-,
                  s(:const,
                    s(:const, nil, :Float), :MANT_DIG)), :+,
                s(:int, 1))), :-@),
          s(:float, -0.0),
          s(:float, 0.0),
          s(:send,
            s(:const, nil, :Math), :ldexp,
            s(:float, 0.5),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Float), :MIN_EXP), :-,
                s(:const,
                  s(:const, nil, :Float), :MANT_DIG)), :+,
              s(:int, 1))),
          s(:send,
            s(:const,
              s(:const, nil, :Float), :MIN), :/,
            s(:int, 2)),
          s(:const,
            s(:const, nil, :Float), :MIN),
          s(:const,
            s(:const, nil, :Float), :EPSILON),
          s(:float, 1.0),
          s(:send,
            s(:float, 1.0), :+,
            s(:const,
              s(:const, nil, :Float), :EPSILON)),
          s(:float, 100.0),
          s(:const,
            s(:const, nil, :Float), :MAX),
          s(:const,
            s(:const, nil, :Float), :INFINITY),
          s(:const,
            s(:const, nil, :Float), :NAN))),
      s(:lvasgn, :test_number,
        s(:int, 0)),
      s(:block,
        s(:send,
          s(:const, nil, :NEXTAFTER_VALUES), :each),
        s(:args,
          s(:arg, :n1)),
        s(:block,
          s(:send,
            s(:const, nil, :NEXTAFTER_VALUES), :each),
          s(:args,
            s(:arg, :n2)),
          s(:begin,
            s(:lvasgn, :tag,
              s(:if,
                s(:send,
                  s(:lvar, :n2), :infinite?),
                s(:str, "ruby"),
                s(:str, "other"))),
            s(:lvasgn, :test_name,
              s(:dstr,
                s(:str, "test_nextafter_"),
                s(:begin,
                  s(:lvar, :test_number)),
                s(:str, "_"),
                s(:begin,
                  s(:lvar, :tag)),
                s(:str, "_"),
                s(:begin,
                  s(:lvar, :n1)),
                s(:str, "_"),
                s(:begin,
                  s(:lvar, :n2)))),
            s(:op_asgn,
              s(:lvasgn, :test_number), :+,
              s(:int, 1)),
            s(:block,
              s(:send, nil, :define_method,
                s(:lvar, :test_name)),
              s(:args),
              s(:begin,
                s(:lvasgn, :v1,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Bug), :Float), :missing_nextafter,
                    s(:lvar, :n1),
                    s(:lvar, :n2))),
                s(:lvasgn, :v2,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Bug), :Float), :system_nextafter,
                    s(:lvar, :n1),
                    s(:lvar, :n2))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Float),
                  s(:lvar, :v1)),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Float),
                  s(:lvar, :v2)),
                s(:if,
                  s(:send,
                    s(:lvar, :v1), :nan?),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:lvar, :v2), :nan?),
                    s(:dstr,
                      s(:str, "Bug::Float.system_nextafter("),
                      s(:begin,
                        s(:lvar, :n1)),
                      s(:str, ", "),
                      s(:begin,
                        s(:lvar, :n2)),
                      s(:str, ").nan?"))),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:lvar, :v1),
                      s(:lvar, :v2),
                      s(:send,
                        s(:dstr,
                          s(:str, "Bug::Float.missing_nextafter("),
                          s(:begin,
                            s(:send,
                              s(:str, "%a"), :%,
                              s(:lvar, :n1))),
                          s(:str, ", "),
                          s(:begin,
                            s(:send,
                              s(:str, "%a"), :%,
                              s(:lvar, :n2))),
                          s(:str, ") = "),
                          s(:begin,
                            s(:send,
                              s(:str, "%a"), :%,
                              s(:lvar, :v1))),
                          s(:str, " != ")), :+,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:str, "%a"), :%,
                              s(:lvar, :v2))),
                          s(:str, " = Bug::Float.system_nextafter("),
                          s(:begin,
                            s(:send,
                              s(:str, "%a"), :%,
                              s(:lvar, :n1))),
                          s(:str, ", "),
                          s(:begin,
                            s(:send,
                              s(:str, "%a"), :%,
                              s(:lvar, :n2))),
                          s(:str, ")")))),
                    s(:if,
                      s(:send,
                        s(:lvar, :v1), :==,
                        s(:int, 0)),
                      s(:begin,
                        s(:lvasgn, :s1,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:float, 1.0), :/,
                                s(:lvar, :v1)), :<,
                              s(:int, 0)),
                            s(:str, "negative-zero"),
                            s(:str, "positive-zero"))),
                        s(:lvasgn, :s2,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:float, 1.0), :/,
                                s(:lvar, :v2)), :<,
                              s(:int, 0)),
                            s(:str, "negative-zero"),
                            s(:str, "positive-zero"))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send, nil, :assert_equal,
                              s(:lvar, :s1),
                              s(:lvar, :s2),
                              s(:send,
                                s(:dstr,
                                  s(:str, "Bug::Float.missing_nextafter("),
                                  s(:begin,
                                    s(:send,
                                      s(:str, "%a"), :%,
                                      s(:lvar, :n1))),
                                  s(:str, ", "),
                                  s(:begin,
                                    s(:send,
                                      s(:str, "%a"), :%,
                                      s(:lvar, :n2))),
                                  s(:str, ") = "),
                                  s(:begin,
                                    s(:send,
                                      s(:str, "%a"), :%,
                                      s(:lvar, :v1))),
                                  s(:str, " != ")), :+,
                                s(:dstr,
                                  s(:begin,
                                    s(:send,
                                      s(:str, "%a"), :%,
                                      s(:lvar, :v2))),
                                  s(:str, " = Bug::Float.system_nextafter("),
                                  s(:begin,
                                    s(:send,
                                      s(:str, "%a"), :%,
                                      s(:lvar, :n1))),
                                  s(:str, ", "),
                                  s(:begin,
                                    s(:send,
                                      s(:str, "%a"), :%,
                                      s(:lvar, :n2))),
                                  s(:str, ")")))),
                            s(:resbody,
                              s(:array,
                                s(:const,
                                  s(:const, nil, :Minitest), :Assertion)), nil,
                              s(:begin,
                                s(:if,
                                  s(:match_with_lvasgn,
                                    s(:regexp,
                                      s(:str, "aix"),
                                      s(:regopt)),
                                    s(:const, nil, :RUBY_PLATFORM)),
                                  s(:send, nil, :skip,
                                    s(:str, "Known bug in nextafter(3) on AIX")), nil),
                                s(:send, nil, :raise,
                                  s(:gvar, :$!)))), nil))), nil)))))))))))
