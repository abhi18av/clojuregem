s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "-test-/popen_deadlock/infinite_loop_dlsym")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil,
        s(:lvasgn, :skip,
          s(:true))), nil)),
  s(:if,
    s(:lvar, :skip), nil,
    s(:class,
      s(:const, nil, :TestPopenDeadlock),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :assert_popen_without_deadlock,
          s(:args),
          s(:send, nil, :assert_separately,
            s(:array),
            s(:dstr,
              s(:str, "        require '-test-/popen_deadlock/infinite_loop_dlsym'\n"),
              s(:str, "\n"),
              s(:str, "        bug = '11265'.freeze\n"),
              s(:str, "        begin\n"),
              s(:str, "          t = Thread.new {\n"),
              s(:str, "            Thread.current.__infinite_loop_dlsym__(\"_ex_unwind\")\n"),
              s(:str, "          }\n"),
              s(:str, "          str = IO.popen([ 'echo', bug ], 'r+') { |io| io.read }\n"),
              s(:str, "          assert_equal(bug, str.chomp)\n"),
              s(:str, "        ensure\n"),
              s(:str, "          t.kill if t\n"),
              s(:str, "        end\n")),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 90))))),
        s(:send, nil, :private,
          s(:sym, :assert_popen_without_deadlock)),
        s(:block,
          s(:send,
            s(:int, 10), :times),
          s(:args,
            s(:arg, :i)),
          s(:block,
            s(:send, nil, :define_method,
              s(:dstr,
                s(:str, "test_popen_without_deadlock_"),
                s(:begin,
                  s(:lvar, :i)))),
            s(:args),
            s(:send, nil, :assert_popen_without_deadlock)))))))
