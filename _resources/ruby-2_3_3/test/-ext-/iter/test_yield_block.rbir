s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/iter")),
  s(:module,
    s(:const, nil, :TestIter), nil),
  s(:class,
    s(:const,
      s(:const, nil, :TestIter), :YieldBlock),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :YieldTest), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const,
                s(:const, nil, :Bug), :Iter), :Yield)),
          s(:send, nil, :attr_reader,
            s(:sym, :blockarg)),
          s(:def, :test,
            s(:args,
              s(:arg, :arg),
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:lvar, :block), :call,
                s(:lvar, :arg)),
              s(:args,
                s(:arg, :blockarg)),
              s(:ivasgn, :@blockarg,
                s(:lvar, :blockarg)))))),
      s(:def, :test_yield_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const, nil, :YieldTest), :new)),
          s(:block,
            s(:send,
              s(:lvar, :a), :yield_block,
              s(:sym, :test),
              s(:str, "foo")),
            s(:args,
              s(:arg, :x),
              s(:blockarg, :b)),
            s(:begin,
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Proc),
                s(:lvar, :b)),
              s(:send,
                s(:lvar, :b), :call,
                s(:lvar, :x)))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :a), :blockarg)))))))
