s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/string")),
  s(:class,
    s(:const, nil, :Test_StrEncAssociate),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_frozen,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:const,
                s(:const, nil, :Bug), :String), :new,
              s(:str, "abc"))),
          s(:send,
            s(:lvar, :s), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII)),
          s(:send,
            s(:lvar, :s), :freeze),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :s), :associate_encoding!,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :s), :associate_encoding!,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8))))),
      s(:block,
        s(:send,
          s(:send,
            s(:send,
              s(:const, nil, :Encoding), :list), :select,
            s(:block_pass,
              s(:sym, :dummy?))), :each),
        s(:args,
          s(:arg, :enc)),
        s(:begin,
          s(:lvasgn, :enc,
            s(:send,
              s(:send,
                s(:lvar, :enc), :name), :tr,
              s(:str, "-"),
              s(:str, "_"))),
          s(:block,
            s(:send, nil, :define_method,
              s(:dstr,
                s(:str, "test_dummy_encoding_index_"),
                s(:begin,
                  s(:lvar, :enc)))),
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-r-test-/string"),
                s(:str, "-"),
                s(:lvar, :enc)),
              s(:dstr,
                s(:str, "        enc = Encoding.const_get(ARGV[0])\n"),
                s(:str, "        index = Bug::String.encoding_index(enc)\n"),
                s(:str, "        assert(index < 0xffff, \"<%#x> expected but was\n<%#x>\" % [index & 0xffff, index])\n")))))))))
