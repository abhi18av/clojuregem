s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/string")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:if,
    s(:send,
      s(:const,
        s(:const, nil, :Bug), :String), :method_defined?,
      s(:sym, :normalize_ospath)),
    s(:class,
      s(:const, nil, :Test_StringNormalize),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_normalize,
          s(:args),
          s(:block,
            s(:send,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "      が が\n"),
                s(:str, "      ぷ ぷ\n"),
                s(:str, "      わ゙ わ゙\n"),
                s(:str, "      ヴ ヴ\n"),
                s(:str, "      ポ ポ\n"),
                s(:str, "      カ〺 カ〺\n"),
                s(:str, "      Á Á\n"),
                s(:str, "      B̊ B̊\n"),
                s(:str, "      Ά Ά\n"),
                s(:str, "      ϓ ϓ\n"),
                s(:str, "      Ё Ё\n"),
                s(:str, "      ≠ ≠\n"),
                s(:str, "      안 안\n"),
                s(:str, "    ")), :scan,
              s(:regexp,
                s(:str, "(\\S+)\\s+(\\S+)"),
                s(:regopt))),
            s(:args,
              s(:arg, :expected),
              s(:arg, :src)),
            s(:begin,
              s(:lvasgn, :result,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Bug), :String), :new,
                    s(:lvar, :src)), :normalize_ospath)),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:lvar, :result),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :expected), :dump)),
                  s(:str, " is expected but "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :src), :dump))))))),
        s(:def, :test_not_normalize_kc,
          s(:args),
          s(:block,
            s(:send,
              s(:send,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      ①\n"),
                  s(:str, "      Ⅲ\n"),
                  s(:str, "      ㍉\n"),
                  s(:str, "      ㎡\n"),
                  s(:str, "      ㍻\n"),
                  s(:str, "      №\n"),
                  s(:str, "      ㏍\n"),
                  s(:str, "      ℡\n"),
                  s(:str, "      ㊤\n"),
                  s(:str, "      ㈱\n"),
                  s(:str, "    ")), :split), :each),
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:lvasgn, :result,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Bug), :String), :new,
                    s(:lvar, :src)), :normalize_ospath)),
              s(:send, nil, :assert_equal,
                s(:lvar, :src),
                s(:lvar, :result),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :src), :dump)),
                  s(:str, " is expected not to be normalized, but "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :result), :dump))))))),
        s(:def, :test_dont_normalize_hfsplus,
          s(:args),
          s(:block,
            s(:send,
              s(:send,
                s(:dstr,
                  s(:str, "\n"),
                  s(:str, "      ↚\n"),
                  s(:str, "      ↚\n"),
                  s(:str, "      Å\n"),
                  s(:str, "      金\n"),
                  s(:str, "      林\n"),
                  s(:str, "      率 率\n"),
                  s(:str, "      說 \n"),
                  s(:str, "      洛 樂 樂\n"),
                  s(:str, "      兀\n"),
                  s(:str, "      塚\n"),
                  s(:str, "      神\n"),
                  s(:str, "      都\n"),
                  s(:str, "    ")), :split), :each),
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:lvasgn, :result,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Bug), :String), :new,
                    s(:lvar, :src)), :normalize_ospath)),
              s(:send, nil, :assert_equal,
                s(:lvar, :src),
                s(:lvar, :result),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :src), :dump)),
                  s(:str, " is expected not to be normalized, but "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :result), :dump))))))),
        s(:def, :test_invalid_sequence,
          s(:args),
          s(:send, nil, :assert_separately,
            s(:array,
              s(:str, "-r-test-/string")),
            s(:str, "      assert_equal(\"\\u{fffd}\", Bug::String.new(\"\\xff\").normalize_ospath)\n"))))), nil))
