s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/symbol")),
  s(:module,
    s(:const, nil, :Test_Symbol),
    s(:class,
      s(:const, nil, :TestType),
      s(:const,
        s(:const,
          s(:const, nil, :Test), :Unit), :TestCase),
      s(:begin,
        s(:def, :test_id2str_fstring_bug9171,
          s(:args),
          s(:begin,
            s(:lvasgn, :fstr,
              s(:send, nil, :eval,
                s(:dstr,
                  s(:str, "# encoding: us-ascii\n"),
                  s(:str, "        'foobar'.freeze")))),
            s(:send, nil, :assert_same,
              s(:lvar, :fstr),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :id2str,
                s(:sym, :foobar))),
            s(:lvasgn, :fstr,
              s(:send, nil, :eval,
                s(:dstr,
                  s(:str, "# encoding: us-ascii\n"),
                  s(:str, "        '>'.freeze")))),
            s(:send, nil, :assert_same,
              s(:lvar, :fstr),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :id2str,
                s(:sym, :>))))),
        s(:def, :assert_symtype,
          s(:args,
            s(:arg, :sym),
            s(:arg, :pred),
            s(:optarg, :msg,
              s(:nil))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:const,
                s(:const, nil, :Bug), :Symbol),
              s(:lvar, :pred),
              s(:lvar, :sym)),
            s(:lvar, :msg))),
        s(:def, :assert_not_symtype,
          s(:args,
            s(:arg, :sym),
            s(:arg, :pred),
            s(:optarg, :msg,
              s(:nil))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:const,
                s(:const, nil, :Bug), :Symbol),
              s(:lvar, :pred),
              s(:lvar, :sym)),
            s(:lvar, :msg))),
        s(:def, :test_const,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_symtype,
              s(:str, "Foo"),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "F!"),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo"),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@foo"),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@foo"),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "$foo"),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo="),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "[foo]"),
              s(:sym, :const?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "xFoo"),
              s(:sym, :const?)))),
        s(:def, :test_local,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_symtype,
              s(:str, "foo"),
              s(:sym, :local?)),
            s(:send, nil, :assert_symtype,
              s(:str, "fooBar"),
              s(:sym, :local?)),
            s(:send, nil, :assert_symtype,
              s(:str, "foo_bar"),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo!"),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo?"),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "Foo"),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@foo"),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@foo"),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "$foo"),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo="),
              s(:sym, :local?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "[foo]"),
              s(:sym, :local?)))),
        s(:def, :test_global,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_symtype,
              s(:str, "$foo"),
              s(:sym, :global?)),
            s(:send, nil, :assert_symtype,
              s(:str, "$$"),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "$()"),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "$"),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo"),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "Foo"),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@foo"),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@foo"),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo="),
              s(:sym, :global?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "[foo]"),
              s(:sym, :global?)))),
        s(:def, :test_instance,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_symtype,
              s(:str, "@foo"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@1"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "Foo"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@foo"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "$foo"),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo="),
              s(:sym, :instance?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "[foo]"),
              s(:sym, :instance?)))),
        s(:def, :test_class,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_symtype,
              s(:str, "@@foo"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@1"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "Foo"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@foo"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "$foo"),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo="),
              s(:sym, :class?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "[foo]"),
              s(:sym, :class?)))),
        s(:def, :test_attrset,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_symtype,
              s(:str, "foo="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "Foo="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "@foo="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "@@foo="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "$foo="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "0="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "@="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "@@="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "foo"),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "Foo"),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@foo"),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "@@foo"),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "$foo"),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_not_symtype,
              s(:str, "[foo]"),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_symtype,
              s(:str, "[foo]="),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :foo=),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "foo"))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "foo")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :Foo=),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "Foo"))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "Foo")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :"@foo="),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "@foo"))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "@foo")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :"@@foo="),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "@@foo"))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "@@foo")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :"$foo="),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "$foo"))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "$foo")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :[foo]=),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "[foo]"))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "[foo]")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :[]=),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:sym, :[]))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "foo?=")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :"foo?="),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:sym, :foo?))),
            s(:send, nil, :assert_symtype,
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:str, "foo!=")),
              s(:sym, :attrset?)),
            s(:send, nil, :assert_equal,
              s(:sym, :"foo!="),
              s(:send,
                s(:const,
                  s(:const, nil, :Bug), :Symbol), :attrset,
                s(:sym, :foo!))))),
        s(:def, :test_check_id_invalid_type,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:begin,
              s(:lvasgn, :cx,
                s(:send,
                  s(:const, nil, :EnvUtil), :labeled_class,
                  s(:str, "X🐱"))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, "X\\u{1F431}"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Bug), :Symbol), :pinneddown?,
                  s(:lvar, :cx)))))),
        s(:def, :test_check_symbol_invalid_type,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :EnvUtil), :with_default_external,
              s(:const,
                s(:const, nil, :Encoding), :UTF_8)),
            s(:args),
            s(:begin,
              s(:lvasgn, :cx,
                s(:send,
                  s(:const, nil, :EnvUtil), :labeled_class,
                  s(:str, "X🐱"))),
              s(:block,
                s(:send, nil, :assert_raise_with_message,
                  s(:const, nil, :TypeError),
                  s(:regexp,
                    s(:str, "X\\u{1F431}"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Bug), :Symbol), :find,
                  s(:lvar, :cx))))))))))
