s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "-test-/st/foreach")),
  s(:class,
    s(:const, nil, :Test_StForeachUnpack),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test_st_foreach_check_unpack,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Bug), :unp_st_foreach_check,
              s(:sym, :check)),
            s(:str, "goto unpacked_continue")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Bug), :unp_st_foreach_check,
              s(:sym, :delete1)),
            s(:str, "goto unpacked")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Bug), :unp_st_foreach_check,
              s(:sym, :delete2)),
            s(:str, "goto deleted")))),
      s(:def, :test_st_foreach_unpack,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Bug), :unp_st_foreach,
              s(:sym, :unpacked)),
            s(:str, "goto unpacked")),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const, nil, :Bug), :unp_st_foreach,
              s(:sym, :unpack_delete)),
            s(:str, "if (!ptr) return 0")))))))
