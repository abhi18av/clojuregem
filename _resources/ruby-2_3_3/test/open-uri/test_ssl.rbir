s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "open-uri")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "openssl")),
        s(:send, nil, :require,
          s(:str, "webrick/https")),
        s(:send, nil, :require_relative,
          s(:str, "../openssl/utils"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "webrick/httpproxy")),
  s(:class,
    s(:const, nil, :TestOpenURISSL),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase), nil),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:class,
      s(:const, nil, :TestOpenURISSL), nil,
      s(:begin,
        s(:casgn, nil, :NullLog,
          s(:send,
            s(:const, nil, :Object), :new)),
        s(:defs,
          s(:const, nil, :NullLog), :<<,
          s(:args,
            s(:arg, :arg)), nil),
        s(:def, :with_https,
          s(:args,
            s(:optarg, :log_tester,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :log)),
                s(:send, nil, :assert_equal,
                  s(:array),
                  s(:lvar, :log))))),
          s(:begin,
            s(:lvasgn, :log,
              s(:array)),
            s(:lvasgn, :logger,
              s(:send,
                s(:const,
                  s(:const, nil, :WEBrick), :Log), :new,
                s(:lvar, :log),
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :BasicLog), :WARN))),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir),
              s(:args,
                s(:arg, :dr)),
              s(:begin,
                s(:lvasgn, :srv,
                  s(:send,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPServer), :new,
                    s(:hash,
                      s(:pair,
                        s(:sym, :DocumentRoot),
                        s(:lvar, :dr)),
                      s(:pair,
                        s(:sym, :ServerType),
                        s(:const, nil, :Thread)),
                      s(:pair,
                        s(:sym, :Logger),
                        s(:lvar, :logger)),
                      s(:pair,
                        s(:sym, :AccessLog),
                        s(:array,
                          s(:array,
                            s(:const, nil, :NullLog),
                            s(:str, "")))),
                      s(:pair,
                        s(:sym, :SSLEnable),
                        s(:true)),
                      s(:pair,
                        s(:sym, :SSLCertificate),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                          s(:const, nil, :SERVER_CERT))),
                      s(:pair,
                        s(:sym, :SSLPrivateKey),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                          s(:const, nil, :SERVER_KEY))),
                      s(:pair,
                        s(:sym, :SSLTmpDhCallback),
                        s(:block,
                          s(:send, nil, :proc),
                          s(:args),
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :TestUtils), :TEST_KEY_DH1024))),
                      s(:pair,
                        s(:sym, :BindAddress),
                        s(:str, "127.0.0.1")),
                      s(:pair,
                        s(:sym, :Port),
                        s(:int, 0))))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :_),
                    s(:lvasgn, :port),
                    s(:lvasgn, :_),
                    s(:lvasgn, :host)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :srv), :listeners), :[],
                      s(:int, 0)), :addr)),
                s(:lvasgn, :threads,
                  s(:array)),
                s(:lvasgn, :server_thread,
                  s(:send,
                    s(:lvar, :srv), :start)),
                s(:send,
                  s(:lvar, :threads), :<<,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :server_thread), :join),
                      s(:if,
                        s(:lvar, :log_tester),
                        s(:send,
                          s(:lvar, :log_tester), :call,
                          s(:lvar, :log)), nil)))),
                s(:send,
                  s(:lvar, :threads), :<<,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:kwbegin,
                      s(:ensure,
                        s(:yield,
                          s(:lvar, :srv),
                          s(:lvar, :dr),
                          s(:dstr,
                            s(:str, "https://"),
                            s(:begin,
                              s(:lvar, :host)),
                            s(:str, ":"),
                            s(:begin,
                              s(:lvar, :port))),
                          s(:lvar, :server_thread),
                          s(:lvar, :log),
                          s(:lvar, :threads)),
                        s(:send,
                          s(:lvar, :srv), :shutdown))))),
                s(:send, nil, :assert_join_threads,
                  s(:lvar, :threads)))))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:ivasgn, :@proxies,
              s(:array,
                s(:str, "http_proxy"),
                s(:str, "HTTP_PROXY"),
                s(:str, "https_proxy"),
                s(:str, "HTTPS_PROXY"),
                s(:str, "ftp_proxy"),
                s(:str, "FTP_PROXY"),
                s(:str, "no_proxy"))),
            s(:ivasgn, :@old_proxies,
              s(:block,
                s(:send,
                  s(:ivar, :@proxies), :map),
                s(:args,
                  s(:arg, :k)),
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:lvar, :k)))),
            s(:block,
              s(:send,
                s(:ivar, :@proxies), :each),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:lvar, :k),
                s(:nil))))),
        s(:def, :teardown,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@proxies), :each_with_index),
            s(:args,
              s(:arg, :k),
              s(:arg, :i)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:lvar, :k),
              s(:send,
                s(:ivar, :@old_proxies), :[],
                s(:lvar, :i))))),
        s(:def, :setup_validation,
          s(:args,
            s(:arg, :srv),
            s(:arg, :dr)),
          s(:begin,
            s(:lvasgn, :cacert_filename,
              s(:dstr,
                s(:begin,
                  s(:lvar, :dr)),
                s(:str, "/cacert.pem"))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :cacert_filename),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :<<,
                s(:const, nil, :CA_CERT))),
            s(:send,
              s(:lvar, :srv), :mount_proc,
              s(:str, "/data"),
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :res)),
                s(:send,
                  s(:lvar, :res), :body=,
                  s(:str, "ddd")))),
            s(:lvar, :cacert_filename))),
        s(:def, :test_validation_success,
          s(:args),
          s(:block,
            s(:send, nil, :with_https),
            s(:args,
              s(:arg, :srv),
              s(:arg, :dr),
              s(:arg, :url)),
            s(:begin,
              s(:lvasgn, :cacert_filename,
                s(:send, nil, :setup_validation,
                  s(:lvar, :srv),
                  s(:lvar, :dr))),
              s(:block,
                s(:send, nil, :open,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :url)),
                    s(:str, "/data")),
                  s(:hash,
                    s(:pair,
                      s(:sym, :ssl_ca_cert),
                      s(:lvar, :cacert_filename)))),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:str, "200"),
                    s(:send,
                      s(:send,
                        s(:lvar, :f), :status), :[],
                      s(:int, 0))),
                  s(:send, nil, :assert_equal,
                    s(:str, "ddd"),
                    s(:send,
                      s(:lvar, :f), :read))))))),
        s(:def, :test_validation_noverify,
          s(:args),
          s(:block,
            s(:send, nil, :with_https),
            s(:args,
              s(:arg, :srv),
              s(:arg, :dr),
              s(:arg, :url)),
            s(:begin,
              s(:send, nil, :setup_validation,
                s(:lvar, :srv),
                s(:lvar, :dr)),
              s(:block,
                s(:send, nil, :open,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :url)),
                    s(:str, "/data")),
                  s(:hash,
                    s(:pair,
                      s(:sym, :ssl_verify_mode),
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE)))),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:str, "200"),
                    s(:send,
                      s(:send,
                        s(:lvar, :f), :status), :[],
                      s(:int, 0))),
                  s(:send, nil, :assert_equal,
                    s(:str, "ddd"),
                    s(:send,
                      s(:lvar, :f), :read))))))),
        s(:def, :test_validation_failure,
          s(:args),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "mswin|mingw"),
                  s(:regopt)),
                s(:const, nil, :RUBY_PLATFORM)), nil,
              s(:lvasgn, :log_tester,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :server_log)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:int, 1),
                      s(:send,
                        s(:lvar, :server_log), :length)),
                    s(:send, nil, :assert_match,
                      s(:regexp,
                        s(:str, "ERROR OpenSSL::SSL::SSLError:"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :server_log), :[],
                        s(:int, 0))))))),
            s(:block,
              s(:send, nil, :with_https,
                s(:lvar, :log_tester)),
              s(:args,
                s(:arg, :srv),
                s(:arg, :dr),
                s(:arg, :url),
                s(:arg, :server_thread),
                s(:arg, :server_log)),
              s(:begin,
                s(:send, nil, :setup_validation,
                  s(:lvar, :srv),
                  s(:lvar, :dr)),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLError)),
                  s(:args),
                  s(:block,
                    s(:send, nil, :open,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :url)),
                        s(:str, "/data"))),
                    s(:args), nil)))))),
        s(:def, :with_https_proxy,
          s(:args,
            s(:optarg, :proxy_log_tester,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :proxy_log),
                  s(:arg, :proxy_access_log)),
                s(:send, nil, :assert_equal,
                  s(:array),
                  s(:lvar, :proxy_log))))),
          s(:begin,
            s(:lvasgn, :proxy_log,
              s(:array)),
            s(:lvasgn, :proxy_logger,
              s(:send,
                s(:const,
                  s(:const, nil, :WEBrick), :Log), :new,
                s(:lvar, :proxy_log),
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :BasicLog), :WARN))),
            s(:block,
              s(:send, nil, :with_https),
              s(:args,
                s(:arg, :srv),
                s(:arg, :dr),
                s(:arg, :url),
                s(:arg, :server_thread),
                s(:arg, :server_log),
                s(:arg, :threads)),
              s(:begin,
                s(:send,
                  s(:lvar, :srv), :mount_proc,
                  s(:str, "/proxy"),
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :req),
                      s(:arg, :res)),
                    s(:send,
                      s(:lvar, :res), :body=,
                      s(:str, "proxy")))),
                s(:lvasgn, :cacert_filename,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :dr)),
                    s(:str, "/cacert.pem"))),
                s(:block,
                  s(:send, nil, :open,
                    s(:lvar, :cacert_filename),
                    s(:str, "w")),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:lvar, :f), :<<,
                    s(:const, nil, :CA_CERT))),
                s(:lvasgn, :cacert_directory,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :dr)),
                    s(:str, "/certs"))),
                s(:send,
                  s(:const, nil, :Dir), :mkdir,
                  s(:lvar, :cacert_directory)),
                s(:lvasgn, :hashed_name,
                  s(:send,
                    s(:str, "%08x.0"), :%,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                          s(:const, nil, :CA_CERT)), :subject), :hash))),
                s(:block,
                  s(:send, nil, :open,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :cacert_directory)),
                      s(:str, "/"),
                      s(:begin,
                        s(:lvar, :hashed_name))),
                    s(:str, "w")),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:lvar, :f), :<<,
                    s(:const, nil, :CA_CERT))),
                s(:lvasgn, :proxy,
                  s(:send,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPProxyServer), :new,
                    s(:hash,
                      s(:pair,
                        s(:sym, :ServerType),
                        s(:const, nil, :Thread)),
                      s(:pair,
                        s(:sym, :Logger),
                        s(:lvar, :proxy_logger)),
                      s(:pair,
                        s(:sym, :AccessLog),
                        s(:array,
                          s(:array,
                            s(:lvasgn, :proxy_access_log,
                              s(:array)),
                            s(:const,
                              s(:const,
                                s(:const, nil, :WEBrick), :AccessLog), :COMMON_LOG_FORMAT)))),
                      s(:pair,
                        s(:sym, :BindAddress),
                        s(:str, "127.0.0.1")),
                      s(:pair,
                        s(:sym, :Port),
                        s(:int, 0))))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :_),
                    s(:lvasgn, :proxy_port),
                    s(:lvasgn, :_),
                    s(:lvasgn, :proxy_host)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :proxy), :listeners), :[],
                      s(:int, 0)), :addr)),
                s(:lvasgn, :proxy_thread,
                  s(:send,
                    s(:lvar, :proxy), :start)),
                s(:send,
                  s(:lvar, :threads), :<<,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :proxy_thread), :join),
                      s(:if,
                        s(:lvar, :proxy_log_tester),
                        s(:send,
                          s(:lvar, :proxy_log_tester), :call,
                          s(:lvar, :proxy_log),
                          s(:lvar, :proxy_access_log)), nil)))),
                s(:kwbegin,
                  s(:ensure,
                    s(:yield,
                      s(:lvar, :srv),
                      s(:lvar, :dr),
                      s(:lvar, :url),
                      s(:lvar, :cacert_filename),
                      s(:lvar, :cacert_directory),
                      s(:lvar, :proxy_host),
                      s(:lvar, :proxy_port)),
                    s(:send,
                      s(:lvar, :proxy), :shutdown))))))),
        s(:def, :test_proxy_cacert_file,
          s(:args),
          s(:begin,
            s(:lvasgn, :url,
              s(:nil)),
            s(:lvasgn, :proxy_log_tester,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :proxy_log),
                  s(:arg, :proxy_access_log)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:send,
                      s(:lvar, :proxy_access_log), :length)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "CONNECT "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :url), :sub,
                          s(:regexp,
                            s(:str, "\\Ahttps://"),
                            s(:regopt)),
                          s(:str, ""))),
                      s(:str, " "),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :proxy_access_log), :[],
                      s(:int, 0))),
                  s(:send, nil, :assert_equal,
                    s(:array),
                    s(:lvar, :proxy_log))))),
            s(:block,
              s(:send, nil, :with_https_proxy,
                s(:lvar, :proxy_log_tester)),
              s(:args,
                s(:arg, :srv),
                s(:arg, :dr),
                s(:arg, :url_),
                s(:arg, :cacert_filename),
                s(:arg, :cacert_directory),
                s(:arg, :proxy_host),
                s(:arg, :proxy_port)),
              s(:begin,
                s(:lvasgn, :url,
                  s(:lvar, :url_)),
                s(:block,
                  s(:send, nil, :open,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :url)),
                      s(:str, "/proxy")),
                    s(:hash,
                      s(:pair,
                        s(:sym, :proxy),
                        s(:dstr,
                          s(:str, "http://"),
                          s(:begin,
                            s(:lvar, :proxy_host)),
                          s(:str, ":"),
                          s(:begin,
                            s(:lvar, :proxy_port)),
                          s(:str, "/"))),
                      s(:pair,
                        s(:sym, :ssl_ca_cert),
                        s(:lvar, :cacert_filename)))),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:str, "200"),
                      s(:send,
                        s(:send,
                          s(:lvar, :f), :status), :[],
                        s(:int, 0))),
                    s(:send, nil, :assert_equal,
                      s(:str, "proxy"),
                      s(:send,
                        s(:lvar, :f), :read)))))))),
        s(:def, :test_proxy_cacert_dir,
          s(:args),
          s(:begin,
            s(:lvasgn, :url,
              s(:nil)),
            s(:lvasgn, :proxy_log_tester,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :proxy_log),
                  s(:arg, :proxy_access_log)),
                s(:begin,
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:send,
                      s(:lvar, :proxy_access_log), :length)),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "CONNECT "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :url), :sub,
                          s(:regexp,
                            s(:str, "\\Ahttps://"),
                            s(:regopt)),
                          s(:str, ""))),
                      s(:str, " "),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :proxy_access_log), :[],
                      s(:int, 0))),
                  s(:send, nil, :assert_equal,
                    s(:array),
                    s(:lvar, :proxy_log))))),
            s(:block,
              s(:send, nil, :with_https_proxy,
                s(:lvar, :proxy_log_tester)),
              s(:args,
                s(:arg, :srv),
                s(:arg, :dr),
                s(:arg, :url_),
                s(:arg, :cacert_filename),
                s(:arg, :cacert_directory),
                s(:arg, :proxy_host),
                s(:arg, :proxy_port)),
              s(:begin,
                s(:lvasgn, :url,
                  s(:lvar, :url_)),
                s(:block,
                  s(:send, nil, :open,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :url)),
                      s(:str, "/proxy")),
                    s(:hash,
                      s(:pair,
                        s(:sym, :proxy),
                        s(:dstr,
                          s(:str, "http://"),
                          s(:begin,
                            s(:lvar, :proxy_host)),
                          s(:str, ":"),
                          s(:begin,
                            s(:lvar, :proxy_port)),
                          s(:str, "/"))),
                      s(:pair,
                        s(:sym, :ssl_ca_cert),
                        s(:lvar, :cacert_directory)))),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:send, nil, :assert_equal,
                      s(:str, "200"),
                      s(:send,
                        s(:send,
                          s(:lvar, :f), :status), :[],
                        s(:int, 0))),
                    s(:send, nil, :assert_equal,
                      s(:str, "proxy"),
                      s(:send,
                        s(:lvar, :f), :read)))))))))), nil),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :TestUtils)),
    s(:begin,
      s(:casgn,
        s(:const, nil, :TestOpenURISSL), :CA_CERT,
        s(:dstr,
          s(:str, "Certificate:\n"),
          s(:str, "    Data:\n"),
          s(:str, "        Version: 3 (0x2)\n"),
          s(:str, "        Serial Number: 0 (0x0)\n"),
          s(:str, "        Signature Algorithm: sha1WithRSAEncryption\n"),
          s(:str, "        Issuer: C=JP, ST=Tokyo, O=RubyTest, CN=Ruby Test CA\n"),
          s(:str, "        Validity\n"),
          s(:str, "            Not Before: Jan  1 00:00:00 2009 GMT\n"),
          s(:str, "            Not After : Dec 31 23:59:59 2049 GMT\n"),
          s(:str, "        Subject: C=JP, ST=Tokyo, O=RubyTest, CN=Ruby Test CA\n"),
          s(:str, "        Subject Public Key Info:\n"),
          s(:str, "            Public Key Algorithm: rsaEncryption\n"),
          s(:str, "            RSA Public Key: (1024 bit)\n"),
          s(:str, "                Modulus (1024 bit):\n"),
          s(:str, "                    00:9f:58:19:39:bc:ea:0c:b8:c3:5d:12:a7:d8:20:\n"),
          s(:str, "                    6c:53:ac:91:34:c8:b4:db:3f:56:f6:75:b6:6c:23:\n"),
          s(:str, "                    80:23:6a:5f:b3:f6:9a:3e:00:b4:16:19:1c:9c:2c:\n"),
          s(:str, "                    8d:e8:53:d5:0b:f1:52:3f:7b:60:93:86:ae:89:ab:\n"),
          s(:str, "                    20:82:9a:b6:72:14:3c:4d:a9:0b:6c:34:79:9e:d3:\n"),
          s(:str, "                    14:82:6d:c9:3b:90:d9:5e:68:6f:8c:b5:d8:09:f4:\n"),
          s(:str, "                    6f:3b:22:9f:5e:81:9c:37:df:cf:90:36:65:57:dc:\n"),
          s(:str, "                    ad:31:ca:8b:48:92:a7:3c:1e:42:e9:1c:4e:1e:cb:\n"),
          s(:str, "                    36:c1:44:4e:ab:9a:b2:73:6d\n"),
          s(:str, "                Exponent: 65537 (0x10001)\n"),
          s(:str, "        X509v3 extensions:\n"),
          s(:str, "            X509v3 Basic Constraints:\n"),
          s(:str, "                CA:FALSE\n"),
          s(:str, "            Netscape Comment:\n"),
          s(:str, "                OpenSSL Generated Certificate\n"),
          s(:str, "            X509v3 Subject Key Identifier:\n"),
          s(:str, "                24:6F:03:A3:EE:06:51:75:B2:BA:FC:3A:38:59:BF:ED:87:CD:E8:7F\n"),
          s(:str, "            X509v3 Authority Key Identifier:\n"),
          s(:str, "                keyid:24:6F:03:A3:EE:06:51:75:B2:BA:FC:3A:38:59:BF:ED:87:CD:E8:7F\n"),
          s(:str, "\n"),
          s(:str, "    Signature Algorithm: sha1WithRSAEncryption\n"),
          s(:str, "        13:eb:db:ca:cd:90:f2:09:9e:d9:72:70:5e:42:5d:11:84:ce:\n"),
          s(:str, "        00:1d:c4:2f:41:d2:3e:16:e5:d4:97:1f:43:a9:a7:9c:fa:60:\n"),
          s(:str, "        c4:35:96:f2:f6:0d:13:6d:0f:36:dd:59:03:08:ee:2e:a6:df:\n"),
          s(:str, "        9e:d8:6d:ca:72:8f:02:c2:2b:53:7b:12:7f:55:81:6c:9e:7d:\n"),
          s(:str, "        e7:40:7e:f8:f5:75:0d:4b:a0:8d:ee:a4:d9:e8:5f:06:c9:86:\n"),
          s(:str, "        66:71:70:6c:41:81:6a:dd:a4:4f:a3:c1:ac:70:d4:78:1b:23:\n"),
          s(:str, "        30:2f:a5:ef:98:ee:d4:62:80:fd:bf:d4:7a:9b:8e:2d:18:e5:\n"),
          s(:str, "        00:46\n"),
          s(:str, "-----BEGIN CERTIFICATE-----\n"),
          s(:str, "MIICfzCCAeigAwIBAgIBADANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJKUDEO\n"),
          s(:str, "MAwGA1UECBMFVG9reW8xETAPBgNVBAoTCFJ1YnlUZXN0MRUwEwYDVQQDEwxSdWJ5\n"),
          s(:str, "IFRlc3QgQ0EwHhcNMDkwMTAxMDAwMDAwWhcNNDkxMjMxMjM1OTU5WjBHMQswCQYD\n"),
          s(:str, "VQQGEwJKUDEOMAwGA1UECBMFVG9reW8xETAPBgNVBAoTCFJ1YnlUZXN0MRUwEwYD\n"),
          s(:str, "VQQDEwxSdWJ5IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJ9Y\n"),
          s(:str, "GTm86gy4w10Sp9ggbFOskTTItNs/VvZ1tmwjgCNqX7P2mj4AtBYZHJwsjehT1Qvx\n"),
          s(:str, "Uj97YJOGromrIIKatnIUPE2pC2w0eZ7TFIJtyTuQ2V5ob4y12An0bzsin16BnDff\n"),
          s(:str, "z5A2ZVfcrTHKi0iSpzweQukcTh7LNsFETquasnNtAgMBAAGjezB5MAkGA1UdEwQC\n"),
          s(:str, "MAAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRl\n"),
          s(:str, "MB0GA1UdDgQWBBQkbwOj7gZRdbK6/Do4Wb/th83ofzAfBgNVHSMEGDAWgBQkbwOj\n"),
          s(:str, "7gZRdbK6/Do4Wb/th83ofzANBgkqhkiG9w0BAQUFAAOBgQAT69vKzZDyCZ7ZcnBe\n"),
          s(:str, "Ql0RhM4AHcQvQdI+FuXUlx9Dqaec+mDENZby9g0TbQ823VkDCO4upt+e2G3Kco8C\n"),
          s(:str, "witTexJ/VYFsnn3nQH749XUNS6CN7qTZ6F8GyYZmcXBsQYFq3aRPo8GscNR4GyMw\n"),
          s(:str, "L6XvmO7UYoD9v9R6m44tGOUARg==\n"),
          s(:str, "-----END CERTIFICATE-----\n"))),
      s(:casgn,
        s(:const, nil, :TestOpenURISSL), :SERVER_CERT,
        s(:dstr,
          s(:str, "Certificate:\n"),
          s(:str, "    Data:\n"),
          s(:str, "        Version: 3 (0x2)\n"),
          s(:str, "        Serial Number: 1 (0x1)\n"),
          s(:str, "        Signature Algorithm: sha1WithRSAEncryption\n"),
          s(:str, "        Issuer: C=JP, ST=Tokyo, O=RubyTest, CN=Ruby Test CA\n"),
          s(:str, "        Validity\n"),
          s(:str, "            Not Before: Jan  1 00:00:00 2009 GMT\n"),
          s(:str, "            Not After : Dec 31 23:59:59 2049 GMT\n"),
          s(:str, "        Subject: C=JP, ST=Tokyo, O=RubyTest, CN=127.0.0.1\n"),
          s(:str, "        Subject Public Key Info:\n"),
          s(:str, "            Public Key Algorithm: rsaEncryption\n"),
          s(:str, "            RSA Public Key: (1024 bit)\n"),
          s(:str, "                Modulus (1024 bit):\n"),
          s(:str, "                    00:bb:bd:74:69:53:58:50:24:79:f2:eb:db:8b:97:\n"),
          s(:str, "                    e4:69:a4:dd:48:0c:40:35:62:42:b3:35:8c:96:2a:\n"),
          s(:str, "                    62:76:98:b5:2a:e0:f8:78:33:b6:ff:f8:55:bf:44:\n"),
          s(:str, "                    69:21:d7:b5:0e:bd:8a:dd:31:1b:88:d5:b4:5e:7a:\n"),
          s(:str, "                    82:e0:ba:99:6c:04:76:e9:ff:e6:f8:f5:06:8e:7e:\n"),
          s(:str, "                    a4:db:db:eb:43:44:12:a7:ca:ca:2b:aa:5f:83:10:\n"),
          s(:str, "                    e2:9e:35:55:e8:e8:af:be:c8:7d:bb:c2:d4:aa:c1:\n"),
          s(:str, "                    1c:57:0b:c0:0c:3a:1d:6e:23:a9:03:26:7c:ea:8c:\n"),
          s(:str, "                    f0:86:61:ce:f1:ff:42:c7:23\n"),
          s(:str, "                Exponent: 65537 (0x10001)\n"),
          s(:str, "        X509v3 extensions:\n"),
          s(:str, "            X509v3 Basic Constraints:\n"),
          s(:str, "                CA:FALSE\n"),
          s(:str, "            Netscape Cert Type:\n"),
          s(:str, "                SSL Server\n"),
          s(:str, "            Netscape Comment:\n"),
          s(:str, "                OpenSSL Generated Certificate\n"),
          s(:str, "            X509v3 Subject Key Identifier:\n"),
          s(:str, "                7F:17:5A:58:88:96:E1:1F:44:EA:FF:AD:C6:2E:90:E2:95:32:DD:F0\n"),
          s(:str, "            X509v3 Authority Key Identifier:\n"),
          s(:str, "                keyid:24:6F:03:A3:EE:06:51:75:B2:BA:FC:3A:38:59:BF:ED:87:CD:E8:7F\n"),
          s(:str, "\n"),
          s(:str, "    Signature Algorithm: sha1WithRSAEncryption\n"),
          s(:str, "        9a:34:99:ea:76:a2:ed:f0:f7:a7:75:3b:81:fb:75:57:93:c1:\n"),
          s(:str, "        27:b6:1e:7a:38:67:95:be:58:42:9a:0a:dd:2b:23:fb:85:42:\n"),
          s(:str, "        80:34:bf:b9:0e:9c:5e:5a:dc:2d:25:8c:68:02:a2:c7:7f:c0:\n"),
          s(:str, "        eb:f3:e0:61:e2:05:e5:7e:c1:e0:33:1c:76:65:23:2c:25:08:\n"),
          s(:str, "        f6:5a:11:b9:d4:f7:e3:80:bb:b0:ce:76:1a:56:22:af:e2:4a:\n"),
          s(:str, "        e1:7e:a4:60:f3:fd:9c:53:46:51:57:32:6b:05:53:80:5c:a5:\n"),
          s(:str, "        61:93:87:ae:06:a8:a2:ba:4d:a1:b7:1b:0f:8f:82:0a:e8:b3:\n"),
          s(:str, "        ea:63\n"),
          s(:str, "-----BEGIN CERTIFICATE-----\n"),
          s(:str, "MIICkTCCAfqgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJKUDEO\n"),
          s(:str, "MAwGA1UECBMFVG9reW8xETAPBgNVBAoTCFJ1YnlUZXN0MRUwEwYDVQQDEwxSdWJ5\n"),
          s(:str, "IFRlc3QgQ0EwHhcNMDkwMTAxMDAwMDAwWhcNNDkxMjMxMjM1OTU5WjBEMQswCQYD\n"),
          s(:str, "VQQGEwJKUDEOMAwGA1UECBMFVG9reW8xETAPBgNVBAoTCFJ1YnlUZXN0MRIwEAYD\n"),
          s(:str, "VQQDEwkxMjcuMC4wLjEwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALu9dGlT\n"),
          s(:str, "WFAkefLr24uX5Gmk3UgMQDViQrM1jJYqYnaYtSrg+Hgztv/4Vb9EaSHXtQ69it0x\n"),
          s(:str, "G4jVtF56guC6mWwEdun/5vj1Bo5+pNvb60NEEqfKyiuqX4MQ4p41Vejor77IfbvC\n"),
          s(:str, "1KrBHFcLwAw6HW4jqQMmfOqM8IZhzvH/QscjAgMBAAGjgY8wgYwwCQYDVR0TBAIw\n"),
          s(:str, "ADARBglghkgBhvhCAQEEBAMCBkAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2Vu\n"),
          s(:str, "ZXJhdGVkIENlcnRpZmljYXRlMB0GA1UdDgQWBBR/F1pYiJbhH0Tq/63GLpDilTLd\n"),
          s(:str, "8DAfBgNVHSMEGDAWgBQkbwOj7gZRdbK6/Do4Wb/th83ofzANBgkqhkiG9w0BAQUF\n"),
          s(:str, "AAOBgQCaNJnqdqLt8PendTuB+3VXk8Enth56OGeVvlhCmgrdKyP7hUKANL+5Dpxe\n"),
          s(:str, "WtwtJYxoAqLHf8Dr8+Bh4gXlfsHgMxx2ZSMsJQj2WhG51PfjgLuwznYaViKv4krh\n"),
          s(:str, "fqRg8/2cU0ZRVzJrBVOAXKVhk4euBqiiuk2htxsPj4IK6LPqYw==\n"),
          s(:str, "-----END CERTIFICATE-----\n"))),
      s(:casgn,
        s(:const, nil, :TestOpenURISSL), :SERVER_KEY,
        s(:dstr,
          s(:str, "Private-Key: (1024 bit)\n"),
          s(:str, "modulus:\n"),
          s(:str, "    00:bb:bd:74:69:53:58:50:24:79:f2:eb:db:8b:97:\n"),
          s(:str, "    e4:69:a4:dd:48:0c:40:35:62:42:b3:35:8c:96:2a:\n"),
          s(:str, "    62:76:98:b5:2a:e0:f8:78:33:b6:ff:f8:55:bf:44:\n"),
          s(:str, "    69:21:d7:b5:0e:bd:8a:dd:31:1b:88:d5:b4:5e:7a:\n"),
          s(:str, "    82:e0:ba:99:6c:04:76:e9:ff:e6:f8:f5:06:8e:7e:\n"),
          s(:str, "    a4:db:db:eb:43:44:12:a7:ca:ca:2b:aa:5f:83:10:\n"),
          s(:str, "    e2:9e:35:55:e8:e8:af:be:c8:7d:bb:c2:d4:aa:c1:\n"),
          s(:str, "    1c:57:0b:c0:0c:3a:1d:6e:23:a9:03:26:7c:ea:8c:\n"),
          s(:str, "    f0:86:61:ce:f1:ff:42:c7:23\n"),
          s(:str, "publicExponent: 65537 (0x10001)\n"),
          s(:str, "privateExponent:\n"),
          s(:str, "    00:af:3a:ec:17:0a:f5:d9:07:d2:d3:4c:15:c5:3b:\n"),
          s(:str, "    66:b4:bc:6e:d5:ba:a9:8b:aa:45:3b:63:f5:ee:8b:\n"),
          s(:str, "    6d:0f:e9:04:e0:1a:cf:8f:d2:25:32:d1:a5:a7:3a:\n"),
          s(:str, "    c1:2e:17:5a:25:82:00:c4:e7:fb:1d:42:ea:71:6c:\n"),
          s(:str, "    c4:0f:e1:db:23:ff:1e:d6:c8:d6:60:ca:2d:06:fc:\n"),
          s(:str, "    54:3c:03:d4:09:96:bb:38:7a:22:a1:61:2c:f7:d0:\n"),
          s(:str, "    d0:90:6c:9f:61:ba:61:30:5a:aa:64:ad:43:3a:53:\n"),
          s(:str, "    38:e8:ba:cc:8c:51:3e:68:3e:3a:6a:0f:5d:5d:e0:\n"),
          s(:str, "    d6:df:f2:54:93:d3:14:22:a1\n"),
          s(:str, "prime1:\n"),
          s(:str, "    00:e8:ec:11:fe:e6:2b:23:21:29:d5:40:a6:11:ec:\n"),
          s(:str, "    4c:ae:4d:08:2a:71:18:ac:d1:3e:40:2f:12:41:59:\n"),
          s(:str, "    12:09:e2:f7:c2:d7:6b:0a:96:0a:06:e3:90:6a:4e:\n"),
          s(:str, "    b2:eb:25:b7:09:68:e9:13:ab:d0:5a:29:7a:e4:72:\n"),
          s(:str, "    1a:ee:46:a0:8b\n"),
          s(:str, "prime2:\n"),
          s(:str, "    00:ce:57:5e:31:e9:c9:a8:5b:1f:55:af:67:e2:49:\n"),
          s(:str, "    2a:af:90:b6:02:c0:32:2f:ca:ae:1e:de:47:81:73:\n"),
          s(:str, "    a8:f8:37:53:70:93:24:62:77:d4:b8:80:30:9f:65:\n"),
          s(:str, "    26:20:46:ae:5a:65:6e:6d:af:68:4c:8d:e8:3c:f3:\n"),
          s(:str, "    d1:d1:d9:6e:c9\n"),
          s(:str, "exponent1:\n"),
          s(:str, "    03:f1:02:b8:f2:82:26:5d:08:4d:30:83:de:e7:c5:\n"),
          s(:str, "    c0:69:53:4b:0c:90:e3:53:c3:1e:e8:ed:01:28:15:\n"),
          s(:str, "    b3:0f:21:2c:2d:e3:04:d1:d7:27:98:b0:37:ec:4f:\n"),
          s(:str, "    00:c5:a9:9c:42:27:37:8a:ff:c2:96:d3:1a:8c:87:\n"),
          s(:str, "    c2:22:75:d3\n"),
          s(:str, "exponent2:\n"),
          s(:str, "    6f:17:32:ab:84:c7:01:51:2d:e9:9f:ea:3a:36:52:\n"),
          s(:str, "    38:fb:9c:42:96:df:6e:43:9c:c3:19:c1:3d:bc:db:\n"),
          s(:str, "    77:e7:b1:90:a6:67:ac:6b:ff:a6:e5:bd:47:d3:d9:\n"),
          s(:str, "    56:ff:36:d7:8c:4c:8b:d9:28:3a:2f:1c:9d:d4:57:\n"),
          s(:str, "    5e:b7:c5:a1\n"),
          s(:str, "coefficient:\n"),
          s(:str, "    45:50:47:66:56:e9:21:d9:40:0e:af:3f:f2:05:77:\n"),
          s(:str, "    ab:e7:08:40:97:88:2a:51:b3:7e:86:b0:b2:03:2e:\n"),
          s(:str, "    6d:36:3f:46:42:97:7d:5a:a2:93:6c:05:c2:8b:8b:\n"),
          s(:str, "    2d:af:d5:7d:75:e9:70:f0:2d:21:e3:b9:cf:4d:9a:\n"),
          s(:str, "    c4:97:e2:79\n"),
          s(:str, "-----BEGIN RSA PRIVATE KEY-----\n"),
          s(:str, "MIICXAIBAAKBgQC7vXRpU1hQJHny69uLl+RppN1IDEA1YkKzNYyWKmJ2mLUq4Ph4\n"),
          s(:str, "M7b/+FW/RGkh17UOvYrdMRuI1bReeoLguplsBHbp/+b49QaOfqTb2+tDRBKnysor\n"),
          s(:str, "ql+DEOKeNVXo6K++yH27wtSqwRxXC8AMOh1uI6kDJnzqjPCGYc7x/0LHIwIDAQAB\n"),
          s(:str, "AoGBAK867BcK9dkH0tNMFcU7ZrS8btW6qYuqRTtj9e6LbQ/pBOAaz4/SJTLRpac6\n"),
          s(:str, "wS4XWiWCAMTn+x1C6nFsxA/h2yP/HtbI1mDKLQb8VDwD1AmWuzh6IqFhLPfQ0JBs\n"),
          s(:str, "n2G6YTBaqmStQzpTOOi6zIxRPmg+OmoPXV3g1t/yVJPTFCKhAkEA6OwR/uYrIyEp\n"),
          s(:str, "1UCmEexMrk0IKnEYrNE+QC8SQVkSCeL3wtdrCpYKBuOQak6y6yW3CWjpE6vQWil6\n"),
          s(:str, "5HIa7kagiwJBAM5XXjHpyahbH1WvZ+JJKq+QtgLAMi/Krh7eR4FzqPg3U3CTJGJ3\n"),
          s(:str, "1LiAMJ9lJiBGrlplbm2vaEyN6Dzz0dHZbskCQAPxArjygiZdCE0wg97nxcBpU0sM\n"),
          s(:str, "kONTwx7o7QEoFbMPISwt4wTR1yeYsDfsTwDFqZxCJzeK/8KW0xqMh8IiddMCQG8X\n"),
          s(:str, "MquExwFRLemf6jo2Ujj7nEKW325DnMMZwT2823fnsZCmZ6xr/6blvUfT2Vb/NteM\n"),
          s(:str, "TIvZKDovHJ3UV163xaECQEVQR2ZW6SHZQA6vP/IFd6vnCECXiCpRs36GsLIDLm02\n"),
          s(:str, "P0ZCl31aopNsBcKLiy2v1X116XDwLSHjuc9NmsSX4nk=\n"),
          s(:str, "-----END RSA PRIVATE KEY-----\n")))), nil))
