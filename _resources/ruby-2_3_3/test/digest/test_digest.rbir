s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "digest")),
  s(:block,
    s(:send,
      s(:array,
        s(:str, "digest/md5"),
        s(:str, "digest/rmd160"),
        s(:str, "digest/sha1"),
        s(:str, "digest/sha2"),
        s(:str, "digest/bubblebabble")), :each),
    s(:args,
      s(:arg, :lib)),
    s(:kwbegin,
      s(:rescue,
        s(:send, nil, :require,
          s(:lvar, :lib)),
        s(:resbody,
          s(:array,
            s(:const, nil, :LoadError)), nil, nil), nil))),
  s(:module,
    s(:const, nil, :TestDigest),
    s(:begin,
      s(:casgn, nil, :Data1,
        s(:str, "abc")),
      s(:casgn, nil, :Data2,
        s(:str, "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq")),
      s(:def, :test_s_new,
        s(:args),
        s(:block,
          s(:send,
            s(:const,
              s(:send,
                s(:self), :class), :DATA), :each),
          s(:args,
            s(:arg, :str),
            s(:arg, :hexdigest)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :ALGO), :new,
              s(:str, ""))))),
      s(:def, :test_s_hexdigest,
        s(:args),
        s(:block,
          s(:send,
            s(:const,
              s(:send,
                s(:self), :class), :DATA), :each),
          s(:args,
            s(:arg, :str),
            s(:arg, :hexdigest)),
          s(:begin,
            s(:lvasgn, :actual,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :ALGO), :hexdigest,
                s(:lvar, :str))),
            s(:send, nil, :assert_equal,
              s(:lvar, :hexdigest),
              s(:lvar, :actual)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII),
              s(:send,
                s(:lvar, :actual), :encoding))))),
      s(:def, :test_s_base64digest,
        s(:args),
        s(:block,
          s(:send,
            s(:const,
              s(:send,
                s(:self), :class), :DATA), :each),
          s(:args,
            s(:arg, :str),
            s(:arg, :hexdigest)),
          s(:begin,
            s(:lvasgn, :digest,
              s(:send,
                s(:array,
                  s(:lvar, :hexdigest)), :pack,
                s(:str, "H*"))),
            s(:lvasgn, :actual,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :ALGO), :base64digest,
                s(:lvar, :str))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:array,
                  s(:lvar, :digest)), :pack,
                s(:str, "m0")),
              s(:lvar, :actual)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :US_ASCII),
              s(:send,
                s(:lvar, :actual), :encoding))))),
      s(:def, :test_s_digest,
        s(:args),
        s(:block,
          s(:send,
            s(:const,
              s(:send,
                s(:self), :class), :DATA), :each),
          s(:args,
            s(:arg, :str),
            s(:arg, :hexdigest)),
          s(:begin,
            s(:lvasgn, :digest,
              s(:send,
                s(:array,
                  s(:lvar, :hexdigest)), :pack,
                s(:str, "H*"))),
            s(:lvasgn, :actual,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :ALGO), :digest,
                s(:lvar, :str))),
            s(:send, nil, :assert_equal,
              s(:lvar, :digest),
              s(:lvar, :actual)),
            s(:send, nil, :assert_equal,
              s(:const,
                s(:const, nil, :Encoding), :BINARY),
              s(:send,
                s(:lvar, :actual), :encoding))))),
      s(:def, :test_update,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "ABC")),
          s(:lvasgn, :md,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :ALGO), :new)),
          s(:send,
            s(:lvar, :md), :update,
            s(:lvar, :str)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :ALGO), :hexdigest,
              s(:lvar, :str)),
            s(:send,
              s(:lvar, :md), :hexdigest)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :ALGO), :digest,
              s(:lvar, :str)),
            s(:send,
              s(:lvar, :md), :digest)))),
      s(:def, :test_eq,
        s(:args),
        s(:begin,
          s(:lvasgn, :md1,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :ALGO), :new)),
          s(:send,
            s(:lvar, :md1), :<<,
            s(:str, "ABC")),
          s(:send, nil, :assert_equal,
            s(:lvar, :md1),
            s(:send,
              s(:lvar, :md1), :clone),
            s(:const,
              s(:send,
                s(:self), :class), :ALGO)),
          s(:lvasgn, :bug9913,
            s(:str, "[ruby-core:62967] [Bug #9913]")),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :md1),
            s(:nil),
            s(:lvar, :bug9913)),
          s(:lvasgn, :md2,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :ALGO), :new)),
          s(:send,
            s(:lvar, :md2), :<<,
            s(:str, "A")),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :md1),
            s(:lvar, :md2),
            s(:const,
              s(:send,
                s(:self), :class), :ALGO)),
          s(:send,
            s(:lvar, :md2), :<<,
            s(:str, "BC")),
          s(:send, nil, :assert_equal,
            s(:lvar, :md1),
            s(:lvar, :md2),
            s(:const,
              s(:send,
                s(:self), :class), :ALGO)))),
      s(:def, :test_s_file,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Tempfile), :create,
            s(:str, "test_digest_file"),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:const,
                  s(:const, nil, :File), :BINARY)))),
          s(:args,
            s(:arg, :tmpfile)),
          s(:begin,
            s(:lvasgn, :str,
              s(:str, "hello, world.\r\n")),
            s(:send,
              s(:lvar, :tmpfile), :print,
              s(:lvar, :str)),
            s(:send,
              s(:lvar, :tmpfile), :close),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:const,
                    s(:send,
                      s(:self), :class), :ALGO), :new), :update,
                s(:lvar, :str)),
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :ALGO), :file,
                s(:send,
                  s(:lvar, :tmpfile), :path)))))),
      s(:def, :test_instance_eval,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised),
          s(:args),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :ALGO), :new), :instance_eval),
            s(:args),
            s(:send, nil, :update,
              s(:str, "a"))))),
      s(:def, :test_alignment,
        s(:args),
        s(:begin,
          s(:lvasgn, :md,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :ALGO), :new)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:str, "#4320")),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :md), :update,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 97))),
              s(:send,
                s(:lvar, :md), :update,
                s(:send,
                  s(:str, "a"), :*,
                  s(:int, 97))),
              s(:send,
                s(:lvar, :md), :hexdigest))))),
      s(:def, :test_bubblebabble,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:str, "xirek-hasol-fumik-lanax")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const, nil, :Digest), :bubblebabble,
              s(:str, "message"))))),
      s(:def, :test_bubblebabble_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:str, "xopoh-fedac-fenyh-nehon-mopel-nivor-lumiz-rypon-gyfot-cosyz-rimez-lolyv-pekyz-rosud-ricob-surac-toxox")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const,
                s(:const, nil, :Digest), :SHA256), :bubblebabble,
              s(:str, "message"))))),
      s(:def, :test_bubblebabble_instance,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:str, "xumor-boceg-dakuz-sulic-gukoz-rutas-mekek-zovud-gunap-vabov-genin-rygyg-sanun-hykac-ruvah-dovah-huxex")),
          s(:lvasgn, :hash,
            s(:send,
              s(:const,
                s(:const, nil, :Digest), :SHA256), :new)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :hash), :bubblebabble)))),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Digest), :MD5)),
        s(:class,
          s(:const, nil, :TestMD5),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :TestDigest)),
            s(:casgn, nil, :ALGO,
              s(:const,
                s(:const, nil, :Digest), :MD5)),
            s(:casgn, nil, :DATA,
              s(:hash,
                s(:pair,
                  s(:const, nil, :Data1),
                  s(:str, "900150983cd24fb0d6963f7d28e17f72")),
                s(:pair,
                  s(:const, nil, :Data2),
                  s(:str, "8215ef0796a20bcaaae116d3876c664a")))))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Digest), :SHA1)),
        s(:class,
          s(:const, nil, :TestSHA1),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :TestDigest)),
            s(:casgn, nil, :ALGO,
              s(:const,
                s(:const, nil, :Digest), :SHA1)),
            s(:casgn, nil, :DATA,
              s(:hash,
                s(:pair,
                  s(:const, nil, :Data1),
                  s(:str, "a9993e364706816aba3e25717850c26c9cd0d89d")),
                s(:pair,
                  s(:const, nil, :Data2),
                  s(:str, "84983e441c3bd26ebaae4aa1f95129e5e54670f1")))))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Digest), :SHA256)),
        s(:class,
          s(:const, nil, :TestSHA256),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :TestDigest)),
            s(:casgn, nil, :ALGO,
              s(:const,
                s(:const, nil, :Digest), :SHA256)),
            s(:casgn, nil, :DATA,
              s(:hash,
                s(:pair,
                  s(:const, nil, :Data1),
                  s(:str, "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad")),
                s(:pair,
                  s(:const, nil, :Data2),
                  s(:str, "248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1")))))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Digest), :SHA384)),
        s(:class,
          s(:const, nil, :TestSHA384),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :TestDigest)),
            s(:casgn, nil, :ALGO,
              s(:const,
                s(:const, nil, :Digest), :SHA384)),
            s(:casgn, nil, :DATA,
              s(:hash,
                s(:pair,
                  s(:const, nil, :Data1),
                  s(:str, "cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7")),
                s(:pair,
                  s(:const, nil, :Data2),
                  s(:str, "3391fdddfc8dc7393707a65b1b4709397cf8b1d162af05abfe8f450de5f36bc6b0455a8520bc4e6f5fe95b1fe3c8452b")))))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Digest), :SHA512)),
        s(:class,
          s(:const, nil, :TestSHA512),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :TestDigest)),
            s(:casgn, nil, :ALGO,
              s(:const,
                s(:const, nil, :Digest), :SHA512)),
            s(:casgn, nil, :DATA,
              s(:hash,
                s(:pair,
                  s(:const, nil, :Data1),
                  s(:str, "ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f")),
                s(:pair,
                  s(:const, nil, :Data2),
                  s(:str, "204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c33596fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445")))))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Digest), :SHA2)),
        s(:class,
          s(:const, nil, :TestSHA2),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:def, :test_s_file,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :create,
                s(:str, "test_digest_file")),
              s(:args,
                s(:arg, :tmpfile)),
              s(:begin,
                s(:lvasgn, :str,
                  s(:const, nil, :Data1)),
                s(:send,
                  s(:lvar, :tmpfile), :print,
                  s(:lvar, :str)),
                s(:send,
                  s(:lvar, :tmpfile), :close),
                s(:send, nil, :assert_equal,
                  s(:str, "cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7"),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Digest), :SHA2), :file,
                      s(:send,
                        s(:lvar, :tmpfile), :path),
                      s(:int, 384)), :hexdigest)))))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Digest), :RMD160)),
        s(:class,
          s(:const, nil, :TestRMD160),
          s(:const,
            s(:const,
              s(:const, nil, :Test), :Unit), :TestCase),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :TestDigest)),
            s(:casgn, nil, :ALGO,
              s(:const,
                s(:const, nil, :Digest), :RMD160)),
            s(:casgn, nil, :DATA,
              s(:hash,
                s(:pair,
                  s(:const, nil, :Data1),
                  s(:str, "8eb208f7e05d987a9b044a8e98c6b087f15a0bfc")),
                s(:pair,
                  s(:const, nil, :Data2),
                  s(:str, "12a053384a9c0c88e405a06c27dcf49ada62eb2b")))))), nil),
      s(:class,
        s(:const, nil, :TestBase),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:def, :test_base,
          s(:args),
          s(:begin,
            s(:lvasgn, :bug3810,
              s(:str, "[ruby-core:32231]")),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const, nil, :NotImplementedError),
                s(:lvar, :bug3810)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Digest), :Base), :new))))),
      s(:class,
        s(:const, nil, :TestInitCopy),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:if,
          s(:and,
            s(:defined?,
              s(:const,
                s(:const, nil, :Digest), :MD5)),
            s(:defined?,
              s(:const,
                s(:const, nil, :Digest), :RMD160))),
          s(:def, :test_initialize_copy_md5_rmd160,
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-rdigest")),
              s(:dstr,
                s(:str, "          md5 = Digest::MD5.allocate\n"),
                s(:str, "          rmd160 = Digest::RMD160.allocate\n"),
                s(:str, "          assert_raise(TypeError) {md5.__send__(:initialize_copy, rmd160)}\n")))), nil)),
      s(:class,
        s(:const, nil, :TestDigestParen),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_sha2,
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-rdigest")),
              s(:dstr,
                s(:str, "        assert_nothing_raised {\n"),
                s(:str, "          Digest(:SHA256).new\n"),
                s(:str, "          Digest(:SHA384).new\n"),
                s(:str, "          Digest(:SHA512).new\n"),
                s(:str, "        }\n")))),
          s(:def, :test_no_lib,
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-rdigest")),
              s(:dstr,
                s(:str, "        class Digest::Nolib < Digest::Class\n"),
                s(:str, "        end\n"),
                s(:str, "\n"),
                s(:str, "        assert_nothing_raised {\n"),
                s(:str, "          Digest(:Nolib).new\n"),
                s(:str, "        }\n")))),
          s(:def, :test_no_lib_no_def,
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-rdigest")),
              s(:dstr,
                s(:str, "        assert_raise(LoadError) {\n"),
                s(:str, "          Digest(:Nodef).new\n"),
                s(:str, "        }\n")))),
          s(:def, :test_race,
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-rdigest"),
                s(:dstr,
                  s(:str, "-I"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:str, "(string)"))))),
              s(:dstr,
                s(:str, "        assert_nothing_raised {\n"),
                s(:str, "          t = Thread.start {\n"),
                s(:str, "            sleep 0.1\n"),
                s(:str, "            Digest(:Foo).new\n"),
                s(:str, "          }\n"),
                s(:str, "          Digest(:Foo).new\n"),
                s(:str, "          t.join\n"),
                s(:str, "        }\n")))),
          s(:def, :test_race_mixed,
            s(:args),
            s(:send, nil, :assert_separately,
              s(:array,
                s(:str, "-rdigest"),
                s(:dstr,
                  s(:str, "-I"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:str, "(string)"))))),
              s(:dstr,
                s(:str, "        assert_nothing_raised {\n"),
                s(:str, "          t = Thread.start {\n"),
                s(:str, "            sleep 0.1\n"),
                s(:str, "            Digest::Foo.new\n"),
                s(:str, "          }\n"),
                s(:str, "          Digest(:Foo).new\n"),
                s(:str, "          begin\n"),
                s(:str, "            t.join\n"),
                s(:str, "          rescue NoMethodError, NameError\n"),
                s(:str, "            # NoMethodError is highly likely; NameError is listed just in case\n"),
                s(:str, "          end\n"),
                s(:str, "        }\n")))))))))
