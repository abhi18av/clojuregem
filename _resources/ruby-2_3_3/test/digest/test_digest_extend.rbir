s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "digest")),
  s(:send, nil, :require_relative,
    s(:str, "../lib/with_different_ofs.rb")),
  s(:class,
    s(:const, nil, :TestDigestExtend),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :DifferentOFS)),
      s(:class,
        s(:const, nil, :MyDigest),
        s(:const,
          s(:const, nil, :Digest), :Class),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:restarg, :arg)),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@buf,
                s(:array)))),
          s(:def, :initialize_copy,
            s(:args,
              s(:arg, :org)),
            s(:ivasgn, :@buf,
              s(:send,
                s(:send,
                  s(:lvar, :org), :buf), :dup))),
          s(:def, :update,
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:send,
                s(:ivar, :@buf), :<<,
                s(:lvar, :arg)),
              s(:self))),
          s(:alias,
            s(:sym, :<<),
            s(:sym, :update)),
          s(:def, :finish,
            s(:args),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@buf), :join,
                      s(:str, "")), :length), :%,
                  s(:int, 256))), :chr)),
          s(:def, :reset,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@buf), :clear),
              s(:self))),
          s(:send, nil, :protected),
          s(:def, :buf,
            s(:args),
            s(:ivar, :@buf)))),
      s(:def, :setup,
        s(:args),
        s(:ivasgn, :@MyDigest,
          s(:send,
            s(:const, nil, :Class), :new,
            s(:const, nil, :MyDigest)))),
      s(:def, :test_digest_s_hexencode,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:const, nil, :Digest), :hexencode,
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:str, "0102"),
            s(:send,
              s(:const, nil, :Digest), :hexencode,
              s(:str, "\u0001\u0002"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 0),
                        s(:int, 255))), :to_a), :map),
                s(:args,
                  s(:arg, :c)),
                s(:send, nil, :sprintf,
                  s(:str, "%02x"),
                  s(:lvar, :c))), :join,
              s(:str, "")),
            s(:send,
              s(:const, nil, :Digest), :hexencode,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :to_a), :map),
                  s(:args,
                    s(:arg, :c)),
                  s(:send,
                    s(:lvar, :c), :chr)), :join,
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Encoding), :US_ASCII),
            s(:send,
              s(:send,
                s(:const, nil, :Digest), :hexencode,
                s(:str, "\u0001\u0002")), :encoding)))),
      s(:def, :test_class_reset,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :Digest), :SHA1), :new)),
          s(:lvasgn, :base,
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:lvar, :base),
            s(:send,
              s(:send,
                s(:lvar, :a), :reset), :to_s)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :new)),
          s(:send, nil, :assert_equal,
            s(:lvar, :base),
            s(:send,
              s(:lvar, :b), :to_s)),
          s(:send,
            s(:lvar, :b), :update,
            s(:str, "1")),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :base),
            s(:send,
              s(:lvar, :b), :to_s)),
          s(:send, nil, :assert_equal,
            s(:lvar, :base),
            s(:send,
              s(:send,
                s(:lvar, :b), :reset), :to_s)))),
      s(:def, :test_digest,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "\u0003"),
          s(:send,
            s(:const, nil, :MyDigest), :digest,
            s(:str, "foo")))),
      s(:def, :test_hexdigest,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "03"),
          s(:send,
            s(:ivar, :@MyDigest), :hexdigest,
            s(:str, "foo")))),
      s(:def, :test_context,
        s(:args),
        s(:begin,
          s(:lvasgn, :digester,
            s(:send,
              s(:ivar, :@MyDigest), :new)),
          s(:send,
            s(:lvar, :digester), :update,
            s(:str, "foo")),
          s(:send, nil, :assert_equal,
            s(:str, "\u0003"),
            s(:send,
              s(:lvar, :digester), :digest)),
          s(:send,
            s(:lvar, :digester), :update,
            s(:str, "foobar")),
          s(:send, nil, :assert_equal,
            s(:str, "\t"),
            s(:send,
              s(:lvar, :digester), :digest)),
          s(:send,
            s(:lvar, :digester), :update,
            s(:str, "foo")),
          s(:send, nil, :assert_equal,
            s(:str, "\f"),
            s(:send,
              s(:lvar, :digester), :digest)))),
      s(:def, :test_new,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send,
              s(:const,
                s(:const, nil, :Digest), :SHA1), :new)),
          s(:lvasgn, :b,
            s(:send,
              s(:lvar, :a), :new)),
          s(:lvasgn, :obj,
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :b), :to_s)),
          s(:send,
            s(:lvar, :a), :update,
            s(:str, "1")),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :a), :to_s)),
          s(:send, nil, :assert_equal,
            s(:lvar, :obj),
            s(:send,
              s(:lvar, :b), :to_s)))),
      s(:def, :test_digest_hexdigest,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:sym, :digest),
              s(:sym, :hexdigest)), :each),
          s(:args,
            s(:arg, :m)),
          s(:begin,
            s(:lvasgn, :exp_1st,
              s(:str, "\u0003")),
            s(:if,
              s(:send,
                s(:lvar, :m), :==,
                s(:sym, :hexdigest)),
              s(:lvasgn, :exp_1st,
                s(:send,
                  s(:const, nil, :Digest), :hexencode,
                  s(:lvar, :exp_1st))), nil),
            s(:lvasgn, :exp_2nd,
              s(:str, "\u0006")),
            s(:if,
              s(:send,
                s(:lvar, :m), :==,
                s(:sym, :hexdigest)),
              s(:lvasgn, :exp_2nd,
                s(:send,
                  s(:const, nil, :Digest), :hexencode,
                  s(:lvar, :exp_2nd))), nil),
            s(:lvasgn, :digester,
              s(:send,
                s(:ivar, :@MyDigest), :new)),
            s(:send,
              s(:lvar, :digester), :update,
              s(:str, "foo")),
            s(:lvasgn, :obj,
              s(:send,
                s(:lvar, :digester), :send,
                s(:lvar, :m))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp_1st),
              s(:lvar, :obj)),
            s(:send,
              s(:lvar, :digester), :update,
              s(:str, "bar")),
            s(:lvasgn, :obj,
              s(:send,
                s(:lvar, :digester), :send,
                s(:lvar, :m))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp_2nd),
              s(:lvar, :obj)),
            s(:lvasgn, :obj,
              s(:send,
                s(:lvar, :digester), :send,
                s(:lvar, :m),
                s(:str, "baz"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp_1st),
              s(:lvar, :obj))))),
      s(:def, :test_digest_hexdigest_bang,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:sym, :digest!),
              s(:sym, :hexdigest!)), :each),
          s(:args,
            s(:arg, :m)),
          s(:begin,
            s(:lvasgn, :exp_1st,
              s(:str, "\u0003")),
            s(:if,
              s(:send,
                s(:lvar, :m), :==,
                s(:sym, :hexdigest!)),
              s(:lvasgn, :exp_1st,
                s(:send,
                  s(:const, nil, :Digest), :hexencode,
                  s(:lvar, :exp_1st))), nil),
            s(:lvasgn, :digester,
              s(:send,
                s(:ivar, :@MyDigest), :new)),
            s(:send,
              s(:lvar, :digester), :update,
              s(:str, "foo")),
            s(:lvasgn, :obj,
              s(:send,
                s(:lvar, :digester), :send,
                s(:lvar, :m))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp_1st),
              s(:lvar, :obj)),
            s(:send,
              s(:lvar, :digester), :update,
              s(:str, "bar")),
            s(:lvasgn, :obj,
              s(:send,
                s(:lvar, :digester), :send,
                s(:lvar, :m))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp_1st),
              s(:lvar, :obj))))),
      s(:def, :test_to_s,
        s(:args),
        s(:begin,
          s(:lvasgn, :digester,
            s(:send,
              s(:ivar, :@MyDigest), :new)),
          s(:send,
            s(:lvar, :digester), :update,
            s(:str, "foo")),
          s(:send, nil, :assert_equal,
            s(:str, "03"),
            s(:send,
              s(:lvar, :digester), :to_s)))),
      s(:def, :test_length,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@MyDigest), :class_eval),
            s(:args),
            s(:def, :digest_length,
              s(:args),
              s(:int, 2))),
          s(:lvasgn, :digester,
            s(:send,
              s(:ivar, :@MyDigest), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :digester), :length)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :digester), :size)))),
      s(:def, :test_digest_length,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send,
                s(:ivar, :@MyDigest), :new), :digest_length)),
          s(:block,
            s(:send,
              s(:ivar, :@MyDigest), :class_eval),
            s(:args),
            s(:def, :digest_length,
              s(:args),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@MyDigest), :new), :digest_length)))),
      s(:def, :test_block_length,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const, nil, :RuntimeError)),
          s(:args),
          s(:send,
            s(:send,
              s(:ivar, :@MyDigest), :new), :block_length))))))
