s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "prime")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:class,
    s(:const, nil, :TestPrime),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:casgn, nil, :PRIMES,
        s(:array,
          s(:int, 2),
          s(:int, 3),
          s(:int, 5),
          s(:int, 7),
          s(:int, 11),
          s(:int, 13),
          s(:int, 17),
          s(:int, 19),
          s(:int, 23),
          s(:int, 29),
          s(:int, 31),
          s(:int, 37),
          s(:int, 41),
          s(:int, 43),
          s(:int, 47),
          s(:int, 53),
          s(:int, 59),
          s(:int, 61),
          s(:int, 67),
          s(:int, 71),
          s(:int, 73),
          s(:int, 79),
          s(:int, 83),
          s(:int, 89),
          s(:int, 97),
          s(:int, 101),
          s(:int, 103),
          s(:int, 107),
          s(:int, 109),
          s(:int, 113),
          s(:int, 127),
          s(:int, 131),
          s(:int, 137),
          s(:int, 139),
          s(:int, 149),
          s(:int, 151),
          s(:int, 157),
          s(:int, 163),
          s(:int, 167),
          s(:int, 173),
          s(:int, 179),
          s(:int, 181),
          s(:int, 191),
          s(:int, 193),
          s(:int, 197),
          s(:int, 199),
          s(:int, 211),
          s(:int, 223),
          s(:int, 227),
          s(:int, 229),
          s(:int, 233),
          s(:int, 239),
          s(:int, 241),
          s(:int, 251),
          s(:int, 257),
          s(:int, 263),
          s(:int, 269),
          s(:int, 271),
          s(:int, 277),
          s(:int, 281),
          s(:int, 283),
          s(:int, 293),
          s(:int, 307),
          s(:int, 311),
          s(:int, 313),
          s(:int, 317),
          s(:int, 331),
          s(:int, 337),
          s(:int, 347),
          s(:int, 349),
          s(:int, 353),
          s(:int, 359),
          s(:int, 367),
          s(:int, 373),
          s(:int, 379),
          s(:int, 383),
          s(:int, 389),
          s(:int, 397),
          s(:int, 401),
          s(:int, 409),
          s(:int, 419),
          s(:int, 421),
          s(:int, 431),
          s(:int, 433),
          s(:int, 439),
          s(:int, 443),
          s(:int, 449),
          s(:int, 457),
          s(:int, 461),
          s(:int, 463),
          s(:int, 467),
          s(:int, 479),
          s(:int, 487),
          s(:int, 491),
          s(:int, 499),
          s(:int, 503),
          s(:int, 509),
          s(:int, 521),
          s(:int, 523),
          s(:int, 541))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :primes,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Prime), :each),
            s(:args,
              s(:arg, :p)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :p), :>,
                  s(:int, 541)),
                s(:break), nil),
              s(:send,
                s(:lvar, :primes), :<<,
                s(:lvar, :p)))),
          s(:send, nil, :assert_equal,
            s(:const, nil, :PRIMES),
            s(:lvar, :primes)))),
      s(:def, :test_each_by_prime_number_theorem,
        s(:args),
        s(:block,
          s(:send,
            s(:int, 3), :upto,
            s(:int, 15)),
          s(:args,
            s(:arg, :i)),
          s(:begin,
            s(:lvasgn, :max,
              s(:send,
                s(:int, 2), :**,
                s(:lvar, :i))),
            s(:lvasgn, :primes,
              s(:array)),
            s(:block,
              s(:send,
                s(:const, nil, :Prime), :each),
              s(:args,
                s(:arg, :p)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :p), :>=,
                    s(:lvar, :max)),
                  s(:break), nil),
                s(:send,
                  s(:lvar, :primes), :<<,
                  s(:lvar, :p)))),
            s(:send, nil, :assert_operator,
              s(:send,
                s(:lvar, :primes), :length),
              s(:sym, :>=),
              s(:send,
                s(:lvar, :max), :/,
                s(:send,
                  s(:const, nil, :Math), :log,
                  s(:lvar, :max)))),
            s(:lvasgn, :delta,
              s(:float, 0.05)),
            s(:lvasgn, :li,
              s(:block,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 2),
                        s(:lvar, :max))), :step,
                    s(:lvar, :delta)), :inject,
                  s(:int, 0)),
                s(:args,
                  s(:arg, :sum),
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :sum), :+,
                  s(:send,
                    s(:lvar, :delta), :/,
                    s(:send,
                      s(:const, nil, :Math), :log,
                      s(:lvar, :x)))))),
            s(:send, nil, :assert_operator,
              s(:send,
                s(:lvar, :primes), :length),
              s(:sym, :<=),
              s(:lvar, :li))))),
      s(:def, :test_each_without_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:const, nil, :Prime), :each)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :each)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Enumerable),
            s(:lvar, :enum)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :with_index)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :next)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :succ)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :rewind)))),
      s(:def, :test_instance_without_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:send,
                s(:const, nil, :Prime), :instance), :each)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :each)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Enumerable),
            s(:lvar, :enum)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :with_index)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :next)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :succ)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :enum),
            s(:sym, :rewind)))),
      s(:def, :test_new,
        s(:args),
        s(:lvasgn, :exception,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :NoMethodError)),
            s(:args),
            s(:send,
              s(:const, nil, :Prime), :new)))),
      s(:def, :test_enumerator_succ,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:const, nil, :Prime), :each)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :PRIMES), :[],
              s(:int, 0),
              s(:int, 50)),
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 50), :times), :map),
              s(:args),
              s(:send,
                s(:lvar, :enum), :succ))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :PRIMES), :[],
              s(:int, 50),
              s(:int, 50)),
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 50), :times), :map),
              s(:args),
              s(:send,
                s(:lvar, :enum), :succ))),
          s(:send,
            s(:lvar, :enum), :rewind),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :PRIMES), :[],
              s(:int, 0),
              s(:int, 100)),
            s(:block,
              s(:send,
                s(:send,
                  s(:int, 100), :times), :map),
              s(:args),
              s(:send,
                s(:lvar, :enum), :succ))))),
      s(:def, :test_enumerator_with_index,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:const, nil, :Prime), :each)),
          s(:lvasgn, :last,
            s(:int, -1)),
          s(:block,
            s(:send,
              s(:lvar, :enum), :with_index),
            s(:args,
              s(:arg, :p),
              s(:arg, :i)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :i), :>=,
                  s(:int, 100)),
                s(:break), nil),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :last), :+,
                  s(:int, 1)),
                s(:lvar, :i)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :PRIMES), :[],
                  s(:lvar, :i)),
                s(:lvar, :p)),
              s(:lvasgn, :last,
                s(:lvar, :i)))))),
      s(:def, :test_enumerator_with_index_with_offset,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:const, nil, :Prime), :each)),
          s(:lvasgn, :last,
            s(:send,
              s(:int, 5), :-,
              s(:int, 1))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :enum), :with_index,
                s(:int, 5)), :each),
            s(:args,
              s(:arg, :p),
              s(:arg, :i)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :i), :>=,
                  s(:send,
                    s(:int, 100), :+,
                    s(:int, 5))),
                s(:break), nil),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :last), :+,
                  s(:int, 1)),
                s(:lvar, :i)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :PRIMES), :[],
                  s(:send,
                    s(:lvar, :i), :-,
                    s(:int, 5))),
                s(:lvar, :p)),
              s(:lvasgn, :last,
                s(:lvar, :i)))))),
      s(:def, :test_enumerator_with_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :object,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:lvasgn, :enum,
            s(:send,
              s(:const, nil, :Prime), :each)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :enum), :with_object,
                s(:lvar, :object)), :each),
            s(:args,
              s(:arg, :p),
              s(:arg, :o)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :object),
                s(:lvar, :o)),
              s(:break))))),
      s(:def, :test_enumerator_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :enum,
            s(:send,
              s(:const, nil, :Prime), :each)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:lvar, :enum), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:lvar, :enum), :with_object,
                s(:nil)), :size)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Float), :INFINITY),
            s(:send,
              s(:send,
                s(:lvar, :enum), :with_index,
                s(:int, 42)), :size)))),
      s(:def, :test_default_instance_does_not_have_compatibility_methods,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_respond_to,
            s(:send,
              s(:const, nil, :Prime), :instance),
            s(:sym, :succ)),
          s(:send, nil, :assert_not_respond_to,
            s(:send,
              s(:const, nil, :Prime), :instance),
            s(:sym, :next)))),
      s(:def, :test_prime_each_basic_argument_checking,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Prime), :prime?,
              s(:int, 1),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:const, nil, :Prime), :prime?,
              s(:float, 1.2))))),
      s(:class,
        s(:const, nil, :TestInteger),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :test_prime_division,
            s(:args),
            s(:begin,
              s(:lvasgn, :pd,
                s(:send,
                  s(:send,
                    s(:const, nil, :PRIMES), :inject,
                    s(:block_pass,
                      s(:sym, :*))), :prime_division)),
              s(:send, nil, :assert_equal,
                s(:block,
                  s(:send,
                    s(:const, nil, :PRIMES), :map),
                  s(:args,
                    s(:arg, :p)),
                  s(:array,
                    s(:lvar, :p),
                    s(:int, 1))),
                s(:lvar, :pd)),
              s(:lvasgn, :pd,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :PRIMES), :inject,
                        s(:block_pass,
                          s(:sym, :*))), :-@)), :prime_division)),
              s(:send, nil, :assert_equal,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:int, -1),
                      s(:splat,
                        s(:const, nil, :PRIMES))), :map),
                  s(:args,
                    s(:arg, :p)),
                  s(:array,
                    s(:lvar, :p),
                    s(:int, 1))),
                s(:lvar, :pd)))),
          s(:def, :test_from_prime_division,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const, nil, :PRIMES), :inject,
                  s(:block_pass,
                    s(:sym, :*))),
                s(:send,
                  s(:const, nil, :Integer), :from_prime_division,
                  s(:block,
                    s(:send,
                      s(:const, nil, :PRIMES), :map),
                    s(:args,
                      s(:arg, :p)),
                    s(:array,
                      s(:lvar, :p),
                      s(:int, 1))))),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:const, nil, :PRIMES), :inject,
                    s(:block_pass,
                      s(:sym, :*))), :-@),
                s(:send,
                  s(:const, nil, :Integer), :from_prime_division,
                  s(:send,
                    s(:array,
                      s(:array,
                        s(:int, -1),
                        s(:int, 1))), :+,
                    s(:block,
                      s(:send,
                        s(:const, nil, :PRIMES), :map),
                      s(:args,
                        s(:arg, :p)),
                      s(:array,
                        s(:lvar, :p),
                        s(:int, 1)))))))),
          s(:def, :test_prime?,
            s(:args),
            s(:begin,
              s(:send, nil, :assert_not_predicate,
                s(:int, 0),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:int, 1),
                s(:sym, :prime?)),
              s(:send, nil, :assert_predicate,
                s(:int, 2),
                s(:sym, :prime?)),
              s(:send, nil, :assert_predicate,
                s(:int, 3),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:int, 4),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:int, 9),
                s(:sym, :prime?)),
              s(:send, nil, :assert_predicate,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 31)), :-,
                    s(:int, 1))),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32)), :-,
                    s(:int, 1))),
                s(:sym, :prime?)),
              s(:send, nil, :assert_predicate,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:begin,
                        s(:send,
                          s(:int, 2), :**,
                          s(:int, 4)))), :+,
                    s(:int, 1))),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:begin,
                        s(:send,
                          s(:int, 2), :**,
                          s(:int, 5)))), :+,
                    s(:int, 1))),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:int, 2), :**,
                          s(:int, 13)), :-,
                        s(:int, 1))), :*,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:int, 2), :**,
                          s(:int, 17)), :-,
                        s(:int, 1))))),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:int, 2),
                      s(:int, 100))), :inject,
                  s(:block_pass,
                    s(:sym, :*))),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:int, -1),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:int, -2),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:int, -3),
                s(:sym, :prime?)),
              s(:send, nil, :assert_not_predicate,
                s(:int, -4),
                s(:sym, :prime?)))))),
      s(:def, :test_eratosthenes_works_fine_after_timeout,
        s(:args),
        s(:begin,
          s(:lvasgn, :sieve,
            s(:send,
              s(:const,
                s(:const, nil, :Prime), :EratosthenesSieve), :instance)),
          s(:send,
            s(:lvar, :sieve), :send,
            s(:sym, :initialize)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:defs,
                  s(:lvar, :sieve), :Integer,
                  s(:args,
                    s(:arg, :n)),
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:super,
                        s(:lvar, :n))),
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "compute_primes"),
                          s(:regopt)),
                        s(:send,
                          s(:send, nil, :caller), :first)),
                      s(:send, nil, :sleep,
                        s(:int, 10)), nil),
                    s(:return,
                      s(:lvar, :n)))),
                s(:block,
                  s(:send, nil, :assert_raise,
                    s(:const,
                      s(:const, nil, :Timeout), :Error)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Timeout), :timeout,
                      s(:float, 0.5)),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Prime), :each,
                        s(:send,
                          s(:int, 7), :*,
                          s(:int, 37))),
                      s(:args), nil)))),
              s(:sclass,
                s(:lvar, :sieve),
                s(:send, nil, :remove_method,
                  s(:sym, :Integer))))),
          s(:send, nil, :assert_not_include,
            s(:send,
              s(:send,
                s(:const, nil, :Prime), :each,
                s(:send,
                  s(:int, 7), :*,
                  s(:int, 37))), :to_a),
            s(:send,
              s(:int, 7), :*,
              s(:int, 37)),
            s(:str, "[ruby-dev:39465]")))))))
