s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "pstore")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:class,
    s(:const, nil, :PStoreTest),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@pstore_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Dir), :tmpdir),
              s(:dstr,
                s(:str, "pstore.tmp."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Process), :pid))))),
          s(:ivasgn, :@pstore,
            s(:send,
              s(:const, nil, :PStore), :new,
              s(:ivar, :@pstore_file))))),
      s(:def, :teardown,
        s(:args),
        s(:rescue,
          s(:send,
            s(:const, nil, :File), :unlink,
            s(:ivar, :@pstore_file)),
          s(:resbody, nil, nil,
            s(:nil)), nil)),
      s(:def, :test_opening_new_file_in_readonly_mode_should_result_in_empty_values,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@pstore), :transaction,
            s(:true)),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :foo))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :bar)))))),
      s(:def, :test_opening_new_file_in_readwrite_mode_should_result_in_empty_values,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@pstore), :transaction),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :foo))),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :bar)))))),
      s(:def, :test_data_should_be_loaded_correctly_when_in_readonly_mode,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction),
            s(:args),
            s(:send,
              s(:ivar, :@pstore), :[]=,
              s(:sym, :foo),
              s(:str, "bar"))),
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction,
              s(:true)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :foo)))))),
      s(:def, :test_data_should_be_loaded_correctly_when_in_readwrite_mode,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction),
            s(:args),
            s(:send,
              s(:ivar, :@pstore), :[]=,
              s(:sym, :foo),
              s(:str, "bar"))),
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :foo)))))),
      s(:def, :test_changes_after_commit_are_discarded,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@pstore), :[]=,
                s(:sym, :foo),
                s(:str, "bar")),
              s(:send,
                s(:ivar, :@pstore), :commit),
              s(:send,
                s(:ivar, :@pstore), :[]=,
                s(:sym, :foo),
                s(:str, "baz")))),
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction,
              s(:true)),
            s(:args),
            s(:send, nil, :assert_equal,
              s(:str, "bar"),
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :foo)))))),
      s(:def, :test_changes_are_not_written_on_abort,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@pstore), :[]=,
                s(:sym, :foo),
                s(:str, "bar")),
              s(:send,
                s(:ivar, :@pstore), :abort))),
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction,
              s(:true)),
            s(:args),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:sym, :foo)))))),
      s(:def, :test_writing_inside_readonly_transaction_raises_error,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const,
              s(:const, nil, :PStore), :Error)),
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@pstore), :transaction,
              s(:true)),
            s(:args),
            s(:send,
              s(:ivar, :@pstore), :[]=,
              s(:sym, :foo),
              s(:str, "bar"))))),
      s(:def, :test_thread_safe,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :PStore), :Error)),
              s(:args),
              s(:begin,
                s(:lvasgn, :flag,
                  s(:false)),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:ivar, :@pstore), :transaction),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@pstore), :[]=,
                          s(:sym, :foo),
                          s(:str, "bar")),
                        s(:lvasgn, :flag,
                          s(:true)),
                        s(:send, nil, :sleep,
                          s(:int, 1)))))),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:until,
                        s(:lvar, :flag),
                        s(:send, nil, :sleep,
                          s(:float, 0.1))),
                      s(:block,
                        s(:send,
                          s(:ivar, :@pstore), :transaction),
                        s(:args), nil)),
                    s(:send,
                      s(:lvar, :th), :join))))),
            s(:kwbegin,
              s(:lvasgn, :pstore,
                s(:send,
                  s(:const, nil, :PStore), :new,
                  s(:send, nil, :second_file),
                  s(:true))),
              s(:lvasgn, :flag,
                s(:false)),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :pstore), :transaction),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :pstore), :[]=,
                        s(:sym, :foo),
                        s(:str, "bar")),
                      s(:lvasgn, :flag,
                        s(:true)),
                      s(:send, nil, :sleep,
                        s(:int, 1)))))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:until,
                      s(:lvar, :flag),
                      s(:send, nil, :sleep,
                        s(:float, 0.1))),
                    s(:send, nil, :assert_equal,
                      s(:str, "bar"),
                      s(:block,
                        s(:send,
                          s(:lvar, :pstore), :transaction),
                        s(:args),
                        s(:send,
                          s(:lvar, :pstore), :[],
                          s(:sym, :foo))))),
                  s(:send,
                    s(:lvar, :th), :join))))),
          s(:rescue,
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:send, nil, :second_file)),
            s(:resbody, nil, nil,
              s(:nil)), nil))),
      s(:def, :test_nested_transaction_raises_error,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :PStore), :Error)),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@pstore), :transaction),
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@pstore), :transaction),
                  s(:args), nil))),
            s(:lvasgn, :pstore,
              s(:send,
                s(:const, nil, :PStore), :new,
                s(:send, nil, :second_file),
                s(:true))),
            s(:block,
              s(:send, nil, :assert_raise,
                s(:const,
                  s(:const, nil, :PStore), :Error)),
              s(:args),
              s(:block,
                s(:send,
                  s(:lvar, :pstore), :transaction),
                s(:args),
                s(:block,
                  s(:send,
                    s(:lvar, :pstore), :transaction),
                  s(:args), nil)))),
          s(:rescue,
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:send, nil, :second_file)),
            s(:resbody, nil, nil,
              s(:nil)), nil))),
      s(:def, :test_pstore_files_are_accessed_as_binary_files,
        s(:args),
        s(:begin,
          s(:lvasgn, :bug5311,
            s(:str, "[ruby-core:39503]")),
          s(:lvasgn, :n,
            s(:int, 128)),
          s(:send, nil, :assert_in_out_err,
            s(:array,
              s(:str, "-Eutf-8:utf-8"),
              s(:str, "-rpstore"),
              s(:str, "-"),
              s(:ivar, :@pstore_file)),
            s(:dstr,
              s(:str, "      @pstore = PStore.new(ARGV[0])\n"),
              s(:str, "      (1.."),
              s(:begin,
                s(:lvar, :n)),
              s(:str, ").each do |i|\n"),
              s(:str, "        @pstore.transaction {@pstore[\"Key\#{i}\"] = \"value \#{i}\"}\n"),
              s(:str, "      end\n"),
              s(:str, "      @pstore.transaction {@pstore[\"Bug5311\"] = '"),
              s(:begin,
                s(:lvar, :bug5311)),
              s(:str, "'}\n"),
              s(:str, "      puts @pstore.transaction {@pstore[\"Bug5311\"]}\n")),
            s(:array,
              s(:lvar, :bug5311)),
            s(:array),
            s(:lvar, :bug5311),
            s(:hash,
              s(:pair,
                s(:sym, :timeout),
                s(:int, 15)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :bug5311),
            s(:block,
              s(:send,
                s(:ivar, :@pstore), :transaction),
              s(:args),
              s(:send,
                s(:ivar, :@pstore), :[],
                s(:str, "Bug5311"))),
            s(:lvar, :bug5311)))),
      s(:def, :second_file,
        s(:args),
        s(:send,
          s(:const, nil, :File), :join,
          s(:send,
            s(:const, nil, :Dir), :tmpdir),
          s(:dstr,
            s(:str, "pstore.tmp2."),
            s(:begin,
              s(:send,
                s(:const, nil, :Process), :pid))))))))
