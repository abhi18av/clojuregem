s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/platform")),
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:class,
    s(:const, nil, :TestGemPlatform),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :test_self_local,
        s(:args),
        s(:begin,
          s(:send, nil, :util_set_arch,
            s(:str, "i686-darwin8.10.1")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "x86"),
                s(:str, "darwin"),
                s(:str, "8"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local)))),
      s(:def, :test_self_match,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :match,
              s(:nil)),
            s(:str, "nil == ruby")),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :match,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :local)),
            s(:str, "exact match")),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :match,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local), :to_s)),
            s(:str, "=~ match")),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :match,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY)),
            s(:str, "ruby")))),
      s(:def, :test_self_new,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :CURRENT))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, ""))))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :test_cases,
            s(:hash,
              s(:pair,
                s(:str, "amd64-freebsd6"),
                s(:array,
                  s(:str, "amd64"),
                  s(:str, "freebsd"),
                  s(:str, "6"))),
              s(:pair,
                s(:str, "hppa2.0w-hpux11.31"),
                s(:array,
                  s(:str, "hppa2.0w"),
                  s(:str, "hpux"),
                  s(:str, "11"))),
              s(:pair,
                s(:str, "java"),
                s(:array,
                  s(:nil),
                  s(:str, "java"),
                  s(:nil))),
              s(:pair,
                s(:str, "jruby"),
                s(:array,
                  s(:nil),
                  s(:str, "java"),
                  s(:nil))),
              s(:pair,
                s(:str, "universal-dotnet"),
                s(:array,
                  s(:str, "universal"),
                  s(:str, "dotnet"),
                  s(:nil))),
              s(:pair,
                s(:str, "universal-dotnet2.0"),
                s(:array,
                  s(:str, "universal"),
                  s(:str, "dotnet"),
                  s(:str, "2.0"))),
              s(:pair,
                s(:str, "universal-dotnet4.0"),
                s(:array,
                  s(:str, "universal"),
                  s(:str, "dotnet"),
                  s(:str, "4.0"))),
              s(:pair,
                s(:str, "powerpc-aix5.3.0.0"),
                s(:array,
                  s(:str, "powerpc"),
                  s(:str, "aix"),
                  s(:str, "5"))),
              s(:pair,
                s(:str, "powerpc-darwin7"),
                s(:array,
                  s(:str, "powerpc"),
                  s(:str, "darwin"),
                  s(:str, "7"))),
              s(:pair,
                s(:str, "powerpc-darwin8"),
                s(:array,
                  s(:str, "powerpc"),
                  s(:str, "darwin"),
                  s(:str, "8"))),
              s(:pair,
                s(:str, "powerpc-linux"),
                s(:array,
                  s(:str, "powerpc"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "powerpc64-linux"),
                s(:array,
                  s(:str, "powerpc64"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "sparc-solaris2.10"),
                s(:array,
                  s(:str, "sparc"),
                  s(:str, "solaris"),
                  s(:str, "2.10"))),
              s(:pair,
                s(:str, "sparc-solaris2.8"),
                s(:array,
                  s(:str, "sparc"),
                  s(:str, "solaris"),
                  s(:str, "2.8"))),
              s(:pair,
                s(:str, "sparc-solaris2.9"),
                s(:array,
                  s(:str, "sparc"),
                  s(:str, "solaris"),
                  s(:str, "2.9"))),
              s(:pair,
                s(:str, "universal-darwin8"),
                s(:array,
                  s(:str, "universal"),
                  s(:str, "darwin"),
                  s(:str, "8"))),
              s(:pair,
                s(:str, "universal-darwin9"),
                s(:array,
                  s(:str, "universal"),
                  s(:str, "darwin"),
                  s(:str, "9"))),
              s(:pair,
                s(:str, "universal-macruby"),
                s(:array,
                  s(:str, "universal"),
                  s(:str, "macruby"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-cygwin"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "cygwin"),
                  s(:nil))),
              s(:pair,
                s(:str, "i686-darwin"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "darwin"),
                  s(:nil))),
              s(:pair,
                s(:str, "i686-darwin8.4.1"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "darwin"),
                  s(:str, "8"))),
              s(:pair,
                s(:str, "i386-freebsd4.11"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "freebsd"),
                  s(:str, "4"))),
              s(:pair,
                s(:str, "i386-freebsd5"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "freebsd"),
                  s(:str, "5"))),
              s(:pair,
                s(:str, "i386-freebsd6"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "freebsd"),
                  s(:str, "6"))),
              s(:pair,
                s(:str, "i386-freebsd7"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "freebsd"),
                  s(:str, "7"))),
              s(:pair,
                s(:str, "i386-freebsd"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "freebsd"),
                  s(:nil))),
              s(:pair,
                s(:str, "universal-freebsd"),
                s(:array,
                  s(:str, "universal"),
                  s(:str, "freebsd"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-java1.5"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "java"),
                  s(:str, "1.5"))),
              s(:pair,
                s(:str, "x86-java1.6"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "java"),
                  s(:str, "1.6"))),
              s(:pair,
                s(:str, "i386-java1.6"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "java"),
                  s(:str, "1.6"))),
              s(:pair,
                s(:str, "i686-linux"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "i586-linux"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "i486-linux"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-linux"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "i586-linux-gnu"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-linux-gnu"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-mingw32"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mingw32"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-mswin32"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-mswin32_80"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:str, "80"))),
              s(:pair,
                s(:str, "i386-mswin32-80"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:str, "80"))),
              s(:pair,
                s(:str, "x86-mswin32"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:nil))),
              s(:pair,
                s(:str, "x86-mswin32_60"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:str, "60"))),
              s(:pair,
                s(:str, "x86-mswin32-60"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:str, "60"))),
              s(:pair,
                s(:str, "i386-netbsdelf"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "netbsdelf"),
                  s(:nil))),
              s(:pair,
                s(:str, "i386-openbsd4.0"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "openbsd"),
                  s(:str, "4.0"))),
              s(:pair,
                s(:str, "i386-solaris2.10"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "solaris"),
                  s(:str, "2.10"))),
              s(:pair,
                s(:str, "i386-solaris2.8"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "solaris"),
                  s(:str, "2.8"))),
              s(:pair,
                s(:str, "mswin32"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:nil))),
              s(:pair,
                s(:str, "x86_64-linux"),
                s(:array,
                  s(:str, "x86_64"),
                  s(:str, "linux"),
                  s(:nil))),
              s(:pair,
                s(:str, "x86_64-openbsd3.9"),
                s(:array,
                  s(:str, "x86_64"),
                  s(:str, "openbsd"),
                  s(:str, "3.9"))),
              s(:pair,
                s(:str, "x86_64-openbsd4.0"),
                s(:array,
                  s(:str, "x86_64"),
                  s(:str, "openbsd"),
                  s(:str, "4.0"))),
              s(:pair,
                s(:str, "x86_64-openbsd"),
                s(:array,
                  s(:str, "x86_64"),
                  s(:str, "openbsd"),
                  s(:nil))))),
          s(:block,
            s(:send,
              s(:lvar, :test_cases), :each),
            s(:args,
              s(:arg, :arch),
              s(:arg, :expected)),
            s(:begin,
              s(:lvasgn, :platform,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:lvar, :arch))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send,
                  s(:lvar, :platform), :to_a),
                s(:send,
                  s(:lvar, :arch), :inspect)))))),
      s(:def, :test_initialize_command_line,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "x86"),
              s(:str, "mswin32"),
              s(:nil))),
          s(:lvasgn, :platform,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "i386-mswin32"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :platform), :to_a),
            s(:str, "i386-mswin32")),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "x86"),
              s(:str, "mswin32"),
              s(:str, "80"))),
          s(:lvasgn, :platform,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "i386-mswin32-80"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :platform), :to_a),
            s(:str, "i386-mswin32-80")),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "x86"),
              s(:str, "solaris"),
              s(:str, "2.10"))),
          s(:lvasgn, :platform,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "i386-solaris-2.10"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :platform), :to_a),
            s(:str, "i386-solaris-2.10")))),
      s(:def, :test_initialize_mswin32_vc6,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :orig_RUBY_SO_NAME,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "RUBY_SO_NAME"))),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[]=,
              s(:str, "RUBY_SO_NAME"),
              s(:str, "msvcrt-ruby18")),
            s(:lvasgn, :expected,
              s(:array,
                s(:str, "x86"),
                s(:str, "mswin32"),
                s(:nil))),
            s(:lvasgn, :platform,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :new,
                s(:str, "i386-mswin32"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:lvar, :platform), :to_a),
              s(:str, "i386-mswin32 VC6"))),
          s(:if,
            s(:lvar, :orig_RUBY_SO_NAME),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[]=,
              s(:str, "RUBY_SO_NAME"),
              s(:lvar, :orig_RUBY_SO_NAME)),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :delete,
              s(:str, "RUBY_SO_NAME"))))),
      s(:def, :test_initialize_platform,
        s(:args),
        s(:begin,
          s(:lvasgn, :platform,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "cpu-my_platform1"))),
          s(:send, nil, :assert_equal,
            s(:str, "cpu"),
            s(:send,
              s(:lvar, :platform), :cpu)),
          s(:send, nil, :assert_equal,
            s(:str, "my_platform"),
            s(:send,
              s(:lvar, :platform), :os)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :platform), :version)))),
      s(:def, :test_initialize_test,
        s(:args),
        s(:begin,
          s(:lvasgn, :platform,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "cpu-my_platform1"))),
          s(:send, nil, :assert_equal,
            s(:str, "cpu"),
            s(:send,
              s(:lvar, :platform), :cpu)),
          s(:send, nil, :assert_equal,
            s(:str, "my_platform"),
            s(:send,
              s(:lvar, :platform), :os)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :platform), :version)),
          s(:lvasgn, :platform,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "cpu-other_platform1"))),
          s(:send, nil, :assert_equal,
            s(:str, "cpu"),
            s(:send,
              s(:lvar, :platform), :cpu)),
          s(:send, nil, :assert_equal,
            s(:str, "other_platform"),
            s(:send,
              s(:lvar, :platform), :os)),
          s(:send, nil, :assert_equal,
            s(:str, "1"),
            s(:send,
              s(:lvar, :platform), :version)))),
      s(:def, :test_to_s,
        s(:args),
        s(:if,
          s(:send, nil, :win_platform?),
          s(:send, nil, :assert_equal,
            s(:str, "x86-mswin32-60"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :local), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "x86-darwin-8"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :local), :to_s)))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:lvasgn, :my,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "cpu"),
                s(:str, "my_platform"),
                s(:str, "1")))),
          s(:lvasgn, :other,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "cpu"),
                s(:str, "other_platform"),
                s(:str, "1")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :my),
            s(:lvar, :my)),
          s(:send, nil, :refute_equal,
            s(:lvar, :my),
            s(:lvar, :other)),
          s(:send, nil, :refute_equal,
            s(:lvar, :other),
            s(:lvar, :my)))),
      s(:def, :test_equals3,
        s(:args),
        s(:begin,
          s(:lvasgn, :my,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "cpu"),
                s(:str, "my_platform"),
                s(:str, "1")))),
          s(:lvasgn, :other,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "cpu"),
                s(:str, "other_platform"),
                s(:str, "1")))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :my), :===,
              s(:lvar, :my))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :other), :===,
              s(:lvar, :my))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :my), :===,
              s(:lvar, :other))))),
      s(:def, :test_equals3_cpu,
        s(:args),
        s(:begin,
          s(:lvasgn, :ppc_darwin8,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "powerpc-darwin8.0"))),
          s(:lvasgn, :uni_darwin8,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "universal-darwin8.0"))),
          s(:lvasgn, :x86_darwin8,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "i686-darwin8.0"))),
          s(:send, nil, :util_set_arch,
            s(:str, "powerpc-darwin8")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :ppc_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "powerpc =~ universal")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :uni_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "powerpc =~ universal")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:lvar, :x86_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "powerpc =~ universal")),
          s(:send, nil, :util_set_arch,
            s(:str, "i686-darwin8")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:lvar, :ppc_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "powerpc =~ universal")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :uni_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "x86 =~ universal")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :x86_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "powerpc =~ universal")),
          s(:send, nil, :util_set_arch,
            s(:str, "universal-darwin8")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :ppc_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "universal =~ ppc")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :uni_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "universal =~ universal")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :x86_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "universal =~ x86")))),
      s(:def, :test_nil_cpu_arch_is_treated_as_universal,
        s(:args),
        s(:begin,
          s(:lvasgn, :with_nil_arch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:nil),
                s(:str, "mingw32")))),
          s(:lvasgn, :with_uni_arch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "universal"),
                s(:str, "mingw32")))),
          s(:lvasgn, :with_x86_arch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "x86"),
                s(:str, "mingw32")))),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :with_nil_arch), :===,
                s(:lvar, :with_uni_arch))),
            s(:str, "nil =~ universal")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :with_uni_arch), :===,
                s(:lvar, :with_nil_arch))),
            s(:str, "universal =~ nil")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :with_nil_arch), :===,
                s(:lvar, :with_x86_arch))),
            s(:str, "nil =~ x86")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :with_x86_arch), :===,
                s(:lvar, :with_nil_arch))),
            s(:str, "x86 =~ nil")))),
      s(:def, :test_equals3_cpu_arm,
        s(:args),
        s(:begin,
          s(:lvasgn, :arm,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "arm-linux"))),
          s(:lvasgn, :armv5,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "armv5-linux"))),
          s(:lvasgn, :armv7,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "armv7-linux"))),
          s(:send, nil, :util_set_arch,
            s(:str, "armv5-linux")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :arm), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "arm   === armv5")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :armv5), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "armv5 === armv5")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:lvar, :armv7), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "armv7 === armv5")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local), :===,
                s(:lvar, :arm))),
            s(:str, "armv5 === arm")),
          s(:send, nil, :util_set_arch,
            s(:str, "armv7-linux")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :arm), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "arm   === armv7")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:lvar, :armv5), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "armv5 === armv7")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :armv7), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "armv7 === armv7")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local), :===,
                s(:lvar, :arm))),
            s(:str, "armv7 === arm")))),
      s(:def, :test_equals3_version,
        s(:args),
        s(:begin,
          s(:send, nil, :util_set_arch,
            s(:str, "i686-darwin8")),
          s(:lvasgn, :x86_darwin,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "x86"),
                s(:str, "darwin"),
                s(:nil)))),
          s(:lvasgn, :x86_darwin7,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "x86"),
                s(:str, "darwin"),
                s(:str, "7")))),
          s(:lvasgn, :x86_darwin8,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "x86"),
                s(:str, "darwin"),
                s(:str, "8")))),
          s(:lvasgn, :x86_darwin9,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "x86"),
                s(:str, "darwin"),
                s(:str, "9")))),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :x86_darwin), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "x86_darwin === x86_darwin8")),
          s(:send, nil, :assert,
            s(:begin,
              s(:send,
                s(:lvar, :x86_darwin8), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "x86_darwin8 === x86_darwin8")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:lvar, :x86_darwin7), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "x86_darwin7 === x86_darwin8")),
          s(:send, nil, :refute,
            s(:begin,
              s(:send,
                s(:lvar, :x86_darwin9), :===,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))),
            s(:str, "x86_darwin9 === x86_darwin8")))),
      s(:def, :test_equals_tilde,
        s(:args),
        s(:begin,
          s(:send, nil, :util_set_arch,
            s(:str, "i386-mswin32")),
          s(:send, nil, :assert_local_match,
            s(:str, "mswin32")),
          s(:send, nil, :assert_local_match,
            s(:str, "i386-mswin32")),
          s(:send, nil, :assert_local_match,
            s(:str, "i386-mswin32-mq5.3")),
          s(:send, nil, :assert_local_match,
            s(:str, "i386-mswin32-mq6")),
          s(:send, nil, :refute_local_match,
            s(:str, "win32-1.8.2-VC7")),
          s(:send, nil, :refute_local_match,
            s(:str, "win32-1.8.4-VC6")),
          s(:send, nil, :refute_local_match,
            s(:str, "win32-source")),
          s(:send, nil, :refute_local_match,
            s(:str, "windows")),
          s(:send, nil, :util_set_arch,
            s(:str, "i686-linux")),
          s(:send, nil, :assert_local_match,
            s(:str, "i486-linux")),
          s(:send, nil, :assert_local_match,
            s(:str, "i586-linux")),
          s(:send, nil, :assert_local_match,
            s(:str, "i686-linux")),
          s(:send, nil, :util_set_arch,
            s(:str, "i686-darwin8")),
          s(:send, nil, :assert_local_match,
            s(:str, "i686-darwin8.4.1")),
          s(:send, nil, :assert_local_match,
            s(:str, "i686-darwin8.8.2")),
          s(:send, nil, :util_set_arch,
            s(:str, "java")),
          s(:send, nil, :assert_local_match,
            s(:str, "java")),
          s(:send, nil, :assert_local_match,
            s(:str, "jruby")),
          s(:send, nil, :util_set_arch,
            s(:str, "universal-dotnet2.0")),
          s(:send, nil, :assert_local_match,
            s(:str, "universal-dotnet")),
          s(:send, nil, :assert_local_match,
            s(:str, "universal-dotnet-2.0")),
          s(:send, nil, :refute_local_match,
            s(:str, "universal-dotnet-4.0")),
          s(:send, nil, :assert_local_match,
            s(:str, "dotnet")),
          s(:send, nil, :assert_local_match,
            s(:str, "dotnet-2.0")),
          s(:send, nil, :refute_local_match,
            s(:str, "dotnet-4.0")),
          s(:send, nil, :util_set_arch,
            s(:str, "universal-dotnet4.0")),
          s(:send, nil, :assert_local_match,
            s(:str, "universal-dotnet")),
          s(:send, nil, :refute_local_match,
            s(:str, "universal-dotnet-2.0")),
          s(:send, nil, :assert_local_match,
            s(:str, "universal-dotnet-4.0")),
          s(:send, nil, :assert_local_match,
            s(:str, "dotnet")),
          s(:send, nil, :refute_local_match,
            s(:str, "dotnet-2.0")),
          s(:send, nil, :assert_local_match,
            s(:str, "dotnet-4.0")),
          s(:send, nil, :util_set_arch,
            s(:str, "universal-macruby-1.0")),
          s(:send, nil, :assert_local_match,
            s(:str, "universal-macruby")),
          s(:send, nil, :assert_local_match,
            s(:str, "macruby")),
          s(:send, nil, :refute_local_match,
            s(:str, "universal-macruby-0.10")),
          s(:send, nil, :assert_local_match,
            s(:str, "universal-macruby-1.0")),
          s(:send, nil, :util_set_arch,
            s(:str, "powerpc-darwin")),
          s(:send, nil, :assert_local_match,
            s(:str, "powerpc-darwin")),
          s(:send, nil, :util_set_arch,
            s(:str, "powerpc-darwin7")),
          s(:send, nil, :assert_local_match,
            s(:str, "powerpc-darwin7.9.0")),
          s(:send, nil, :util_set_arch,
            s(:str, "powerpc-darwin8")),
          s(:send, nil, :assert_local_match,
            s(:str, "powerpc-darwin8.10.0")),
          s(:send, nil, :util_set_arch,
            s(:str, "sparc-solaris2.8")),
          s(:send, nil, :assert_local_match,
            s(:str, "sparc-solaris2.8-mq5.3")))),
      s(:def, :assert_local_match,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :assert_match,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Platform), :local),
          s(:lvar, :name))),
      s(:def, :refute_local_match,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :refute_match,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Platform), :local),
          s(:lvar, :name))))))
