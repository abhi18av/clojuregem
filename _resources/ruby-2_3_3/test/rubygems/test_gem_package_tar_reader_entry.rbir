s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/package/tar_test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:class,
    s(:const, nil, :TestGemPackageTarReaderEntry),
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Package), :TarTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@contents,
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:str, "a"),
                      s(:str, "z"))), :to_a), :join), :*,
              s(:int, 100))),
          s(:ivasgn, :@tar,
            s(:send,
              s(:const, nil, :String), :new)),
          s(:send,
            s(:ivar, :@tar), :<<,
            s(:send, nil, :tar_file_header,
              s(:str, "lib/foo"),
              s(:str, ""),
              s(:int, 0),
              s(:send,
                s(:ivar, :@contents), :size),
              s(:send,
                s(:const, nil, :Time), :now))),
          s(:send,
            s(:ivar, :@tar), :<<,
            s(:ivar, :@contents)),
          s(:send,
            s(:ivar, :@tar), :<<,
            s(:send,
              s(:str, "\u0000"), :*,
              s(:begin,
                s(:send,
                  s(:int, 512), :-,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:ivar, :@tar), :size), :%,
                      s(:int, 512))))))),
          s(:ivasgn, :@entry,
            s(:send, nil, :util_entry,
              s(:ivar, :@tar))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send, nil, :close_util_entry,
            s(:ivar, :@entry)),
          s(:zsuper))),
      s(:def, :close_util_entry,
        s(:args,
          s(:arg, :entry)),
        s(:send,
          s(:send,
            s(:lvar, :entry), :instance_variable_get,
            s(:sym, :@io)), :close!)),
      s(:def, :test_bytes_read,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@entry), :bytes_read)),
          s(:send,
            s(:ivar, :@entry), :getc),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@entry), :bytes_read)))),
      s(:def, :test_close,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@entry), :close),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@entry), :bytes_read)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :IOError)),
              s(:args),
              s(:send,
                s(:ivar, :@entry), :eof?))),
          s(:send, nil, :assert_equal,
            s(:str, "closed Gem::Package::TarReader::Entry"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :IOError)),
              s(:args),
              s(:send,
                s(:ivar, :@entry), :getc))),
          s(:send, nil, :assert_equal,
            s(:str, "closed Gem::Package::TarReader::Entry"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :IOError)),
              s(:args),
              s(:send,
                s(:ivar, :@entry), :pos))),
          s(:send, nil, :assert_equal,
            s(:str, "closed Gem::Package::TarReader::Entry"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :IOError)),
              s(:args),
              s(:send,
                s(:ivar, :@entry), :read))),
          s(:send, nil, :assert_equal,
            s(:str, "closed Gem::Package::TarReader::Entry"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :IOError)),
              s(:args),
              s(:send,
                s(:ivar, :@entry), :rewind))),
          s(:send, nil, :assert_equal,
            s(:str, "closed Gem::Package::TarReader::Entry"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_closed_eh,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@entry), :close),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@entry), :closed?)))),
      s(:def, :test_eof_eh,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@entry), :read),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@entry), :eof?)))),
      s(:def, :test_full_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "lib/foo"),
          s(:send,
            s(:ivar, :@entry), :full_name))),
      s(:def, :test_full_name_null,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@entry), :header), :prefix), :<<,
            s(:str, "\u0000")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarInvalidError)),
              s(:args),
              s(:send,
                s(:ivar, :@entry), :full_name))),
          s(:send, nil, :assert_equal,
            s(:str, "tar is corrupt, name contains null byte"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_getc,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "a"),
          s(:send,
            s(:ivar, :@entry), :getc))),
      s(:def, :test_directory_eh,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@entry), :directory?)),
            s(:lvasgn, :dir_ent,
              s(:send, nil, :util_dir_entry)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :dir_ent), :directory?))),
          s(:if,
            s(:lvar, :dir_ent),
            s(:send, nil, :close_util_entry,
              s(:lvar, :dir_ent)), nil))),
      s(:def, :test_symlink_eh,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:ivar, :@entry), :symlink?)),
            s(:lvasgn, :symlink_ent,
              s(:send, nil, :util_symlink_entry)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:lvar, :symlink_ent), :symlink?))),
          s(:if,
            s(:lvar, :symlink_ent),
            s(:send, nil, :close_util_entry,
              s(:lvar, :symlink_ent)), nil))),
      s(:def, :test_file_eh,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:ivar, :@entry), :file?)),
            s(:lvasgn, :dir_ent,
              s(:send, nil, :util_dir_entry)),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:lvar, :dir_ent), :file?))),
          s(:if,
            s(:lvar, :dir_ent),
            s(:send, nil, :close_util_entry,
              s(:lvar, :dir_ent)), nil))),
      s(:def, :test_pos,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@entry), :pos)),
          s(:send,
            s(:ivar, :@entry), :getc),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@entry), :pos)))),
      s(:def, :test_read,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@contents),
          s(:send,
            s(:ivar, :@entry), :read))),
      s(:def, :test_read_big,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@contents),
          s(:send,
            s(:ivar, :@entry), :read,
            s(:send,
              s(:send,
                s(:ivar, :@contents), :size), :*,
              s(:int, 2))))),
      s(:def, :test_read_small,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:ivar, :@contents), :[],
            s(:erange,
              s(:int, 0),
              s(:int, 100))),
          s(:send,
            s(:ivar, :@entry), :read,
            s(:int, 100)))),
      s(:def, :test_rewind,
        s(:args),
        s(:begin,
          s(:lvasgn, :char,
            s(:send,
              s(:ivar, :@entry), :getc)),
          s(:send,
            s(:ivar, :@entry), :rewind),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@entry), :pos)),
          s(:send, nil, :assert_equal,
            s(:lvar, :char),
            s(:send,
              s(:ivar, :@entry), :getc)))))))
