s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/dependency")),
  s(:class,
    s(:const, nil, :TestGemDependency),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "> 1.0"))),
          s(:send, nil, :assert_equal,
            s(:str, "pkg"),
            s(:send,
              s(:lvar, :d), :name)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :req,
              s(:str, "> 1.0")),
            s(:send,
              s(:lvar, :d), :requirement)))),
      s(:def, :test_initialize_type_bad,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:hash,
                  s(:pair,
                    s(:str, "monkey"),
                    s(:str, "1.0")))))),
          s(:send, nil, :assert_equal,
            s(:str, "dependency name must be a String, was {\"monkey\"=>\"1.0\"}"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_initialize_double,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "> 1.0"),
              s(:str, "< 2.0"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :req,
              s(:str, "> 1.0"),
              s(:str, "< 2.0")),
            s(:send,
              s(:lvar, :d), :requirement)))),
      s(:def, :test_initialize_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :req,
              s(:str, ">= 0")),
            s(:send,
              s(:lvar, :d), :requirement)))),
      s(:def, :test_initialize_prerelease,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "d"),
              s(:str, "1.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :d), :prerelease?)),
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "d"),
              s(:str, "= 1.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :d), :prerelease?)))),
      s(:def, :test_initialize_type,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :runtime),
            s(:send,
              s(:send, nil, :dep,
                s(:str, "pkg")), :type)),
          s(:send, nil, :assert_equal,
            s(:sym, :development),
            s(:send,
              s(:send, nil, :dep,
                s(:str, "pkg"),
                s(:array),
                s(:sym, :development)), :type)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:sym, :sometimes))))),
      s(:def, :test_initialize_version,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:send, nil, :v,
                s(:str, "2")))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :req,
              s(:str, "= 2")),
            s(:send,
              s(:lvar, :d), :requirement)))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send, nil, :dep,
              s(:str, "other"))),
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "> 1.0"))),
          s(:lvasgn, :d1,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "> 1.1"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:send,
              s(:lvar, :d), :dup)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :d), :dup),
            s(:lvar, :d)),
          s(:send, nil, :refute_equal,
            s(:lvar, :d),
            s(:lvar, :d1)),
          s(:send, nil, :refute_equal,
            s(:lvar, :d1),
            s(:lvar, :d)),
          s(:send, nil, :refute_equal,
            s(:lvar, :d),
            s(:lvar, :o)),
          s(:send, nil, :refute_equal,
            s(:lvar, :o),
            s(:lvar, :d)),
          s(:send, nil, :refute_equal,
            s(:lvar, :d),
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:const, nil, :Object), :new),
            s(:lvar, :d)))),
      s(:def, :test_equals2_type,
        s(:args),
        s(:send, nil, :refute_equal,
          s(:send, nil, :dep,
            s(:str, "pkg"),
            s(:sym, :runtime)),
          s(:send, nil, :dep,
            s(:str, "pkg"),
            s(:sym, :development)))),
      s(:def, :test_equals_tilde,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "0"))),
          s(:send, nil, :assert_match,
            s(:lvar, :d),
            s(:lvar, :d),
            s(:str, "match self")),
          s(:send, nil, :assert_match,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, ">= 0")),
            s(:lvar, :d),
            s(:str, "match version exact")),
          s(:send, nil, :assert_match,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, ">= 0")),
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "1")),
            s(:str, "match version")),
          s(:send, nil, :refute_match,
            s(:send, nil, :dep,
              s(:str, "a")),
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip_during),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:send, nil, :dep,
                  s(:regexp,
                    s(:str, "a"),
                    s(:regopt)),
                  s(:str, ">= 0")),
                s(:lvar, :d),
                s(:str, "match simple regexp")),
              s(:send, nil, :assert_match,
                s(:send, nil, :dep,
                  s(:regexp,
                    s(:str, "a|b"),
                    s(:regopt)),
                  s(:str, ">= 0")),
                s(:lvar, :d),
                s(:str, "match scary regexp")),
              s(:send, nil, :refute_match,
                s(:send, nil, :dep,
                  s(:regexp,
                    s(:str, "a"),
                    s(:regopt))),
                s(:send, nil, :dep,
                  s(:str, "b"))))))),
      s(:def, :test_equals_tilde_escape,
        s(:args),
        s(:begin,
          s(:send, nil, :refute_match,
            s(:send, nil, :dep,
              s(:str, "a|b")),
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "1"))),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip_during),
            s(:args),
            s(:send, nil, :assert_match,
              s(:send, nil, :dep,
                s(:regexp,
                  s(:str, "a|b"),
                  s(:regopt))),
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "1")))))),
      s(:def, :test_equals_tilde_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :o), :name,
            s(:args),
            s(:str, "a")),
          s(:defs,
            s(:lvar, :o), :version,
            s(:args),
            s(:str, "0")),
          s(:send, nil, :assert_match,
            s(:send, nil, :dep,
              s(:str, "a")),
            s(:lvar, :o)))),
      s(:def, :test_equals_tilde_spec,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_match,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, ">= 0")),
            s(:send, nil, :spec,
              s(:str, "a"),
              s(:str, "0"))),
          s(:send, nil, :assert_match,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "1")),
            s(:send, nil, :spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip_during),
            s(:args),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:send, nil, :dep,
                  s(:regexp,
                    s(:str, "a"),
                    s(:regopt)),
                  s(:str, ">= 0")),
                s(:send, nil, :spec,
                  s(:str, "a"),
                  s(:str, "0"))),
              s(:send, nil, :assert_match,
                s(:send, nil, :dep,
                  s(:regexp,
                    s(:str, "a|b"),
                    s(:regopt)),
                  s(:str, ">= 0")),
                s(:send, nil, :spec,
                  s(:str, "b"),
                  s(:str, "0"))),
              s(:send, nil, :refute_match,
                s(:send, nil, :dep,
                  s(:regexp,
                    s(:str, "a"),
                    s(:regopt)),
                  s(:str, ">= 0")),
                s(:send, nil, :spec,
                  s(:str, "b"),
                  s(:str, "0"))))))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "1.0"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :d), :hash),
            s(:send,
              s(:send,
                s(:lvar, :d), :dup), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :d), :dup), :hash),
            s(:send,
              s(:lvar, :d), :hash)),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "pkg"),
                s(:str, "1.0")), :hash),
            s(:send,
              s(:send, nil, :dep,
                s(:str, "pkg"),
                s(:str, "2.0")), :hash),
            s(:str, "requirement")),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "pkg"),
                s(:str, "1.0")), :hash),
            s(:send,
              s(:send, nil, :dep,
                s(:str, "abc"),
                s(:str, "1.0")), :hash),
            s(:str, "name")),
          s(:send, nil, :refute_equal,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:sym, :development)),
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:sym, :runtime)),
            s(:str, "type")))),
      s(:def, :test_match_eh_name_tuple,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:lvasgn, :a_tup,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :b_tup,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "b"),
              s(:int, 2))),
          s(:lvasgn, :c_tup,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "c"),
              s(:str, "2.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :a_dep), :match?,
              s(:lvar, :a_tup))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :a_dep), :match?,
              s(:lvar, :b_tup))),
          s(:lvasgn, :b_dep,
            s(:send, nil, :dep,
              s(:str, "b"),
              s(:str, ">= 3"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :b_dep), :match?,
              s(:lvar, :b_tup))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"),
              s(:str, ">= 1"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_tup))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_tup))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"),
              s(:str, "2.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_tup))))),
      s(:def, :test_match_eh_allow_prerelease,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:lvasgn, :a_tup,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :b_tup,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "b"),
              s(:int, 2))),
          s(:lvasgn, :c_tup,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "c"),
              s(:str, "2.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :a_dep), :match?,
              s(:lvar, :a_tup),
              s(:nil),
              s(:true))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :a_dep), :match?,
              s(:lvar, :b_tup),
              s(:nil),
              s(:true))),
          s(:lvasgn, :b_dep,
            s(:send, nil, :dep,
              s(:str, "b"),
              s(:str, ">= 3"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :b_dep), :match?,
              s(:lvar, :b_tup),
              s(:nil),
              s(:true))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"),
              s(:str, ">= 1"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_tup),
              s(:nil),
              s(:true))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_tup),
              s(:nil),
              s(:true))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"),
              s(:str, "2.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_tup),
              s(:nil),
              s(:true))))),
      s(:def, :test_match_eh_specification,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:lvasgn, :a_spec,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :b_spec,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:int, 2))),
          s(:lvasgn, :c_spec,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "2.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :a_dep), :match?,
              s(:lvar, :a_spec))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :a_dep), :match?,
              s(:lvar, :b_spec))),
          s(:lvasgn, :b_dep,
            s(:send, nil, :dep,
              s(:str, "b"),
              s(:str, ">= 3"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :b_dep), :match?,
              s(:lvar, :b_spec))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"),
              s(:str, ">= 1"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_spec))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_spec))),
          s(:lvasgn, :c_dep,
            s(:send, nil, :dep,
              s(:str, "c"),
              s(:str, "2.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :c_dep), :match?,
              s(:lvar, :c_spec))))),
      s(:def, :test_matches_spec_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:int, 2))),
          s(:send, nil, :refute,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "a")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "name mismatch")),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "b")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "name match")),
          s(:send, nil, :refute,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, "= 1")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "requirement mismatch")),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, "~> 2")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "requirement match")))),
      s(:def, :test_matches_spec_eh_prerelease,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2.1.a"))),
          s(:send, nil, :refute,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "a")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "name mismatch")),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "b")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "name match")),
          s(:send, nil, :refute,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, "= 1")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "requirement mismatch")),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, "~> 2")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "requirement match")),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, "~> 2.a")), :matches_spec?,
              s(:lvar, :spec)),
            s(:str, "prerelease requirement")))),
      s(:def, :test_merge,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "~> 1.0"))),
          s(:lvasgn, :a2,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "= 1.0"))),
          s(:lvasgn, :a3,
            s(:send,
              s(:lvar, :a1), :merge,
              s(:lvar, :a2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "~> 1.0"),
              s(:str, "= 1.0")),
            s(:lvar, :a3)))),
      s(:def, :test_merge_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:lvasgn, :a2,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :a3,
            s(:send,
              s(:lvar, :a1), :merge,
              s(:lvar, :a2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "1")),
            s(:lvar, :a3)))),
      s(:def, :test_merge_name_mismatch,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:lvasgn, :b,
            s(:send, nil, :dep,
              s(:str, "b"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :a), :merge,
                s(:lvar, :b)))),
          s(:send, nil, :assert_equal,
            s(:str, "a (>= 0) and b (>= 0) have different names"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_merge_other_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :a2,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:lvasgn, :a3,
            s(:send,
              s(:lvar, :a1), :merge,
              s(:lvar, :a2))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "1")),
            s(:lvar, :a3)))),
      s(:def, :test_prerelease_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "= 1"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :d), :prerelease?)),
          s(:send,
            s(:lvar, :d), :prerelease=,
            s(:true)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :d), :prerelease?)),
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "= 1.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :d), :prerelease?)),
          s(:send,
            s(:lvar, :d), :prerelease=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :d), :prerelease?)),
          s(:lvasgn, :d,
            s(:send, nil, :dep,
              s(:str, "pkg"),
              s(:str, "> 1.a"),
              s(:str, "> 2"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :d), :prerelease?)))),
      s(:def, :test_specific,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "> 1")), :specific?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 1")), :specific?)))),
      s(:def, :test_to_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :a_2,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "2"))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, ">= 0"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a_1),
            s(:lvar, :a_2)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a_2),
            s(:send,
              s(:lvar, :a_dep), :to_spec)))),
      s(:def, :test_to_spec_prerelease,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :a_1_1_a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.1.a"))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, ">= 0"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a_1),
            s(:lvar, :a_1_1_a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a_1),
            s(:send,
              s(:lvar, :a_dep), :to_spec)),
          s(:lvasgn, :a_pre_dep,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, ">= 0"))),
          s(:send,
            s(:lvar, :a_pre_dep), :prerelease=,
            s(:true)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a_1_1_a),
            s(:send,
              s(:lvar, :a_pre_dep), :to_spec)))),
      s(:def, :test_to_specs_suggests_other_versions,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a)),
          s(:lvasgn, :a_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "lib"),
              s(:str, "a_file.rb"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :a_file)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "# a_file.rb"))),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "a"),
              s(:str, "= 2.0"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :LoadError)),
              s(:args),
              s(:send,
                s(:lvar, :dep), :to_specs))),
          s(:send, nil, :assert_match,
            s(:str, "Could not find 'a' (= 2.0) - did find: [a-1.0]"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_to_specs_indicates_total_gem_set_size,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a)),
          s(:lvasgn, :a_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "lib"),
              s(:str, "a_file.rb"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :a_file)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "# a_file.rb"))),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "b"),
              s(:str, "= 2.0"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :LoadError)),
              s(:args),
              s(:send,
                s(:lvar, :dep), :to_specs))),
          s(:send, nil, :assert_match,
            s(:str, "Could not find 'b' (= 2.0) among 1 total gem(s)"),
            s(:send,
              s(:lvar, :e), :message)))))))
