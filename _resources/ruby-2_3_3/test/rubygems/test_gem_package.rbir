s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/package/tar_test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/simple_gem")),
  s(:class,
    s(:const, nil, :TestGemPackage),
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Package), :TarTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@spec,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :description=,
                  s(:str, "Ï€")),
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "lib/code.rb")))))),
          s(:send, nil, :util_build_gem,
            s(:ivar, :@spec)),
          s(:ivasgn, :@gem,
            s(:send,
              s(:ivar, :@spec), :cache_file)),
          s(:ivasgn, :@destination,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "extract"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@destination)))),
      s(:def, :test_class_new_old_format,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :open,
              s(:str, "old_format.gem"),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:const, nil, :SIMPLE_GEM))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "old_format.gem"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :package), :spec)))),
      s(:def, :test_add_checksums,
        s(:args),
        s(:begin,
          s(:lvasgn, :gem_io,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "build"),
              s(:str, "1"))),
          s(:send,
            s(:lvar, :spec), :summary=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :authors=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"))),
          s(:send,
            s(:lvar, :spec), :date=,
            s(:send,
              s(:const, nil, :Time), :at,
              s(:int, 0))),
          s(:send,
            s(:lvar, :spec), :rubygems_version=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:str, "0"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "lib")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:send,
            s(:lvar, :package), :build_time=,
            s(:int, 1)),
          s(:send,
            s(:lvar, :package), :setup_signer),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :TarWriter), :new,
              s(:lvar, :gem_io)),
            s(:args,
              s(:arg, :gem)),
            s(:begin,
              s(:send,
                s(:lvar, :package), :add_metadata,
                s(:lvar, :gem)),
              s(:send,
                s(:lvar, :package), :add_contents,
                s(:lvar, :gem)),
              s(:send,
                s(:lvar, :package), :add_checksums,
                s(:lvar, :gem)))),
          s(:send,
            s(:lvar, :gem_io), :rewind),
          s(:lvasgn, :reader,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :TarReader), :new,
              s(:lvar, :gem_io))),
          s(:lvasgn, :checksums,
            s(:nil)),
          s(:lvasgn, :tar,
            s(:nil)),
          s(:block,
            s(:send,
              s(:lvar, :reader), :each_entry),
            s(:args,
              s(:arg, :entry)),
            s(:case,
              s(:send,
                s(:lvar, :entry), :full_name),
              s(:when,
                s(:str, "checksums.yaml.gz"),
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Zlib), :GzipReader), :wrap,
                    s(:lvar, :entry)),
                  s(:args,
                    s(:arg, :io)),
                  s(:lvasgn, :checksums,
                    s(:send,
                      s(:lvar, :io), :read)))),
              s(:when,
                s(:str, "data.tar.gz"),
                s(:lvasgn, :tar,
                  s(:send,
                    s(:lvar, :entry), :read))), nil)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:block,
            s(:send,
              s(:lvar, :package), :gzip_to,
              s(:lvar, :s)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:lvar, :spec), :to_yaml))),
          s(:lvasgn, :metadata_sha1,
            s(:send,
              s(:const,
                s(:const, nil, :Digest), :SHA1), :hexdigest,
              s(:send,
                s(:lvar, :s), :string))),
          s(:lvasgn, :metadata_sha512,
            s(:send,
              s(:const,
                s(:const, nil, :Digest), :SHA512), :hexdigest,
              s(:send,
                s(:lvar, :s), :string))),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "SHA512"),
                s(:hash,
                  s(:pair,
                    s(:str, "metadata.gz"),
                    s(:lvar, :metadata_sha512)),
                  s(:pair,
                    s(:str, "data.tar.gz"),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Digest), :SHA512), :hexdigest,
                      s(:lvar, :tar))))))),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :Digest)),
            s(:send,
              s(:lvar, :expected), :[]=,
              s(:str, "SHA1"),
              s(:hash,
                s(:pair,
                  s(:str, "metadata.gz"),
                  s(:lvar, :metadata_sha1)),
                s(:pair,
                  s(:str, "data.tar.gz"),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :SHA1), :hexdigest,
                    s(:lvar, :tar))))), nil),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:lvar, :checksums))))),
      s(:def, :test_add_files,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new)),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"),
              s(:str, "lib/empty"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:str, "lib/empty")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/extra.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/extra.rb"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "bogus.gem"))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:lvasgn, :tar,
            s(:block,
              s(:send, nil, :util_tar),
              s(:args,
                s(:arg, :tar_io)),
              s(:send,
                s(:lvar, :package), :add_files,
                s(:lvar, :tar_io)))),
          s(:send,
            s(:lvar, :tar), :rewind),
          s(:lvasgn, :files,
            s(:array)),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :TarReader), :new,
              s(:lvar, :tar)),
            s(:args,
              s(:arg, :tar_io)),
            s(:block,
              s(:send,
                s(:lvar, :tar_io), :each_entry),
              s(:args,
                s(:arg, :entry)),
              s(:send,
                s(:lvar, :files), :<<,
                s(:send,
                  s(:lvar, :entry), :full_name)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:lvar, :files)))),
      s(:def, :test_add_files_symlink,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "symlink not supported")), nil),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new)),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"),
              s(:str, "lib/code_sym.rb"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:str, "lib")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:send,
            s(:const, nil, :File), :symlink,
            s(:str, "lib/code.rb"),
            s(:str, "lib/code_sym.rb")),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "bogus.gem"))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:lvasgn, :tar,
            s(:block,
              s(:send, nil, :util_tar),
              s(:args,
                s(:arg, :tar_io)),
              s(:send,
                s(:lvar, :package), :add_files,
                s(:lvar, :tar_io)))),
          s(:send,
            s(:lvar, :tar), :rewind),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :files),
              s(:lvasgn, :symlinks)),
            s(:array,
              s(:array),
              s(:array))),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :TarReader), :new,
              s(:lvar, :tar)),
            s(:args,
              s(:arg, :tar_io)),
            s(:block,
              s(:send,
                s(:lvar, :tar_io), :each_entry),
              s(:args,
                s(:arg, :entry)),
              s(:send,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :entry), :symlink?),
                    s(:lvar, :symlinks),
                    s(:lvar, :files))), :<<,
                s(:send,
                  s(:lvar, :entry), :full_name)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:lvar, :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code_sym.rb")),
            s(:lvar, :symlinks)))),
      s(:def, :test_build,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "build"),
              s(:str, "1"))),
          s(:send,
            s(:lvar, :spec), :summary=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :authors=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"))),
          s(:send,
            s(:lvar, :spec), :rubygems_version=,
            s(:sym, :junk)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "lib")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:send,
            s(:lvar, :package), :build),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Gem), :VERSION),
            s(:send,
              s(:lvar, :spec), :rubygems_version)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :spec), :file_name)),
          s(:lvasgn, :reader,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send, nil, :assert_equal,
            s(:lvar, :spec),
            s(:send,
              s(:lvar, :reader), :spec)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "metadata.gz"),
              s(:str, "data.tar.gz"),
              s(:str, "checksums.yaml.gz")),
            s(:send,
              s(:lvar, :reader), :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:lvar, :reader), :contents)))),
      s(:def, :test_build_auto_signed,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"))),
          s(:lvasgn, :private_key_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"),
              s(:str, "gem-private_key.pem"))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Security), :write,
            s(:const, nil, :PRIVATE_KEY),
            s(:lvar, :private_key_path)),
          s(:lvasgn, :public_cert_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"),
              s(:str, "gem-public_cert.pem"))),
          s(:send,
            s(:const, nil, :FileUtils), :cp,
            s(:const, nil, :PUBLIC_CERT_PATH),
            s(:lvar, :public_cert_path)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "build"),
              s(:str, "1"))),
          s(:send,
            s(:lvar, :spec), :summary=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :authors=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "lib")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:send,
            s(:lvar, :package), :build),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Gem), :VERSION),
            s(:send,
              s(:lvar, :spec), :rubygems_version)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :spec), :file_name)),
          s(:lvasgn, :reader,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :reader), :verify)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem)),
            s(:send,
              s(:send,
                s(:lvar, :reader), :spec), :cert_chain)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "metadata.gz"),
              s(:str, "metadata.gz.sig"),
              s(:str, "data.tar.gz"),
              s(:str, "data.tar.gz.sig"),
              s(:str, "checksums.yaml.gz"),
              s(:str, "checksums.yaml.gz.sig")),
            s(:send,
              s(:lvar, :reader), :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:lvar, :reader), :contents)))),
      s(:def, :test_build_auto_signed_encrypted_key,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"))),
          s(:lvasgn, :private_key_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"),
              s(:str, "gem-private_key.pem"))),
          s(:send,
            s(:const, nil, :FileUtils), :cp,
            s(:const, nil, :ENCRYPTED_PRIVATE_KEY_PATH),
            s(:lvar, :private_key_path)),
          s(:lvasgn, :public_cert_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"),
              s(:str, "gem-public_cert.pem"))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Security), :write,
            s(:const, nil, :PUBLIC_CERT),
            s(:lvar, :public_cert_path)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "build"),
              s(:str, "1"))),
          s(:send,
            s(:lvar, :spec), :summary=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :authors=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "lib")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:send,
            s(:lvar, :package), :build),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Gem), :VERSION),
            s(:send,
              s(:lvar, :spec), :rubygems_version)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :spec), :file_name)),
          s(:lvasgn, :reader,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :reader), :verify)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem)),
            s(:send,
              s(:send,
                s(:lvar, :reader), :spec), :cert_chain)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "metadata.gz"),
              s(:str, "metadata.gz.sig"),
              s(:str, "data.tar.gz"),
              s(:str, "data.tar.gz.sig"),
              s(:str, "checksums.yaml.gz"),
              s(:str, "checksums.yaml.gz.sig")),
            s(:send,
              s(:lvar, :reader), :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:lvar, :reader), :contents)))),
      s(:def, :test_build_invalid,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "build"),
              s(:str, "1"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException)),
              s(:args),
              s(:send,
                s(:lvar, :package), :build))),
          s(:send, nil, :assert_equal,
            s(:str, "missing value for attribute summary"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_build_signed,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "build"),
              s(:str, "1"))),
          s(:send,
            s(:lvar, :spec), :summary=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :authors=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"))),
          s(:send,
            s(:lvar, :spec), :cert_chain=,
            s(:array,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem))),
          s(:send,
            s(:lvar, :spec), :signing_key=,
            s(:const, nil, :PRIVATE_KEY)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "lib")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:send,
            s(:lvar, :package), :build),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Gem), :VERSION),
            s(:send,
              s(:lvar, :spec), :rubygems_version)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :spec), :file_name)),
          s(:lvasgn, :reader,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :reader), :verify)),
          s(:send, nil, :assert_equal,
            s(:lvar, :spec),
            s(:send,
              s(:lvar, :reader), :spec)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "metadata.gz"),
              s(:str, "metadata.gz.sig"),
              s(:str, "data.tar.gz"),
              s(:str, "data.tar.gz.sig"),
              s(:str, "checksums.yaml.gz"),
              s(:str, "checksums.yaml.gz.sig")),
            s(:send,
              s(:lvar, :reader), :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:lvar, :reader), :contents)))),
      s(:def, :test_build_signed_encrypted_key,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "build"),
              s(:str, "1"))),
          s(:send,
            s(:lvar, :spec), :summary=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :authors=,
            s(:str, "build")),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:array,
              s(:str, "lib/code.rb"))),
          s(:send,
            s(:lvar, :spec), :cert_chain=,
            s(:array,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem))),
          s(:send,
            s(:lvar, :spec), :signing_key=,
            s(:const, nil, :ENCRYPTED_PRIVATE_KEY)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "lib")),
          s(:block,
            s(:send, nil, :open,
              s(:str, "lib/code.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# lib/code.rb"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send,
            s(:lvar, :package), :spec=,
            s(:lvar, :spec)),
          s(:send,
            s(:lvar, :package), :build),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const, nil, :Gem), :VERSION),
            s(:send,
              s(:lvar, :spec), :rubygems_version)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :spec), :file_name)),
          s(:lvasgn, :reader,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:send,
                s(:lvar, :spec), :file_name))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :reader), :verify)),
          s(:send, nil, :assert_equal,
            s(:lvar, :spec),
            s(:send,
              s(:lvar, :reader), :spec)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "metadata.gz"),
              s(:str, "metadata.gz.sig"),
              s(:str, "data.tar.gz"),
              s(:str, "data.tar.gz.sig"),
              s(:str, "checksums.yaml.gz"),
              s(:str, "checksums.yaml.gz.sig")),
            s(:send,
              s(:lvar, :reader), :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:lvar, :reader), :contents)))),
      s(:def, :test_contents,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:lvar, :package), :contents)))),
      s(:def, :test_extract_files,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send,
            s(:lvar, :package), :extract_files,
            s(:ivar, :@destination)),
          s(:lvasgn, :extracted,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "lib/code.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :extracted)),
          s(:lvasgn, :mask,
            s(:send,
              s(:int, 33206), :&,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :umask), :~)))),
          s(:if,
            s(:send, nil, :win_platform?), nil,
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :mask), :to_s,
                s(:int, 8)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :extracted)), :mode), :to_s,
                s(:int, 8)))))),
      s(:def, :test_extract_files_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :data_tgz,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args), nil)),
          s(:lvasgn, :gem,
            s(:block,
              s(:send, nil, :util_tar),
              s(:args,
                s(:arg, :tar)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "data.tar.gz"),
                    s(:int, 420)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:send,
                      s(:lvar, :data_tgz), :string))),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "metadata.gz"),
                    s(:int, 420)),
                  s(:args,
                    s(:arg, :io)),
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Zlib), :GzipWriter), :wrap,
                      s(:lvar, :io)),
                    s(:args,
                      s(:arg, :gzio)),
                    s(:send,
                      s(:lvar, :gzio), :write,
                      s(:send,
                        s(:ivar, :@spec), :to_yaml))))))),
          s(:block,
            s(:send, nil, :open,
              s(:str, "empty.gem"),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:lvar, :gem), :string))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "empty.gem"))),
          s(:send,
            s(:lvar, :package), :extract_files,
            s(:ivar, :@destination)),
          s(:send, nil, :assert_path_exists,
            s(:ivar, :@destination)))),
      s(:def, :test_extract_tar_gz_absolute,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :tgz_io,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args,
                s(:arg, :tar)),
              s(:block,
                s(:send,
                  s(:lvar, :tar), :add_file,
                  s(:str, "/absolute.rb"),
                  s(:int, 420)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "hi"))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :PathError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :extract_tar_gz,
                s(:lvar, :tgz_io),
                s(:ivar, :@destination)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "installing into parent path /absolute.rb of "), :+,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@destination)),
                s(:str, " is not allowed"))),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_extract_tar_gz_symlink_relative_path,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "symlink not supported")), nil),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :tgz_io,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args,
                s(:arg, :tar)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "relative.rb"),
                    s(:int, 420)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:str, "hi"))),
                s(:send,
                  s(:lvar, :tar), :mkdir,
                  s(:str, "lib"),
                  s(:int, 493)),
                s(:send,
                  s(:lvar, :tar), :add_symlink,
                  s(:str, "lib/foo.rb"),
                  s(:str, "../relative.rb"),
                  s(:int, 420))))),
          s(:send,
            s(:lvar, :package), :extract_tar_gz,
            s(:lvar, :tgz_io),
            s(:ivar, :@destination)),
          s(:lvasgn, :extracted,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "lib/foo.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :extracted)),
          s(:send, nil, :assert_equal,
            s(:str, "../relative.rb"),
            s(:send,
              s(:const, nil, :File), :readlink,
              s(:lvar, :extracted))),
          s(:send, nil, :assert_equal,
            s(:str, "hi"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :extracted))))),
      s(:def, :test_extract_tar_gz_directory,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :tgz_io,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args,
                s(:arg, :tar)),
              s(:begin,
                s(:send,
                  s(:lvar, :tar), :mkdir,
                  s(:str, "lib"),
                  s(:int, 493)),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "lib/foo.rb"),
                    s(:int, 420)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:str, "hi"))),
                s(:send,
                  s(:lvar, :tar), :mkdir,
                  s(:str, "lib/foo"),
                  s(:int, 493))))),
          s(:send,
            s(:lvar, :package), :extract_tar_gz,
            s(:lvar, :tgz_io),
            s(:ivar, :@destination)),
          s(:lvasgn, :extracted,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "lib/foo.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :extracted)),
          s(:lvasgn, :extracted,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "lib/foo"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :extracted)))),
      s(:def, :test_extract_tar_gz_dot_slash,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :tgz_io,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args,
                s(:arg, :tar)),
              s(:block,
                s(:send,
                  s(:lvar, :tar), :add_file,
                  s(:str, "./dot_slash.rb"),
                  s(:int, 420)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "hi"))))),
          s(:send,
            s(:lvar, :package), :extract_tar_gz,
            s(:lvar, :tgz_io),
            s(:ivar, :@destination)),
          s(:lvasgn, :extracted,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "dot_slash.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :extracted)))),
      s(:def, :test_extract_tar_gz_dot_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :tgz_io,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args,
                s(:arg, :tar)),
              s(:block,
                s(:send,
                  s(:lvar, :tar), :add_file,
                  s(:str, ".dot_file.rb"),
                  s(:int, 420)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "hi"))))),
          s(:send,
            s(:lvar, :package), :extract_tar_gz,
            s(:lvar, :tgz_io),
            s(:ivar, :@destination)),
          s(:lvasgn, :extracted,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, ".dot_file.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :extracted)))),
      s(:def, :test_install_location,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :file,
            s(:send,
              s(:str, "file.rb"), :dup)),
          s(:send,
            s(:lvar, :file), :taint),
          s(:lvasgn, :destination,
            s(:send,
              s(:lvar, :package), :install_location,
              s(:lvar, :file),
              s(:ivar, :@destination))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "file.rb")),
            s(:lvar, :destination)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :destination), :tainted?)))),
      s(:def, :test_install_location_absolute,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :PathError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :install_location,
                s(:str, "/absolute.rb"),
                s(:ivar, :@destination)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "installing into parent path /absolute.rb of "), :+,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@destination)),
                s(:str, " is not allowed"))),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_install_location_dots,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :file,
            s(:str, "file.rb")),
          s(:lvasgn, :destination,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "foo"),
              s(:str, ".."),
              s(:str, "bar"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "foo"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :destination))),
          s(:lvasgn, :destination,
            s(:send,
              s(:lvar, :package), :install_location,
              s(:lvar, :file),
              s(:lvar, :destination))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "bar"),
              s(:str, "file.rb")),
            s(:lvar, :destination)))),
      s(:def, :test_install_location_extra_slash,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :<,
              s(:str, "1.9")),
            s(:send, nil, :skip,
              s(:str, "no File.realpath on 1.8")), nil),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :file,
            s(:send,
              s(:str, "foo//file.rb"), :dup)),
          s(:send,
            s(:lvar, :file), :taint),
          s(:lvasgn, :destination,
            s(:send,
              s(:ivar, :@destination), :sub,
              s(:str, "/"),
              s(:str, "//"))),
          s(:lvasgn, :destination,
            s(:send,
              s(:lvar, :package), :install_location,
              s(:lvar, :file),
              s(:lvar, :destination))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "foo"),
              s(:str, "file.rb")),
            s(:lvar, :destination)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :destination), :tainted?)))),
      s(:def, :test_install_location_relative,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :PathError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :install_location,
                s(:str, "../relative.rb"),
                s(:ivar, :@destination)))),
          s(:lvasgn, :parent,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@destination),
                s(:str, "../relative.rb")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "installing into parent path "),
                s(:begin,
                  s(:lvar, :parent)),
                s(:str, " of ")), :+,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@destination)),
                s(:str, " is not allowed"))),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_load_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :entry,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:const, nil, :Gem), :gzip,
                s(:send,
                  s(:ivar, :@spec), :to_yaml)))),
          s(:defs,
            s(:lvar, :entry), :full_name,
            s(:args),
            s(:str, "metadata.gz")),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "nonexistent.gem"))),
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :package), :load_spec,
              s(:lvar, :entry))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@spec),
            s(:lvar, :spec)))),
      s(:def, :test_verify,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send,
            s(:lvar, :package), :verify),
          s(:send, nil, :assert_equal,
            s(:ivar, :@spec),
            s(:send,
              s(:lvar, :package), :spec)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "checksums.yaml.gz"),
              s(:str, "data.tar.gz"),
              s(:str, "metadata.gz")),
            s(:send,
              s(:send,
                s(:lvar, :package), :files), :sort)))),
      s(:def, :test_verify_checksum_bad,
        s(:args),
        s(:begin,
          s(:lvasgn, :data_tgz,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args,
                s(:arg, :tar)),
              s(:block,
                s(:send,
                  s(:lvar, :tar), :add_file,
                  s(:str, "lib/code.rb"),
                  s(:int, 292)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "# lib/code.rb"))))),
          s(:lvasgn, :data_tgz,
            s(:send,
              s(:lvar, :data_tgz), :string)),
          s(:lvasgn, :gem,
            s(:block,
              s(:send, nil, :util_tar),
              s(:args,
                s(:arg, :tar)),
              s(:begin,
                s(:lvasgn, :metadata_gz,
                  s(:send,
                    s(:const, nil, :Gem), :gzip,
                    s(:send,
                      s(:ivar, :@spec), :to_yaml))),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "metadata.gz"),
                    s(:int, 292)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:lvar, :metadata_gz))),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "data.tar.gz"),
                    s(:int, 292)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:lvar, :data_tgz))),
                s(:lvasgn, :bogus_checksums,
                  s(:hash,
                    s(:pair,
                      s(:str, "SHA1"),
                      s(:hash,
                        s(:pair,
                          s(:str, "data.tar.gz"),
                          s(:str, "bogus")),
                        s(:pair,
                          s(:str, "metadata.gz"),
                          s(:str, "bogus")))))),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "checksums.yaml.gz"),
                    s(:int, 292)),
                  s(:args,
                    s(:arg, :io)),
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Zlib), :GzipWriter), :wrap,
                      s(:lvar, :io)),
                    s(:args,
                      s(:arg, :gz_io)),
                    s(:send,
                      s(:lvar, :gz_io), :write,
                      s(:send,
                        s(:const, nil, :YAML), :dump,
                        s(:lvar, :bogus_checksums)))))))),
          s(:block,
            s(:send, nil, :open,
              s(:str, "mismatch.gem"),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:lvar, :gem), :string))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "mismatch.gem"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :FormatError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :verify))),
          s(:send, nil, :assert_equal,
            s(:str, "SHA1 checksum mismatch for data.tar.gz in mismatch.gem"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_verify_checksum_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :data_tgz,
            s(:block,
              s(:send, nil, :util_tar_gz),
              s(:args,
                s(:arg, :tar)),
              s(:block,
                s(:send,
                  s(:lvar, :tar), :add_file,
                  s(:str, "lib/code.rb"),
                  s(:int, 292)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:str, "# lib/code.rb"))))),
          s(:lvasgn, :data_tgz,
            s(:send,
              s(:lvar, :data_tgz), :string)),
          s(:lvasgn, :gem,
            s(:block,
              s(:send, nil, :util_tar),
              s(:args,
                s(:arg, :tar)),
              s(:begin,
                s(:lvasgn, :metadata_gz,
                  s(:send,
                    s(:const, nil, :Gem), :gzip,
                    s(:send,
                      s(:ivar, :@spec), :to_yaml))),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "metadata.gz"),
                    s(:int, 292)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:lvar, :metadata_gz))),
                s(:lvasgn, :digest,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :SHA1), :new)),
                s(:send,
                  s(:lvar, :digest), :<<,
                  s(:lvar, :metadata_gz)),
                s(:lvasgn, :checksums,
                  s(:hash,
                    s(:pair,
                      s(:str, "SHA1"),
                      s(:hash,
                        s(:pair,
                          s(:str, "metadata.gz"),
                          s(:send,
                            s(:lvar, :digest), :hexdigest)))))),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "checksums.yaml.gz"),
                    s(:int, 292)),
                  s(:args,
                    s(:arg, :io)),
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Zlib), :GzipWriter), :wrap,
                      s(:lvar, :io)),
                    s(:args,
                      s(:arg, :gz_io)),
                    s(:send,
                      s(:lvar, :gz_io), :write,
                      s(:send,
                        s(:const, nil, :YAML), :dump,
                        s(:lvar, :checksums))))),
                s(:block,
                  s(:send,
                    s(:lvar, :tar), :add_file,
                    s(:str, "data.tar.gz"),
                    s(:int, 292)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:lvar, :data_tgz)))))),
          s(:block,
            s(:send, nil, :open,
              s(:str, "data_checksum_missing.gem"),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:lvar, :gem), :string))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "data_checksum_missing.gem"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :package), :verify)))),
      s(:def, :test_verify_corrupt,
        s(:args),
        s(:begin,
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "corrupt")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:lvasgn, :data,
                  s(:send,
                    s(:const, nil, :Gem), :gzip,
                    s(:send,
                      s(:str, "a"), :*,
                      s(:int, 10)))),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send, nil, :tar_file_header,
                    s(:str, "metadata.gz"),
                    s(:str, "\u0000x"),
                    s(:int, 420),
                    s(:send,
                      s(:lvar, :data), :length),
                    s(:send,
                      s(:const, nil, :Time), :now))),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:lvar, :data)),
                s(:send,
                  s(:lvar, :io), :rewind),
                s(:lvasgn, :package,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Package), :new,
                    s(:send,
                      s(:lvar, :io), :path))),
                s(:lvasgn, :e,
                  s(:block,
                    s(:send, nil, :assert_raises,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Package), :FormatError)),
                    s(:args),
                    s(:send,
                      s(:lvar, :package), :verify))),
                s(:send, nil, :assert_equal,
                  s(:dstr,
                    s(:str, "tar is corrupt, name contains null byte in "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :io), :path))),
                  s(:send,
                    s(:lvar, :e), :message)),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil))),
      s(:def, :test_verify_empty,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "empty.gem")),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "empty.gem"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :FormatError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :verify))),
          s(:send, nil, :assert_equal,
            s(:str, "package metadata is missing in empty.gem"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_verify_nonexistent,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "nonexistent.gem"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :FormatError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :verify))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^No such file or directory"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "nonexistent.gem$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_verify_security_policy,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send,
            s(:lvar, :package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :HighSecurity)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception)),
              s(:args),
              s(:send,
                s(:lvar, :package), :verify))),
          s(:send, nil, :assert_equal,
            s(:str, "unsigned gems are not allowed by the High Security policy"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :package), :instance_variable_get,
              s(:sym, :@spec)),
            s(:str, "@spec must not be loaded")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :package), :instance_variable_get,
              s(:sym, :@files)),
            s(:str, "@files must empty")))),
      s(:def, :test_verify_security_policy_low_security,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send,
            s(:ivar, :@spec), :cert_chain=,
            s(:array,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem))),
          s(:send,
            s(:ivar, :@spec), :signing_key=,
            s(:const, nil, :PRIVATE_KEY)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:str, "lib")),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "lib/code.rb")),
          s(:lvasgn, :build,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send,
            s(:lvar, :build), :spec=,
            s(:ivar, :@spec)),
          s(:send,
            s(:lvar, :build), :build),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send,
            s(:lvar, :package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :LowSecurity)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :package), :verify)))),
      s(:def, :test_verify_security_policy_checksum_missing,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send,
            s(:ivar, :@spec), :cert_chain=,
            s(:array,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem))),
          s(:send,
            s(:ivar, :@spec), :signing_key=,
            s(:const, nil, :PRIVATE_KEY)),
          s(:lvasgn, :build,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send,
            s(:lvar, :build), :spec=,
            s(:ivar, :@spec)),
          s(:send,
            s(:lvar, :build), :setup_signer),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:str, "lib")),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "lib/code.rb")),
          s(:block,
            s(:send, nil, :open,
              s(:ivar, :@gem),
              s(:str, "wb")),
            s(:args,
              s(:arg, :gem_io)),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarWriter), :new,
                s(:lvar, :gem_io)),
              s(:args,
                s(:arg, :gem)),
              s(:begin,
                s(:send,
                  s(:lvar, :build), :add_metadata,
                  s(:lvar, :gem)),
                s(:send,
                  s(:lvar, :build), :add_contents,
                  s(:lvar, :gem)),
                s(:lvasgn, :bogus_data,
                  s(:send,
                    s(:const, nil, :Gem), :gzip,
                    s(:str, "hello"))),
                s(:block,
                  s(:send,
                    s(:lvar, :gem), :add_file_simple,
                    s(:str, "data.tar.gz"),
                    s(:int, 292),
                    s(:send,
                      s(:lvar, :bogus_data), :length)),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:lvar, :bogus_data)))))),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
            s(:const, nil, :PUBLIC_CERT)),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send,
            s(:lvar, :package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :HighSecurity)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception)),
              s(:args),
              s(:send,
                s(:lvar, :package), :verify))),
          s(:send, nil, :assert_equal,
            s(:str, "invalid signature"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :package), :instance_variable_get,
              s(:sym, :@spec)),
            s(:str, "@spec must not be loaded")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :package), :instance_variable_get,
              s(:sym, :@files)),
            s(:str, "@files must empty")))),
      s(:def, :test_verify_truncate,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :open,
              s(:str, "bad.gem"),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:const, nil, :File), :read,
                s(:ivar, :@gem),
                s(:int, 1024)))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:str, "bad.gem"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :FormatError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :verify))),
          s(:send, nil, :assert_equal,
            s(:str, "package content (data.tar.gz) is missing in bad.gem"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_verify_entry,
        s(:args),
        s(:begin,
          s(:lvasgn, :entry,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :entry), :full_name,
            s(:args),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "whatever"))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :FormatError)),
              s(:args),
              s(:send,
                s(:lvar, :package), :verify_entry,
                s(:lvar, :entry)))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "package is corrupt, exception while verifying: whatever (ArgumentError) in "),
              s(:begin,
                s(:ivar, :@gem))),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:ivar, :@gem))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@spec),
            s(:send,
              s(:lvar, :package), :spec)))),
      s(:def, :test_spec_from_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :io,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:const, nil, :Gem), :read_binary,
                s(:ivar, :@gem)))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:lvar, :io))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@spec),
            s(:send,
              s(:lvar, :package), :spec)))),
      s(:def, :test_spec_from_io_raises_gem_error_for_io_not_at_start,
        s(:args),
        s(:begin,
          s(:lvasgn, :io,
            s(:send,
              s(:const, nil, :StringIO), :new,
              s(:send,
                s(:const, nil, :Gem), :read_binary,
                s(:ivar, :@gem)))),
          s(:send,
            s(:lvar, :io), :read,
            s(:int, 1)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :Error)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:lvar, :io))))),
      s(:def, :util_tar,
        s(:args),
        s(:begin,
          s(:lvasgn, :tar_io,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :TarWriter), :new,
              s(:lvar, :tar_io)),
            s(:args,
              s(:arg, :tar)),
            s(:yield,
              s(:lvar, :tar))),
          s(:send,
            s(:lvar, :tar_io), :rewind),
          s(:lvar, :tar_io))),
      s(:def, :util_tar_gz,
        s(:args,
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :tar_io,
            s(:send, nil, :util_tar,
              s(:block_pass,
                s(:lvar, :block)))),
          s(:lvasgn, :tgz_io,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Zlib), :GzipWriter), :wrap,
              s(:lvar, :tgz_io)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:lvar, :tar_io), :string))),
          s(:send,
            s(:const, nil, :StringIO), :new,
            s(:send,
              s(:lvar, :tgz_io), :string)))))))
