s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "webrick/https")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)),
        s(:lvasgn, :e),
        s(:if,
          s(:or,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :e), :respond_to?,
                  s(:sym, :path)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :path), :==,
                  s(:str, "openssl")))),
            s(:send,
              s(:send,
                s(:lvar, :e), :message), :=~,
              s(:regexp,
                s(:str, " -- openssl$"),
                s(:regopt)))), nil,
          s(:send, nil, :raise))), nil)),
  s(:send, nil, :require,
    s(:str, "rubygems/remote_fetcher")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:send, nil, :require,
    s(:str, "minitest/mock")),
  s(:class,
    s(:const, nil, :TestGemRemoteFetcher),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :DefaultUserInteraction)),
      s(:casgn, nil, :SERVER_DATA,
        s(:dstr,
          s(:str, "--- !ruby/object:Gem::Cache\n"),
          s(:str, "gems:\n"),
          s(:str, "  rake-0.4.11: !ruby/object:Gem::Specification\n"),
          s(:str, "    rubygems_version: \"0.7\"\n"),
          s(:str, "    specification_version: 1\n"),
          s(:str, "    name: rake\n"),
          s(:str, "    version: !ruby/object:Gem::Version\n"),
          s(:str, "      version: 0.4.11\n"),
          s(:str, "    date: 2004-11-12\n"),
          s(:str, "    summary: Ruby based make-like utility.\n"),
          s(:str, "    require_paths:\n"),
          s(:str, "      - lib\n"),
          s(:str, "    author: Jim Weirich\n"),
          s(:str, "    email: jim@weirichhouse.org\n"),
          s(:str, "    homepage: http://rake.rubyforge.org\n"),
          s(:str, "    rubyforge_project: rake\n"),
          s(:str, "    description: Rake is a Make-like program implemented in Ruby. Tasks and dependencies are specified in standard Ruby syntax.\n"),
          s(:str, "    autorequire:\n"),
          s(:str, "    default_executable: rake\n"),
          s(:str, "    bindir: bin\n"),
          s(:str, "    has_rdoc: true\n"),
          s(:str, "    required_ruby_version: !ruby/object:Gem::Version::Requirement\n"),
          s(:str, "      requirements:\n"),
          s(:str, "        -\n"),
          s(:str, "          - \">\"\n"),
          s(:str, "          - !ruby/object:Gem::Version\n"),
          s(:str, "            version: 0.0.0\n"),
          s(:str, "      version:\n"),
          s(:str, "    platform: ruby\n"),
          s(:str, "    files:\n"),
          s(:str, "      - README\n"),
          s(:str, "    test_files: []\n"),
          s(:str, "    library_stubs:\n"),
          s(:str, "    rdoc_options:\n"),
          s(:str, "    extra_rdoc_files:\n"),
          s(:str, "    executables:\n"),
          s(:str, "      - rake\n"),
          s(:str, "    extensions: []\n"),
          s(:str, "    requirements: []\n"),
          s(:str, "    dependencies: []\n"))),
      s(:casgn, nil, :PROXY_DATA,
        s(:send,
          s(:const, nil, :SERVER_DATA), :gsub,
          s(:regexp,
            s(:str, "0.4.11"),
            s(:regopt)),
          s(:str, "0.4.2"))),
      s(:casgn, nil, :DIR,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")))),
      s(:casgn, nil, :TEST_KEY_DH2048,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :PKey), :DH), :new,
          s(:dstr,
            s(:str, "-----BEGIN DH PARAMETERS-----\n"),
            s(:str, "MIIBCAKCAQEA3Ze2EHSfYkZLUn557torAmjBgPsqzbodaRaGZtgK1gEU+9nNJaFV\n"),
            s(:str, "G1JKhmGUiEDyIW7idsBpe4sX/Wqjnp48Lr8IeI/SlEzLdoGpf05iRYXC8Cm9o8aM\n"),
            s(:str, "cfmVgoSEAo9YLBpzoji2jHkO7Q5IPt4zxbTdlmmGFLc/GO9q7LGHhC+rcMcNTGsM\n"),
            s(:str, "49AnILNn49pq4Y72jSwdmvq4psHZwwFBbPwLdw6bLUDDCN90jfqvYt18muwUxDiN\n"),
            s(:str, "NP0fuvVAIB158VnQ0liHSwcl6+9vE1mL0Jo/qEXQxl0+UdKDjaGfTsn6HIrwTnmJ\n"),
            s(:str, "PeIQQkFng2VVot/WAQbv3ePqWq07g1BBcwIBAg==\n"),
            s(:str, "-----END DH PARAMETERS-----\n")))),
      s(:send,
        s(:const, nil, :TEST_KEY_DH2048), :priv_key=,
        s(:send,
          s(:const,
            s(:const, nil, :OpenSSL), :BN), :new,
          s(:dstr,
            s(:str, "108911488509734781344423639"),
            s(:str, "5585749502236089033416160524030987005037540379474123441273555416835"),
            s(:str, "4725688238369352738266590757370603937618499698665047757588998555345"),
            s(:str, "3446251978586372525530219375408331096098220027413238477359960428372"),
            s(:str, "0195464393332338164504352015535549496585792320286513563739305843396"),
            s(:str, "9294344974028713065472959376197728193162272314514335882399554394661"),
            s(:str, "5306385003430991221886779612878793446851681835397455333989268503748"),
            s(:str, "7862488679178398716189205737442996155432191656080664090596502674943"),
            s(:str, "7902481557157485795980326766117882761941455140582265347052939604724"),
            s(:str, "964857770053363840471912215799994973597613931991572884")),
          s(:int, 16))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@proxies,
            s(:array,
              s(:str, "https_proxy"),
              s(:str, "http_proxy"),
              s(:str, "HTTP_PROXY"),
              s(:str, "http_proxy_user"),
              s(:str, "HTTP_PROXY_USER"),
              s(:str, "http_proxy_pass"),
              s(:str, "HTTP_PROXY_PASS"),
              s(:str, "no_proxy"),
              s(:str, "NO_PROXY"))),
          s(:ivasgn, :@old_proxies,
            s(:block,
              s(:send,
                s(:ivar, :@proxies), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:lvar, :k)))),
          s(:block,
            s(:send,
              s(:ivar, :@proxies), :each),
            s(:args,
              s(:arg, :k)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:lvar, :k),
              s(:nil))),
          s(:zsuper),
          s(:send,
            s(:send,
              s(:self), :class), :start_servers),
          s(:send,
            s(:send,
              s(:self), :class), :enable_yaml=,
            s(:true)),
          s(:send,
            s(:send,
              s(:self), :class), :enable_zip=,
            s(:false)),
          s(:lvasgn, :base_server_uri,
            s(:dstr,
              s(:str, "http://localhost:"),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:self), :class), :normal_server_port)))),
          s(:ivasgn, :@proxy_uri,
            s(:dstr,
              s(:str, "http://localhost:"),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:self), :class), :proxy_server_port)))),
          s(:ivasgn, :@server_uri,
            s(:send,
              s(:lvar, :base_server_uri), :+,
              s(:str, "/yaml"))),
          s(:ivasgn, :@server_z_uri,
            s(:send,
              s(:lvar, :base_server_uri), :+,
              s(:str, "/yaml.Z"))),
          s(:ivasgn, :@gems_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gems"))),
          s(:ivasgn, :@cache_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "cache"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:ivar, :@gems_dir)),
          s(:masgn,
            s(:mlhs,
              s(:ivasgn, :@a1),
              s(:ivasgn, :@a1_gem)),
            s(:block,
              s(:send, nil, :util_gem,
                s(:str, "a"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :executables), :<<,
                s(:str, "a_bin")))),
          s(:send,
            s(:ivar, :@a1), :loaded_from=,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"),
              s(:send,
                s(:ivar, :@a1), :full_name))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:nil)),
          s(:ivasgn, :@fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher)))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@fetcher), :close_all),
          s(:send,
            s(:send,
              s(:self), :class), :stop_servers),
          s(:zsuper),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :[]=,
            s(:sym, :http_proxy),
            s(:nil)),
          s(:block,
            s(:send,
              s(:ivar, :@proxies), :each_with_index),
            s(:args,
              s(:arg, :k),
              s(:arg, :i)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:lvar, :k),
              s(:send,
                s(:ivar, :@old_proxies), :[],
                s(:lvar, :i)))))),
      s(:def, :test_self_fetcher,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher)),
          s(:send, nil, :refute_nil,
            s(:lvar, :fetcher)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher),
            s(:lvar, :fetcher)))),
      s(:def, :test_self_fetcher_with_proxy,
        s(:args),
        s(:begin,
          s(:lvasgn, :proxy_uri,
            s(:str, "http://proxy.example.com")),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :[]=,
            s(:sym, :http_proxy),
            s(:lvar, :proxy_uri)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:nil)),
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher)),
          s(:send, nil, :refute_nil,
            s(:lvar, :fetcher)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher),
            s(:lvar, :fetcher)),
          s(:send, nil, :assert_equal,
            s(:lvar, :proxy_uri),
            s(:send,
              s(:send,
                s(:lvar, :fetcher), :instance_variable_get,
                s(:sym, :@proxy)), :to_s)))),
      s(:def, :test_fetch_size_bad_uri,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_size,
                s(:str, "gems.example.com/yaml")))),
          s(:send, nil, :assert_equal,
            s(:str, "uri scheme is invalid: nil"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_fetch_size_socket_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:defs,
            s(:lvar, :fetcher), :request,
            s(:args,
              s(:arg, :uri),
              s(:arg, :request_class),
              s(:optarg, :last_modified,
                s(:nil))),
            s(:send, nil, :raise,
              s(:const, nil, :SocketError),
              s(:str, "tarded"))),
          s(:lvasgn, :uri,
            s(:str, "http://gems.example.com/yaml")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_size,
                s(:lvar, :uri)))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "SocketError: tarded ("),
              s(:begin,
                s(:lvar, :uri)),
              s(:str, ")")),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_no_proxy,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:send, nil, :assert_data_from_server,
              s(:send,
                s(:ivar, :@fetcher), :fetch_path,
                s(:ivar, :@server_uri))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :SERVER_DATA), :size),
              s(:send,
                s(:ivar, :@fetcher), :fetch_size,
                s(:ivar, :@server_uri)))))),
      s(:def, :test_api_endpoint,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://example.com/foo"))),
          s(:lvasgn, :target,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :target), :expect,
            s(:sym, :target),
            s(:str, "gems.example.com")),
          s(:lvasgn, :dns,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :dns), :expect,
            s(:sym, :getresource),
            s(:lvar, :target),
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :Object))),
          s(:lvasgn, :fetch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil),
              s(:lvar, :dns))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://gems.example.com/foo")),
            s(:send,
              s(:lvar, :fetch), :api_endpoint,
              s(:lvar, :uri))),
          s(:send,
            s(:lvar, :target), :verify),
          s(:send,
            s(:lvar, :dns), :verify))),
      s(:def, :test_api_endpoint_ignores_trans_domain_values,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://gems.example.com/foo"))),
          s(:lvasgn, :target,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :target), :expect,
            s(:sym, :target),
            s(:str, "blah.com")),
          s(:lvasgn, :dns,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :dns), :expect,
            s(:sym, :getresource),
            s(:lvar, :target),
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :Object))),
          s(:lvasgn, :fetch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil),
              s(:lvar, :dns))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://gems.example.com/foo")),
            s(:send,
              s(:lvar, :fetch), :api_endpoint,
              s(:lvar, :uri))),
          s(:send,
            s(:lvar, :target), :verify),
          s(:send,
            s(:lvar, :dns), :verify))),
      s(:def, :test_api_endpoint_ignores_trans_domain_values_that_starts_with_original,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://example.com/foo"))),
          s(:lvasgn, :target,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :target), :expect,
            s(:sym, :target),
            s(:str, "example.combadguy.com")),
          s(:lvasgn, :dns,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :dns), :expect,
            s(:sym, :getresource),
            s(:lvar, :target),
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :Object))),
          s(:lvasgn, :fetch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil),
              s(:lvar, :dns))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://example.com/foo")),
            s(:send,
              s(:lvar, :fetch), :api_endpoint,
              s(:lvar, :uri))),
          s(:send,
            s(:lvar, :target), :verify),
          s(:send,
            s(:lvar, :dns), :verify))),
      s(:def, :test_api_endpoint_ignores_trans_domain_values_that_end_with_original,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://example.com/foo"))),
          s(:lvasgn, :target,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :target), :expect,
            s(:sym, :target),
            s(:str, "badexample.com")),
          s(:lvasgn, :dns,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:send,
            s(:lvar, :dns), :expect,
            s(:sym, :getresource),
            s(:lvar, :target),
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :Object))),
          s(:lvasgn, :fetch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil),
              s(:lvar, :dns))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://example.com/foo")),
            s(:send,
              s(:lvar, :fetch), :api_endpoint,
              s(:lvar, :uri))),
          s(:send,
            s(:lvar, :target), :verify),
          s(:send,
            s(:lvar, :dns), :verify))),
      s(:def, :test_api_endpoint_timeout_warning,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://gems.example.com/foo"))),
          s(:lvasgn, :dns,
            s(:send,
              s(:const,
                s(:const, nil, :MiniTest), :Mock), :new)),
          s(:defs,
            s(:lvar, :dns), :getresource,
            s(:args,
              s(:arg, :arg),
              s(:restarg, :rest)),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const, nil, :Resolv), :ResolvError), :new,
                s(:str, "timeout!")))),
          s(:lvasgn, :fetch,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil),
              s(:lvar, :dns))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :old_verbose),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Gem), :configuration), :verbose=)),
                  s(:array,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Gem), :configuration), :verbose),
                    s(:int, 1))),
                s(:lvasgn, :endpoint,
                  s(:block,
                    s(:send, nil, :use_ui,
                      s(:ivar, :@ui)),
                    s(:args),
                    s(:send,
                      s(:lvar, :fetch), :api_endpoint,
                      s(:lvar, :uri))))),
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :configuration), :verbose=,
                s(:lvar, :old_verbose)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :uri),
            s(:lvar, :endpoint)),
          s(:send, nil, :assert_equal,
            s(:str, "Getting SRV record failed: timeout!\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send,
            s(:lvar, :dns), :verify))),
      s(:def, :test_cache_update_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:str, "http://example/file"))),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "file"))),
          s(:lvasgn, :fetcher,
            s(:send, nil, :util_fuck_with_fetcher,
              s(:str, "hello"))),
          s(:lvasgn, :data,
            s(:send,
              s(:lvar, :fetcher), :cache_update_path,
              s(:lvar, :uri),
              s(:lvar, :path))),
          s(:send, nil, :assert_equal,
            s(:str, "hello"),
            s(:lvar, :data)),
          s(:send, nil, :assert_equal,
            s(:str, "hello"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :path))))),
      s(:def, :test_cache_update_path_no_update,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:str, "http://example/file"))),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "file"))),
          s(:lvasgn, :fetcher,
            s(:send, nil, :util_fuck_with_fetcher,
              s(:str, "hello"))),
          s(:lvasgn, :data,
            s(:send,
              s(:lvar, :fetcher), :cache_update_path,
              s(:lvar, :uri),
              s(:lvar, :path),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:str, "hello"),
            s(:lvar, :data)),
          s(:send, nil, :refute_path_exists,
            s(:lvar, :path)))),
      s(:def, :util_fuck_with_fetcher,
        s(:args,
          s(:arg, :data),
          s(:optarg, :blow,
            s(:false))),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher)),
          s(:send,
            s(:lvar, :fetcher), :instance_variable_set,
            s(:sym, :@test_data),
            s(:lvar, :data)),
          s(:if,
            s(:lvar, :blow),
            s(:defs,
              s(:lvar, :fetcher), :fetch_path,
              s(:args,
                s(:arg, :arg),
                s(:restarg, :rest)),
              s(:begin,
                s(:sclass,
                  s(:self),
                  s(:send, nil, :remove_method,
                    s(:sym, :fetch_path))),
                s(:defs,
                  s(:self), :fetch_path,
                  s(:args,
                    s(:arg, :arg),
                    s(:restarg, :rest)),
                  s(:begin,
                    s(:ivasgn, :@test_arg,
                      s(:lvar, :arg)),
                    s(:ivar, :@test_data))),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                    s(:str, "haha!"),
                    s(:nil))))),
            s(:defs,
              s(:lvar, :fetcher), :fetch_path,
              s(:args,
                s(:arg, :arg),
                s(:restarg, :rest)),
              s(:begin,
                s(:ivasgn, :@test_arg,
                  s(:lvar, :arg)),
                s(:ivar, :@test_data)))),
          s(:lvar, :fetcher))),
      s(:def, :test_download,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1_data,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@a1_gem),
              s(:str, "rb")),
            s(:args,
              s(:arg, :fp)),
            s(:lvasgn, :a1_data,
              s(:send,
                s(:lvar, :fp), :read))),
          s(:lvasgn, :fetcher,
            s(:send, nil, :util_fuck_with_fetcher,
              s(:lvar, :a1_data))),
          s(:lvasgn, :a1_cache_gem,
            s(:send,
              s(:ivar, :@a1), :cache_file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a1_cache_gem),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:ivar, :@a1),
              s(:str, "http://gems.example.com"))),
          s(:send, nil, :assert_equal,
            s(:str, "http://gems.example.com/gems/a-1.gem"),
            s(:send,
              s(:send,
                s(:lvar, :fetcher), :instance_variable_get,
                s(:sym, :@test_arg)), :to_s)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :a1_cache_gem))))),
      s(:def, :test_download_with_auth,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1_data,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@a1_gem),
              s(:str, "rb")),
            s(:args,
              s(:arg, :fp)),
            s(:lvasgn, :a1_data,
              s(:send,
                s(:lvar, :fp), :read))),
          s(:lvasgn, :fetcher,
            s(:send, nil, :util_fuck_with_fetcher,
              s(:lvar, :a1_data))),
          s(:lvasgn, :a1_cache_gem,
            s(:send,
              s(:ivar, :@a1), :cache_file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a1_cache_gem),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:ivar, :@a1),
              s(:str, "http://user:password@gems.example.com"))),
          s(:send, nil, :assert_equal,
            s(:str, "http://user:password@gems.example.com/gems/a-1.gem"),
            s(:send,
              s(:send,
                s(:lvar, :fetcher), :instance_variable_get,
                s(:sym, :@test_arg)), :to_s)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :a1_cache_gem))))),
      s(:def, :test_download_with_encoded_auth,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1_data,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@a1_gem),
              s(:str, "rb")),
            s(:args,
              s(:arg, :fp)),
            s(:lvasgn, :a1_data,
              s(:send,
                s(:lvar, :fp), :read))),
          s(:lvasgn, :fetcher,
            s(:send, nil, :util_fuck_with_fetcher,
              s(:lvar, :a1_data))),
          s(:lvasgn, :a1_cache_gem,
            s(:send,
              s(:ivar, :@a1), :cache_file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a1_cache_gem),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:ivar, :@a1),
              s(:str, "http://user:%25pas%25sword@gems.example.com"))),
          s(:send, nil, :assert_equal,
            s(:str, "http://user:%25pas%25sword@gems.example.com/gems/a-1.gem"),
            s(:send,
              s(:send,
                s(:lvar, :fetcher), :instance_variable_get,
                s(:sym, :@test_arg)), :to_s)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :a1_cache_gem))))),
      s(:def, :test_download_cached,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:ivar, :@a1_gem),
            s(:ivar, :@cache_dir)),
          s(:lvasgn, :inst,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@a1), :cache_file),
            s(:send,
              s(:lvar, :inst), :download,
              s(:ivar, :@a1),
              s(:str, "http://gems.example.com"))))),
      s(:def, :test_download_local,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:ivar, :@a1_gem),
            s(:ivar, :@tempdir)),
          s(:lvasgn, :local_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:send,
                s(:ivar, :@a1), :file_name))),
          s(:lvasgn, :inst,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:lvasgn, :inst,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :fetcher))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@a1), :cache_file),
            s(:send,
              s(:lvar, :inst), :download,
              s(:ivar, :@a1),
              s(:lvar, :local_path))))),
      s(:def, :test_download_local_space,
        s(:args),
        s(:begin,
          s(:lvasgn, :space_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "space path"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:lvar, :space_path)),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:ivar, :@a1_gem),
            s(:lvar, :space_path)),
          s(:lvasgn, :local_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :space_path),
              s(:send,
                s(:ivar, :@a1), :file_name))),
          s(:lvasgn, :inst,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:lvasgn, :inst,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :fetcher))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@a1), :cache_file),
            s(:send,
              s(:lvar, :inst), :download,
              s(:ivar, :@a1),
              s(:lvar, :local_path))))),
      s(:def, :test_download_install_dir,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1_data,
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:ivar, :@a1_gem),
                s(:str, "rb")),
              s(:args,
                s(:arg, :fp)),
              s(:send,
                s(:lvar, :fp), :read))),
          s(:lvasgn, :fetcher,
            s(:send, nil, :util_fuck_with_fetcher,
              s(:lvar, :a1_data))),
          s(:lvasgn, :install_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "more_gems"))),
          s(:lvasgn, :a1_cache_gem,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :install_dir),
              s(:str, "cache"),
              s(:send,
                s(:ivar, :@a1), :file_name))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :a1_cache_gem))),
          s(:lvasgn, :actual,
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:ivar, :@a1),
              s(:str, "http://gems.example.com"),
              s(:lvar, :install_dir))),
          s(:send, nil, :assert_equal,
            s(:lvar, :a1_cache_gem),
            s(:lvar, :actual)),
          s(:send, nil, :assert_equal,
            s(:str, "http://gems.example.com/gems/a-1.gem"),
            s(:send,
              s(:send,
                s(:lvar, :fetcher), :instance_variable_get,
                s(:sym, :@test_arg)), :to_s)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :a1_cache_gem))))),
      s(:if,
        s(:send, nil, :win_platform?), nil,
        s(:begin,
          s(:def, :test_download_local_read_only,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:send,
                  s(:const, nil, :FileUtils), :mv,
                  s(:ivar, :@a1_gem),
                  s(:ivar, :@tempdir)),
                s(:lvasgn, :local_path,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:send,
                      s(:ivar, :@a1), :file_name))),
                s(:lvasgn, :inst,
                  s(:nil)),
                s(:send,
                  s(:const, nil, :FileUtils), :chmod,
                  s(:int, 365),
                  s(:send,
                    s(:ivar, :@a1), :cache_dir)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:ivar, :@tempdir)),
                  s(:args),
                  s(:lvasgn, :inst,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :RemoteFetcher), :fetcher))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:send,
                      s(:ivar, :@a1), :file_name)),
                  s(:send,
                    s(:lvar, :inst), :download,
                    s(:ivar, :@a1),
                    s(:lvar, :local_path)))),
              s(:send,
                s(:const, nil, :FileUtils), :chmod,
                s(:int, 493),
                s(:send,
                  s(:ivar, :@a1), :cache_dir)))),
          s(:def, :test_download_read_only,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:send,
                  s(:const, nil, :FileUtils), :chmod,
                  s(:int, 365),
                  s(:send,
                    s(:ivar, :@a1), :cache_dir)),
                s(:send,
                  s(:const, nil, :FileUtils), :chmod,
                  s(:int, 365),
                  s(:ivar, :@gemhome)),
                s(:lvasgn, :fetcher,
                  s(:send, nil, :util_fuck_with_fetcher,
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:ivar, :@a1_gem)))),
                s(:send,
                  s(:lvar, :fetcher), :download,
                  s(:ivar, :@a1),
                  s(:str, "http://gems.example.com")),
                s(:lvasgn, :a1_cache_gem,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:send,
                      s(:const, nil, :Gem), :user_dir),
                    s(:str, "cache"),
                    s(:send,
                      s(:ivar, :@a1), :file_name))),
                s(:send, nil, :assert,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :a1_cache_gem)))),
              s(:begin,
                s(:send,
                  s(:const, nil, :FileUtils), :chmod,
                  s(:int, 493),
                  s(:ivar, :@gemhome)),
                s(:send,
                  s(:const, nil, :FileUtils), :chmod,
                  s(:int, 493),
                  s(:send,
                    s(:ivar, :@a1), :cache_dir))))))),
      s(:def, :test_download_platform_legacy,
        s(:args),
        s(:begin,
          s(:lvasgn, :original_platform,
            s(:str, "old-platform")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :e1),
              s(:lvasgn, :e1_gem)),
            s(:block,
              s(:send, nil, :util_gem,
                s(:str, "e"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :CURRENT)),
                s(:send,
                  s(:lvar, :s), :instance_variable_set,
                  s(:sym, :@original_platform),
                  s(:lvar, :original_platform))))),
          s(:send,
            s(:lvar, :e1), :loaded_from=,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"),
              s(:send,
                s(:lvar, :e1), :full_name))),
          s(:lvasgn, :e1_data,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :e1_gem),
              s(:str, "rb")),
            s(:args,
              s(:arg, :fp)),
            s(:lvasgn, :e1_data,
              s(:send,
                s(:lvar, :fp), :read))),
          s(:lvasgn, :fetcher,
            s(:send, nil, :util_fuck_with_fetcher,
              s(:lvar, :e1_data),
              s(:sym, :blow_chunks))),
          s(:lvasgn, :e1_cache_gem,
            s(:send,
              s(:lvar, :e1), :cache_file)),
          s(:send, nil, :assert_equal,
            s(:lvar, :e1_cache_gem),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:lvar, :e1),
              s(:str, "http://gems.example.com"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "http://gems.example.com/gems/"),
              s(:begin,
                s(:send,
                  s(:lvar, :e1), :original_name)),
              s(:str, ".gem")),
            s(:send,
              s(:send,
                s(:lvar, :fetcher), :instance_variable_get,
                s(:sym, :@test_arg)), :to_s)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :e1_cache_gem))))),
      s(:def, :test_download_same_file,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:ivar, :@a1_gem),
            s(:ivar, :@tempdir)),
          s(:lvasgn, :local_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:send,
                s(:ivar, :@a1), :file_name))),
          s(:lvasgn, :inst,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:lvasgn, :inst,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :fetcher))),
          s(:lvasgn, :cache_path,
            s(:send,
              s(:ivar, :@a1), :cache_file)),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:lvar, :local_path),
            s(:lvar, :cache_path)),
          s(:lvasgn, :gem,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:lvar, :cache_path))),
          s(:send, nil, :assert_equal,
            s(:lvar, :cache_path),
            s(:send,
              s(:lvar, :inst), :download,
              s(:send,
                s(:lvar, :gem), :spec),
              s(:lvar, :cache_path))))),
      s(:def, :test_download_unsupported,
        s(:args),
        s(:begin,
          s(:lvasgn, :inst,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:lvar, :inst), :download,
                s(:ivar, :@a1),
                s(:str, "ftp://gems.rubyforge.org")))),
          s(:send, nil, :assert_equal,
            s(:str, "unsupported URI scheme ftp"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_download_to_cache,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:ivasgn, :@a2),
              s(:ivasgn, :@a2_gem)),
            s(:send, nil, :util_gem,
              s(:str, "a"),
              s(:str, "2"))),
          s(:send, nil, :util_setup_spec_fetcher,
            s(:ivar, :@a1),
            s(:ivar, :@a2)),
          s(:send,
            s(:ivar, :@fetcher), :instance_variable_set,
            s(:sym, :@a1),
            s(:ivar, :@a1)),
          s(:send,
            s(:ivar, :@fetcher), :instance_variable_set,
            s(:sym, :@a2),
            s(:ivar, :@a2)),
          s(:defs,
            s(:ivar, :@fetcher), :fetch_path,
            s(:args,
              s(:arg, :uri),
              s(:optarg, :mtime,
                s(:nil)),
              s(:optarg, :head,
                s(:false))),
            s(:case,
              s(:send,
                s(:lvar, :uri), :request_uri),
              s(:when,
                s(:regexp,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@a1), :spec_name)),
                  s(:regopt)),
                s(:send,
                  s(:const, nil, :Gem), :deflate,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:ivar, :@a1)))),
              s(:when,
                s(:regexp,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@a2), :spec_name)),
                  s(:regopt)),
                s(:send,
                  s(:const, nil, :Gem), :deflate,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:ivar, :@a2)))),
              s(:send,
                s(:lvar, :uri), :to_s))),
          s(:lvasgn, :gem,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :fetcher), :download_to_cache,
              s(:send, nil, :dep,
                s(:str, "a")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@a2), :file_name),
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :gem))))),
      s(:def, :test_fetch_path_gzip,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:defs,
            s(:lvar, :fetcher), :fetch_http,
            s(:args,
              s(:arg, :uri),
              s(:arg, :mtime),
              s(:optarg, :head,
                s(:nil))),
            s(:send,
              s(:const, nil, :Gem), :gzip,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :fetcher), :fetch_path,
              s(:send,
                s(:ivar, :@uri), :+,
                s(:str, "foo.gz")))))),
      s(:def, :test_fetch_path_gzip_unmodified,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:defs,
            s(:lvar, :fetcher), :fetch_http,
            s(:args,
              s(:arg, :uri),
              s(:arg, :mtime),
              s(:optarg, :head,
                s(:nil))),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :fetcher), :fetch_path,
              s(:send,
                s(:ivar, :@uri), :+,
                s(:str, "foo.gz")),
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 0)))))),
      s(:def, :test_fetch_path_io_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:defs,
            s(:lvar, :fetcher), :fetch_http,
            s(:args,
              s(:restarg)),
            s(:send, nil, :raise,
              s(:const, nil, :EOFError))),
          s(:lvasgn, :url,
            s(:str, "http://example.com/uri")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:lvar, :url)))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "EOFError: EOFError ("),
              s(:begin,
                s(:lvar, :url)),
              s(:str, ")")),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:lvar, :url),
            s(:send,
              s(:lvar, :e), :uri)))),
      s(:def, :test_fetch_path_socket_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:defs,
            s(:lvar, :fetcher), :fetch_http,
            s(:args,
              s(:arg, :uri),
              s(:arg, :mtime),
              s(:optarg, :head,
                s(:nil))),
            s(:send, nil, :raise,
              s(:const, nil, :SocketError))),
          s(:lvasgn, :url,
            s(:str, "http://example.com/uri")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:lvar, :url)))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "SocketError: SocketError ("),
              s(:begin,
                s(:lvar, :url)),
              s(:str, ")")),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:lvar, :url),
            s(:send,
              s(:lvar, :e), :uri)))),
      s(:def, :test_fetch_path_system_call_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:defs,
            s(:lvar, :fetcher), :fetch_http,
            s(:args,
              s(:arg, :uri),
              s(:optarg, :mtime,
                s(:nil)),
              s(:optarg, :head,
                s(:nil))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Errno), :ECONNREFUSED),
              s(:str, "connect(2)"))),
          s(:lvasgn, :url,
            s(:str, "http://example.com/uri")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:lvar, :url)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ECONNREFUSED:.*connect\\(2\\) \\("),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:lvar, :url))),
              s(:str, "\\)\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:lvar, :url),
            s(:send,
              s(:lvar, :e), :uri)))),
      s(:def, :test_fetch_path_unmodified,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:defs,
            s(:lvar, :fetcher), :fetch_http,
            s(:args,
              s(:arg, :uri),
              s(:arg, :mtime),
              s(:optarg, :head,
                s(:nil))),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :fetcher), :fetch_path,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:ivar, :@gem_repo)),
              s(:send,
                s(:const, nil, :Time), :at,
                s(:int, 0)))))),
      s(:def, :test_implicit_no_proxy,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:str, "http://fakeurl:12345")),
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:sym, :no_proxy))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:send, nil, :assert_data_from_server,
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:ivar, :@server_uri)))))),
      s(:def, :test_implicit_proxy,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:ivar, :@proxy_uri)),
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:nil))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:send, nil, :assert_data_from_proxy,
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:ivar, :@server_uri)))))),
      s(:def, :test_implicit_upper_case_proxy,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "HTTP_PROXY"),
              s(:ivar, :@proxy_uri)),
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:nil))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:send, nil, :assert_data_from_proxy,
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:ivar, :@server_uri)))))),
      s(:def, :test_implicit_proxy_no_env,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:nil))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:send, nil, :assert_data_from_server,
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:ivar, :@server_uri)))))),
      s(:def, :test_fetch_http,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:lvasgn, :url,
            s(:str, "http://gems.example.com/redirect")),
          s(:defs,
            s(:lvar, :fetcher), :request,
            s(:args,
              s(:arg, :uri),
              s(:arg, :request_class),
              s(:optarg, :last_modified,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :url,
                s(:str, "http://gems.example.com/redirect")),
              s(:if,
                s(:defined?,
                  s(:ivar, :@requested)),
                s(:begin,
                  s(:lvasgn, :res,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :HTTPOK), :new,
                      s(:nil),
                      s(:int, 200),
                      s(:nil))),
                  s(:defs,
                    s(:lvar, :res), :body,
                    s(:args),
                    s(:str, "real_path")),
                  s(:lvar, :res)),
                s(:begin,
                  s(:ivasgn, :@requested,
                    s(:true)),
                  s(:lvasgn, :res,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :HTTPMovedPermanently), :new,
                      s(:nil),
                      s(:int, 301),
                      s(:nil))),
                  s(:send,
                    s(:lvar, :res), :add_field,
                    s(:str, "Location"),
                    s(:lvar, :url)),
                  s(:lvar, :res))))),
          s(:lvasgn, :data,
            s(:send,
              s(:lvar, :fetcher), :fetch_http,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :url)))),
          s(:send, nil, :assert_equal,
            s(:str, "real_path"),
            s(:lvar, :data)))),
      s(:def, :test_fetch_http_redirects,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:lvasgn, :url,
            s(:str, "http://gems.example.com/redirect")),
          s(:defs,
            s(:lvar, :fetcher), :request,
            s(:args,
              s(:arg, :uri),
              s(:arg, :request_class),
              s(:optarg, :last_modified,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :url,
                s(:str, "http://gems.example.com/redirect")),
              s(:lvasgn, :res,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :HTTPMovedPermanently), :new,
                  s(:nil),
                  s(:int, 301),
                  s(:nil))),
              s(:send,
                s(:lvar, :res), :add_field,
                s(:str, "Location"),
                s(:lvar, :url)),
              s(:lvar, :res))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_http,
                s(:send,
                  s(:const, nil, :URI), :parse,
                  s(:lvar, :url))))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "too many redirects ("),
              s(:begin,
                s(:lvar, :url)),
              s(:str, ")")),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_fetch_http_with_additional_headers,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy"),
            s(:ivar, :@proxy_uri)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "no_proxy"),
            s(:send,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:ivar, :@server_uri)), :host)),
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil),
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:str, "X-Captain"),
                  s(:str, "murphy"))))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:send, nil, :assert_equal,
            s(:str, "murphy"),
            s(:send,
              s(:lvar, :fetcher), :fetch_path,
              s(:ivar, :@server_uri))))),
      s(:def, :test_fetch_s3,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:nil))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:lvasgn, :url,
              s(:str, "s3://testuser:testpass@my-bucket/gems/specs.4.8.gz")),
            s(:gvasgn, :$fetched_uri,
              s(:nil)),
            s(:defs,
              s(:lvar, :fetcher), :request,
              s(:args,
                s(:arg, :uri),
                s(:arg, :request_class),
                s(:optarg, :last_modified,
                  s(:nil))),
              s(:begin,
                s(:gvasgn, :$fetched_uri,
                  s(:lvar, :uri)),
                s(:lvasgn, :res,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Net), :HTTPOK), :new,
                    s(:nil),
                    s(:int, 200),
                    s(:nil))),
                s(:defs,
                  s(:lvar, :res), :body,
                  s(:args),
                  s(:str, "success")),
                s(:lvar, :res))),
            s(:defs,
              s(:lvar, :fetcher), :s3_expiration,
              s(:args),
              s(:int, 1395098371)),
            s(:lvasgn, :data,
              s(:send,
                s(:lvar, :fetcher), :fetch_s3,
                s(:send,
                  s(:const, nil, :URI), :parse,
                  s(:lvar, :url)))),
            s(:send, nil, :assert_equal,
              s(:str, "https://my-bucket.s3.amazonaws.com/gems/specs.4.8.gz?AWSAccessKeyId=testuser&Expires=1395098371&Signature=eUTr7NkpZEet%2BJySE%2BfH6qukroI%3D"),
              s(:send,
                s(:gvar, :$fetched_uri), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "success"),
              s(:lvar, :data))),
          s(:gvasgn, :$fetched_uri,
            s(:nil)))),
      s(:def, :test_fetch_s3_no_creds,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:lvasgn, :url,
            s(:str, "s3://my-bucket/gems/specs.4.8.gz")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_s3,
                s(:send,
                  s(:const, nil, :URI), :parse,
                  s(:lvar, :url))))),
          s(:send, nil, :assert_match,
            s(:str, "credentials needed"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_observe_no_proxy_env_single_host,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:ivar, :@proxy_uri)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "no_proxy"),
              s(:send,
                s(:send,
                  s(:const, nil, :URI), :parse,
                  s(:ivar, :@server_uri)), :host)),
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:nil))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:send, nil, :assert_data_from_server,
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:ivar, :@server_uri)))))),
      s(:def, :test_observe_no_proxy_env_list,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "http_proxy"),
              s(:ivar, :@proxy_uri)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "no_proxy"),
              s(:dstr,
                s(:str, "fakeurl.com, "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :URI), :parse,
                      s(:ivar, :@server_uri)), :host)))),
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:nil))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:send, nil, :assert_data_from_server,
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:ivar, :@server_uri)))))),
      s(:def, :test_request_block,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :new,
              s(:nil))),
          s(:ivasgn, :@fetcher,
            s(:lvar, :fetcher)),
          s(:block,
            s(:send, nil, :assert_throws,
              s(:sym, :block_called)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :fetcher), :request,
                s(:send, nil, :URI,
                  s(:str, "http://example")),
                s(:const,
                  s(:const,
                    s(:const, nil, :Net), :HTTP), :Get)),
              s(:args,
                s(:arg, :req)),
              s(:begin,
                s(:send, nil, :assert_kind_of,
                  s(:const,
                    s(:const, nil, :Net), :HTTPGenericRequest),
                  s(:lvar, :req)),
                s(:send, nil, :throw,
                  s(:sym, :block_called))))))),
      s(:def, :test_yaml_error_on_size,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:self), :class), :enable_yaml=,
              s(:false)),
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new,
                s(:nil))),
            s(:ivasgn, :@fetcher,
              s(:lvar, :fetcher)),
            s(:block,
              s(:send, nil, :assert_error),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :size))))),
      s(:def, :test_ssl_connection,
        s(:args),
        s(:begin,
          s(:lvasgn, :ssl_server,
            s(:send,
              s(:send,
                s(:self), :class), :start_ssl_server)),
          s(:lvasgn, :temp_ca_cert,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :DIR),
              s(:str, "ca_cert.pem"))),
          s(:block,
            s(:send, nil, :with_configured_fetcher,
              s(:dstr,
                s(:str, ":ssl_ca_cert: "),
                s(:begin,
                  s(:lvar, :temp_ca_cert)))),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :fetch_path,
              s(:dstr,
                s(:str, "https://localhost:"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :ssl_server), :config), :[],
                    s(:sym, :Port))),
                s(:str, "/yaml")))))),
      s(:def, :test_ssl_client_cert_auth_connection,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:lvasgn, :ssl_server,
            s(:send,
              s(:send,
                s(:self), :class), :start_ssl_server,
              s(:hash,
                s(:pair,
                  s(:sym, :SSLVerifyClient),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER), :|,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :VERIFY_FAIL_IF_NO_PEER_CERT)))))),
          s(:lvasgn, :temp_ca_cert,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :DIR),
              s(:str, "ca_cert.pem"))),
          s(:lvasgn, :temp_client_cert,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :DIR),
              s(:str, "client.pem"))),
          s(:block,
            s(:send, nil, :with_configured_fetcher,
              s(:send,
                s(:dstr,
                  s(:str, ":ssl_ca_cert: "),
                  s(:begin,
                    s(:lvar, :temp_ca_cert)),
                  s(:str, "\n")), :+,
                s(:dstr,
                  s(:str, ":ssl_client_cert: "),
                  s(:begin,
                    s(:lvar, :temp_client_cert)),
                  s(:str, "\n")))),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :fetch_path,
              s(:dstr,
                s(:str, "https://localhost:"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :ssl_server), :config), :[],
                    s(:sym, :Port))),
                s(:str, "/yaml")))))),
      s(:def, :test_do_not_allow_invalid_client_cert_auth_connection,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:lvasgn, :ssl_server,
            s(:send,
              s(:send,
                s(:self), :class), :start_ssl_server,
              s(:hash,
                s(:pair,
                  s(:sym, :SSLVerifyClient),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER), :|,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :VERIFY_FAIL_IF_NO_PEER_CERT)))))),
          s(:lvasgn, :temp_ca_cert,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :DIR),
              s(:str, "ca_cert.pem"))),
          s(:lvasgn, :temp_client_cert,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :DIR),
              s(:str, "invalid_client.pem"))),
          s(:block,
            s(:send, nil, :with_configured_fetcher,
              s(:send,
                s(:dstr,
                  s(:str, ":ssl_ca_cert: "),
                  s(:begin,
                    s(:lvar, :temp_ca_cert)),
                  s(:str, "\n")), :+,
                s(:dstr,
                  s(:str, ":ssl_client_cert: "),
                  s(:begin,
                    s(:lvar, :temp_client_cert)),
                  s(:str, "\n")))),
            s(:args,
              s(:arg, :fetcher)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:dstr,
                  s(:str, "https://localhost:"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :ssl_server), :config), :[],
                      s(:sym, :Port))),
                  s(:str, "/yaml"))))))),
      s(:def, :test_do_not_allow_insecure_ssl_connection_by_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :ssl_server,
            s(:send,
              s(:send,
                s(:self), :class), :start_ssl_server)),
          s(:block,
            s(:send, nil, :with_configured_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
              s(:args),
              s(:send,
                s(:lvar, :fetcher), :fetch_path,
                s(:dstr,
                  s(:str, "https://localhost:"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :ssl_server), :config), :[],
                      s(:sym, :Port))),
                  s(:str, "/yaml"))))))),
      s(:def, :test_ssl_connection_allow_verify_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :ssl_server,
            s(:send,
              s(:send,
                s(:self), :class), :start_ssl_server)),
          s(:block,
            s(:send, nil, :with_configured_fetcher,
              s(:str, ":ssl_verify_mode: 0")),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :fetch_path,
              s(:dstr,
                s(:str, "https://localhost:"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :ssl_server), :config), :[],
                    s(:sym, :Port))),
                s(:str, "/yaml")))))),
      s(:def, :test_do_not_follow_insecure_redirect,
        s(:args),
        s(:begin,
          s(:lvasgn, :ssl_server,
            s(:send,
              s(:send,
                s(:self), :class), :start_ssl_server)),
          s(:lvasgn, :temp_ca_cert,
            s(:array,
              s(:send,
                s(:const, nil, :File), :join,
                s(:const, nil, :DIR),
                s(:str, "ca_cert.pem")),
              s(:block,
                s(:send, nil, :with_configured_fetcher,
                  s(:dstr,
                    s(:str, ":ssl_ca_cert: "),
                    s(:begin,
                      s(:lvar, :temp_ca_cert)))),
                s(:args,
                  s(:arg, :fetcher)),
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
                  s(:args),
                  s(:send,
                    s(:lvar, :fetcher), :fetch_path,
                    s(:dstr,
                      s(:str, "https://localhost:"),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :ssl_server), :config), :[],
                          s(:sym, :Port))),
                      s(:str, "/insecure_redirect?to="),
                      s(:begin,
                        s(:ivar, :@server_uri)))))))))),
      s(:def, :with_configured_fetcher,
        s(:args,
          s(:optarg, :config_str,
            s(:nil)),
          s(:blockarg, :block)),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:lvar, :config_str),
              s(:begin,
                s(:lvasgn, :temp_conf,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:str, ".gemrc"))),
                s(:block,
                  s(:send,
                    s(:const, nil, :File), :open,
                    s(:lvar, :temp_conf),
                    s(:str, "w")),
                  s(:args,
                    s(:arg, :fp)),
                  s(:send,
                    s(:lvar, :fp), :puts,
                    s(:lvar, :config_str))),
                s(:send,
                  s(:const, nil, :Gem), :configuration=,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :ConfigFile), :new,
                    s(:array,
                      s(:str, "--config-file"),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :temp_conf))))))), nil),
            s(:lvasgn, :fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :new)),
            s(:yield,
              s(:lvar, :fetcher))),
          s(:begin,
            s(:send,
              s(:lvar, :fetcher), :close_all),
            s(:send,
              s(:const, nil, :Gem), :configuration=,
              s(:nil))))),
      s(:def, :assert_error,
        s(:args,
          s(:optarg, :exception_class,
            s(:const, nil, :Exception))),
        s(:begin,
          s(:lvasgn, :got_exception,
            s(:false)),
          s(:kwbegin,
            s(:rescue,
              s(:yield),
              s(:resbody,
                s(:array,
                  s(:lvar, :exception_class)), nil,
                s(:lvasgn, :got_exception,
                  s(:true))), nil)),
          s(:send, nil, :assert,
            s(:lvar, :got_exception),
            s(:dstr,
              s(:str, "Expected exception conforming to "),
              s(:begin,
                s(:lvar, :exception_class)))))),
      s(:def, :assert_data_from_server,
        s(:args,
          s(:arg, :data)),
        s(:send, nil, :assert_match,
          s(:regexp,
            s(:str, "0\\.4\\.11"),
            s(:regopt)),
          s(:lvar, :data),
          s(:str, "Data is not from server"))),
      s(:def, :assert_data_from_proxy,
        s(:args,
          s(:arg, :data)),
        s(:send, nil, :assert_match,
          s(:regexp,
            s(:str, "0\\.4\\.2"),
            s(:regopt)),
          s(:lvar, :data),
          s(:str, "Data is not from proxy"))),
      s(:class,
        s(:const, nil, :NilLog),
        s(:const,
          s(:const, nil, :WEBrick), :Log),
        s(:def, :log,
          s(:args,
            s(:arg, :level),
            s(:arg, :data)), nil)),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :normal_server),
            s(:sym, :proxy_server)),
          s(:send, nil, :attr_accessor,
            s(:sym, :enable_zip),
            s(:sym, :enable_yaml)),
          s(:def, :start_servers,
            s(:args),
            s(:begin,
              s(:or_asgn,
                s(:ivasgn, :@normal_server),
                s(:send, nil, :start_server,
                  s(:const, nil, :SERVER_DATA))),
              s(:or_asgn,
                s(:ivasgn, :@proxy_server),
                s(:send, nil, :start_server,
                  s(:const, nil, :PROXY_DATA))),
              s(:ivasgn, :@enable_yaml,
                s(:true)),
              s(:ivasgn, :@enable_zip,
                s(:false)),
              s(:ivasgn, :@ssl_server,
                s(:nil)),
              s(:ivasgn, :@ssl_server_thread,
                s(:nil)))),
          s(:def, :stop_servers,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@normal_server),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:ivar, :@normal_server), :kill), :join),
                  s(:ivasgn, :@normal_server,
                    s(:nil))), nil),
              s(:if,
                s(:ivar, :@proxy_server),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:ivar, :@proxy_server), :kill), :join),
                  s(:ivasgn, :@proxy_server,
                    s(:nil))), nil),
              s(:if,
                s(:ivar, :@ssl_server),
                s(:begin,
                  s(:send,
                    s(:ivar, :@ssl_server), :stop),
                  s(:ivasgn, :@ssl_server,
                    s(:nil))), nil),
              s(:if,
                s(:ivar, :@ssl_server_thread),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:ivar, :@ssl_server_thread), :kill), :join),
                  s(:ivasgn, :@ssl_server_thread,
                    s(:nil))), nil),
              s(:lvasgn, :utils,
                s(:const,
                  s(:const, nil, :WEBrick), :Utils)),
              s(:if,
                s(:defined?,
                  s(:send,
                    s(:const,
                      s(:lvar, :utils), :TimeoutHandler), :terminate)),
                s(:send,
                  s(:const,
                    s(:lvar, :utils), :TimeoutHandler), :terminate), nil))),
          s(:def, :normal_server_port,
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@normal_server), :[],
                  s(:sym, :server)), :config), :[],
              s(:sym, :Port))),
          s(:def, :proxy_server_port,
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@proxy_server), :[],
                  s(:sym, :server)), :config), :[],
              s(:sym, :Port))),
          s(:casgn, nil, :DIR,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:str, "(string)")))),
          s(:def, :start_ssl_server,
            s(:args,
              s(:optarg, :config,
                s(:hash))),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :MiniTest), :Skip),
                  s(:str, "openssl not installed"))),
              s(:lvasgn, :null_logger,
                s(:send,
                  s(:const, nil, :NilLog), :new)),
              s(:lvasgn, :server,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPServer), :new,
                  s(:send,
                    s(:hash,
                      s(:pair,
                        s(:sym, :Port),
                        s(:int, 0)),
                      s(:pair,
                        s(:sym, :Logger),
                        s(:lvar, :null_logger)),
                      s(:pair,
                        s(:sym, :AccessLog),
                        s(:array)),
                      s(:pair,
                        s(:sym, :SSLEnable),
                        s(:true)),
                      s(:pair,
                        s(:sym, :SSLCACertificateFile),
                        s(:send,
                          s(:const, nil, :File), :join,
                          s(:const, nil, :DIR),
                          s(:str, "ca_cert.pem"))),
                      s(:pair,
                        s(:sym, :SSLCertificate),
                        s(:send, nil, :cert,
                          s(:str, "ssl_cert.pem"))),
                      s(:pair,
                        s(:sym, :SSLPrivateKey),
                        s(:send, nil, :key,
                          s(:str, "ssl_key.pem"))),
                      s(:pair,
                        s(:sym, :SSLVerifyClient),
                        s(:nil)),
                      s(:pair,
                        s(:sym, :SSLCertName),
                        s(:nil))), :merge,
                    s(:lvar, :config)))),
              s(:block,
                s(:send,
                  s(:lvar, :server), :mount_proc,
                  s(:str, "/yaml")),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :res)),
                s(:send,
                  s(:lvar, :res), :body=,
                  s(:str, "--- true\n"))),
              s(:block,
                s(:send,
                  s(:lvar, :server), :mount_proc,
                  s(:str, "/insecure_redirect")),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :res)),
                s(:send,
                  s(:lvar, :res), :set_redirect,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPStatus), :MovedPermanently),
                  s(:send,
                    s(:send,
                      s(:lvar, :req), :query), :[],
                    s(:str, "to")))),
              s(:send,
                s(:send,
                  s(:lvar, :server), :ssl_context), :tmp_dh_callback=,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:const, nil, :TEST_KEY_DH2048))),
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:kwbegin,
                    s(:ensure,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :server), :start),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Exception)),
                          s(:lvasgn, :ex),
                          s(:begin,
                            s(:send, nil, :abort,
                              s(:send,
                                s(:lvar, :ex), :message)),
                            s(:send, nil, :puts,
                              s(:dstr,
                                s(:str, "ERROR during server thread: "),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :ex), :message)))))), nil),
                      s(:send,
                        s(:lvar, :server), :shutdown))))),
              s(:while,
                s(:send,
                  s(:send,
                    s(:lvar, :server), :status), :!=,
                  s(:sym, :Running)),
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:float, 0.1)),
                  s(:if,
                    s(:send,
                      s(:lvar, :t), :alive?), nil,
                    s(:begin,
                      s(:send,
                        s(:lvar, :t), :join),
                      s(:send, nil, :raise))))),
              s(:ivasgn, :@ssl_server,
                s(:lvar, :server)),
              s(:ivasgn, :@ssl_server_thread,
                s(:lvar, :t)),
              s(:lvar, :server))),
          s(:send, nil, :private),
          s(:def, :start_server,
            s(:args,
              s(:arg, :data)),
            s(:begin,
              s(:lvasgn, :null_logger,
                s(:send,
                  s(:const, nil, :NilLog), :new)),
              s(:lvasgn, :s,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPServer), :new,
                  s(:hash,
                    s(:pair,
                      s(:sym, :Port),
                      s(:int, 0)),
                    s(:pair,
                      s(:sym, :DocumentRoot),
                      s(:nil)),
                    s(:pair,
                      s(:sym, :Logger),
                      s(:lvar, :null_logger)),
                    s(:pair,
                      s(:sym, :AccessLog),
                      s(:lvar, :null_logger))))),
              s(:block,
                s(:send,
                  s(:lvar, :s), :mount_proc,
                  s(:str, "/kill")),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :res)),
                s(:send,
                  s(:lvar, :s), :shutdown)),
              s(:block,
                s(:send,
                  s(:lvar, :s), :mount_proc,
                  s(:str, "/yaml")),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :res)),
                s(:if,
                  s(:send,
                    s(:lvar, :req), :[],
                    s(:str, "X-Captain")),
                  s(:send,
                    s(:lvar, :res), :body=,
                    s(:send,
                      s(:lvar, :req), :[],
                      s(:str, "X-Captain"))),
                  s(:if,
                    s(:ivar, :@enable_yaml),
                    s(:begin,
                      s(:send,
                        s(:lvar, :res), :body=,
                        s(:lvar, :data)),
                      s(:send,
                        s(:lvar, :res), :[]=,
                        s(:str, "Content-Type"),
                        s(:str, "text/plain")),
                      s(:send,
                        s(:lvar, :res), :[]=,
                        s(:str, "content-length"),
                        s(:send,
                          s(:lvar, :data), :size))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :res), :status=,
                        s(:str, "404")),
                      s(:send,
                        s(:lvar, :res), :body=,
                        s(:str, "<h1>NOT FOUND</h1>")),
                      s(:send,
                        s(:lvar, :res), :[]=,
                        s(:str, "Content-Type"),
                        s(:str, "text/html")))))),
              s(:block,
                s(:send,
                  s(:lvar, :s), :mount_proc,
                  s(:str, "/yaml.Z")),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :res)),
                s(:if,
                  s(:ivar, :@enable_zip),
                  s(:begin,
                    s(:send,
                      s(:lvar, :res), :body=,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Zlib), :Deflate), :deflate,
                        s(:lvar, :data))),
                    s(:send,
                      s(:lvar, :res), :[]=,
                      s(:str, "Content-Type"),
                      s(:str, "text/plain"))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :res), :status=,
                      s(:str, "404")),
                    s(:send,
                      s(:lvar, :res), :body=,
                      s(:str, "<h1>NOT FOUND</h1>")),
                    s(:send,
                      s(:lvar, :res), :[]=,
                      s(:str, "Content-Type"),
                      s(:str, "text/html"))))),
              s(:lvasgn, :th,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:kwbegin,
                    s(:ensure,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :s), :start),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Exception)),
                          s(:lvasgn, :ex),
                          s(:send, nil, :abort,
                            s(:dstr,
                              s(:str, "ERROR during server thread: "),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :ex), :message))))), nil),
                      s(:send,
                        s(:lvar, :s), :shutdown))))),
              s(:send,
                s(:lvar, :th), :[]=,
                s(:sym, :server),
                s(:lvar, :s)),
              s(:lvar, :th))),
          s(:def, :cert,
            s(:args,
              s(:arg, :filename)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
              s(:send,
                s(:const, nil, :File), :read,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:const, nil, :DIR),
                  s(:lvar, :filename))))),
          s(:def, :key,
            s(:args,
              s(:arg, :filename)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
              s(:send,
                s(:const, nil, :File), :read,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:const, nil, :DIR),
                  s(:lvar, :filename))))))),
      s(:def, :test_correct_for_windows_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:str, "/C:/WINDOWS/Temp/gems")),
          s(:send, nil, :assert_equal,
            s(:str, "C:/WINDOWS/Temp/gems"),
            s(:send,
              s(:ivar, :@fetcher), :correct_for_windows_path,
              s(:lvar, :path))),
          s(:lvasgn, :path,
            s(:str, "/home/skillet")),
          s(:send, nil, :assert_equal,
            s(:str, "/home/skillet"),
            s(:send,
              s(:ivar, :@fetcher), :correct_for_windows_path,
              s(:lvar, :path))))))))
