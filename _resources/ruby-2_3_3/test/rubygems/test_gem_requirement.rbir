s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/requirement")),
  s(:class,
    s(:const, nil, :TestGemRequirement),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :test_concat,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, ">= 1"))),
          s(:send,
            s(:lvar, :r), :concat,
            s(:array,
              s(:str, "< 2"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, ">="),
                s(:send, nil, :v,
                  s(:int, 1))),
              s(:array,
                s(:str, "<"),
                s(:send, nil, :v,
                  s(:int, 2)))),
            s(:send,
              s(:lvar, :r), :requirements)))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "= 1.2"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :r),
            s(:send,
              s(:lvar, :r), :dup)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r), :dup),
            s(:lvar, :r)),
          s(:send, nil, :refute_requirement_equal,
            s(:str, "= 1.2"),
            s(:str, "= 1.3")),
          s(:send, nil, :refute_requirement_equal,
            s(:str, "= 1.3"),
            s(:str, "= 1.2")),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:const, nil, :Object), :new),
            s(:send, nil, :req,
              s(:str, "= 1.2"))),
          s(:send, nil, :refute_equal,
            s(:send, nil, :req,
              s(:str, "= 1.2")),
            s(:send,
              s(:const, nil, :Object), :new)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_requirement_equal,
            s(:str, "= 2"),
            s(:str, "2")),
          s(:send, nil, :assert_requirement_equal,
            s(:str, "= 2"),
            s(:array,
              s(:str, "2"))),
          s(:send, nil, :assert_requirement_equal,
            s(:str, "= 2"),
            s(:send, nil, :v,
              s(:int, 2))))),
      s(:def, :test_empty_requirements_is_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :r), :none?)))),
      s(:def, :test_explicit_default_is_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, ">= 0"))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :r), :none?)))),
      s(:def, :test_basic_non_none,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, "= 1"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :r), :none?)))),
      s(:def, :test_for_lockfile,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, " (~> 1.0)"),
            s(:send,
              s(:send, nil, :req,
                s(:str, "~> 1.0")), :for_lockfile)),
          s(:send, nil, :assert_equal,
            s(:str, " (~> 1.0, >= 1.0.1)"),
            s(:send,
              s(:send, nil, :req,
                s(:str, ">= 1.0.1"),
                s(:str, "~> 1.0")), :for_lockfile)),
          s(:lvasgn, :duped,
            s(:send, nil, :req,
              s(:str, "= 1.0"))),
          s(:send,
            s(:send,
              s(:lvar, :duped), :requirements), :<<,
            s(:array,
              s(:str, "="),
              s(:send, nil, :v,
                s(:str, "1.0")))),
          s(:send, nil, :assert_equal,
            s(:str, " (= 1.0)"),
            s(:send,
              s(:lvar, :duped), :for_lockfile)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default), :for_lockfile)))),
      s(:def, :test_parse,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "="),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:int, 1))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :parse,
              s(:str, "  1"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "="),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:int, 1))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :parse,
              s(:str, "= 1"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, ">"),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:int, 1))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :parse,
              s(:str, "> 1"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "="),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:int, 1))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :parse,
              s(:str, "=\n1"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "="),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:int, 2))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :parse,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "2")))))),
      s(:def, :test_parse_bad,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:nil),
                s(:str, ""),
                s(:str, "! 1"),
                s(:str, "= junk"),
                s(:str, "1..2")), :each),
            s(:args,
              s(:arg, :bad)),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Requirement), :BadRequirementError)),
                  s(:args),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Requirement), :parse,
                    s(:lvar, :bad)))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "Illformed requirement ["),
                  s(:begin,
                    s(:send,
                      s(:lvar, :bad), :inspect)),
                  s(:str, "]")),
                s(:send,
                  s(:lvar, :e), :message)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :BadRequirementError), :superclass),
            s(:const, nil, :ArgumentError)))),
      s(:def, :test_prerelease_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "= 1"))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :r), :prerelease?)),
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "= 1.a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :r), :prerelease?)),
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "> 1.a"),
              s(:str, "< 2"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :r), :prerelease?)))),
      s(:def, :test_satisfied_by_eh_bang_equal,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "!= 1.2"))),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :assert_satisfied_by,
              s(:nil),
              s(:lvar, :r))))),
      s(:def, :test_satisfied_by_eh_blank,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "1.2"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :assert_satisfied_by,
              s(:nil),
              s(:lvar, :r))))),
      s(:def, :test_satisfied_by_eh_equal,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "= 1.2"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send, nil, :assert_satisfied_by,
              s(:nil),
              s(:lvar, :r))))),
      s(:def, :test_satisfied_by_eh_gt,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "> 1.2"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :satisfied_by?,
              s(:nil))))),
      s(:def, :test_satisfied_by_eh_gte,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, ">= 1.2"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :satisfied_by?,
              s(:nil))))),
      s(:def, :test_satisfied_by_eh_list,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "> 1.1"),
              s(:str, "< 1.3"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :satisfied_by?,
              s(:nil))))),
      s(:def, :test_satisfied_by_eh_lt,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "< 1.2"))),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :satisfied_by?,
              s(:nil))))),
      s(:def, :test_satisfied_by_eh_lte,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "<= 1.2"))),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :satisfied_by?,
              s(:nil))))),
      s(:def, :test_satisfied_by_eh_tilde_gt,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "~> 1.2"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.2"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :r)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :satisfied_by?,
              s(:nil))))),
      s(:def, :test_satisfied_by_eh_tilde_gt_v0,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :req,
              s(:str, "~> 0.0.1"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "0.1.1"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "0.0.2"),
            s(:lvar, :r)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "0.0.1"),
            s(:lvar, :r)))),
      s(:def, :test_satisfied_by_eh_good,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_satisfied_by,
            s(:str, "0.2.33"),
            s(:str, "= 0.2.33")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "0.2.34"),
            s(:str, "> 0.2.33")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.0"),
            s(:str, "= 1.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.0"),
            s(:str, "1.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.8.2"),
            s(:str, "> 1.8.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.112"),
            s(:str, "> 1.111")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "0.2"),
            s(:str, "> 0.0.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "0.0.0.0.0.2"),
            s(:str, "> 0.0.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "0.0.1.0"),
            s(:str, "> 0.0.0.1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "10.3.2"),
            s(:str, "> 9.3.2")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.0.0.0"),
            s(:str, "= 1.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "10.3.2"),
            s(:str, "!= 9.3.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "10.3.2"),
            s(:str, "> 9.3.2")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "10.3.2"),
            s(:str, "> 9.3.2")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, " 9.3.2"),
            s(:str, ">= 9.3.2")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "9.3.2 "),
            s(:str, ">= 9.3.2")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, ""),
            s(:str, "= 0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, ""),
            s(:str, "< 0.1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "  "),
            s(:str, "< 0.1 ")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, ""),
            s(:str, " <  0.1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "  "),
            s(:str, "> 0.a ")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, ""),
            s(:str, " >  0.a")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "3.1"),
            s(:str, "< 3.2.rc1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "3.2.0"),
            s(:str, "> 3.2.0.rc1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "3.2.0.rc2"),
            s(:str, "> 3.2.0.rc1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "3.0.rc2"),
            s(:str, "< 3.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "3.0.rc2"),
            s(:str, "< 3.0.0")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "3.0.rc2"),
            s(:str, "< 3.0.1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "3.0.rc2"),
            s(:str, "> 0")))),
      s(:def, :test_illformed_requirements,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:str, ">>> 1.3.5"),
              s(:str, "> blah")), :each),
          s(:args,
            s(:arg, :rq)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :BadRequirementError),
              s(:dstr,
                s(:str, "req ["),
                s(:begin,
                  s(:lvar, :rq)),
                s(:str, "] should fail"))),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:lvar, :rq))))),
      s(:def, :test_satisfied_by_eh_non_versions,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send, nil, :req,
                s(:str, ">= 0")), :satisfied_by?,
              s(:send,
                s(:const, nil, :Object), :new))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:send, nil, :req,
                s(:str, ">= 0")), :satisfied_by?,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default))))),
      s(:def, :test_satisfied_by_eh_boxed,
        s(:args),
        s(:begin,
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:str, "~> 1.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.4"),
            s(:str, "~> 1.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.5"),
            s(:str, "~> 1.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0"),
            s(:str, "~> 1.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.4"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.4.4"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.4.5"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.5"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1.pre"),
            s(:str, "~> 1.0.0")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1.pre"),
            s(:str, "~> 1.1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0.a"),
            s(:str, "~> 1.0")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0.a"),
            s(:str, "~> 2.0")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "0.9"),
            s(:str, "~> 1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.0"),
            s(:str, "~> 1")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.1"),
            s(:str, "~> 1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0"),
            s(:str, "~> 1")))),
      s(:def, :test_satisfied_by_eh_multiple,
        s(:args),
        s(:begin,
          s(:lvasgn, :req,
            s(:array,
              s(:str, ">= 1.4"),
              s(:str, "<= 1.6"),
              s(:str, "!= 1.5"))),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:lvar, :req)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.4"),
            s(:lvar, :req)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.5"),
            s(:lvar, :req)),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.6"),
            s(:lvar, :req)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.7"),
            s(:lvar, :req)),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0"),
            s(:lvar, :req)))),
      s(:def, :test_satisfied_by_boxed,
        s(:args),
        s(:begin,
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:str, "~> 1.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.4"),
            s(:str, "~> 1.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.5"),
            s(:str, "~> 1.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0"),
            s(:str, "~> 1.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.4"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.4.4"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :assert_satisfied_by,
            s(:str, "1.4.5"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.5"),
            s(:str, "~> 1.4.4")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "2.0"),
            s(:str, "~> 1.4.4")))),
      s(:def, :test_specific,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:send, nil, :req,
                s(:str, "> 1")), :specific?)),
          s(:send, nil, :refute,
            s(:send,
              s(:send, nil, :req,
                s(:str, ">= 1")), :specific?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :req,
                s(:str, "!= 1")), :specific?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :req,
                s(:str, "< 1")), :specific?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :req,
                s(:str, "<= 1")), :specific?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :req,
                s(:str, "= 1")), :specific?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :req,
                s(:str, "~> 1")), :specific?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send, nil, :req,
                s(:str, "> 1"),
                s(:str, "> 2")), :specific?)))),
      s(:def, :test_bad,
        s(:args),
        s(:begin,
          s(:send, nil, :refute_satisfied_by,
            s(:str, ""),
            s(:str, "> 0.1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.2.3"),
            s(:str, "!= 1.2.3")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.2.003.0.0"),
            s(:str, "!= 1.02.3")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "4.5.6"),
            s(:str, "< 1.2.3")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.0"),
            s(:str, "> 1.1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, ""),
            s(:str, "= 0.1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.1.1"),
            s(:str, "> 1.1.1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.2"),
            s(:str, "= 1.1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.40"),
            s(:str, "= 1.1")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.3"),
            s(:str, "= 1.40")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "9.3.3"),
            s(:str, "<= 9.3.2")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "9.3.1"),
            s(:str, ">= 9.3.2")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "9.3.03"),
            s(:str, "<= 9.3.2")),
          s(:send, nil, :refute_satisfied_by,
            s(:str, "1.0.0.1"),
            s(:str, "= 1.0")))),
      s(:def, :test_hash_with_multiple_versions,
        s(:args),
        s(:begin,
          s(:lvasgn, :r1,
            s(:send, nil, :req,
              s(:str, "1.0"),
              s(:str, "2.0"))),
          s(:lvasgn, :r2,
            s(:send, nil, :req,
              s(:str, "2.0"),
              s(:str, "1.0"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r1), :hash),
            s(:send,
              s(:lvar, :r2), :hash)),
          s(:lvasgn, :r1,
            s(:block,
              s(:send,
                s(:send, nil, :req,
                  s(:str, "1.0"),
                  s(:str, "2.0")), :tap),
              s(:args,
                s(:arg, :r)),
              s(:send,
                s(:lvar, :r), :concat,
                s(:array,
                  s(:str, "3.0"))))),
          s(:lvasgn, :r2,
            s(:block,
              s(:send,
                s(:send, nil, :req,
                  s(:str, "3.0"),
                  s(:str, "1.0")), :tap),
              s(:args,
                s(:arg, :r)),
              s(:send,
                s(:lvar, :r), :concat,
                s(:array,
                  s(:str, "2.0"))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :r1), :hash),
            s(:send,
              s(:lvar, :r2), :hash)))),
      s(:def, :assert_requirement_equal,
        s(:args,
          s(:arg, :expected),
          s(:arg, :actual)),
        s(:send, nil, :assert_equal,
          s(:send, nil, :req,
            s(:lvar, :expected)),
          s(:send, nil, :req,
            s(:lvar, :actual)))),
      s(:def, :assert_satisfied_by,
        s(:args,
          s(:arg, :version),
          s(:arg, :requirement)),
        s(:send, nil, :assert,
          s(:send,
            s(:send, nil, :req,
              s(:lvar, :requirement)), :satisfied_by?,
            s(:send, nil, :v,
              s(:lvar, :version))),
          s(:dstr,
            s(:begin,
              s(:lvar, :requirement)),
            s(:str, " is satisfied by "),
            s(:begin,
              s(:lvar, :version))))),
      s(:def, :refute_requirement_equal,
        s(:args,
          s(:arg, :unexpected),
          s(:arg, :actual)),
        s(:send, nil, :refute_equal,
          s(:send, nil, :req,
            s(:lvar, :unexpected)),
          s(:send, nil, :req,
            s(:lvar, :actual)))),
      s(:def, :refute_satisfied_by,
        s(:args,
          s(:arg, :version),
          s(:arg, :requirement)),
        s(:send, nil, :refute,
          s(:send,
            s(:send, nil, :req,
              s(:lvar, :requirement)), :satisfied_by?,
            s(:send, nil, :v,
              s(:lvar, :version))),
          s(:dstr,
            s(:begin,
              s(:lvar, :requirement)),
            s(:str, " is not satisfied by "),
            s(:begin,
              s(:lvar, :version))))))))
