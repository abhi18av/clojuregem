s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/source")),
  s(:send, nil, :require,
    s(:str, "rubygems/indexer")),
  s(:class,
    s(:const, nil, :TestGemSource),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :tuple,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :NameTuple), :new,
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:str, "1.a")),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "b"),
                  s(:int, 2))))),
          s(:ivasgn, :@source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))))),
      s(:def, :test_initialize_invalid_uri,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raises,
            s(:const,
              s(:const, nil, :URI), :InvalidURIError)),
          s(:args),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Source), :new,
            s(:str, "git@example:a.git")))),
      s(:def, :test_initialize_git,
        s(:args),
        s(:begin,
          s(:lvasgn, :repository,
            s(:str, "git@example:a.git")),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Git), :new,
              s(:str, "a"),
              s(:lvar, :repository),
              s(:str, "master"),
              s(:false))),
          s(:send, nil, :assert_equal,
            s(:lvar, :repository),
            s(:send,
              s(:lvar, :source), :uri)))),
      s(:def, :test_api_uri,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:ivar, :@source), :api_uri),
          s(:send,
            s(:ivar, :@source), :uri))),
      s(:def, :test_api_uri_resolved_from_remote_fetcher,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://gem.example/foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :api_endpoints), :[]=,
            s(:lvar, :uri),
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://api.blah"))),
          s(:lvasgn, :src,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:lvar, :uri))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "http://api.blah")),
            s(:send,
              s(:lvar, :src), :api_uri)))),
      s(:def, :test_cache_dir_escapes_windows_paths,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:str, "file:///C:/WINDOWS/Temp/gem_repo"))),
          s(:lvasgn, :root,
            s(:send,
              s(:const, nil, :Gem), :spec_cache_dir)),
          s(:lvasgn, :cache_dir,
            s(:send,
              s(:send,
                s(:ivar, :@source), :cache_dir,
                s(:lvar, :uri)), :gsub,
              s(:lvar, :root),
              s(:str, ""))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :cache_dir), :!~,
              s(:regexp,
                s(:str, ":"),
                s(:regopt))),
            s(:dstr,
              s(:begin,
                s(:lvar, :cache_dir)),
              s(:str, " should not contain a :"))))),
      s(:def, :test_dependency_resolver_set_bundler_api,
        s(:args),
        s(:begin,
          s(:lvasgn, :response,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTPResponse), :new,
              s(:str, "1.1"),
              s(:int, 200),
              s(:str, "OK"))),
          s(:if,
            s(:send,
              s(:lvar, :response), :respond_to?,
              s(:sym, :uri)),
            s(:send,
              s(:lvar, :response), :uri=,
              s(:send, nil, :URI,
                s(:str, "http://example"))), nil),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "api/v1/dependencies")),
            s(:lvar, :response)),
          s(:lvasgn, :set,
            s(:send,
              s(:ivar, :@source), :dependency_resolver_set)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :APISet),
            s(:lvar, :set)))),
      s(:def, :test_dependency_resolver_set_file_uri,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Builder), :XChar)), nil,
            s(:send, nil, :skip,
              s(:str, "install builder gem"))),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Indexer), :new,
              s(:ivar, :@tempdir)), :generate_index),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:dstr,
                s(:str, "file://"),
                s(:begin,
                  s(:ivar, :@tempdir)),
                s(:str, "/")))),
          s(:lvasgn, :set,
            s(:send,
              s(:lvar, :source), :dependency_resolver_set)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :IndexSet),
            s(:lvar, :set)))),
      s(:def, :test_dependency_resolver_set_marshal_api,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:ivar, :@source), :dependency_resolver_set)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :IndexSet),
            s(:lvar, :set)))),
      s(:def, :test_fetch_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send,
              s(:ivar, :@specs), :[],
              s(:str, "a-1"))),
          s(:lvasgn, :spec_uri,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :MARSHAL_SPEC_DIR)),
              s(:begin,
                s(:send,
                  s(:lvar, :a1), :spec_name)))),
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@source), :fetch_spec,
              s(:send, nil, :tuple,
                s(:str, "a"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Version), :new,
                  s(:int, 1)),
                s(:str, "ruby")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :a1), :full_name),
            s(:send,
              s(:lvar, :spec), :full_name)),
          s(:lvasgn, :cache_dir,
            s(:send,
              s(:ivar, :@source), :cache_dir,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :spec_uri)))),
          s(:lvasgn, :cache_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :cache_dir),
              s(:send,
                s(:lvar, :a1), :spec_name))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :cache_file))))),
      s(:def, :test_fetch_spec_cached,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send,
              s(:ivar, :@specs), :[],
              s(:str, "a-1"))),
          s(:lvasgn, :spec_uri,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "/"),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :MARSHAL_SPEC_DIR)),
              s(:begin,
                s(:send,
                  s(:lvar, :a1), :spec_name)))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:lvar, :spec_uri)),
              s(:str, ".rz")),
            s(:nil)),
          s(:lvasgn, :cache_dir,
            s(:send,
              s(:ivar, :@source), :cache_dir,
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :spec_uri)))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :cache_dir)),
          s(:lvasgn, :cache_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :cache_dir),
              s(:send,
                s(:lvar, :a1), :spec_name))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :cache_file),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :a1),
              s(:lvar, :io))),
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@source), :fetch_spec,
              s(:send, nil, :tuple,
                s(:str, "a"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Version), :new,
                  s(:int, 1)),
                s(:str, "ruby")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :a1), :full_name),
            s(:send,
              s(:lvar, :spec), :full_name)))),
      s(:def, :test_fetch_spec_platform,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@source), :fetch_spec,
              s(:send, nil, :tuple,
                s(:str, "pl"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Version), :new,
                  s(:int, 1)),
                s(:str, "i386-linux")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:str, "pl-1-x86-linux")), :full_name),
            s(:send,
              s(:lvar, :spec), :full_name)))),
      s(:def, :test_fetch_spec_platform_ruby,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@source), :fetch_spec,
              s(:send, nil, :tuple,
                s(:str, "a"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Version), :new,
                  s(:int, 1)),
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:ivar, :@specs), :[],
                s(:str, "a-1")), :full_name),
            s(:send,
              s(:lvar, :spec), :full_name)),
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@source), :fetch_spec,
              s(:send, nil, :tuple,
                s(:str, "a"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Version), :new,
                  s(:int, 1)),
                s(:str, "")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:ivar, :@specs), :[],
                s(:str, "a-1")), :full_name),
            s(:send,
              s(:lvar, :spec), :full_name)))),
      s(:def, :test_load_specs,
        s(:args),
        s(:begin,
          s(:lvasgn, :released,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@source), :load_specs,
                  s(:sym, :released)), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2"),
              s(:str, "a-1"),
              s(:str, "b-2")),
            s(:lvar, :released)),
          s(:lvasgn, :cache_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :spec_cache_dir),
              s(:str, "gems.example.com%80"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :cache_dir)),
            s(:dstr,
              s(:begin,
                s(:lvar, :cache_dir)),
              s(:str, " does not exist"))),
          s(:lvasgn, :cache_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :cache_dir),
              s(:dstr,
                s(:str, "specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :cache_file))))),
      s(:def, :test_load_specs_cached,
        s(:args),
        s(:begin,
          s(:lvasgn, :latest_specs,
            s(:send,
              s(:ivar, :@source), :load_specs,
              s(:sym, :latest))),
          s(:send,
            s(:lvar, :latest_specs), :<<,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "cached"),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "1.0.0")),
              s(:str, "ruby"))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "latest_specs."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version)),
              s(:str, ".gz")),
            s(:nil)),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "latest_specs."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version))),
            s(:send,
              s(:str, " "), :*,
              s(:send,
                s(:send,
                  s(:const, nil, :Marshal), :dump,
                  s(:lvar, :latest_specs)), :length))),
          s(:lvasgn, :cache_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :spec_cache_dir),
              s(:str, "gems.example.com%80"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :cache_dir)),
          s(:lvasgn, :cache_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :cache_dir),
              s(:dstr,
                s(:str, "latest_specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :cache_file),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :latest_specs),
              s(:lvar, :io))),
          s(:lvasgn, :cached_specs,
            s(:send,
              s(:ivar, :@source), :load_specs,
              s(:sym, :latest))),
          s(:send, nil, :assert_equal,
            s(:lvar, :latest_specs),
            s(:lvar, :cached_specs)))),
      s(:def, :test_load_specs_cached_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :latest_specs,
            s(:send,
              s(:ivar, :@source), :load_specs,
              s(:sym, :latest))),
          s(:send,
            s(:lvar, :latest_specs), :<<,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "fixed"),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "1.0.0")),
              s(:str, "ruby"))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "latest_specs."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version)),
              s(:str, ".gz")),
            s(:send, nil, :util_gzip,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :latest_specs)))),
          s(:lvasgn, :cache_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :spec_cache_dir),
              s(:str, "gems.example.com%80"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :cache_dir)),
          s(:lvasgn, :cache_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :cache_dir),
              s(:dstr,
                s(:str, "latest_specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :cache_file),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:send,
                  s(:const, nil, :Marshal), :dump,
                  s(:lvar, :latest_specs)), :[],
                s(:int, 0),
                s(:int, 10)))),
          s(:lvasgn, :fixed_specs,
            s(:send,
              s(:ivar, :@source), :load_specs,
              s(:sym, :latest))),
          s(:send, nil, :assert_equal,
            s(:lvar, :latest_specs),
            s(:lvar, :fixed_specs)))),
      s(:def, :test_load_specs_from_unavailable_uri,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:str, "http://not-there.nothing"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
            s(:args),
            s(:send,
              s(:lvar, :src), :load_specs,
              s(:sym, :latest))))),
      s(:def, :test_spaceship,
        s(:args),
        s(:begin,
          s(:lvasgn, :remote,
            s(:ivar, :@source)),
          s(:lvasgn, :specific,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :SpecificFile), :new,
              s(:send,
                s(:send,
                  s(:ivar, :@specs), :[],
                  s(:str, "a-1")), :cache_file))),
          s(:lvasgn, :installed,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Installed), :new)),
          s(:lvasgn, :local,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Local), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :remote), :<=>,
              s(:lvar, :remote)),
            s(:str, "remote    <=> remote")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :remote), :<=>,
              s(:lvar, :specific)),
            s(:str, "remote    <=> specific")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :specific), :<=>,
              s(:lvar, :remote)),
            s(:str, "specific  <=> remote")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :remote), :<=>,
              s(:lvar, :local)),
            s(:str, "remote    <=> local")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :local), :<=>,
              s(:lvar, :remote)),
            s(:str, "local     <=> remote")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :remote), :<=>,
              s(:lvar, :installed)),
            s(:str, "remote    <=> installed")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :installed), :<=>,
              s(:lvar, :remote)),
            s(:str, "installed <=> remote")),
          s(:lvasgn, :no_uri,
            s(:send,
              s(:ivar, :@source), :dup)),
          s(:send,
            s(:lvar, :no_uri), :instance_variable_set,
            s(:sym, :@uri),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :remote), :<=>,
              s(:lvar, :no_uri)),
            s(:str, "remote <=> no_uri")))),
      s(:def, :test_update_cache_eh,
        s(:args),
        s(:send, nil, :assert,
          s(:send,
            s(:ivar, :@source), :update_cache?))),
      s(:def, :test_update_cache_eh_home_nonexistent,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :rmdir,
            s(:send,
              s(:const, nil, :Gem), :user_home)),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@source), :update_cache?)))))))
