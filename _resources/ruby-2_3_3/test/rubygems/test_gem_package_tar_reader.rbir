s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/package/tar_test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:class,
    s(:const, nil, :TestGemPackageTarReader),
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Package), :TarTestCase),
    s(:begin,
      s(:def, :test_each_entry,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :tar,
              s(:send, nil, :tar_dir_header,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:int, 0),
                s(:send,
                  s(:const, nil, :Time), :now))),
            s(:send,
              s(:lvar, :tar), :<<,
              s(:send, nil, :tar_file_header,
                s(:str, "bar"),
                s(:str, "baz"),
                s(:int, 0),
                s(:int, 0),
                s(:send,
                  s(:const, nil, :Time), :now))),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :TempIO), :new,
                s(:lvar, :tar))),
            s(:lvasgn, :entries,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarReader), :new,
                s(:lvar, :io)),
              s(:args,
                s(:arg, :tar_reader)),
              s(:block,
                s(:send,
                  s(:lvar, :tar_reader), :each_entry),
                s(:args,
                  s(:arg, :entry)),
                s(:begin,
                  s(:send, nil, :assert_kind_of,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Package), :TarReader), :Entry),
                    s(:lvar, :entry)),
                  s(:op_asgn,
                    s(:lvasgn, :entries), :+,
                    s(:int, 1))))),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:lvar, :entries))),
          s(:send,
            s(:lvar, :io), :close!))),
      s(:def, :test_rewind,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :content,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:str, "a"),
                      s(:str, "z"))), :to_a), :join,
                s(:str, " "))),
            s(:lvasgn, :str,
              s(:send,
                s(:send,
                  s(:send, nil, :tar_file_header,
                    s(:str, "lib/foo"),
                    s(:str, ""),
                    s(:int, 4516),
                    s(:send,
                      s(:lvar, :content), :size),
                    s(:send,
                      s(:const, nil, :Time), :now)), :+,
                  s(:lvar, :content)), :+,
                s(:send,
                  s(:str, "\u0000"), :*,
                  s(:begin,
                    s(:send,
                      s(:int, 512), :-,
                      s(:send,
                        s(:lvar, :content), :size)))))),
            s(:send,
              s(:lvar, :str), :<<,
              s(:send,
                s(:str, "\u0000"), :*,
                s(:int, 1024))),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :TempIO), :new,
                s(:lvar, :str))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarReader), :new,
                s(:lvar, :io)),
              s(:args,
                s(:arg, :tar_reader)),
              s(:block,
                s(:send,
                  s(:int, 3), :times),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :tar_reader), :rewind),
                  s(:lvasgn, :i,
                    s(:int, 0)),
                  s(:block,
                    s(:send,
                      s(:lvar, :tar_reader), :each_entry),
                    s(:args,
                      s(:arg, :entry)),
                    s(:begin,
                      s(:send, nil, :assert_equal,
                        s(:lvar, :content),
                        s(:send,
                          s(:lvar, :entry), :read)),
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1)))),
                  s(:send, nil, :assert_equal,
                    s(:int, 1),
                    s(:lvar, :i)))))),
          s(:send,
            s(:lvar, :io), :close!))),
      s(:def, :test_seek,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :tar,
              s(:send, nil, :tar_dir_header,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:int, 0),
                s(:send,
                  s(:const, nil, :Time), :now))),
            s(:send,
              s(:lvar, :tar), :<<,
              s(:send, nil, :tar_file_header,
                s(:str, "bar"),
                s(:str, "baz"),
                s(:int, 0),
                s(:int, 0),
                s(:send,
                  s(:const, nil, :Time), :now))),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :TempIO), :new,
                s(:lvar, :tar))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarReader), :new,
                s(:lvar, :io)),
              s(:args,
                s(:arg, :tar_reader)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :tar_reader), :seek,
                    s(:str, "baz/bar")),
                  s(:args,
                    s(:arg, :entry)),
                  s(:begin,
                    s(:send, nil, :assert_kind_of,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :Package), :TarReader), :Entry),
                      s(:lvar, :entry)),
                    s(:send, nil, :assert_equal,
                      s(:str, "baz/bar"),
                      s(:send,
                        s(:lvar, :entry), :full_name)))),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :io), :pos))))),
          s(:send,
            s(:lvar, :io), :close!))),
      s(:def, :test_seek_missing,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :tar,
              s(:send, nil, :tar_dir_header,
                s(:str, "foo"),
                s(:str, "bar"),
                s(:int, 0),
                s(:send,
                  s(:const, nil, :Time), :now))),
            s(:send,
              s(:lvar, :tar), :<<,
              s(:send, nil, :tar_file_header,
                s(:str, "bar"),
                s(:str, "baz"),
                s(:int, 0),
                s(:int, 0),
                s(:send,
                  s(:const, nil, :Time), :now))),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :TempIO), :new,
                s(:lvar, :tar))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarReader), :new,
                s(:lvar, :io)),
              s(:args,
                s(:arg, :tar_reader)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :tar_reader), :seek,
                    s(:str, "nonexistent")),
                  s(:args,
                    s(:arg, :entry)),
                  s(:send, nil, :flunk,
                    s(:str, "entry missing but entry-found block was run"))),
                s(:send, nil, :assert_equal,
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :io), :pos))))),
          s(:send,
            s(:lvar, :io), :close!))))))
