s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:class,
    s(:const, nil, :TestGemRequire),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :Latch), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :count,
                s(:int, 1))),
            s(:begin,
              s(:ivasgn, :@count,
                s(:lvar, :count)),
              s(:ivasgn, :@lock,
                s(:send,
                  s(:const, nil, :Monitor), :new)),
              s(:ivasgn, :@cv,
                s(:send,
                  s(:ivar, :@lock), :new_cond)))),
          s(:def, :release,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@lock), :synchronize),
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@count), :>,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:ivasgn, :@count), :-,
                    s(:int, 1)), nil),
                s(:if,
                  s(:send,
                    s(:ivar, :@count), :zero?),
                  s(:send,
                    s(:ivar, :@cv), :broadcast), nil)))),
          s(:def, :await,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@lock), :synchronize),
              s(:args),
              s(:block,
                s(:send,
                  s(:ivar, :@cv), :wait_while),
                s(:args),
                s(:send,
                  s(:ivar, :@count), :>,
                  s(:int, 0))))))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@old_loaded_features,
            s(:send,
              s(:gvar, :$LOADED_FEATURES), :dup)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :LoadError)),
            s(:args),
            s(:send, nil, :require,
              s(:str, "test_gem_require_a"))),
          s(:send,
            s(:gvar, :$LOADED_FEATURES), :replace,
            s(:ivar, :@old_loaded_features)))),
      s(:def, :assert_require,
        s(:args,
          s(:arg, :path)),
        s(:send, nil, :assert,
          s(:send, nil, :require,
            s(:lvar, :path)),
          s(:dstr,
            s(:str, "'"),
            s(:begin,
              s(:lvar, :path)),
            s(:str, "' was already required")))),
      s(:def, :append_latch,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:lvar, :spec), :gem_dir)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :dir)),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :spec), :files), :each),
              s(:args,
                s(:arg, :file)),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :file),
                  s(:str, "a")),
                s(:args,
                  s(:arg, :fp)),
                s(:begin,
                  s(:send,
                    s(:lvar, :fp), :puts,
                    s(:str, "FILE_ENTERED_LATCH.release")),
                  s(:send,
                    s(:lvar, :fp), :puts,
                    s(:str, "FILE_EXIT_LATCH.await")))))))),
      s(:def, :test_dash_i_beats_gems,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "= 1"))),
                s(:str, "lib/test_gem_require_a.rb"))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, "> 0"))),
                s(:str, "lib/b/c.rb"))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/c/c.rb"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/c/c.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :a1)),
            s(:lvasgn, :dir,
              s(:send,
                s(:const, nil, :Dir), :mktmpdir)),
            s(:lvasgn, :dash_i_arg,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dir),
                s(:str, "lib"))),
            s(:lvasgn, :c_rb,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dash_i_arg),
                s(:str, "b"),
                s(:str, "c.rb"))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :c_rb))),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :c_rb),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :write,
                s(:str, "class Object; HELLO = 'world' end"))),
            s(:lvasgn, :lp,
              s(:send,
                s(:gvar, :$LOAD_PATH), :dup)),
            s(:send,
              s(:gvar, :$LOAD_PATH), :unshift,
              s(:lvar, :dash_i_arg)),
            s(:send, nil, :assert_require,
              s(:str, "test_gem_require_a")),
            s(:send, nil, :assert_require,
              s(:str, "b/c")),
            s(:send, nil, :assert_equal,
              s(:str, "world"),
              s(:const,
                s(:const,
                  s(:cbase), :Object), :HELLO))),
          s(:begin,
            s(:send,
              s(:gvar, :$LOAD_PATH), :replace,
              s(:lvar, :lp)),
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :HELLO)),
              s(:send,
                s(:const, nil, :Object), :send,
                s(:sym, :remove_const),
                s(:sym, :HELLO)), nil)))),
      s(:def, :test_concurrent_require,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^1\\.8\\."),
                  s(:regopt)),
                s(:const, nil, :RUBY_VERSION)),
              s(:send, nil, :skip,
                s(:str, "deadlock")), nil),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :FILE_ENTERED_LATCH),
              s(:send,
                s(:const, nil, :Latch), :new,
                s(:int, 2))),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :FILE_EXIT_LATCH),
              s(:send,
                s(:const, nil, :Latch), :new,
                s(:int, 1))),
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/a.rb"))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/b.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :a1),
              s(:lvar, :b1)),
            s(:send, nil, :append_latch,
              s(:lvar, :a1)),
            s(:send, nil, :append_latch,
              s(:lvar, :b1)),
            s(:lvasgn, :t1,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:send, nil, :assert_require,
                  s(:str, "a")))),
            s(:lvasgn, :t2,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:send, nil, :assert_require,
                  s(:str, "b")))),
            s(:send,
              s(:const, nil, :FILE_ENTERED_LATCH), :await),
            s(:send,
              s(:const, nil, :FILE_EXIT_LATCH), :release),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :t1), :join),
              s(:str, "thread 1 should exit")),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :t2), :join),
              s(:str, "thread 2 should exit"))),
          s(:begin,
            s(:if,
              s(:gvar, :$!),
              s(:return), nil),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :FILE_ENTERED_LATCH)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :FILE_EXIT_LATCH))))),
      s(:def, :test_require_is_not_lazy_with_exact_req,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 1"))),
              s(:str, "lib/test_gem_require_a.rb"))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/b/c.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/b/c.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send, nil, :assert_require,
            s(:str, "test_gem_require_a")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :unresolved_names),
            s(:array)),
          s(:send, nil, :assert_require,
            s(:str, "b/c")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_require_is_lazy_with_inexact_req,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 1"))),
              s(:str, "lib/test_gem_require_a.rb"))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/b/c.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/b/c.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send, nil, :assert_require,
            s(:str, "test_gem_require_a")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :unresolved_names),
            s(:array,
              s(:str, "b (>= 1)"))),
          s(:send, nil, :assert_require,
            s(:str, "b/c")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-2")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_require_is_not_lazy_with_one_possible,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 1"))),
              s(:str, "lib/test_gem_require_a.rb"))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/b/c.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :a1)),
          s(:send, nil, :assert_require,
            s(:str, "test_gem_require_a")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :unresolved_names),
            s(:array)),
          s(:send, nil, :assert_require,
            s(:str, "b/c")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_require_can_use_a_pathname_object,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/test_gem_require_a.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a1)),
          s(:send, nil, :assert_require,
            s(:send,
              s(:const, nil, :Pathname), :new,
              s(:str, "test_gem_require_a"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :unresolved_names),
            s(:array)))),
      s(:def, :test_activate_via_require_respects_loaded_files,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 1"))),
              s(:str, "lib/test_gem_require_a.rb"))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/benchmark.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/benchmark.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send, nil, :require,
            s(:str, "test_gem_require_a")),
          s(:send, nil, :assert_equal,
            s(:send, nil, :unresolved_names),
            s(:array,
              s(:str, "b (>= 1)"))),
          s(:send, nil, :refute,
            s(:send, nil, :require,
              s(:str, "benchmark")),
            s(:str, "benchmark should have already been loaded")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-2")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_already_activated_direct_conflict,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "> 0"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 1"))),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 2"))),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :c1,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/d.rb"))),
          s(:lvasgn, :c2,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/d.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :c1),
            s(:lvar, :c2),
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :a1), :activate),
          s(:send,
            s(:lvar, :c1), :activate),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "c-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b (> 0)")),
            s(:send, nil, :unresolved_names)),
          s(:send, nil, :assert,
            s(:send, nil, :require,
              s(:str, "ib"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1"),
              s(:str, "c-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send, nil, :unresolved_names)))),
      s(:def, :test_multiple_gems_with_the_same_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "> 0")),
                s(:pair,
                  s(:str, "x"),
                  s(:str, "> 0"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 1"))),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 2"))),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :x1,
            s(:send, nil, :new_spec,
              s(:str, "x"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :x2,
            s(:send, nil, :new_spec,
              s(:str, "x"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :c1,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/d.rb"))),
          s(:lvasgn, :c2,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/d.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :c1),
            s(:lvar, :c2),
            s(:lvar, :x1),
            s(:lvar, :x2),
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :a1), :activate),
          s(:send,
            s(:lvar, :c1), :activate),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "c-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b (> 0)"),
              s(:str, "x (> 0)")),
            s(:send, nil, :unresolved_names)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :LoadError)),
              s(:args),
              s(:send, nil, :require,
                s(:str, "ib")))),
          s(:send, nil, :assert_equal,
            s(:str, "ib found in multiple gems: b, x"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_unable_to_find_good_unresolved_version,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "> 0"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 2"))),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 3"))),
              s(:str, "lib/ib.rb"))),
          s(:lvasgn, :c1,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/d.rb"))),
          s(:lvasgn, :c2,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/d.rb"))),
          s(:lvasgn, :c3,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "3"),
              s(:nil),
              s(:str, "lib/d.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :c1),
            s(:lvar, :c2),
            s(:lvar, :c3),
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :a1), :activate),
          s(:send,
            s(:lvar, :c1), :activate),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "c-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b (> 0)")),
            s(:send, nil, :unresolved_names)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :LoadError)),
              s(:args),
              s(:send, nil, :require,
                s(:str, "ib")))),
          s(:send, nil, :assert_equal,
            s(:str, "unable to find a version of 'b' to activate"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_require_works_after_cleanup,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_default_spec,
              s(:str, "a"),
              s(:str, "1.0"),
              s(:nil),
              s(:str, "a/b.rb"))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_default_spec,
              s(:str, "b"),
              s(:str, "1.0"),
              s(:nil),
              s(:str, "b/c.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_default_spec,
              s(:str, "b"),
              s(:str, "2.0"),
              s(:nil),
              s(:str, "b/d.rb"))),
          s(:send, nil, :install_default_gems,
            s(:lvar, :a1)),
          s(:send, nil, :install_default_gems,
            s(:lvar, :b1)),
          s(:send, nil, :install_default_gems,
            s(:lvar, :b2)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send, nil, :require,
            s(:str, "rubygems")),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :stubs),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@default_dir),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :b1), :full_name))))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@default_spec_dir),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :b1), :full_name)),
                s(:str, ".gemspec")))),
          s(:send, nil, :assert_require,
            s(:str, "a/b")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1.0")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_require,
            s(:str, "b/d")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1.0"),
              s(:str, "b-2.0")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_require_doesnt_traverse_development_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/a.rb"))),
          s(:lvasgn, :z,
            s(:send, nil, :new_spec,
              s(:str, "z"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "w"),
                  s(:str, "> 0"))))),
          s(:lvasgn, :w1,
            s(:block,
              s(:send, nil, :new_spec,
                s(:str, "w"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "non-existent")))),
          s(:lvasgn, :w2,
            s(:block,
              s(:send, nil, :new_spec,
                s(:str, "w"),
                s(:str, "2")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "non-existent")))),
          s(:send, nil, :install_specs,
            s(:lvar, :a),
            s(:lvar, :w1),
            s(:lvar, :w2),
            s(:lvar, :z)),
          s(:send, nil, :assert,
            s(:send, nil, :gem,
              s(:str, "z"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "z-1")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "w (> 0)")),
            s(:send, nil, :unresolved_names)),
          s(:send, nil, :assert,
            s(:send, nil, :require,
              s(:str, "a"))))),
      s(:def, :test_default_gem_only,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_gem_spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "2.0.0.0"),
              s(:nil),
              s(:str, "default/gem.rb"))),
          s(:send, nil, :install_default_specs,
            s(:lvar, :default_gem_spec)),
          s(:send, nil, :assert_require,
            s(:str, "default/gem")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "default-2.0.0.0")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_default_gem_and_normal_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_gem_spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "2.0.0.0"),
              s(:nil),
              s(:str, "default/gem.rb"))),
          s(:send, nil, :install_default_specs,
            s(:lvar, :default_gem_spec)),
          s(:lvasgn, :normal_gem_spec,
            s(:send, nil, :new_spec,
              s(:str, "default"),
              s(:str, "3.0"),
              s(:nil),
              s(:str, "lib/default/gem.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :normal_gem_spec)),
          s(:send, nil, :assert_require,
            s(:str, "default/gem")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "default-3.0")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :loaded_spec_names,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :loaded_specs), :values), :map,
            s(:block_pass,
              s(:sym, :full_name))), :sort)),
      s(:def, :unresolved_names,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :unresolved_deps), :values), :map,
            s(:block_pass,
              s(:sym, :to_s))), :sort)))))
