s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/version")),
  s(:class,
    s(:const, nil, :TestGemVersion),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :V),
        s(:const,
          s(:const,
            s(:cbase), :Gem), :Version), nil),
      s(:def, :test_bump,
        s(:args),
        s(:send, nil, :assert_bumped_version_equal,
          s(:str, "5.3"),
          s(:str, "5.2.4"))),
      s(:def, :test_bump_alpha,
        s(:args),
        s(:send, nil, :assert_bumped_version_equal,
          s(:str, "5.3"),
          s(:str, "5.2.4.a"))),
      s(:def, :test_bump_alphanumeric,
        s(:args),
        s(:send, nil, :assert_bumped_version_equal,
          s(:str, "5.3"),
          s(:str, "5.2.4.a10"))),
      s(:def, :test_bump_trailing_zeros,
        s(:args),
        s(:send, nil, :assert_bumped_version_equal,
          s(:str, "5.1"),
          s(:str, "5.0.0"))),
      s(:def, :test_bump_one_level,
        s(:args),
        s(:send, nil, :assert_bumped_version_equal,
          s(:str, "6"),
          s(:str, "5"))),
      s(:def, :test_class_create,
        s(:args),
        s(:begin,
          s(:lvasgn, :real,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:float, 1.0))),
          s(:send, nil, :assert_same,
            s(:lvar, :real),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :create,
              s(:lvar, :real))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :create,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :v,
              s(:str, "5.1")),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :create,
              s(:str, "5.1"))),
          s(:lvasgn, :ver,
            s(:send,
              s(:str, "1.1"), :freeze)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :v,
              s(:str, "1.1")),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :create,
              s(:lvar, :ver))))),
      s(:def, :test_class_new_subclass,
        s(:args),
        s(:begin,
          s(:lvasgn, :v1,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:str, "1"))),
          s(:lvasgn, :v2,
            s(:send,
              s(:const, nil, :V), :new,
              s(:str, "1"))),
          s(:send, nil, :refute_same,
            s(:lvar, :v1),
            s(:lvar, :v2)))),
      s(:def, :test_eql_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_version_eql,
            s(:str, "1.2"),
            s(:str, "1.2")),
          s(:send, nil, :refute_version_eql,
            s(:str, "1.2"),
            s(:str, "1.2.0")),
          s(:send, nil, :refute_version_eql,
            s(:str, "1.2"),
            s(:str, "1.3")),
          s(:send, nil, :refute_version_eql,
            s(:str, "1.2.b1"),
            s(:str, "1.2.b.1")))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_version_equal,
            s(:str, "1.2"),
            s(:str, "1.2")),
          s(:send, nil, :refute_version_equal,
            s(:str, "1.2"),
            s(:str, "1.3")),
          s(:send, nil, :assert_version_equal,
            s(:str, "1.2.b1"),
            s(:str, "1.2.b.1")))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.2")), :hash),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.2")), :hash)),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.2")), :hash),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.3")), :hash)),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.2")), :hash),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.2.0")), :hash)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:str, "1.0"),
                s(:str, "1.0 "),
                s(:str, " 1.0 "),
                s(:str, "1.0\n"),
                s(:str, "\n1.0\n"),
                s(:send,
                  s(:str, "1.0"), :freeze)), :each),
            s(:args,
              s(:arg, :good)),
            s(:send, nil, :assert_version_equal,
              s(:str, "1.0"),
              s(:lvar, :good))),
          s(:send, nil, :assert_version_equal,
            s(:str, "1"),
            s(:int, 1)))),
      s(:def, :test_initialize_bad,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "junk"),
              s(:str, "1.0\n2.0"),
              s(:str, "1..2"),
              s(:str, "1.2 3.4")), :each),
          s(:args,
            s(:arg, :bad)),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const, nil, :ArgumentError),
                  s(:lvar, :bad)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Version), :new,
                  s(:lvar, :bad)))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "Malformed version number string "),
                s(:begin,
                  s(:lvar, :bad))),
              s(:send,
                s(:lvar, :e), :message),
              s(:lvar, :bad))))),
      s(:def, :test_prerelease,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_prerelease,
            s(:str, "1.2.0.a")),
          s(:send, nil, :assert_prerelease,
            s(:str, "2.9.b")),
          s(:send, nil, :assert_prerelease,
            s(:str, "22.1.50.0.d")),
          s(:send, nil, :assert_prerelease,
            s(:str, "1.2.d.42")),
          s(:send, nil, :assert_prerelease,
            s(:str, "1.A")),
          s(:send, nil, :refute_prerelease,
            s(:str, "1.2.0")),
          s(:send, nil, :refute_prerelease,
            s(:str, "2.9")),
          s(:send, nil, :refute_prerelease,
            s(:str, "22.1.50.0")))),
      s(:def, :test_release,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_release_equal,
            s(:str, "1.2.0"),
            s(:str, "1.2.0.a")),
          s(:send, nil, :assert_release_equal,
            s(:str, "1.1"),
            s(:str, "1.1.rc10")),
          s(:send, nil, :assert_release_equal,
            s(:str, "1.9.3"),
            s(:str, "1.9.3.alpha.5")),
          s(:send, nil, :assert_release_equal,
            s(:str, "1.9.3"),
            s(:str, "1.9.3")))),
      s(:def, :test_spaceship,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.0")), :<=>,
              s(:send, nil, :v,
                s(:str, "1.0.0")))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.0")), :<=>,
              s(:send, nil, :v,
                s(:str, "1.0.a")))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.8.2")), :<=>,
              s(:send, nil, :v,
                s(:str, "0.0.0")))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.8.2")), :<=>,
              s(:send, nil, :v,
                s(:str, "1.8.2.a")))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.8.2.b")), :<=>,
              s(:send, nil, :v,
                s(:str, "1.8.2.a")))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.8.2.a")), :<=>,
              s(:send, nil, :v,
                s(:str, "1.8.2")))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.8.2.a10")), :<=>,
              s(:send, nil, :v,
                s(:str, "1.8.2.a9")))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:send, nil, :v,
                s(:str, "")), :<=>,
              s(:send, nil, :v,
                s(:str, "0")))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send, nil, :v,
                s(:str, "1.0")), :<=>,
              s(:str, "whatever"))))),
      s(:def, :test_approximate_recommendation,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_approximate_equal,
            s(:str, "~> 1.0"),
            s(:str, "1")),
          s(:send, nil, :assert_approximate_equal,
            s(:str, "~> 1.0"),
            s(:str, "1.0")),
          s(:send, nil, :assert_approximate_equal,
            s(:str, "~> 1.2"),
            s(:str, "1.2")),
          s(:send, nil, :assert_approximate_equal,
            s(:str, "~> 1.2"),
            s(:str, "1.2.0")),
          s(:send, nil, :assert_approximate_equal,
            s(:str, "~> 1.2"),
            s(:str, "1.2.3")),
          s(:send, nil, :assert_approximate_equal,
            s(:str, "~> 1.2"),
            s(:str, "1.2.3.a.4")))),
      s(:def, :test_to_s,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "5.2.4"),
          s(:send,
            s(:send, nil, :v,
              s(:str, "5.2.4")), :to_s))),
      s(:def, :test_semver,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_less_than,
            s(:str, "1.0.0-alpha"),
            s(:str, "1.0.0-alpha.1")),
          s(:send, nil, :assert_less_than,
            s(:str, "1.0.0-alpha.1"),
            s(:str, "1.0.0-beta.2")),
          s(:send, nil, :assert_less_than,
            s(:str, "1.0.0-beta.2"),
            s(:str, "1.0.0-beta.11")),
          s(:send, nil, :assert_less_than,
            s(:str, "1.0.0-beta.11"),
            s(:str, "1.0.0-rc.1")),
          s(:send, nil, :assert_less_than,
            s(:str, "1.0.0-rc1"),
            s(:str, "1.0.0")),
          s(:send, nil, :assert_less_than,
            s(:str, "1.0.0-1"),
            s(:str, "1")))),
      s(:def, :assert_prerelease,
        s(:args,
          s(:arg, :version)),
        s(:send, nil, :assert,
          s(:send,
            s(:send, nil, :v,
              s(:lvar, :version)), :prerelease?),
          s(:dstr,
            s(:begin,
              s(:lvar, :version)),
            s(:str, " is a prerelease")))),
      s(:def, :assert_approximate_equal,
        s(:args,
          s(:arg, :expected),
          s(:arg, :version)),
        s(:send, nil, :assert_equal,
          s(:lvar, :expected),
          s(:send,
            s(:send, nil, :v,
              s(:lvar, :version)), :approximate_recommendation))),
      s(:def, :assert_bumped_version_equal,
        s(:args,
          s(:arg, :expected),
          s(:arg, :unbumped)),
        s(:send, nil, :assert_version_equal,
          s(:lvar, :expected),
          s(:send,
            s(:send, nil, :v,
              s(:lvar, :unbumped)), :bump))),
      s(:def, :assert_release_equal,
        s(:args,
          s(:arg, :release),
          s(:arg, :version)),
        s(:send, nil, :assert_version_equal,
          s(:lvar, :release),
          s(:send,
            s(:send, nil, :v,
              s(:lvar, :version)), :release))),
      s(:def, :assert_version_equal,
        s(:args,
          s(:arg, :expected),
          s(:arg, :actual)),
        s(:send, nil, :assert_equal,
          s(:send, nil, :v,
            s(:lvar, :expected)),
          s(:send, nil, :v,
            s(:lvar, :actual)))),
      s(:def, :assert_version_eql,
        s(:args,
          s(:arg, :first),
          s(:arg, :second)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :first),
              s(:lvasgn, :second)),
            s(:array,
              s(:send, nil, :v,
                s(:lvar, :first)),
              s(:send, nil, :v,
                s(:lvar, :second)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :first), :eql?,
              s(:lvar, :second)),
            s(:dstr,
              s(:begin,
                s(:lvar, :first)),
              s(:str, " is eql? "),
              s(:begin,
                s(:lvar, :second)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :second), :eql?,
              s(:lvar, :first)),
            s(:dstr,
              s(:begin,
                s(:lvar, :second)),
              s(:str, " is eql? "),
              s(:begin,
                s(:lvar, :first)))))),
      s(:def, :assert_less_than,
        s(:args,
          s(:arg, :left),
          s(:arg, :right)),
        s(:begin,
          s(:lvasgn, :l,
            s(:send, nil, :v,
              s(:lvar, :left))),
          s(:lvasgn, :r,
            s(:send, nil, :v,
              s(:lvar, :right))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :l), :<,
              s(:lvar, :r)),
            s(:dstr,
              s(:begin,
                s(:lvar, :left)),
              s(:str, " not less than "),
              s(:begin,
                s(:lvar, :right)))))),
      s(:def, :refute_prerelease,
        s(:args,
          s(:arg, :version)),
        s(:send, nil, :refute,
          s(:send,
            s(:send, nil, :v,
              s(:lvar, :version)), :prerelease?),
          s(:dstr,
            s(:begin,
              s(:lvar, :version)),
            s(:str, " is NOT a prerelease")))),
      s(:def, :refute_version_eql,
        s(:args,
          s(:arg, :first),
          s(:arg, :second)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :first),
              s(:lvasgn, :second)),
            s(:array,
              s(:send, nil, :v,
                s(:lvar, :first)),
              s(:send, nil, :v,
                s(:lvar, :second)))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :first), :eql?,
              s(:lvar, :second)),
            s(:dstr,
              s(:begin,
                s(:lvar, :first)),
              s(:str, " is NOT eql? "),
              s(:begin,
                s(:lvar, :second)))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :second), :eql?,
              s(:lvar, :first)),
            s(:dstr,
              s(:begin,
                s(:lvar, :second)),
              s(:str, " is NOT eql? "),
              s(:begin,
                s(:lvar, :first)))))),
      s(:def, :refute_version_equal,
        s(:args,
          s(:arg, :unexpected),
          s(:arg, :actual)),
        s(:send, nil, :refute_equal,
          s(:send, nil, :v,
            s(:lvar, :unexpected)),
          s(:send, nil, :v,
            s(:lvar, :actual)))))))
