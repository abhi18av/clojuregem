s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/cert_command")),
  s(:if,
    s(:send,
      s(:const, nil, :RUBY_VERSION), :<,
      s(:str, "1.9")),
    s(:send, nil, :require,
      s(:str, "rubygems/fix_openssl_warnings")), nil),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)), nil,
    s(:send, nil, :warn,
      s(:str, "Skipping `gem cert` tests.  openssl not found."))),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)),
    s(:class,
      s(:const, nil, :TestGemCommandsCertCommand),
      s(:const,
        s(:const, nil, :Gem), :TestCase),
      s(:begin,
        s(:casgn, nil, :ALTERNATE_CERT,
          s(:send, nil, :load_cert,
            s(:str, "alternate"))),
        s(:casgn, nil, :ALTERNATE_KEY_FILE,
          s(:send, nil, :key_path,
            s(:str, "alternate"))),
        s(:casgn, nil, :PRIVATE_KEY_FILE,
          s(:send, nil, :key_path,
            s(:str, "private"))),
        s(:casgn, nil, :PUBLIC_KEY_FILE,
          s(:send, nil, :key_path,
            s(:str, "public"))),
        s(:casgn, nil, :ALTERNATE_CERT_FILE,
          s(:send, nil, :cert_path,
            s(:str, "alternate"))),
        s(:casgn, nil, :CHILD_CERT_FILE,
          s(:send, nil, :cert_path,
            s(:str, "child"))),
        s(:casgn, nil, :PUBLIC_CERT_FILE,
          s(:send, nil, :cert_path,
            s(:str, "public"))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@cmd,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Commands), :CertCommand), :new)),
            s(:ivasgn, :@trust_dir,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir)))),
        s(:def, :test_certificates_matching,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :ALTERNATE_CERT)),
            s(:lvasgn, :matches,
              s(:send,
                s(:ivar, :@cmd), :certificates_matching,
                s(:str, ""))),
            s(:lvasgn, :match,
              s(:send,
                s(:lvar, :matches), :next)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :ALTERNATE_CERT), :to_pem),
              s(:send,
                s(:send,
                  s(:lvar, :match), :first), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :ALTERNATE_CERT)),
              s(:send,
                s(:lvar, :match), :last)),
            s(:lvasgn, :match,
              s(:send,
                s(:lvar, :matches), :next)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem),
              s(:send,
                s(:send,
                  s(:lvar, :match), :first), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :PUBLIC_CERT)),
              s(:send,
                s(:lvar, :match), :last)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :StopIteration)),
              s(:args),
              s(:send,
                s(:lvar, :matches), :next)))),
        s(:def, :test_certificates_matching_filter,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :ALTERNATE_CERT)),
            s(:lvasgn, :matches,
              s(:send,
                s(:ivar, :@cmd), :certificates_matching,
                s(:str, "alternate"))),
            s(:lvasgn, :match,
              s(:send,
                s(:lvar, :matches), :next)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :ALTERNATE_CERT), :to_pem),
              s(:send,
                s(:send,
                  s(:lvar, :match), :first), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :ALTERNATE_CERT)),
              s(:send,
                s(:lvar, :match), :last)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :StopIteration)),
              s(:args),
              s(:send,
                s(:lvar, :matches), :next)))),
        s(:def, :test_execute_add,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--add"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PUBLIC_CERT_FILE))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:lvasgn, :cert_path,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :PUBLIC_CERT))),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :cert_path)),
            s(:send, nil, :assert_equal,
              s(:str, "Added '/CN=nobody/DC=example'\n"),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error)))),
        s(:def, :test_execute_add_twice,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:self), :class), :cert_path,
              s(:str, "alternate")),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--add"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PUBLIC_CERT_FILE))),
                s(:str, "--add"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_CERT_FILE))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:lvasgn, :expected,
              s(:dstr,
                s(:str, "Added '/CN=nobody/DC=example'\n"),
                s(:str, "Added '/CN=alternate/DC=example'\n"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error)))),
        s(:def, :test_execute_build,
          s(:args),
          s(:begin,
            s(:lvasgn, :passphrase,
              s(:str, "Foo bar")),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--build"),
                s(:str, "nobody@example.com"))),
            s(:ivasgn, :@build_ui,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :new,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :passphrase)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:lvar, :passphrase))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@build_ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:lvasgn, :output,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@build_ui), :output), :squeeze,
                  s(:str, "\n")), :split,
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:str, "Passphrase for your Private Key:  "),
              s(:send,
                s(:lvar, :output), :shift)),
            s(:send, nil, :assert_equal,
              s(:str, "Please repeat the passphrase for your Private Key:  "),
              s(:send,
                s(:lvar, :output), :shift)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "Certificate: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:str, "gem-public_cert.pem")))),
              s(:send,
                s(:lvar, :output), :shift)),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "Private Key: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:str, "gem-private_key.pem")))),
              s(:send,
                s(:lvar, :output), :shift)),
            s(:send, nil, :assert_equal,
              s(:str, "Don't forget to move the key file to somewhere private!"),
              s(:send,
                s(:lvar, :output), :shift)),
            s(:send, nil, :assert_empty,
              s(:lvar, :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@build_ui), :error)),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "gem-private_key.pem"))),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "gem-public_cert.pem"))))),
        s(:def, :test_execute_build_bad_passphrase_confirmation,
          s(:args),
          s(:begin,
            s(:lvasgn, :passphrase,
              s(:str, "Foo bar")),
            s(:lvasgn, :passphrase_confirmation,
              s(:str, "Fu bar")),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--build"),
                s(:str, "nobody@example.com"))),
            s(:ivasgn, :@build_ui,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :new,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :passphrase)),
                  s(:str, "\n"),
                  s(:begin,
                    s(:lvar, :passphrase_confirmation))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@build_ui)),
              s(:args),
              s(:begin,
                s(:lvasgn, :e,
                  s(:block,
                    s(:send, nil, :assert_raises,
                      s(:const,
                        s(:const, nil, :Gem), :CommandLineError)),
                    s(:args),
                    s(:send,
                      s(:ivar, :@cmd), :execute))),
                s(:lvasgn, :output,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@build_ui), :output), :squeeze,
                      s(:str, "\n")), :split,
                    s(:str, "\n"))),
                s(:send, nil, :assert_equal,
                  s(:str, "Passphrase for your Private Key:  "),
                  s(:send,
                    s(:lvar, :output), :shift)),
                s(:send, nil, :assert_equal,
                  s(:str, "Please repeat the passphrase for your Private Key:  "),
                  s(:send,
                    s(:lvar, :output), :shift)),
                s(:send, nil, :assert_empty,
                  s(:lvar, :output)),
                s(:send, nil, :assert_equal,
                  s(:str, "Passphrase and passphrase confirmation don't match"),
                  s(:send,
                    s(:lvar, :e), :message)))),
            s(:send, nil, :refute_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "gem-private_key.pem"))),
            s(:send, nil, :refute_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "gem-public_cert.pem"))))),
        s(:def, :test_execute_build_key,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--build"),
                s(:str, "nobody@example.com"),
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PRIVATE_KEY_FILE))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:lvasgn, :output,
              s(:send,
                s(:send,
                  s(:ivar, :@ui), :output), :split,
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "Certificate: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:str, "gem-public_cert.pem")))),
              s(:send,
                s(:lvar, :output), :shift)),
            s(:send, nil, :assert_empty,
              s(:lvar, :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "gem-public_cert.pem"))),
            s(:send, nil, :refute_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "gem-private_key.pem"))))),
        s(:def, :test_execute_build_encrypted_key,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--build"),
                s(:str, "nobody@example.com"),
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ENCRYPTED_PRIVATE_KEY_PATH))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:lvasgn, :output,
              s(:send,
                s(:send,
                  s(:ivar, :@ui), :output), :split,
                s(:str, "\n"))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "Certificate: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:str, "gem-public_cert.pem")))),
              s(:send,
                s(:lvar, :output), :shift)),
            s(:send, nil, :assert_empty,
              s(:lvar, :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "gem-public_cert.pem"))))),
        s(:def, :test_execute_certificate,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :handle_options,
                s(:array,
                  s(:str, "--certificate"),
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :PUBLIC_CERT_FILE)))))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@cmd), :options), :[],
                  s(:sym, :issuer_cert)), :to_pem)))),
        s(:def, :test_execute_list,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :ALTERNATE_CERT)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--list"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=alternate/DC=example\n/CN=nobody/DC=example\n"),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error)))),
        s(:def, :test_execute_list_filter,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :ALTERNATE_CERT)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--list"),
                s(:str, "nobody"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example\n"),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error)))),
        s(:def, :test_execute_private_key,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :send,
                s(:sym, :handle_options),
                s(:array,
                  s(:str, "--private-key"),
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :PRIVATE_KEY_FILE)))))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :PRIVATE_KEY), :to_pem),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@cmd), :options), :[],
                  s(:sym, :key)), :to_pem)))),
        s(:def, :test_execute_encrypted_private_key,
          s(:args),
          s(:begin,
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :send,
                s(:sym, :handle_options),
                s(:array,
                  s(:str, "--private-key"),
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :ENCRYPTED_PRIVATE_KEY_PATH)))))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :ENCRYPTED_PRIVATE_KEY), :to_pem),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@cmd), :options), :[],
                  s(:sym, :key)), :to_pem)))),
        s(:def, :test_execute_remove,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:lvasgn, :cert_path,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :PUBLIC_CERT))),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :cert_path)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--remove"),
                s(:str, "nobody"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, "Removed '/CN=nobody/DC=example'\n"),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :refute_path_exists,
              s(:lvar, :cert_path)))),
        s(:def, :test_execute_remove_multiple,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :ALTERNATE_CERT)),
            s(:lvasgn, :public_path,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :PUBLIC_CERT))),
            s(:lvasgn, :alternate_path,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :ALTERNATE_CERT))),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :public_path)),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :alternate_path)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--remove"),
                s(:str, "example"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:lvasgn, :expected,
              s(:dstr,
                s(:str, "Removed '/CN=alternate/DC=example'\n"),
                s(:str, "Removed '/CN=nobody/DC=example'\n"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :refute_path_exists,
              s(:lvar, :public_path)),
            s(:send, nil, :refute_path_exists,
              s(:lvar, :alternate_path)))),
        s(:def, :test_execute_remove_twice,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@trust_dir), :trust_cert,
              s(:const, nil, :ALTERNATE_CERT)),
            s(:lvasgn, :public_path,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :PUBLIC_CERT))),
            s(:lvasgn, :alternate_path,
              s(:send,
                s(:ivar, :@trust_dir), :cert_path,
                s(:const, nil, :ALTERNATE_CERT))),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :public_path)),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :alternate_path)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--remove"),
                s(:str, "nobody"),
                s(:str, "--remove"),
                s(:str, "alternate"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:lvasgn, :expected,
              s(:dstr,
                s(:str, "Removed '/CN=nobody/DC=example'\n"),
                s(:str, "Removed '/CN=alternate/DC=example'\n"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :refute_path_exists,
              s(:lvar, :public_path)),
            s(:send, nil, :refute_path_exists,
              s(:lvar, :alternate_path)))),
        s(:def, :test_execute_sign,
          s(:args),
          s(:begin,
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :ALTERNATE_CERT),
              s(:lvar, :path),
              s(:int, 384)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=alternate/DC=example"),
              s(:send,
                s(:send,
                  s(:const, nil, :ALTERNATE_CERT), :issuer), :to_s)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PRIVATE_KEY_FILE))),
                s(:str, "--certificate"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PUBLIC_CERT_FILE))),
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :path))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :path)))),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example"),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_s)),
            s(:lvasgn, :mask,
              s(:send,
                s(:int, 33152), :&,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :umask), :~)))),
            s(:if,
              s(:send, nil, :win_platform?), nil,
              s(:send, nil, :assert_equal,
                s(:lvar, :mask),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :path)), :mode))))),
        s(:def, :test_execute_sign_encrypted_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :ALTERNATE_CERT),
              s(:lvar, :path),
              s(:int, 384)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=alternate/DC=example"),
              s(:send,
                s(:send,
                  s(:const, nil, :ALTERNATE_CERT), :issuer), :to_s)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ENCRYPTED_PRIVATE_KEY_PATH))),
                s(:str, "--certificate"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PUBLIC_CERT_FILE))),
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :path))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :path)))),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example"),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_s)),
            s(:lvasgn, :mask,
              s(:send,
                s(:int, 33152), :&,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :umask), :~)))),
            s(:if,
              s(:send, nil, :win_platform?), nil,
              s(:send, nil, :assert_equal,
                s(:lvar, :mask),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :path)), :mode))))),
        s(:def, :test_execute_sign_default,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"))),
            s(:lvasgn, :private_key_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"),
                s(:str, "gem-private_key.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :PRIVATE_KEY),
              s(:lvar, :private_key_path)),
            s(:lvasgn, :public_cert_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"),
                s(:str, "gem-public_cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :PUBLIC_CERT),
              s(:lvar, :public_cert_path)),
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :ALTERNATE_CERT),
              s(:lvar, :path),
              s(:int, 384)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=alternate/DC=example"),
              s(:send,
                s(:send,
                  s(:const, nil, :ALTERNATE_CERT), :issuer), :to_s)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :path))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :path)))),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example"),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_s)),
            s(:lvasgn, :mask,
              s(:send,
                s(:int, 33152), :&,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :umask), :~)))),
            s(:if,
              s(:send, nil, :win_platform?), nil,
              s(:send, nil, :assert_equal,
                s(:lvar, :mask),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :path)), :mode))))),
        s(:def, :test_execute_sign_default_encrypted_key,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"))),
            s(:lvasgn, :private_key_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"),
                s(:str, "gem-private_key.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :ENCRYPTED_PRIVATE_KEY),
              s(:lvar, :private_key_path),
              s(:int, 384),
              s(:const, nil, :PRIVATE_KEY_PASSPHRASE)),
            s(:lvasgn, :public_cert_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"),
                s(:str, "gem-public_cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :PUBLIC_CERT),
              s(:lvar, :public_cert_path)),
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :ALTERNATE_CERT),
              s(:lvar, :path),
              s(:int, 384)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=alternate/DC=example"),
              s(:send,
                s(:send,
                  s(:const, nil, :ALTERNATE_CERT), :issuer), :to_s)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :path))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :path)))),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example"),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_s)),
            s(:lvasgn, :mask,
              s(:send,
                s(:int, 33152), :&,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :umask), :~)))),
            s(:if,
              s(:send, nil, :win_platform?), nil,
              s(:send, nil, :assert_equal,
                s(:lvar, :mask),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :path)), :mode))))),
        s(:def, :test_execute_sign_no_cert,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"))),
            s(:lvasgn, :private_key_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"),
                s(:str, "gem-private_key.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :PRIVATE_KEY),
              s(:lvar, :private_key_path)),
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :ALTERNATE_CERT),
              s(:lvar, :path),
              s(:int, 384)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=alternate/DC=example"),
              s(:send,
                s(:send,
                  s(:const, nil, :ALTERNATE_CERT), :issuer), :to_s)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :path))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :MockGemUi), :TermError)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:lvasgn, :expected,
              s(:str, "ERROR:  --certificate not specified and ~/.gem/gem-public_cert.pem does not exist\n")),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:ivar, :@ui), :error)))),
        s(:def, :test_execute_sign_no_key,
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"))),
            s(:lvasgn, :public_cert_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem"),
                s(:str, "gem-public_cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :PUBLIC_CERT),
              s(:lvar, :public_cert_path)),
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "cert.pem"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:const, nil, :ALTERNATE_CERT),
              s(:lvar, :path),
              s(:int, 384)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=alternate/DC=example"),
              s(:send,
                s(:send,
                  s(:const, nil, :ALTERNATE_CERT), :issuer), :to_s)),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :path))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :MockGemUi), :TermError)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute))),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:lvasgn, :expected,
              s(:str, "ERROR:  --private-key not specified and ~/.gem/gem-private_key.pem does not exist\n")),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:ivar, :@ui), :error)))),
        s(:def, :test_handle_options,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--add"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PUBLIC_CERT_FILE))),
                s(:str, "--add"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_CERT_FILE))),
                s(:str, "--remove"),
                s(:str, "nobody"),
                s(:str, "--remove"),
                s(:str, "example"),
                s(:str, "--list"),
                s(:str, "--list"),
                s(:str, "example"),
                s(:str, "--build"),
                s(:str, "nobody@example"),
                s(:str, "--build"),
                s(:str, "other@example"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:send,
                  s(:const, nil, :PUBLIC_CERT), :to_pem),
                s(:send,
                  s(:const, nil, :ALTERNATE_CERT), :to_pem)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@cmd), :options), :[],
                    s(:sym, :add)), :map),
                s(:args,
                  s(:arg, :cert)),
                s(:send,
                  s(:lvar, :cert), :to_pem))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "nobody"),
                s(:str, "example")),
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :options), :[],
                s(:sym, :remove))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "nobody@example"),
                s(:str, "other@example")),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@cmd), :options), :[],
                    s(:sym, :build)), :map),
                s(:args,
                  s(:arg, :name)),
                s(:send,
                  s(:lvar, :name), :to_s))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, ""),
                s(:str, "example")),
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :options), :[],
                s(:sym, :list))))),
        s(:def, :test_handle_options_add_bad,
          s(:args),
          s(:begin,
            s(:lvasgn, :nonexistent,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "nonexistent"))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--add"),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :nonexistent))))))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "invalid argument: --add "),
                s(:begin,
                  s(:lvar, :nonexistent)),
                s(:str, ": does not exist")),
              s(:send,
                s(:lvar, :e), :message)),
            s(:lvasgn, :bad,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bad"))),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:lvar, :bad)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--add"),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :bad))))))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "invalid argument: --add "),
                s(:begin,
                  s(:lvar, :bad)),
                s(:str, ": invalid X509 certificate")),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_handle_options_certificate,
          s(:args),
          s(:begin,
            s(:lvasgn, :nonexistent,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "nonexistent"))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--certificate"),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :nonexistent))))))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "invalid argument: --certificate "),
                s(:begin,
                  s(:lvar, :nonexistent)),
                s(:str, ": does not exist")),
              s(:send,
                s(:lvar, :e), :message)),
            s(:lvasgn, :bad,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bad"))),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:lvar, :bad)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--certificate"),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :bad))))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:str, "invalid argument: "), :+,
                s(:dstr,
                  s(:str, "--certificate "),
                  s(:begin,
                    s(:lvar, :bad)),
                  s(:str, ": invalid X509 certificate"))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_handle_options_key_bad,
          s(:args),
          s(:begin,
            s(:lvasgn, :nonexistent,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "nonexistent"))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--private-key"),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :nonexistent))))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:str, "invalid argument: "), :+,
                s(:dstr,
                  s(:str, "--private-key "),
                  s(:begin,
                    s(:lvar, :nonexistent)),
                  s(:str, ": does not exist"))),
              s(:send,
                s(:lvar, :e), :message)),
            s(:lvasgn, :bad,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bad"))),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:lvar, :bad)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--private-key"),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :bad))))))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "invalid argument: --private-key "),
                s(:begin,
                  s(:lvar, :bad)),
                s(:str, ": invalid RSA key")),
              s(:send,
                s(:lvar, :e), :message)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--private-key"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :PUBLIC_KEY_FILE))))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:str, "invalid argument: "), :+,
                s(:dstr,
                  s(:str, "--private-key "),
                  s(:begin,
                    s(:const, nil, :PUBLIC_KEY_FILE)),
                  s(:str, ": private key not found"))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_handle_options_sign,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_KEY_FILE))),
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PRIVATE_KEY_FILE))),
                s(:str, "--certificate"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_CERT_FILE))),
                s(:str, "--certificate"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PUBLIC_CERT_FILE))),
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_CERT_FILE))),
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :CHILD_CERT_FILE))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :PRIVATE_KEY), :to_pem),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@cmd), :options), :[],
                  s(:sym, :key)), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@cmd), :options), :[],
                  s(:sym, :issuer_cert)), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:const, nil, :ALTERNATE_CERT_FILE),
                s(:const, nil, :CHILD_CERT_FILE)),
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :options), :[],
                s(:sym, :sign))))),
        s(:def, :test_handle_options_sign_encrypted_key,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_KEY_FILE))),
                s(:str, "--private-key"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ENCRYPTED_PRIVATE_KEY_PATH))),
                s(:str, "--certificate"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_CERT_FILE))),
                s(:str, "--certificate"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :PUBLIC_CERT_FILE))),
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :ALTERNATE_CERT_FILE))),
                s(:str, "--sign"),
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :CHILD_CERT_FILE))))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :ENCRYPTED_PRIVATE_KEY), :to_pem),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@cmd), :options), :[],
                  s(:sym, :key)), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :to_pem),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@cmd), :options), :[],
                  s(:sym, :issuer_cert)), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:const, nil, :ALTERNATE_CERT_FILE),
                s(:const, nil, :CHILD_CERT_FILE)),
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :options), :[],
                s(:sym, :sign))))),
        s(:def, :test_handle_options_sign_nonexistent,
          s(:args),
          s(:begin,
            s(:lvasgn, :nonexistent,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "nonexistent"))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--private-key"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :ALTERNATE_KEY_FILE))),
                    s(:str, "--certificate"),
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :ALTERNATE_CERT_FILE))),
                    s(:str, "--sign"),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :nonexistent))))))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "invalid argument: --sign "),
                s(:begin,
                  s(:lvar, :nonexistent)),
                s(:str, ": does not exist")),
              s(:send,
                s(:lvar, :e), :message)))))), nil))
