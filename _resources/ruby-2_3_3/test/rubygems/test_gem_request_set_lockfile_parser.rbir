s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set/lockfile")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set/lockfile/tokenizer")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set/lockfile/parser")),
  s(:class,
    s(:const, nil, :TestGemRequestSetLockfileParser),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@gem_deps_file,
            s(:str, "gem.deps.rb")),
          s(:ivasgn, :@lock_file,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_deps_file)),
                s(:str, ".lock")))),
          s(:ivasgn, :@set,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)))),
      s(:def, :test_get,
        s(:args),
        s(:begin,
          s(:lvasgn, :tokenizer,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), :new,
              s(:str, "\n"))),
          s(:lvasgn, :parser,
            s(:send,
              s(:lvar, :tokenizer), :make_parser,
              s(:nil),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:sym, :newline),
            s(:send,
              s(:send,
                s(:lvar, :parser), :get), :first)))),
      s(:def, :test_get_type_mismatch,
        s(:args),
        s(:begin,
          s(:lvasgn, :filename,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_deps_file)),
                s(:str, ".lock")))),
          s(:lvasgn, :tokenizer,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), :new,
              s(:str, "foo"),
              s(:lvar, :filename),
              s(:int, 1),
              s(:int, 0))),
          s(:lvasgn, :parser,
            s(:send,
              s(:lvar, :tokenizer), :make_parser,
              s(:nil),
              s(:nil))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :RequestSet), :Lockfile), :ParseError)),
              s(:args),
              s(:send,
                s(:lvar, :parser), :get,
                s(:sym, :section)))),
          s(:lvasgn, :expected,
            s(:str, "unexpected token [:text, \"foo\"], expected :section (at line 1 column 0)")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :line)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :e), :column)),
          s(:send, nil, :assert_equal,
            s(:lvar, :filename),
            s(:send,
              s(:lvar, :e), :path)))),
      s(:def, :test_get_type_multiple,
        s(:args),
        s(:begin,
          s(:lvasgn, :filename,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_deps_file)),
                s(:str, ".lock")))),
          s(:lvasgn, :tokenizer,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), :new,
              s(:str, "x"),
              s(:lvar, :filename),
              s(:int, 1))),
          s(:lvasgn, :parser,
            s(:send,
              s(:lvar, :tokenizer), :make_parser,
              s(:nil),
              s(:nil))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :parser), :get,
              s(:array,
                s(:sym, :text),
                s(:sym, :section)))))),
      s(:def, :test_get_type_value_mismatch,
        s(:args),
        s(:begin,
          s(:lvasgn, :filename,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_deps_file)),
                s(:str, ".lock")))),
          s(:lvasgn, :tokenizer,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), :new,
              s(:str, "x"),
              s(:lvar, :filename),
              s(:int, 1))),
          s(:lvasgn, :parser,
            s(:send,
              s(:lvar, :tokenizer), :make_parser,
              s(:nil),
              s(:nil))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :RequestSet), :Lockfile), :ParseError)),
              s(:args),
              s(:send,
                s(:lvar, :parser), :get,
                s(:sym, :text),
                s(:str, "y")))),
          s(:lvasgn, :expected,
            s(:str, "unexpected token [:text, \"x\"], expected [:text, \"y\"] (at line 1 column 0)")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :line)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :e), :column)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_deps_file)),
                s(:str, ".lock"))),
            s(:send,
              s(:lvar, :e), :path)))),
      s(:def, :test_parse,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:send,
              s(:dstr,
                s(:str, "GEM\n"),
                s(:str, "  remote: "),
                s(:begin,
                  s(:ivar, :@gem_repo)),
                s(:str, "\n"),
                s(:str, "  specs:\n"),
                s(:str, "    a (2)\n"),
                s(:str, "\n"),
                s(:str, "PLATFORMS\n"),
                s(:str, "  "),
                s(:begin,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "DEPENDENCIES\n"),
                s(:str, "  a\n")), :strip)),
          s(:lvasgn, :platforms,
            s(:array)),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:lvar, :platforms)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY)),
            s(:lvar, :platforms)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :lockfile_set),
            s(:str, "could not find a LockSet")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :lockfile_set), :specs), :map),
              s(:args,
                s(:arg, :tuple)),
              s(:send,
                s(:lvar, :tuple), :full_name))))),
      s(:def, :test_parse_dependencies,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a (>= 1, <= 2)\n"))),
          s(:lvasgn, :platforms,
            s(:array)),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:lvar, :platforms)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, ">= 1"),
                s(:str, "<= 2"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY)),
            s(:lvar, :platforms)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :lockfile_set),
            s(:str, "could not find a LockSet")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :lockfile_set), :specs), :map),
              s(:args,
                s(:arg, :tuple)),
              s(:send,
                s(:lvar, :tuple), :full_name))))),
      s(:def, :test_parse_DEPENDENCIES_git,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GIT\n"),
              s(:str, "  remote: git://git.example/josevalim/rails-footnotes.git\n"),
              s(:str, "  revision: 3a6ac1971e91d822f057650cc5916ebfcbd6ee37\n"),
              s(:str, "  specs:\n"),
              s(:str, "    rails-footnotes (3.7.9)\n"),
              s(:str, "      rails (>= 3.0.0)\n"),
              s(:str, "\n"),
              s(:str, "GIT\n"),
              s(:str, "  remote: git://git.example/svenfuchs/i18n-active_record.git\n"),
              s(:str, "  revision: 55507cf59f8f2173d38e07e18df0e90d25b1f0f6\n"),
              s(:str, "  specs:\n"),
              s(:str, "    i18n-active_record (0.0.2)\n"),
              s(:str, "      i18n (>= 0.5.0)\n"),
              s(:str, "\n"),
              s(:str, "GEM\n"),
              s(:str, "  remote: http://gems.example/\n"),
              s(:str, "  specs:\n"),
              s(:str, "    i18n (0.6.9)\n"),
              s(:str, "    rails (4.0.0)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  ruby\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  i18n-active_record!\n"),
              s(:str, "  rails-footnotes!\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "i18n-active_record"),
                s(:str, "= 0.0.2")),
              s(:send, nil, :dep,
                s(:str, "rails-footnotes"),
                s(:str, "= 3.7.9")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@set), :dependencies)))),
      s(:def, :test_parse_DEPENDENCIES_git_version,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GIT\n"),
              s(:str, "  remote: git://github.com/progrium/ruby-jwt.git\n"),
              s(:str, "  revision: 8d74770c6cd92ea234b428b5d0c1f18306a4f41c\n"),
              s(:str, "  specs:\n"),
              s(:str, "    jwt (1.1)\n"),
              s(:str, "\n"),
              s(:str, "GEM\n"),
              s(:str, "  remote: http://gems.example/\n"),
              s(:str, "  specs:\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  ruby\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  jwt (= 1.1)!\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "jwt"),
                s(:str, "= 1.1")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@set), :dependencies)))),
      s(:def, :test_parse_GEM,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  ruby\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, ">= 0"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :lockfile_set),
            s(:str, "found a LockSet")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :lockfile_set), :specs), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))))),
      s(:def, :test_parse_GEM_remote_multiple,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: https://gems.example/\n"),
              s(:str, "  remote: https://other.example/\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  ruby\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, ">= 0"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :lockfile_set),
            s(:str, "found a LockSet")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :lockfile_set), :specs), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))),
          s(:if,
            s(:send,
              s(:array), :respond_to?,
              s(:sym, :flat_map)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "https://gems.example/"),
                s(:str, "https://other.example/")),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :lockfile_set), :specs), :flat_map),
                s(:args,
                  s(:arg, :s)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :sources), :map),
                  s(:args,
                    s(:arg, :src)),
                  s(:send,
                    s(:send,
                      s(:lvar, :src), :uri), :to_s)))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "https://gems.example/"),
                s(:str, "https://other.example/")),
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :lockfile_set), :specs), :map),
                  s(:args,
                    s(:arg, :s)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :sources), :map),
                    s(:args,
                      s(:arg, :src)),
                    s(:send,
                      s(:send,
                        s(:lvar, :src), :uri), :to_s))), :flatten,
                s(:int, 1)))))),
      s(:def, :test_parse_GIT,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@set), :instance_variable_set,
            s(:sym, :@install_dir),
            s(:str, "install_dir")),
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GIT\n"),
              s(:str, "  remote: git://example/a.git\n"),
              s(:str, "  revision: master\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b (>= 3)\n"),
              s(:str, "      c\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 2"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :refute,
            s(:lvar, :lockfile_set),
            s(:str, "fount a LockSet")),
          s(:lvasgn, :git_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :GitSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :git_set),
            s(:str, "could not find a GitSet")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :git_set), :specs), :values), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, ">= 3")),
              s(:send, nil, :dep,
                s(:str, "c"))),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :git_set), :specs), :values), :first), :dependencies)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:array,
                  s(:str, "git://example/a.git"),
                  s(:str, "master"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :git_set), :repositories)),
          s(:send, nil, :assert_equal,
            s(:str, "install_dir"),
            s(:send,
              s(:lvar, :git_set), :root_dir)))),
      s(:def, :test_parse_GIT_branch,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GIT\n"),
              s(:str, "  remote: git://example/a.git\n"),
              s(:str, "  revision: 1234abc\n"),
              s(:str, "  branch: 0-9-12-stable\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b (>= 3)\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 2"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :refute,
            s(:lvar, :lockfile_set),
            s(:str, "fount a LockSet")),
          s(:lvasgn, :git_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :GitSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :git_set),
            s(:str, "could not find a GitSet")),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:array,
                  s(:str, "git://example/a.git"),
                  s(:str, "1234abc"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :git_set), :repositories)))),
      s(:def, :test_parse_GIT_ref,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GIT\n"),
              s(:str, "  remote: git://example/a.git\n"),
              s(:str, "  revision: 1234abc\n"),
              s(:str, "  ref: 1234abc\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b (>= 3)\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 2"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :refute,
            s(:lvar, :lockfile_set),
            s(:str, "fount a LockSet")),
          s(:lvasgn, :git_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :GitSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :git_set),
            s(:str, "could not find a GitSet")),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:array,
                  s(:str, "git://example/a.git"),
                  s(:str, "1234abc"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :git_set), :repositories)))),
      s(:def, :test_parse_GIT_tag,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GIT\n"),
              s(:str, "  remote: git://example/a.git\n"),
              s(:str, "  revision: 1234abc\n"),
              s(:str, "  tag: v0.9.12\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b (>= 3)\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 2"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :refute,
            s(:lvar, :lockfile_set),
            s(:str, "fount a LockSet")),
          s(:lvasgn, :git_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :GitSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :git_set),
            s(:str, "could not find a GitSet")),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:array,
                  s(:str, "git://example/a.git"),
                  s(:str, "1234abc"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :git_set), :repositories)))),
      s(:def, :test_parse_PATH,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :_),
              s(:lvasgn, :directory)),
            s(:send, nil, :vendor_gem)),
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "PATH\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:lvar, :directory)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (1)\n"),
              s(:str, "      b (2)\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"))),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 1"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :refute,
            s(:lvar, :lockfile_set),
            s(:str, "found a LockSet")),
          s(:lvasgn, :vendor_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :VendorSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :vendor_set),
            s(:str, "could not find a VendorSet")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :vendor_set), :specs), :values), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))),
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :vendor_set), :load_spec,
              s(:str, "a"),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, "= 2"))),
            s(:send,
              s(:lvar, :spec), :dependencies)))),
      s(:def, :test_parse_dependency,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:str, " 1)")),
          s(:lvasgn, :tokenizer,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), :from_file,
              s(:ivar, :@lock_file))),
          s(:lvasgn, :parser,
            s(:send,
              s(:lvar, :tokenizer), :make_parser,
              s(:nil),
              s(:nil))),
          s(:lvasgn, :parsed,
            s(:send,
              s(:lvar, :parser), :parse_dependency,
              s(:str, "a"),
              s(:str, "="))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "= 1")),
            s(:lvar, :parsed)),
          s(:send, nil, :write_lockfile,
            s(:str, ")")),
          s(:lvasgn, :tokenizer,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), :from_file,
              s(:ivar, :@lock_file))),
          s(:lvasgn, :parser,
            s(:send,
              s(:lvar, :tokenizer), :make_parser,
              s(:nil),
              s(:nil))),
          s(:lvasgn, :parsed,
            s(:send,
              s(:lvar, :parser), :parse_dependency,
              s(:str, "a"),
              s(:str, "2"))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "= 2")),
            s(:lvar, :parsed)))),
      s(:def, :test_parse_gem_specs_dependency,
        s(:args),
        s(:begin,
          s(:send, nil, :write_lockfile,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b (= 3)\n"),
              s(:str, "      c (~> 4)\n"),
              s(:str, "      d\n"),
              s(:str, "      e (~> 5.0, >= 5.0.1)\n"),
              s(:str, "    b (3-x86_64-linux)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"))),
          s(:lvasgn, :platforms,
            s(:array)),
          s(:send, nil, :parse_lockfile,
            s(:ivar, :@set),
            s(:lvar, :platforms)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"))),
            s(:send,
              s(:ivar, :@set), :dependencies)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY)),
            s(:lvar, :platforms)),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :assert,
            s(:lvar, :lockfile_set),
            s(:str, "could not find a LockSet")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2"),
              s(:str, "b-3")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :lockfile_set), :specs), :map),
              s(:args,
                s(:arg, :tuple)),
              s(:send,
                s(:lvar, :tuple), :full_name))),
          s(:lvasgn, :expected,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :new,
                s(:str, "x86_64-linux")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :lockfile_set), :specs), :map),
              s(:args,
                s(:arg, :tuple)),
              s(:send,
                s(:lvar, :tuple), :platform))),
          s(:lvasgn, :spec,
            s(:send,
              s(:send,
                s(:lvar, :lockfile_set), :specs), :first)),
          s(:lvasgn, :expected,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "b"),
                s(:str, "= 3")),
              s(:send, nil, :dep,
                s(:str, "c"),
                s(:str, "~> 4")),
              s(:send, nil, :dep,
                s(:str, "d")),
              s(:send, nil, :dep,
                s(:str, "e"),
                s(:str, "~> 5.0"),
                s(:str, ">= 5.0.1")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :spec), :dependencies)))),
      s(:def, :test_parse_missing,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Errno), :ENOENT)),
            s(:args),
            s(:send, nil, :parse_lockfile,
              s(:ivar, :@set),
              s(:array))),
          s(:lvasgn, :lockfile_set,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@set), :sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :LockSet), :===,
                s(:lvar, :set)))),
          s(:send, nil, :refute,
            s(:lvar, :lockfile_set)))),
      s(:def, :write_lockfile,
        s(:args,
          s(:arg, :lockfile)),
        s(:block,
          s(:send, nil, :open,
            s(:ivar, :@lock_file),
            s(:str, "w")),
          s(:args,
            s(:arg, :io)),
          s(:send,
            s(:lvar, :io), :write,
            s(:lvar, :lockfile)))),
      s(:def, :parse_lockfile,
        s(:args,
          s(:arg, :set),
          s(:arg, :platforms)),
        s(:begin,
          s(:lvasgn, :tokenizer,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), :from_file,
              s(:ivar, :@lock_file))),
          s(:lvasgn, :parser,
            s(:send,
              s(:lvar, :tokenizer), :make_parser,
              s(:lvar, :set),
              s(:lvar, :platforms))),
          s(:send,
            s(:lvar, :parser), :parse))))))
