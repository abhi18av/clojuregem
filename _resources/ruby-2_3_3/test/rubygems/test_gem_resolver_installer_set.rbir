s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:class,
    s(:const, nil, :TestGemResolverInstallerSet),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :test_add_always_install,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 2)))),
          s(:send, nil, :util_gem,
            s(:str, "a"),
            s(:int, 1)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:lvar, :set), :add_always_install,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :set), :always_install), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
              s(:args),
              s(:send,
                s(:lvar, :set), :add_always_install,
                s(:send, nil, :dep,
                  s(:str, "b"))))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :dep,
              s(:str, "b")),
            s(:send,
              s(:send,
                s(:lvar, :e), :dependency), :dependency)))),
      s(:def, :test_add_always_install_errors,
        s(:args),
        s(:begin,
          s(:ivasgn, :@fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :FakeFetcher), :new)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:ivar, :@fetcher)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
              s(:args),
              s(:send,
                s(:lvar, :set), :add_always_install,
                s(:send, nil, :dep,
                  s(:str, "a"))))),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:lvar, :e), :errors)))),
      s(:def, :test_add_always_install_platform,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :download,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :new,
                    s(:str, "x86-freebsd-9")))))),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:lvar, :set), :add_always_install,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :set), :always_install), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))))),
      s(:def, :test_add_always_install_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:str, "3.a")))),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:lvar, :set), :add_always_install,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :set), :always_install), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))))),
      s(:def, :test_add_always_install_prerelease_only,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:str, "3.a"))),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :add_always_install,
              s(:send, nil, :dep,
                s(:str, "a")))))),
      s(:def, :test_add_local,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a_1),
              s(:lvasgn, :a_1_gem)),
            s(:send, nil, :util_gem,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a_1_source,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :SpecificFile), :new,
              s(:lvar, :a_1_gem))),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:lvar, :set), :add_local,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :a_1_gem)),
            s(:lvar, :a_1),
            s(:lvar, :a_1_source)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :local?,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :a_1_gem)))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:lvar, :a_1_gem)),
          s(:send, nil, :util_clear_gems),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a")),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :set), :find_all,
                  s(:lvar, :req)), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_consider_local_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :remote))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :local))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_local?)))),
      s(:def, :test_consider_remote_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :remote))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_remote?)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_remote?)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :local))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :consider_remote?)))),
      s(:def, :test_errors,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:send,
              s(:lvar, :set), :instance_variable_get,
              s(:sym, :@errors)), :<<,
            s(:sym, :a)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a")),
              s(:nil))),
          s(:send,
            s(:lvar, :set), :find_all,
            s(:lvar, :req)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :set), :remote_set), :errors), :first)),
            s(:send,
              s(:lvar, :set), :errors)))),
      s(:def, :test_find_all_always_install,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "a"),
              s(:int, 2))),
          s(:send, nil, :util_gem,
            s(:str, "a"),
            s(:int, 1)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:lvar, :set), :add_always_install,
            s(:send, nil, :dep,
              s(:str, "a"))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a")),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :set), :find_all,
                  s(:lvar, :req)), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_find_all_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:str, "1")),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:str, "1.a")))),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a")),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :set), :find_all,
                  s(:lvar, :req)), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, ">= 0.a")),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "a-1.a")),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :set), :find_all,
                    s(:lvar, :req)), :map),
                s(:args,
                  s(:arg, :spec)),
                s(:send,
                  s(:lvar, :spec), :full_name)), :sort)))),
      s(:def, :test_load_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:block,
                  s(:send,
                    s(:lvar, :fetcher), :spec,
                    s(:str, "a"),
                    s(:int, 2)),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :s), :platform=,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Platform), :local)))))),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :version,
            s(:send, nil, :v,
              s(:int, 2))),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :remote))),
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :set), :load_spec,
              s(:str, "a"),
              s(:lvar, :version),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :local),
              s(:lvar, :source))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:dstr,
                  s(:str, "a-2-"),
                  s(:begin,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Platform), :local)))), :full_name),
            s(:send,
              s(:lvar, :spec), :full_name)))),
      s(:def, :test_prefetch,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :remote))),
          s(:defs,
            s(:send,
              s(:lvar, :set), :remote_set), :prefetch,
            s(:args,
              s(:arg, :_)),
            s(:send, nil, :raise,
              s(:str, "called"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const, nil, :RuntimeError)),
            s(:args),
            s(:send,
              s(:lvar, :set), :prefetch,
              s(:nil))),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :local))),
          s(:defs,
            s(:send,
              s(:lvar, :set), :remote_set), :prefetch,
            s(:args,
              s(:arg, :_)),
            s(:send, nil, :raise,
              s(:str, "called"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :set), :prefetch,
              s(:nil))))),
      s(:def, :test_prerelease_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :remote))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :prerelease)),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:lvar, :set), :remote_set), :prerelease)),
          s(:send,
            s(:lvar, :set), :prerelease=,
            s(:true)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :prerelease)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :set), :remote_set), :prerelease)))),
      s(:def, :test_remote_equals_both,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:lvar, :set), :remote=,
            s(:true)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_remote?)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :both))),
          s(:send,
            s(:lvar, :set), :remote=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :consider_remote?)))),
      s(:def, :test_remote_equals_local,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :local))),
          s(:send,
            s(:lvar, :set), :remote=,
            s(:true)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_remote?)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :local))),
          s(:send,
            s(:lvar, :set), :remote=,
            s(:false)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :consider_remote?)))),
      s(:def, :test_remote_equals_remote,
        s(:args),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :remote))),
          s(:send,
            s(:lvar, :set), :remote=,
            s(:true)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :consider_remote?)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:sym, :remote))),
          s(:send,
            s(:lvar, :set), :remote=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :consider_local?)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :set), :consider_remote?)))))))
