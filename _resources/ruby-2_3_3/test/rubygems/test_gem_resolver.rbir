s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:class,
    s(:const, nil, :TestGemResolver),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@DR,
            s(:const,
              s(:const, nil, :Gem), :Resolver)))),
      s(:def, :make_dep,
        s(:args,
          s(:arg, :name),
          s(:restarg, :req)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Dependency), :new,
          s(:lvar, :name),
          s(:splat,
            s(:lvar, :req)))),
      s(:def, :set,
        s(:args,
          s(:restarg, :specs)),
        s(:begin,
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:send, nil, :URI,
                s(:ivar, :@gem_repo)))),
          s(:lvasgn, :specs,
            s(:block,
              s(:send,
                s(:lvar, :specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
                s(:nil),
                s(:lvar, :spec),
                s(:lvar, :source)))),
          s(:send,
            s(:const, nil, :StaticSet), :new,
            s(:lvar, :specs)))),
      s(:def, :assert_resolves_to,
        s(:args,
          s(:arg, :expected),
          s(:arg, :resolver)),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :actual,
              s(:send,
                s(:lvar, :resolver), :resolve)),
            s(:lvasgn, :exp,
              s(:block,
                s(:send,
                  s(:lvar, :expected), :sort_by),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name))),
            s(:lvasgn, :act,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :actual), :map),
                    s(:args,
                      s(:arg, :a)),
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :spec), :spec)), :sort_by),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name))),
            s(:lvasgn, :msg,
              s(:dstr,
                s(:str, "Set of gems was not the same: "),
                s(:begin,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :exp), :map),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:lvar, :x), :full_name)), :inspect)),
                s(:str, " != "),
                s(:begin,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :act), :map),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:lvar, :x), :full_name)), :inspect)))),
            s(:send, nil, :assert_equal,
              s(:lvar, :exp),
              s(:lvar, :act),
              s(:lvar, :msg))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Gem), :DependencyResolutionError)),
            s(:lvasgn, :e),
            s(:send, nil, :flunk,
              s(:send,
                s(:lvar, :e), :message))), nil)),
      s(:def, :test_self_compatibility,
        s(:args),
        s(:send, nil, :assert_same,
          s(:const,
            s(:const, nil, :Gem), :Resolver),
          s(:const,
            s(:const, nil, :Gem), :DependencyResolver))),
      s(:def, :test_self_compose_sets_best_set,
        s(:args),
        s(:begin,
          s(:lvasgn, :best_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :BestSet), :new)),
          s(:lvasgn, :composed,
            s(:send,
              s(:ivar, :@DR), :compose_sets,
              s(:lvar, :best_set))),
          s(:send, nil, :assert_equal,
            s(:lvar, :best_set),
            s(:lvar, :composed)))),
      s(:def, :test_self_compose_sets_multiple,
        s(:args),
        s(:begin,
          s(:lvasgn, :index_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :IndexSet), :new)),
          s(:lvasgn, :vendor_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :VendorSet), :new)),
          s(:lvasgn, :composed,
            s(:send,
              s(:ivar, :@DR), :compose_sets,
              s(:lvar, :index_set),
              s(:lvar, :vendor_set))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :ComposedSet),
            s(:lvar, :composed)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :index_set),
              s(:lvar, :vendor_set)),
            s(:send,
              s(:lvar, :composed), :sets)))),
      s(:def, :test_self_compose_sets_nest,
        s(:args),
        s(:begin,
          s(:lvasgn, :index_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :IndexSet), :new)),
          s(:lvasgn, :vendor_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :VendorSet), :new)),
          s(:lvasgn, :inner,
            s(:send,
              s(:ivar, :@DR), :compose_sets,
              s(:lvar, :index_set),
              s(:lvar, :vendor_set))),
          s(:lvasgn, :current_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :CurrentSet), :new)),
          s(:lvasgn, :composed,
            s(:send,
              s(:ivar, :@DR), :compose_sets,
              s(:lvar, :inner),
              s(:lvar, :current_set))),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :ComposedSet),
            s(:lvar, :composed)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :index_set),
              s(:lvar, :vendor_set),
              s(:lvar, :current_set)),
            s(:send,
              s(:lvar, :composed), :sets)))),
      s(:def, :test_self_compose_sets_nil,
        s(:args),
        s(:begin,
          s(:lvasgn, :index_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :IndexSet), :new)),
          s(:lvasgn, :composed,
            s(:send,
              s(:ivar, :@DR), :compose_sets,
              s(:lvar, :index_set),
              s(:nil))),
          s(:send, nil, :assert_same,
            s(:lvar, :index_set),
            s(:lvar, :composed)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const, nil, :ArgumentError)),
              s(:args),
              s(:send,
                s(:ivar, :@DR), :compose_sets,
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:str, "one set in the composition must be non-nil"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_self_compose_sets_single,
        s(:args),
        s(:begin,
          s(:lvasgn, :index_set,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :IndexSet), :new)),
          s(:lvasgn, :composed,
            s(:send,
              s(:ivar, :@DR), :compose_sets,
              s(:lvar, :index_set))),
          s(:send, nil, :assert_same,
            s(:lvar, :index_set),
            s(:lvar, :composed)))),
      s(:def, :test_requests,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:int, 2))))),
          s(:lvasgn, :r1,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 1")),
              s(:nil))),
          s(:lvasgn, :act,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ActivationRequest), :new,
              s(:lvar, :a1),
              s(:lvar, :r1),
              s(:false))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :a1)))),
          s(:lvasgn, :reqs,
            s(:array)),
          s(:send,
            s(:lvar, :res), :requests,
            s(:lvar, :a1),
            s(:lvar, :act),
            s(:lvar, :reqs)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b (= 2)")),
            s(:block,
              s(:send,
                s(:lvar, :reqs), :map),
              s(:args,
                s(:arg, :req)),
              s(:send,
                s(:lvar, :req), :to_s))))),
      s(:def, :test_requests_development,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:int, 2))))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :a1))),
          s(:defs,
            s(:lvar, :spec), :fetch_development_dependencies,
            s(:args),
            s(:ivasgn, :@called,
              s(:true))),
          s(:lvasgn, :r1,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 1")),
              s(:nil))),
          s(:lvasgn, :act,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ActivationRequest), :new,
              s(:lvar, :spec),
              s(:lvar, :r1),
              s(:false))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :act)))),
          s(:send,
            s(:lvar, :res), :development=,
            s(:true)),
          s(:lvasgn, :reqs,
            s(:array)),
          s(:send,
            s(:lvar, :res), :requests,
            s(:lvar, :spec),
            s(:lvar, :act),
            s(:lvar, :reqs)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b (= 2)")),
            s(:block,
              s(:send,
                s(:lvar, :reqs), :map),
              s(:args,
                s(:arg, :req)),
              s(:send,
                s(:lvar, :req), :to_s))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :spec), :instance_variable_defined?,
              s(:sym, :@called))))),
      s(:def, :test_requests_ignore_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:int, 2))))),
          s(:lvasgn, :r1,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 1")),
              s(:nil))),
          s(:lvasgn, :act,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ActivationRequest), :new,
              s(:lvar, :a1),
              s(:lvar, :r1),
              s(:false))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :a1)))),
          s(:send,
            s(:lvar, :res), :ignore_dependencies=,
            s(:true)),
          s(:lvasgn, :reqs,
            s(:array)),
          s(:send,
            s(:lvar, :res), :requests,
            s(:lvar, :a1),
            s(:lvar, :act),
            s(:lvar, :reqs)),
          s(:send, nil, :assert_empty,
            s(:lvar, :reqs)))),
      s(:def, :test_resolve_conservative,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1_spec,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a2_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :add_dependency,
                  s(:str, "b"),
                  s(:int, 2)),
                s(:send,
                  s(:lvar, :s), :add_dependency,
                  s(:str, "c"))))),
          s(:lvasgn, :b1_spec,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:int, 1))),
          s(:lvasgn, :b2_spec,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:int, 2))),
          s(:lvasgn, :c1_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "c"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "d"),
                s(:int, 2)))),
          s(:lvasgn, :c2_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "c"),
                s(:int, 2)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "d"),
                s(:int, 2)))),
          s(:lvasgn, :d1_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "d"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "e")))),
          s(:lvasgn, :d2_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "d"),
                s(:int, 2)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "e")))),
          s(:lvasgn, :e1_spec,
            s(:send, nil, :util_spec,
              s(:str, "e"),
              s(:int, 1))),
          s(:lvasgn, :e2_spec,
            s(:send, nil, :util_spec,
              s(:str, "e"),
              s(:int, 2))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 2"))),
          s(:lvasgn, :e_dep,
            s(:send, nil, :make_dep,
              s(:str, "e"))),
          s(:lvasgn, :deps,
            s(:array,
              s(:lvar, :a_dep),
              s(:lvar, :e_dep))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1_spec),
              s(:lvar, :a2_spec),
              s(:lvar, :b1_spec),
              s(:lvar, :b2_spec),
              s(:lvar, :c1_spec),
              s(:lvar, :c2_spec),
              s(:lvar, :d1_spec),
              s(:lvar, :d2_spec),
              s(:lvar, :e1_spec),
              s(:lvar, :e2_spec))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:lvar, :deps),
              s(:lvar, :s))),
          s(:send,
            s(:lvar, :res), :skip_gems=,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:array,
                  s(:lvar, :a1_spec))),
              s(:pair,
                s(:str, "b"),
                s(:array,
                  s(:lvar, :b1_spec))),
              s(:pair,
                s(:str, "c"),
                s(:array,
                  s(:lvar, :c1_spec))),
              s(:pair,
                s(:str, "e"),
                s(:array,
                  s(:lvar, :e1_spec))))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a2_spec),
              s(:lvar, :b2_spec),
              s(:lvar, :c1_spec),
              s(:lvar, :d2_spec),
              s(:lvar, :e1_spec)),
            s(:lvar, :res)))),
      s(:def, :test_resolve_development,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "b")))),
          s(:lvasgn, :b_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "b"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "c")))),
          s(:lvasgn, :c_spec,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:int, 1))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :deps,
            s(:array,
              s(:lvar, :a_dep))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a_spec),
              s(:lvar, :b_spec),
              s(:lvar, :c_spec))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:lvar, :deps),
              s(:lvar, :s))),
          s(:send,
            s(:lvar, :res), :development=,
            s(:true)),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a_spec),
              s(:lvar, :b_spec),
              s(:lvar, :c_spec)),
            s(:lvar, :res)))),
      s(:def, :test_resolve_development_shallow,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :add_development_dependency,
                  s(:str, "b")),
                s(:send,
                  s(:lvar, :s), :add_runtime_dependency,
                  s(:str, "d"))))),
          s(:lvasgn, :b_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "b"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "c")))),
          s(:lvasgn, :c_spec,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:int, 1))),
          s(:lvasgn, :d_spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "d"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "e")))),
          s(:lvasgn, :e_spec,
            s(:send, nil, :util_spec,
              s(:str, "e"),
              s(:int, 1))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :deps,
            s(:array,
              s(:lvar, :a_dep))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a_spec),
              s(:lvar, :b_spec),
              s(:lvar, :c_spec),
              s(:lvar, :d_spec),
              s(:lvar, :e_spec))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:lvar, :deps),
              s(:lvar, :s))),
          s(:send,
            s(:lvar, :res), :development=,
            s(:true)),
          s(:send,
            s(:lvar, :res), :development_shallow=,
            s(:true)),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a_spec),
              s(:lvar, :b_spec),
              s(:lvar, :d_spec)),
            s(:lvar, :res)))),
      s(:def, :test_resolve_remote_missing_dependency,
        s(:args),
        s(:begin,
          s(:ivasgn, :@fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :FakeFetcher), :new)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:ivar, :@fetcher)),
          s(:lvasgn, :a_dep,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :a_dep)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :IndexSet), :new))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDepedencyError)),
              s(:args),
              s(:send,
                s(:lvar, :res), :resolve))),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:lvar, :e), :errors)))),
      s(:def, :test_no_overlap_specificly,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"),
              s(:str, "= 1"))),
          s(:lvasgn, :deps,
            s(:array,
              s(:lvar, :ad),
              s(:lvar, :bd))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a),
              s(:lvar, :b))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:lvar, :deps),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :b)),
            s(:lvar, :res)))),
      s(:def, :test_pulls_in_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"),
              s(:str, "= 1"))),
          s(:lvasgn, :deps,
            s(:array,
              s(:lvar, :ad),
              s(:lvar, :bd))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:lvar, :c))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:lvar, :deps),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a),
              s(:lvar, :b),
              s(:lvar, :c)),
            s(:lvar, :res)))),
      s(:def, :test_picks_highest_version,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :a2,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "2"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :a2))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a2)),
            s(:lvar, :res)))),
      s(:def, :test_picks_best_platform,
        s(:args),
        s(:begin,
          s(:lvasgn, :is,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :IndexSpecification)),
          s(:lvasgn, :unknown,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "unknown"))),
          s(:lvasgn, :a2_p1,
            s(:lvasgn, :a3_p2,
              s(:nil))),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:lvasgn, :a2_p1,
                s(:block,
                  s(:send,
                    s(:lvar, :fetcher), :spec,
                    s(:str, "a"),
                    s(:int, 2)),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :s), :platform=,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Platform), :local)))),
              s(:lvasgn, :a3_p2,
                s(:block,
                  s(:send,
                    s(:lvar, :fetcher), :spec,
                    s(:str, "a"),
                    s(:int, 3)),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :s), :platform=,
                    s(:lvar, :unknown)))))),
          s(:lvasgn, :v2,
            s(:send, nil, :v,
              s(:int, 2))),
          s(:lvasgn, :v3,
            s(:send, nil, :v,
              s(:int, 3))),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :s,
            s(:send, nil, :set)),
          s(:lvasgn, :a2,
            s(:send,
              s(:lvar, :is), :new,
              s(:lvar, :s),
              s(:str, "a"),
              s(:lvar, :v2),
              s(:lvar, :source),
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY))),
          s(:lvasgn, :a2_p1,
            s(:send,
              s(:lvar, :is), :new,
              s(:lvar, :s),
              s(:str, "a"),
              s(:lvar, :v2),
              s(:lvar, :source),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local), :to_s))),
          s(:lvasgn, :a3_p2,
            s(:send,
              s(:lvar, :is), :new,
              s(:lvar, :s),
              s(:str, "a"),
              s(:lvar, :v3),
              s(:lvar, :source),
              s(:lvar, :unknown))),
          s(:send,
            s(:lvar, :s), :add,
            s(:lvar, :a3_p2)),
          s(:send,
            s(:lvar, :s), :add,
            s(:lvar, :a2_p1)),
          s(:send,
            s(:lvar, :s), :add,
            s(:lvar, :a2)),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:send,
                s(:lvar, :a2_p1), :spec)),
            s(:lvar, :res)))),
      s(:def, :test_only_returns_spec_once,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad),
                s(:lvar, :bd)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1)),
            s(:lvar, :res)))),
      s(:def, :test_picks_lower_version_when_needed,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 1"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :c2,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "2"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1),
              s(:lvar, :c2))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad),
                s(:lvar, :bd)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1)),
            s(:lvar, :res)))),
      s(:def, :test_conflict_resolution_only_effects_correct_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 1"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "d"),
                  s(:str, ">= 1"))))),
          s(:lvasgn, :d3,
            s(:send, nil, :util_spec,
              s(:str, "d"),
              s(:str, "3"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :d4,
            s(:send, nil, :util_spec,
              s(:str, "d"),
              s(:str, "4"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :c2,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "2"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :d3),
              s(:lvar, :d4),
              s(:lvar, :c1),
              s(:lvar, :c2))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad),
                s(:lvar, :bd)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1),
              s(:lvar, :d4)),
            s(:lvar, :res)))),
      s(:def, :test_backoff_higher_version_to_satisfy_dep,
        s(:args),
        s(:begin,
          s(:lvasgn, :t3,
            s(:send, nil, :util_spec,
              s(:str, "railties"),
              s(:str, "3.2"))),
          s(:lvasgn, :t4,
            s(:send, nil, :util_spec,
              s(:str, "railties"),
              s(:str, "4.0"))),
          s(:lvasgn, :r3,
            s(:send, nil, :util_spec,
              s(:str, "rails"),
              s(:str, "3.2"),
              s(:hash,
                s(:pair,
                  s(:str, "railties"),
                  s(:str, "= 3.2"))))),
          s(:lvasgn, :r4,
            s(:send, nil, :util_spec,
              s(:str, "rails"),
              s(:str, "4.0"),
              s(:hash,
                s(:pair,
                  s(:str, "railties"),
                  s(:str, "= 4.0"))))),
          s(:lvasgn, :rd,
            s(:send, nil, :make_dep,
              s(:str, "rails"),
              s(:str, "3.2"))),
          s(:lvasgn, :c3,
            s(:send, nil, :util_spec,
              s(:str, "coffee"),
              s(:str, "3.0"),
              s(:hash,
                s(:pair,
                  s(:str, "railties"),
                  s(:str, "~> 3.0"))))),
          s(:lvasgn, :c4,
            s(:send, nil, :util_spec,
              s(:str, "coffee"),
              s(:str, "4.0"),
              s(:hash,
                s(:pair,
                  s(:str, "railties"),
                  s(:str, "~> 4.0"))))),
          s(:lvasgn, :cd,
            s(:send, nil, :make_dep,
              s(:str, "coffee"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :t3),
              s(:lvar, :t4),
              s(:lvar, :r3),
              s(:lvar, :r4),
              s(:lvar, :c3),
              s(:lvar, :c4))),
          s(:lvasgn, :res,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :rd),
                s(:lvar, :cd)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :r3),
              s(:lvar, :t3),
              s(:lvar, :c3)),
            s(:lvar, :res)))),
      s(:def, :test_raises_dependency_error,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 2"))))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :c2,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "2"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1),
              s(:lvar, :c2))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad),
                s(:lvar, :bd)),
              s(:lvar, :s))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :DependencyResolutionError)),
              s(:args),
              s(:send,
                s(:lvar, :r), :resolve))),
          s(:lvasgn, :deps,
            s(:array,
              s(:send, nil, :make_dep,
                s(:str, "c"),
                s(:str, "= 2")),
              s(:send, nil, :make_dep,
                s(:str, "c"),
                s(:str, "= 1")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :deps),
            s(:send,
              s(:lvar, :e), :conflicting_dependencies)),
          s(:lvasgn, :con,
            s(:send,
              s(:lvar, :e), :conflict)),
          s(:lvasgn, :act,
            s(:send,
              s(:lvar, :con), :activated)),
          s(:send, nil, :assert_equal,
            s(:str, "c-1"),
            s(:send,
              s(:send,
                s(:lvar, :act), :spec), :full_name)),
          s(:lvasgn, :parent,
            s(:send,
              s(:lvar, :act), :parent)),
          s(:send, nil, :assert_equal,
            s(:str, "a-1"),
            s(:send,
              s(:send,
                s(:lvar, :parent), :spec), :full_name)),
          s(:lvasgn, :act,
            s(:send,
              s(:lvar, :con), :requester)),
          s(:send, nil, :assert_equal,
            s(:str, "b-1"),
            s(:send,
              s(:send,
                s(:lvar, :act), :spec), :full_name)))),
      s(:def, :test_raises_when_a_gem_is_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad)),
              s(:send, nil, :set))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDepedencyError)),
              s(:args),
              s(:send,
                s(:lvar, :r), :resolve))),
          s(:send, nil, :assert_equal,
            s(:str, "Unable to resolve dependency: user requested 'a (>= 0)'"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:str, "a (>= 0)"),
            s(:send,
              s(:send,
                s(:lvar, :e), :dependency), :to_s)))),
      s(:def, :test_raises_when_a_gem_version_is_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 3"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad)),
              s(:send, nil, :set,
                s(:lvar, :a1)))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDepedencyError)),
              s(:args),
              s(:send,
                s(:lvar, :r), :resolve))),
          s(:send, nil, :assert_equal,
            s(:str, "a (= 3)"),
            s(:send,
              s(:send,
                s(:lvar, :e), :dependency), :to_s)))),
      s(:def, :test_raises_and_reports_a_toplevel_request_properly,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 3"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad)),
              s(:send, nil, :set,
                s(:lvar, :a1)))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDepedencyError)),
              s(:args),
              s(:send,
                s(:lvar, :r), :resolve))),
          s(:send, nil, :assert_equal,
            s(:str, "Unable to resolve dependency: user requested 'a (= 3)'"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_raises_and_reports_an_implicit_request_properly,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_runtime_dependency,
                s(:str, "b"),
                s(:str, "= 2")))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad)),
              s(:send, nil, :set,
                s(:lvar, :a1)))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDepedencyError)),
              s(:args),
              s(:send,
                s(:lvar, :r), :resolve))),
          s(:send, nil, :assert_equal,
            s(:str, "Unable to resolve dependency: 'a (= 1)' requires 'b (= 2)'"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_raises_when_possibles_are_exhausted,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 2"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :c2,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "2"))),
          s(:lvasgn, :c3,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "3"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :c3))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad),
                s(:lvar, :bd)),
              s(:lvar, :s))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :DependencyResolutionError)),
              s(:args),
              s(:send,
                s(:lvar, :r), :resolve))),
          s(:lvasgn, :dependency,
            s(:send,
              s(:send,
                s(:lvar, :e), :conflict), :dependency)),
          s(:send, nil, :assert_includes,
            s(:array,
              s(:str, "a"),
              s(:str, "b")),
            s(:send,
              s(:lvar, :dependency), :name)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :req,
              s(:str, ">= 0")),
            s(:send,
              s(:lvar, :dependency), :requirement)),
          s(:lvasgn, :activated,
            s(:send,
              s(:send,
                s(:lvar, :e), :conflict), :activated)),
          s(:send, nil, :assert_equal,
            s(:str, "c-2"),
            s(:send,
              s(:lvar, :activated), :full_name)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :dep,
              s(:str, "c"),
              s(:str, ">= 2")),
            s(:send,
              s(:send,
                s(:lvar, :activated), :request), :dependency)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "c"),
                s(:str, "= 1")),
              s(:send, nil, :dep,
                s(:str, "c"),
                s(:str, ">= 2"))),
            s(:send,
              s(:send,
                s(:lvar, :e), :conflict), :conflicting_dependencies)))),
      s(:def, :test_keeps_resolving_after_seeing_satisfied_dep,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 1")),
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :bd,
            s(:send, nil, :make_dep,
              s(:str, "b"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad),
                s(:lvar, :bd)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1)),
            s(:lvar, :r)))),
      s(:def, :test_common_rack_activation_scenario,
        s(:args),
        s(:begin,
          s(:lvasgn, :rack100,
            s(:send, nil, :util_spec,
              s(:str, "rack"),
              s(:str, "1.0.0"))),
          s(:lvasgn, :rack101,
            s(:send, nil, :util_spec,
              s(:str, "rack"),
              s(:str, "1.0.1"))),
          s(:lvasgn, :lib1,
            s(:send, nil, :util_spec,
              s(:str, "lib"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "rack"),
                  s(:str, ">= 1.0.1"))))),
          s(:lvasgn, :rails,
            s(:send, nil, :util_spec,
              s(:str, "rails"),
              s(:str, "3"),
              s(:hash,
                s(:pair,
                  s(:str, "actionpack"),
                  s(:str, "= 3"))))),
          s(:lvasgn, :ap,
            s(:send, nil, :util_spec,
              s(:str, "actionpack"),
              s(:str, "3"),
              s(:hash,
                s(:pair,
                  s(:str, "rack"),
                  s(:str, ">= 1.0.0"))))),
          s(:lvasgn, :d1,
            s(:send, nil, :make_dep,
              s(:str, "rails"))),
          s(:lvasgn, :d2,
            s(:send, nil, :make_dep,
              s(:str, "lib"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :lib1),
              s(:lvar, :rails),
              s(:lvar, :ap),
              s(:lvar, :rack100),
              s(:lvar, :rack101))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :d1),
                s(:lvar, :d2)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :rails),
              s(:lvar, :ap),
              s(:lvar, :rack101),
              s(:lvar, :lib1)),
            s(:lvar, :r)),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :d2),
                s(:lvar, :d1)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :lib1),
              s(:lvar, :rack101),
              s(:lvar, :rails),
              s(:lvar, :ap)),
            s(:lvar, :r)))),
      s(:def, :test_backtracks_to_the_first_conflict,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :a2,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "2"))),
          s(:lvasgn, :a3,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "3"))),
          s(:lvasgn, :a4,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "4"))),
          s(:lvasgn, :d1,
            s(:send, nil, :make_dep,
              s(:str, "a"))),
          s(:lvasgn, :d2,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, ">= 2"))),
          s(:lvasgn, :d3,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :a2),
              s(:lvar, :a3),
              s(:lvar, :a4))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :d1),
                s(:lvar, :d2),
                s(:lvar, :d3)),
              s(:lvar, :s))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :DependencyResolutionError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :resolve)))),
      s(:def, :test_resolve_conflict,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a2,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :b2,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:int, 2),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "~> 2.0"))))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :a2),
              s(:lvar, :b2))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "~> 1.0"))),
          s(:lvasgn, :b_dep,
            s(:send, nil, :dep,
              s(:str, "b"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :a_dep),
                s(:lvar, :b_dep)),
              s(:lvar, :s))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :DependencyResolutionError)),
            s(:args),
            s(:send,
              s(:lvar, :r), :resolve)))),
      s(:def, :test_resolve_bug_699,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 2")),
                s(:pair,
                  s(:str, "c"),
                  s(:str, "~> 1.0.3"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "~> 1.0"))))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.0.9"))),
          s(:lvasgn, :c2,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.1.0"))),
          s(:lvasgn, :c3,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.2.0"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :c3))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :a_dep)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a1),
              s(:lvar, :b1),
              s(:lvar, :c1)),
            s(:lvar, :r)))),
      s(:def, :test_resolve_rollback,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a2,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:int, 1),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "~> 1.0"))))),
          s(:lvasgn, :b2,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:int, 2),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "~> 2.0"))))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :a1),
              s(:lvar, :a2),
              s(:lvar, :b1),
              s(:lvar, :b2))),
          s(:lvasgn, :a_dep,
            s(:send, nil, :dep,
              s(:str, "a"),
              s(:str, "~> 1.0"))),
          s(:lvasgn, :b_dep,
            s(:send, nil, :dep,
              s(:str, "b"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :a_dep),
                s(:lvar, :b_dep)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :a1),
              s(:lvar, :b1)),
            s(:lvar, :r)))),
      s(:def, :test_simple_activesupport_problem,
        s(:args),
        s(:begin,
          s(:lvasgn, :sup1,
            s(:send, nil, :util_spec,
              s(:str, "activesupport"),
              s(:str, "2.3.4"))),
          s(:lvasgn, :sup2,
            s(:send, nil, :util_spec,
              s(:str, "activesupport"),
              s(:str, "2.3.5"))),
          s(:lvasgn, :merch,
            s(:send, nil, :util_spec,
              s(:str, "activemerchant"),
              s(:str, "1.5.0"),
              s(:hash,
                s(:pair,
                  s(:str, "activesupport"),
                  s(:str, ">= 2.3.2"))))),
          s(:lvasgn, :mail,
            s(:send, nil, :util_spec,
              s(:str, "actionmailer"),
              s(:str, "2.3.4"),
              s(:hash,
                s(:pair,
                  s(:str, "activesupport"),
                  s(:str, "= 2.3.4"))))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :mail),
              s(:lvar, :merch),
              s(:lvar, :sup1),
              s(:lvar, :sup2))),
          s(:lvasgn, :d1,
            s(:send, nil, :make_dep,
              s(:str, "activemerchant"))),
          s(:lvasgn, :d2,
            s(:send, nil, :make_dep,
              s(:str, "actionmailer"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :d1),
                s(:lvar, :d2)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :merch),
              s(:lvar, :mail),
              s(:lvar, :sup1)),
            s(:lvar, :r)))),
      s(:def, :test_second_level_backout,
        s(:args),
        s(:begin,
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 1"))),
              s(:str, "lib/b.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 2"))),
              s(:str, "lib/b.rb"))),
          s(:lvasgn, :c1,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :c2,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "2"))),
          s(:lvasgn, :d1,
            s(:send, nil, :new_spec,
              s(:str, "d"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "< 2"))),
              s(:str, "lib/d.rb"))),
          s(:lvasgn, :d2,
            s(:send, nil, :new_spec,
              s(:str, "d"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "< 2"))),
              s(:str, "lib/d.rb"))),
          s(:lvasgn, :s,
            s(:send, nil, :set,
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :d1),
              s(:lvar, :d2))),
          s(:lvasgn, :p1,
            s(:send, nil, :make_dep,
              s(:str, "b"),
              s(:str, "> 0"))),
          s(:lvasgn, :p2,
            s(:send, nil, :make_dep,
              s(:str, "d"),
              s(:str, "> 0"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :p1),
                s(:lvar, :p2)),
              s(:lvar, :s))),
          s(:send, nil, :assert_resolves_to,
            s(:array,
              s(:lvar, :b1),
              s(:lvar, :c1),
              s(:lvar, :d2)),
            s(:lvar, :r)))),
      s(:def, :test_select_local_platforms,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:nil),
              s(:nil))),
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a1_p1,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local)))),
          s(:lvasgn, :a1_p2,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:str, "unknown")))),
          s(:lvasgn, :selected,
            s(:send,
              s(:lvar, :r), :select_local_platforms,
              s(:array,
                s(:lvar, :a1),
                s(:lvar, :a1_p1),
                s(:lvar, :a1_p2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a1),
              s(:lvar, :a1_p1)),
            s(:lvar, :selected)))),
      s(:def, :test_raises_and_explains_when_platform_prevents_install,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:array,
                    s(:str, "c"),
                    s(:str, "p"),
                    s(:str, "1")))))),
          s(:lvasgn, :ad,
            s(:send, nil, :make_dep,
              s(:str, "a"),
              s(:str, "= 1"))),
          s(:lvasgn, :r,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :new,
              s(:array,
                s(:lvar, :ad)),
              s(:send, nil, :set,
                s(:lvar, :a1)))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :UnsatisfiableDepedencyError)),
              s(:args),
              s(:send,
                s(:lvar, :r), :resolve))),
          s(:send, nil, :assert_match,
            s(:str, "No match for 'a (= 1)' on this platform. Found: c-p-1"),
            s(:send,
              s(:lvar, :e), :message)))))))
