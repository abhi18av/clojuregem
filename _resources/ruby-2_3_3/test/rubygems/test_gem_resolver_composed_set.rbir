s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:class,
    s(:const, nil, :TestGemResolverComposedSet),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :test_errors,
        s(:args),
        s(:begin,
          s(:lvasgn, :index_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :IndexSet), :new)),
          s(:lvasgn, :current_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :CurrentSet), :new)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ComposedSet), :new,
              s(:lvar, :index_set),
              s(:lvar, :current_set))),
          s(:send,
            s(:send,
              s(:lvar, :set), :instance_variable_get,
              s(:sym, :@errors)), :<<,
            s(:sym, :a)),
          s(:send,
            s(:send,
              s(:lvar, :current_set), :errors), :<<,
            s(:sym, :b)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :set), :errors),
            s(:sym, :a)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :set), :errors),
            s(:sym, :b)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:lvar, :set), :errors),
            s(:send,
              s(:send,
                s(:lvar, :index_set), :errors), :first)))),
      s(:def, :test_prerelease_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :best_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :BestSet), :new)),
          s(:lvasgn, :current_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :CurrentSet), :new)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ComposedSet), :new,
              s(:lvar, :best_set),
              s(:lvar, :current_set))),
          s(:send,
            s(:lvar, :set), :prerelease=,
            s(:true)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :set), :prerelease)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :best_set), :prerelease)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :current_set), :prerelease)))),
      s(:def, :test_remote_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :best_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :BestSet), :new)),
          s(:lvasgn, :current_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :CurrentSet), :new)),
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ComposedSet), :new,
              s(:lvar, :best_set),
              s(:lvar, :current_set))),
          s(:send,
            s(:lvar, :set), :remote=,
            s(:false)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :best_set), :remote?)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :current_set), :remote?)))))))
