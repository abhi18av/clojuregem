s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:class,
    s(:const, nil, :TestGemSourceLock),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :test_fetch_spec,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :name_tuple,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :new,
              s(:str, "a"),
              s(:send, nil, :v,
                s(:int, 1)),
              s(:str, "ruby"))),
          s(:lvasgn, :remote,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :remote))),
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :lock), :fetch_spec,
              s(:lvar, :name_tuple))),
          s(:send, nil, :assert_equal,
            s(:str, "a-1"),
            s(:send,
              s(:lvar, :spec), :full_name)))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:lvasgn, :git,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Git), :new,
              s(:str, "a"),
              s(:str, "git/a"),
              s(:str, "master"),
              s(:false))),
          s(:lvasgn, :g_lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :git))),
          s(:lvasgn, :installed,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Installed), :new)),
          s(:lvasgn, :i_lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :installed))),
          s(:send, nil, :assert_equal,
            s(:lvar, :g_lock),
            s(:lvar, :g_lock)),
          s(:send, nil, :refute_equal,
            s(:lvar, :g_lock),
            s(:lvar, :i_lock)),
          s(:send, nil, :refute_equal,
            s(:lvar, :g_lock),
            s(:send,
              s(:const, nil, :Object), :new)))),
      s(:def, :test_spaceship,
        s(:args),
        s(:begin,
          s(:lvasgn, :git,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Git), :new,
              s(:str, "a"),
              s(:str, "git/a"),
              s(:str, "master"),
              s(:false))),
          s(:lvasgn, :g_lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :git))),
          s(:lvasgn, :installed,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Installed), :new)),
          s(:lvasgn, :i_lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :installed))),
          s(:lvasgn, :vendor,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Vendor), :new,
              s(:str, "vendor/a"))),
          s(:lvasgn, :v_lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :vendor))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :g_lock), :<=>,
              s(:lvar, :g_lock)),
            s(:str, "g_lock <=> g_lock")),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :i_lock), :<=>,
              s(:lvar, :i_lock)),
            s(:str, "i_lock <=> i_lock")),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :v_lock), :<=>,
              s(:lvar, :v_lock)),
            s(:str, "v_lock <=> v_lock")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :g_lock), :<=>,
              s(:lvar, :i_lock)),
            s(:str, "g_lock <=> i_lock")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :i_lock), :<=>,
              s(:lvar, :g_lock)),
            s(:str, "i_lock <=> g_lock")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :g_lock), :<=>,
              s(:lvar, :v_lock)),
            s(:str, "g_lock <=> v_lock")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :v_lock), :<=>,
              s(:lvar, :g_lock)),
            s(:str, "v_lock <=> g_lock")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :i_lock), :<=>,
              s(:lvar, :v_lock)),
            s(:str, "i_lock <=> v_lock")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :v_lock), :<=>,
              s(:lvar, :i_lock)),
            s(:str, "i_lock <=> v_lock")))),
      s(:def, :test_spaceship_git,
        s(:args),
        s(:begin,
          s(:lvasgn, :git,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Git), :new,
              s(:str, "a"),
              s(:str, "git/a"),
              s(:str, "master"),
              s(:false))),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :git))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :lock), :<=>,
              s(:lvar, :git)),
            s(:str, "lock <=> git")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :git), :<=>,
              s(:lvar, :lock)),
            s(:str, "git  <=> lock")))),
      s(:def, :test_spaceship_installed,
        s(:args),
        s(:begin,
          s(:lvasgn, :installed,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Installed), :new)),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :installed))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :lock), :<=>,
              s(:lvar, :installed)),
            s(:str, "lock      <=> installed")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :installed), :<=>,
              s(:lvar, :lock)),
            s(:str, "installed <=> lock")))),
      s(:def, :test_spaceship_local,
        s(:args),
        s(:begin,
          s(:lvasgn, :local,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Local), :new)),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :local))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :lock), :<=>,
              s(:lvar, :local)),
            s(:str, "lock  <=> local")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :local), :<=>,
              s(:lvar, :lock)),
            s(:str, "local <=> lock")))),
      s(:def, :test_spaceship_remote,
        s(:args),
        s(:begin,
          s(:lvasgn, :remote,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :remote))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :lock), :<=>,
              s(:lvar, :remote)),
            s(:str, "lock   <=> remote")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :remote), :<=>,
              s(:lvar, :lock)),
            s(:str, "remote <=> lock")))),
      s(:def, :test_spaceship_specific_file,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :gem)),
            s(:send, nil, :util_gem,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :specific,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :SpecificFile), :new,
              s(:lvar, :gem))),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :specific))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :lock), :<=>,
              s(:lvar, :specific)),
            s(:str, "lock     <=> specific")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :specific), :<=>,
              s(:lvar, :lock)),
            s(:str, "specific <=> lock")))),
      s(:def, :test_spaceship_vendor,
        s(:args),
        s(:begin,
          s(:lvasgn, :vendor,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Vendor), :new,
              s(:str, "vendor/a"))),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :vendor))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :lock), :<=>,
              s(:lvar, :vendor)),
            s(:str, "lock   <=>    vendor")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :vendor), :<=>,
              s(:lvar, :lock)),
            s(:str, "vendor <=> lock")))),
      s(:def, :test_uri,
        s(:args),
        s(:begin,
          s(:lvasgn, :remote,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :lock,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :remote))),
          s(:send, nil, :assert_equal,
            s(:send, nil, :URI,
              s(:ivar, :@gem_repo)),
            s(:send,
              s(:lvar, :lock), :uri)))))))
