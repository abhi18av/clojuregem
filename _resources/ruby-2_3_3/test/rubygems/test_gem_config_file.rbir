s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/config_file")),
  s(:class,
    s(:const, nil, :TestGemConfigFile),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@temp_conf,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, ".gemrc"))),
          s(:ivasgn, :@cfg_args,
            s(:array,
              s(:str, "--config-file"),
              s(:dstr,
                s(:begin,
                  s(:ivar, :@temp_conf))))),
          s(:ivasgn, :@orig_SYSTEM_WIDE_CONFIG_FILE,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :SYSTEM_WIDE_CONFIG_FILE)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :ConfigFile), :send,
            s(:sym, :remove_const),
            s(:sym, :SYSTEM_WIDE_CONFIG_FILE)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :ConfigFile), :send,
            s(:sym, :const_set),
            s(:sym, :SYSTEM_WIDE_CONFIG_FILE),
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "system-gemrc"))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :OPERATING_SYSTEM_DEFAULTS), :clear),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :PLATFORM_DEFAULTS), :clear),
          s(:ivasgn, :@env_gemrc,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "GEMRC"))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEMRC"),
            s(:str, "")),
          s(:send, nil, :util_config_file))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :OPERATING_SYSTEM_DEFAULTS), :clear),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :PLATFORM_DEFAULTS), :clear),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :ConfigFile), :send,
            s(:sym, :remove_const),
            s(:sym, :SYSTEM_WIDE_CONFIG_FILE)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :ConfigFile), :send,
            s(:sym, :const_set),
            s(:sym, :SYSTEM_WIDE_CONFIG_FILE),
            s(:ivar, :@orig_SYSTEM_WIDE_CONFIG_FILE)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEMRC"),
            s(:ivar, :@env_gemrc)),
          s(:zsuper))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@temp_conf),
            s(:send,
              s(:ivar, :@cfg), :config_file_name)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :backtrace)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :update_sources)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :DEFAULT_BULK_THRESHOLD),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :verbose)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@gem_repo)),
            s(:send,
              s(:const, nil, :Gem), :sources)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:begin,
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":backtrace: true")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":update_sources: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":bulk_threshold: 10")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":verbose: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":sources:")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, "  - http://more-gems.example.com")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, "install: --wrappers")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":gempath:")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, "- /usr/ruby/1.8/lib/ruby/gems/1.8")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, "- /var/ruby/1.8/gem_home")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":ssl_verify_mode: 0")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":ssl_ca_cert: /etc/ssl/certs")))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :backtrace)),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :verbose)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :update_sources)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "http://more-gems.example.com")),
            s(:send,
              s(:const, nil, :Gem), :sources)),
          s(:send, nil, :assert_equal,
            s(:str, "--wrappers"),
            s(:send,
              s(:ivar, :@cfg), :[],
              s(:sym, :install))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "/usr/ruby/1.8/lib/ruby/gems/1.8"),
              s(:str, "/var/ruby/1.8/gem_home")),
            s(:send,
              s(:ivar, :@cfg), :path)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@cfg), :ssl_verify_mode)),
          s(:send, nil, :assert_equal,
            s(:str, "/etc/ssl/certs"),
            s(:send,
              s(:ivar, :@cfg), :ssl_ca_cert)))),
      s(:def, :test_initialize_handle_arguments_config_file,
        s(:args),
        s(:begin,
          s(:send, nil, :util_config_file,
            s(:array,
              s(:str, "--config-file"),
              s(:dstr,
                s(:begin,
                  s(:ivar, :@temp_conf))))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@temp_conf),
            s(:send,
              s(:ivar, :@cfg), :config_file_name)))),
      s(:def, :test_initialize_handle_arguments_config_file_with_other_params,
        s(:args),
        s(:begin,
          s(:send, nil, :util_config_file,
            s(:array,
              s(:str, "--config-file"),
              s(:dstr,
                s(:begin,
                  s(:ivar, :@temp_conf))),
              s(:str, "--backtrace"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@temp_conf),
            s(:send,
              s(:ivar, :@cfg), :config_file_name)))),
      s(:def, :test_initialize_handle_arguments_config_file_equals,
        s(:args),
        s(:begin,
          s(:send, nil, :util_config_file,
            s(:array,
              s(:dstr,
                s(:str, "--config-file="),
                s(:begin,
                  s(:ivar, :@temp_conf))))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@temp_conf),
            s(:send,
              s(:ivar, :@cfg), :config_file_name)))),
      s(:def, :test_initialize_operating_system_override,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :OPERATING_SYSTEM_DEFAULTS), :[]=,
            s(:sym, :bulk_threshold),
            s(:int, 1)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :OPERATING_SYSTEM_DEFAULTS), :[]=,
            s(:str, "install"),
            s(:str, "--no-env-shebang")),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :PLATFORM_DEFAULTS), :[]=,
            s(:sym, :bulk_threshold),
            s(:int, 2)),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold)),
          s(:send, nil, :assert_equal,
            s(:str, "--no-env-shebang"),
            s(:send,
              s(:ivar, :@cfg), :[],
              s(:sym, :install))))),
      s(:def, :test_initialize_platform_override,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :PLATFORM_DEFAULTS), :[]=,
            s(:sym, :bulk_threshold),
            s(:int, 2)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :PLATFORM_DEFAULTS), :[]=,
            s(:str, "install"),
            s(:str, "--no-env-shebang")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :ConfigFile), :SYSTEM_WIDE_CONFIG_FILE),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":bulk_threshold: 3"))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold)),
          s(:send, nil, :assert_equal,
            s(:str, "--no-env-shebang"),
            s(:send,
              s(:ivar, :@cfg), :[],
              s(:sym, :install))))),
      s(:def, :test_initialize_system_wide_override,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :ConfigFile), :SYSTEM_WIDE_CONFIG_FILE),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:begin,
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":backtrace: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":bulk_threshold: 2048")))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":backtrace: true"))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:int, 2048),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :backtrace)))),
      s(:def, :test_initialize_environment_variable_override,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :ConfigFile), :SYSTEM_WIDE_CONFIG_FILE),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:begin,
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":backtrace: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":verbose: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":bulk_threshold: 2048")))),
          s(:lvasgn, :conf1,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gemrc1"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :conf1),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":backtrace: true"))),
          s(:lvasgn, :conf2,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gemrc2"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :conf2),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":verbose: true"))),
          s(:lvasgn, :conf3,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gemrc3"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :conf3),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":verbose: :loud"))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEMRC"),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :conf1), :+,
                    s(:str, ":")), :+,
                  s(:lvar, :conf2)), :+,
                s(:str, ";")), :+,
              s(:lvar, :conf3))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :backtrace)),
          s(:send, nil, :assert_equal,
            s(:sym, :loud),
            s(:send,
              s(:ivar, :@cfg), :verbose)),
          s(:send, nil, :assert_equal,
            s(:int, 2048),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold)))),
      s(:def, :test_api_keys,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@cfg), :instance_variable_get,
              s(:sym, :@api_keys))),
          s(:lvasgn, :temp_cred,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"),
              s(:str, "credentials"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :temp_cred))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :temp_cred),
              s(:str, "w"),
              s(:int, 384)),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":rubygems_api_key: 701229f217cdf23b1344c7b4b54ca97"))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :rubygems),
                s(:str, "701229f217cdf23b1344c7b4b54ca97"))),
            s(:send,
              s(:ivar, :@cfg), :api_keys)))),
      s(:def, :test_check_credentials_permissions,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:send,
            s(:ivar, :@cfg), :rubygems_api_key=,
            s(:str, "x")),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:int, 420),
            s(:send,
              s(:ivar, :@cfg), :credentials_path)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:send,
                s(:ivar, :@cfg), :load_api_keys))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "ERROR:  Your gem push credentials file located at:\n"),
              s(:str, "\n"),
              s(:str, "\t"),
              s(:begin,
                s(:send,
                  s(:ivar, :@cfg), :credentials_path)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "has file permissions of 0644 but 0600 is required.\n"),
              s(:str, "\n"),
              s(:str, "To fix this error run:\n"),
              s(:str, "\n"),
              s(:str, "\tchmod 0600 "),
              s(:begin,
                s(:send,
                  s(:ivar, :@cfg), :credentials_path)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "You should reset your credentials at:\n"),
              s(:str, "\n"),
              s(:str, "\thttps://rubygems.org/profile/edit\n"),
              s(:str, "\n"),
              s(:str, "if you believe they were disclosed to a third party.\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_handle_arguments,
        s(:args),
        s(:begin,
          s(:lvasgn, :args,
            s(:array,
              s(:str, "--backtrace"),
              s(:str, "--bunch"),
              s(:str, "--of"),
              s(:str, "--args"),
              s(:str, "here"))),
          s(:send,
            s(:ivar, :@cfg), :handle_arguments,
            s(:lvar, :args)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "--bunch"),
              s(:str, "--of"),
              s(:str, "--args"),
              s(:str, "here")),
            s(:send,
              s(:ivar, :@cfg), :args)))),
      s(:def, :test_handle_arguments_backtrace,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :backtrace)),
          s(:lvasgn, :args,
            s(:array,
              s(:str, "--backtrace"))),
          s(:send,
            s(:ivar, :@cfg), :handle_arguments,
            s(:lvar, :args)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :backtrace)))),
      s(:def, :test_handle_arguments_debug,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:false),
              s(:gvar, :$DEBUG)),
            s(:lvasgn, :args,
              s(:array,
                s(:str, "--debug"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :_),
                s(:lvasgn, :err)),
              s(:block,
                s(:send, nil, :capture_io),
                s(:args),
                s(:send,
                  s(:ivar, :@cfg), :handle_arguments,
                  s(:lvar, :args)))),
            s(:send, nil, :assert_match,
              s(:str, "NOTE"),
              s(:lvar, :err)),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:gvar, :$DEBUG))),
          s(:gvasgn, :$DEBUG,
            s(:false)))),
      s(:def, :test_handle_arguments_override,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":backtrace: false"))),
          s(:send, nil, :util_config_file,
            s(:array,
              s(:str, "--backtrace"),
              s(:dstr,
                s(:str, "--config-file="),
                s(:begin,
                  s(:ivar, :@temp_conf))))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :backtrace)))),
      s(:def, :test_handle_arguments_traceback,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :backtrace)),
          s(:lvasgn, :args,
            s(:array,
              s(:str, "--traceback"))),
          s(:send,
            s(:ivar, :@cfg), :handle_arguments,
            s(:lvar, :args)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :backtrace)))),
      s(:def, :test_handle_arguments_norc,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@temp_conf),
            s(:send,
              s(:ivar, :@cfg), :config_file_name)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:begin,
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":backtrace: true")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":update_sources: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":bulk_threshold: 10")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":verbose: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":sources:")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, "  - http://more-gems.example.com")))),
          s(:lvasgn, :args,
            s(:array,
              s(:str, "--norc"))),
          s(:send, nil, :util_config_file,
            s(:lvar, :args)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :backtrace)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :update_sources)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :DEFAULT_BULK_THRESHOLD),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :verbose)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@gem_repo)),
            s(:send,
              s(:const, nil, :Gem), :sources)))),
      s(:def, :test_load_api_keys,
        s(:args),
        s(:begin,
          s(:lvasgn, :temp_cred,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"),
              s(:str, "credentials"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :temp_cred))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :temp_cred),
              s(:str, "w"),
              s(:int, 384)),
            s(:args,
              s(:arg, :fp)),
            s(:begin,
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":rubygems_api_key: 701229f217cdf23b1344c7b4b54ca97")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":other: a5fdbb6ba150cbb83aad2bb2fede64c")))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:sym, :rubygems),
                s(:str, "701229f217cdf23b1344c7b4b54ca97")),
              s(:pair,
                s(:sym, :other),
                s(:str, "a5fdbb6ba150cbb83aad2bb2fede64c"))),
            s(:send,
              s(:ivar, :@cfg), :api_keys)))),
      s(:def, :test_load_api_keys_bad_permission,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:send,
            s(:ivar, :@cfg), :rubygems_api_key=,
            s(:str, "x")),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:int, 420),
            s(:send,
              s(:ivar, :@cfg), :credentials_path)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:send,
              s(:ivar, :@cfg), :load_api_keys)))),
      s(:def, :test_really_verbose,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :really_verbose)),
          s(:send,
            s(:ivar, :@cfg), :verbose=,
            s(:true)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :really_verbose)),
          s(:send,
            s(:ivar, :@cfg), :verbose=,
            s(:int, 1)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :really_verbose)))),
      s(:def, :test_rubygems_api_key_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cfg), :rubygems_api_key=,
            s(:str, "x")),
          s(:send, nil, :assert_equal,
            s(:str, "x"),
            s(:send,
              s(:ivar, :@cfg), :rubygems_api_key)),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:sym, :rubygems_api_key),
                s(:str, "x")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const, nil, :YAML), :load_file,
              s(:send,
                s(:ivar, :@cfg), :credentials_path))),
          s(:if,
            s(:send, nil, :win_platform?), nil,
            s(:begin,
              s(:lvasgn, :stat,
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:send,
                    s(:ivar, :@cfg), :credentials_path))),
              s(:send, nil, :assert_equal,
                s(:int, 384),
                s(:send,
                  s(:send,
                    s(:lvar, :stat), :mode), :&,
                  s(:int, 384))))))),
      s(:def, :test_rubygems_api_key_equals_bad_permission,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:send,
            s(:ivar, :@cfg), :rubygems_api_key=,
            s(:str, "x")),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:int, 420),
            s(:send,
              s(:ivar, :@cfg), :credentials_path)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:send,
              s(:ivar, :@cfg), :rubygems_api_key=,
              s(:str, "y"))),
          s(:lvasgn, :expected,
            s(:hash,
              s(:pair,
                s(:sym, :rubygems_api_key),
                s(:str, "x")))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const, nil, :YAML), :load_file,
              s(:send,
                s(:ivar, :@cfg), :credentials_path))),
          s(:lvasgn, :stat,
            s(:send,
              s(:const, nil, :File), :stat,
              s(:send,
                s(:ivar, :@cfg), :credentials_path))),
          s(:send, nil, :assert_equal,
            s(:int, 420),
            s(:send,
              s(:send,
                s(:lvar, :stat), :mode), :&,
              s(:int, 420))))),
      s(:def, :test_write,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cfg), :backtrace=,
            s(:true)),
          s(:send,
            s(:ivar, :@cfg), :update_sources=,
            s(:false)),
          s(:send,
            s(:ivar, :@cfg), :bulk_threshold=,
            s(:int, 10)),
          s(:send,
            s(:ivar, :@cfg), :verbose=,
            s(:false)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:array,
              s(:str, "http://more-gems.example.com"))),
          s(:send,
            s(:ivar, :@cfg), :[]=,
            s(:sym, :install),
            s(:str, "--wrappers")),
          s(:send,
            s(:ivar, :@cfg), :write),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :backtrace),
            s(:str, "backtrace")),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :ConfigFile), :DEFAULT_BULK_THRESHOLD),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold),
            s(:str, "bulk_threshold")),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :update_sources),
            s(:str, "update_sources")),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :verbose),
            s(:str, "verbose")),
          s(:send, nil, :assert_equal,
            s(:str, "--wrappers"),
            s(:send,
              s(:ivar, :@cfg), :[],
              s(:sym, :install)),
            s(:str, "install")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "http://more-gems.example.com")),
            s(:send,
              s(:const, nil, :Gem), :sources)))),
      s(:def, :test_write_from_hash,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:begin,
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":backtrace: true")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":bulk_threshold: 10")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":update_sources: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":verbose: false")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":sources:")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, "  - http://more-gems.example.com")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":ssl_verify_mode: 2")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":ssl_ca_cert: /nonexistent/ca_cert.pem")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, ":ssl_client_cert: /nonexistent/client_cert.pem")),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:str, "install: --wrappers")))),
          s(:send, nil, :util_config_file),
          s(:send,
            s(:ivar, :@cfg), :backtrace=,
            s(:sym, :junk)),
          s(:send,
            s(:ivar, :@cfg), :update_sources=,
            s(:sym, :junk)),
          s(:send,
            s(:ivar, :@cfg), :bulk_threshold=,
            s(:int, 20)),
          s(:send,
            s(:ivar, :@cfg), :verbose=,
            s(:sym, :junk)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:array,
              s(:str, "http://even-more-gems.example.com"))),
          s(:send,
            s(:ivar, :@cfg), :[]=,
            s(:sym, :install),
            s(:str, "--wrappers --no-rdoc")),
          s(:send,
            s(:ivar, :@cfg), :write),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :backtrace),
            s(:str, "backtrace")),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:send,
              s(:ivar, :@cfg), :bulk_threshold),
            s(:str, "bulk_threshold")),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :update_sources),
            s(:str, "update_sources")),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@cfg), :verbose),
            s(:str, "verbose")),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@cfg), :ssl_verify_mode)),
          s(:send, nil, :assert_equal,
            s(:str, "/nonexistent/ca_cert.pem"),
            s(:send,
              s(:ivar, :@cfg), :ssl_ca_cert)),
          s(:send, nil, :assert_equal,
            s(:str, "/nonexistent/client_cert.pem"),
            s(:send,
              s(:ivar, :@cfg), :ssl_client_cert)),
          s(:send, nil, :assert_equal,
            s(:str, "--wrappers --no-rdoc"),
            s(:send,
              s(:ivar, :@cfg), :[],
              s(:sym, :install)),
            s(:str, "install")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "http://even-more-gems.example.com")),
            s(:send,
              s(:const, nil, :Gem), :sources)))),
      s(:def, :test_ignore_invalid_config_file,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, "invalid: yaml:"))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :verbose),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:send, nil, :util_config_file)),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :verbose)))))),
      s(:def, :test_load_ssl_verify_mode_from_config,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":ssl_verify_mode: 1"))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@cfg), :ssl_verify_mode)))),
      s(:def, :test_load_ssl_ca_cert_from_config,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":ssl_ca_cert: /home/me/certs"))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:str, "/home/me/certs"),
            s(:send,
              s(:ivar, :@cfg), :ssl_ca_cert)))),
      s(:def, :test_load_ssl_client_cert_from_config,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":ssl_client_cert: /home/me/mine.pem"))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:str, "/home/me/mine.pem"),
            s(:send,
              s(:ivar, :@cfg), :ssl_client_cert)))),
      s(:def, :util_config_file,
        s(:args,
          s(:optarg, :args,
            s(:ivar, :@cfg_args))),
        s(:ivasgn, :@cfg,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :ConfigFile), :new,
            s(:lvar, :args)))),
      s(:def, :test_disable_default_gem_server,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@temp_conf),
              s(:str, "w")),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, ":disable_default_gem_server: true"))),
          s(:send, nil, :util_config_file),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@cfg), :disable_default_gem_server)))))))
