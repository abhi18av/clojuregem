s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/doctor")),
  s(:class,
    s(:const, nil, :TestGemDoctor),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :gem,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:lvar, :name)),
              s(:args,
                s(:arg, :gem)),
              s(:send,
                s(:lvar, :gem), :files=,
                s(:array,
                  s(:dstr,
                    s(:str, "lib/"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ".rb")),
                  s(:str, "Rakefile"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :full_name))),
                  s(:str, "lib"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ".rb")))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :full_name))),
                  s(:str, "Rakefile"))))),
          s(:lvar, :spec))),
      s(:def, :test_doctor,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :gem,
              s(:str, "a"))),
          s(:lvasgn, :b,
            s(:send, nil, :gem,
              s(:str, "b"))),
          s(:lvasgn, :c,
            s(:send, nil, :gem,
              s(:str, "c"))),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:ivar, :@userhome),
            s(:ivar, :@gemhome)),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:lvar, :b), :spec_file)),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:lvar, :c), :spec_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "this will raise an exception when evaluated."))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "Rakefile"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "lib"),
              s(:str, "a.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :b), :gem_dir)),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :b), :spec_file)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :c), :gem_dir)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :c), :spec_file)),
          s(:lvasgn, :doctor,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Doctor), :new,
              s(:ivar, :@gemhome))),
          s(:block,
            s(:send, nil, :capture_io),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:lvar, :doctor), :doctor))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "Rakefile"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "lib"),
              s(:str, "a.rb"))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :b), :gem_dir)),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :b), :spec_file)),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :c), :gem_dir)),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :c), :spec_file)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Checking "),
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "\n"),
              s(:str, "Removed file specifications/c-2.gemspec\n"),
              s(:str, "Removed directory gems/b-2\n"),
              s(:str, "Removed directory gems/c-2\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :dir),
            s(:ivar, :@userhome)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :path),
            s(:array,
              s(:ivar, :@gemhome),
              s(:ivar, :@userhome))))),
      s(:def, :test_doctor_dry_run,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :gem,
              s(:str, "a"))),
          s(:lvasgn, :b,
            s(:send, nil, :gem,
              s(:str, "b"))),
          s(:lvasgn, :c,
            s(:send, nil, :gem,
              s(:str, "c"))),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:ivar, :@userhome),
            s(:ivar, :@gemhome)),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:lvar, :b), :spec_file)),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:lvar, :c), :spec_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "this will raise an exception when evaluated."))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "Rakefile"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "lib"),
              s(:str, "a.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :b), :gem_dir)),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :b), :spec_file)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :c), :gem_dir)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :c), :spec_file)),
          s(:lvasgn, :doctor,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Doctor), :new,
              s(:ivar, :@gemhome),
              s(:true))),
          s(:block,
            s(:send, nil, :capture_io),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:lvar, :doctor), :doctor))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "Rakefile"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a), :gem_dir),
              s(:str, "lib"),
              s(:str, "a.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :b), :gem_dir)),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :b), :spec_file)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :c), :gem_dir)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:lvar, :c), :spec_file)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Checking "),
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "\n"),
              s(:str, "Extra file specifications/c-2.gemspec\n"),
              s(:str, "Extra directory gems/b-2\n"),
              s(:str, "Extra directory gems/c-2\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :dir),
            s(:ivar, :@userhome)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :path),
            s(:array,
              s(:ivar, :@gemhome),
              s(:ivar, :@userhome))))),
      s(:def, :test_doctor_non_gem_home,
        s(:args),
        s(:begin,
          s(:lvasgn, :other_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "other"),
              s(:str, "dir"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :other_dir)),
          s(:lvasgn, :doctor,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Doctor), :new,
              s(:ivar, :@tempdir))),
          s(:block,
            s(:send, nil, :capture_io),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:lvar, :doctor), :doctor))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :other_dir)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Checking "),
              s(:begin,
                s(:ivar, :@tempdir)),
              s(:str, "\n"),
              s(:str, "This directory does not appear to be a RubyGems repository, skipping\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_doctor_child_missing,
        s(:args),
        s(:begin,
          s(:lvasgn, :doctor,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Doctor), :new,
              s(:ivar, :@gemhome))),
          s(:send,
            s(:lvar, :doctor), :doctor_child,
            s(:str, "missing"),
            s(:str, "")),
          s(:send, nil, :assert,
            s(:true)))),
      s(:def, :test_gem_repository_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :doctor,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Doctor), :new,
              s(:ivar, :@gemhome))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :doctor), :gem_repository?),
            s(:str, "no gems installed")),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:lvasgn, :doctor,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Doctor), :new,
              s(:ivar, :@gemhome))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :doctor), :gem_repository?),
            s(:str, "gems installed")))))))
