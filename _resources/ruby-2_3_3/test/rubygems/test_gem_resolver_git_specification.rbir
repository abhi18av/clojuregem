s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/installer")),
  s(:class,
    s(:const, nil, :TestGemResolverGitSpecification),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSet), :new)),
          s(:ivasgn, :@spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "a"),
              s(:int, 1))))),
      s(:def, :test_equals2,
        s(:args),
        s(:begin,
          s(:lvasgn, :g_spec_a,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
              s(:ivar, :@set),
              s(:ivar, :@spec))),
          s(:send, nil, :assert_equal,
            s(:lvar, :g_spec_a),
            s(:lvar, :g_spec_a)),
          s(:lvasgn, :spec_b,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "b"),
              s(:int, 1))),
          s(:lvasgn, :g_spec_b,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
              s(:ivar, :@set),
              s(:lvar, :spec_b))),
          s(:send, nil, :refute_equal,
            s(:lvar, :g_spec_a),
            s(:lvar, :g_spec_b)),
          s(:lvasgn, :g_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSet), :new)),
          s(:lvasgn, :g_spec_s,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
              s(:lvar, :g_set),
              s(:ivar, :@spec))),
          s(:send, nil, :refute_equal,
            s(:lvar, :g_spec_a),
            s(:lvar, :g_spec_s)),
          s(:lvasgn, :i_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :IndexSet), :new)),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :i_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :IndexSpecification), :new,
              s(:lvar, :i_set),
              s(:str, "a"),
              s(:send, nil, :v,
                s(:int, 1)),
              s(:lvar, :source),
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY))),
          s(:send, nil, :refute_equal,
            s(:lvar, :g_spec_a),
            s(:lvar, :i_spec)))),
      s(:def, :test_add_dependency,
        s(:args),
        s(:begin,
          s(:send, nil, :git_gem,
            s(:str, "a"),
            s(:int, 1)),
          s(:lvasgn, :git_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
              s(:ivar, :@set),
              s(:ivar, :@spec))),
          s(:lvasgn, :b_dep,
            s(:send, nil, :dep,
              s(:str, "b"))),
          s(:send,
            s(:lvar, :git_spec), :add_dependency,
            s(:lvar, :b_dep)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :b_dep)),
            s(:send,
              s(:lvar, :git_spec), :dependencies)))),
      s(:def, :test_install,
        s(:args),
        s(:begin,
          s(:send, nil, :git_gem,
            s(:str, "a"),
            s(:int, 1)),
          s(:lvasgn, :git_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
              s(:ivar, :@set),
              s(:ivar, :@spec))),
          s(:lvasgn, :called,
            s(:false)),
          s(:block,
            s(:send,
              s(:lvar, :git_spec), :install,
              s(:hash)),
            s(:args,
              s(:arg, :installer)),
            s(:lvasgn, :called,
              s(:lvar, :installer))),
          s(:send, nil, :assert,
            s(:lvar, :called)))),
      s(:def, :test_install_extension,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :_),
              s(:lvasgn, :repository)),
            s(:block,
              s(:send, nil, :git_gem,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :extensions), :<<,
                s(:str, "ext/extconf.rb")))),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:str, "git/a")),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :mkdir_p,
                s(:str, "ext/lib")),
              s(:block,
                s(:send, nil, :open,
                  s(:str, "ext/extconf.rb"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :io)),
                s(:begin,
                  s(:send,
                    s(:lvar, :io), :puts,
                    s(:str, "require \"mkmf\"")),
                  s(:send,
                    s(:lvar, :io), :puts,
                    s(:str, "create_makefile \"a\"")))),
              s(:send,
                s(:const, nil, :FileUtils), :touch,
                s(:str, "ext/lib/b.rb")),
              s(:send, nil, :system,
                s(:ivar, :@git),
                s(:str, "add"),
                s(:str, "ext/extconf.rb")),
              s(:send, nil, :system,
                s(:ivar, :@git),
                s(:str, "add"),
                s(:str, "ext/lib/b.rb")),
              s(:send, nil, :system,
                s(:ivar, :@git),
                s(:str, "commit"),
                s(:str, "--quiet"),
                s(:str, "-m"),
                s(:str, "Add extension files")))),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Git), :new,
              s(:lvar, :name),
              s(:lvar, :repository),
              s(:str, "master"),
              s(:true))),
          s(:lvasgn, :spec,
            s(:send,
              s(:send,
                s(:lvar, :source), :specs), :first)),
          s(:lvasgn, :git_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
              s(:ivar, :@set),
              s(:lvar, :spec),
              s(:lvar, :source))),
          s(:send,
            s(:lvar, :git_spec), :install,
            s(:hash)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:send,
                  s(:lvar, :git_spec), :spec), :extension_dir),
              s(:str, "b.rb"))))),
      s(:def, :test_install_installed,
        s(:args),
        s(:begin,
          s(:send, nil, :git_gem,
            s(:str, "a"),
            s(:int, 1)),
          s(:lvasgn, :git_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
              s(:ivar, :@set),
              s(:ivar, :@spec))),
          s(:send,
            s(:lvar, :git_spec), :install,
            s(:hash)),
          s(:lvasgn, :called,
            s(:false)),
          s(:block,
            s(:send,
              s(:lvar, :git_spec), :install,
              s(:hash)),
            s(:args,
              s(:arg, :installer)),
            s(:lvasgn, :called,
              s(:lvar, :installer))),
          s(:send, nil, :assert,
            s(:lvar, :called)))))))
