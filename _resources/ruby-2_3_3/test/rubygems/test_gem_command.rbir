s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Command), nil,
    s(:send, nil, :public,
      s(:sym, :parser))),
  s(:class,
    s(:const, nil, :TestGemCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@xopt,
            s(:nil)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :common_options), :clear),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :common_options), :<<,
            s(:array,
              s(:array,
                s(:str, "-x"),
                s(:str, "--exe"),
                s(:str, "Execute")),
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:restarg, :a)),
                s(:ivasgn, :@xopt,
                  s(:true))))),
          s(:ivasgn, :@cmd_name,
            s(:str, "doit")),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :new,
              s(:ivar, :@cmd_name),
              s(:str, "summary"))))),
      s(:def, :test_self_add_specific_extra_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :added_args,
            s(:array,
              s(:str, "--all"))),
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :add_option,
              s(:str, "--all")),
            s(:args,
              s(:arg, :v),
              s(:arg, :o)), nil),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Command), :add_specific_extra_args,
            s(:ivar, :@cmd_name),
            s(:lvar, :added_args)),
          s(:send, nil, :assert_equal,
            s(:lvar, :added_args),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :specific_extra_args,
              s(:ivar, :@cmd_name))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cmd), :add_extra_args,
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:lvar, :added_args),
            s(:lvar, :h)))),
      s(:def, :test_self_add_specific_extra_args_unknown,
        s(:args),
        s(:begin,
          s(:lvasgn, :added_args,
            s(:array,
              s(:str, "--definitely_not_there"))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Command), :add_specific_extra_args,
            s(:ivar, :@cmd_name),
            s(:lvar, :added_args)),
          s(:send, nil, :assert_equal,
            s(:lvar, :added_args),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :specific_extra_args,
              s(:ivar, :@cmd_name))),
          s(:lvasgn, :h,
            s(:send,
              s(:ivar, :@cmd), :add_extra_args,
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :h)))),
      s(:def, :test_basic_accessors,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "doit"),
            s(:send,
              s(:ivar, :@cmd), :command)),
          s(:send, nil, :assert_equal,
            s(:str, "gem doit"),
            s(:send,
              s(:ivar, :@cmd), :program_name)),
          s(:send, nil, :assert_equal,
            s(:str, "summary"),
            s(:send,
              s(:ivar, :@cmd), :summary)))),
      s(:def, :test_common_option_in_class,
        s(:args),
        s(:send, nil, :assert,
          s(:send,
            s(:const, nil, :Array), :===,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :common_options)))),
      s(:def, :test_defaults,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :add_option,
              s(:str, "-h"),
              s(:str, "--help [COMMAND]"),
              s(:str, "Get help on COMMAND")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :help),
              s(:lvar, :value))),
          s(:send,
            s(:ivar, :@cmd), :defaults=,
            s(:hash,
              s(:pair,
                s(:sym, :help),
                s(:true)))),
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :when_invoked),
            s(:args,
              s(:arg, :options)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :help)),
              s(:str, "Help options should default true"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :invoke)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Usage: gem doit"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_invoke,
        s(:args),
        s(:begin,
          s(:lvasgn, :done,
            s(:false)),
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :when_invoked),
            s(:args),
            s(:lvasgn, :done,
              s(:true))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :invoke)),
          s(:send, nil, :assert,
            s(:lvar, :done)))),
      s(:def, :test_invoke_with_bad_options,
        s(:args),
        s(:block,
          s(:send, nil, :use_ui,
            s(:ivar, :@ui)),
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:ivar, :@cmd), :when_invoked),
              s(:args),
              s(:true)),
            s(:lvasgn, :ex,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidOption)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :invoke,
                  s(:str, "-zzz")))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "invalid option:"),
                s(:regopt)),
              s(:send,
                s(:lvar, :ex), :message))))),
      s(:def, :test_invoke_with_common_options,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :when_invoked),
            s(:args),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :invoke,
              s(:str, "-x"))),
          s(:send, nil, :assert,
            s(:ivar, :@xopt),
            s(:str, "Should have done xopt")))),
      s(:def, :test_invoke_with_build_args,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :when_invoked),
            s(:args),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :invoke_with_build_args,
              s(:array,
                s(:str, "-x")),
              s(:array,
                s(:str, "--awesome=true")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "--awesome=true")),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :build_args))))),
      s(:def, :test_invoke_with_help,
        s(:args),
        s(:begin,
          s(:lvasgn, :done,
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@cmd), :add_option,
                  s(:str, "-h"),
                  s(:str, "--help [COMMAND]"),
                  s(:str, "Get help on COMMAND")),
                s(:args,
                  s(:arg, :value),
                  s(:arg, :options)),
                s(:begin,
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :help),
                    s(:true)),
                  s(:lvasgn, :done,
                    s(:true)))),
              s(:send,
                s(:ivar, :@cmd), :invoke,
                s(:str, "--help")),
              s(:send, nil, :assert,
                s(:lvar, :done)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Usage"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "gem doit"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\[options\\]"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "-h"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "--help \\[COMMAND\\]"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Get help on COMMAND"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "-x"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "--exe"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Execute"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Common Options:"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_invoke_with_options,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :add_option,
              s(:str, "-h"),
              s(:str, "--help [COMMAND]"),
              s(:str, "Get help on COMMAND")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :help),
              s(:true))),
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :when_invoked),
            s(:args,
              s(:arg, :opts)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :opts), :[],
                s(:sym, :help)))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :invoke,
              s(:str, "-h"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Usage: gem doit"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_option_recognition,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :add_option,
              s(:str, "-h"),
              s(:str, "--help [COMMAND]"),
              s(:str, "Get help on COMMAND")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :help),
              s(:true))),
          s(:block,
            s(:send,
              s(:ivar, :@cmd), :add_option,
              s(:str, "-f"),
              s(:str, "--file FILE"),
              s(:str, "File option")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :help),
              s(:true))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "-x")))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "-h")))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "-h"),
                s(:str, "command")))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "--help"),
                s(:str, "command")))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "-f"),
                s(:str, "filename")))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "--file=filename")))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "-z")))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "-f")))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@cmd), :handles?,
              s(:array,
                s(:str, "--toothpaste")))),
          s(:lvasgn, :args,
            s(:array,
              s(:str, "-h"),
              s(:str, "command"))),
          s(:send,
            s(:ivar, :@cmd), :handles?,
            s(:lvar, :args)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "-h"),
              s(:str, "command")),
            s(:lvar, :args)))),
      s(:def, :test_show_lookup_failure_suggestions_local,
        s(:args),
        s(:begin,
          s(:lvasgn, :correct,
            s(:str, "non_existent_with_hint")),
          s(:lvasgn, :misspelled,
            s(:str, "nonexistent_with_hint")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:lvar, :correct),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :show_lookup_failure,
              s(:lvar, :misspelled),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default),
              s(:array),
              s(:sym, :local))),
          s(:lvasgn, :expected,
            s(:str, "ERROR:  Could not find a valid gem 'nonexistent_with_hint' (>= 0) in any repository\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_show_lookup_failure_suggestions_none,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "correct"),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :show_lookup_failure,
              s(:str, "other"),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default),
              s(:array),
              s(:sym, :remote))),
          s(:lvasgn, :expected,
            s(:str, "ERROR:  Could not find a valid gem 'other' (>= 0) in any repository\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_show_lookup_failure_suggestions_remote,
        s(:args),
        s(:begin,
          s(:lvasgn, :correct,
            s(:str, "non_existent_with_hint")),
          s(:lvasgn, :misspelled,
            s(:str, "nonexistent_with_hint")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:lvar, :correct),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :show_lookup_failure,
              s(:lvar, :misspelled),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default),
              s(:array),
              s(:sym, :remote))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "ERROR:  Could not find a valid gem 'nonexistent_with_hint' (>= 0) in any repository\n"),
              s(:str, "ERROR:  Possible alternatives: non_existent_with_hint\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))))))
