s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/sources_command")),
  s(:class,
    s(:const, nil, :TestGemCommandsSourcesCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :spec_fetcher),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :SourcesCommand), :new)),
          s(:ivasgn, :@new_repo,
            s(:str, "http://beta-gems.example.com")))),
      s(:def, :test_initialize_proxy,
        s(:args),
        s(:send, nil, :assert,
          s(:send,
            s(:ivar, :@cmd), :handles?,
            s(:array,
              s(:str, "--http-proxy"),
              s(:str, "http://proxy.example.com"))))),
      s(:def, :test_execute,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "*** CURRENT SOURCES ***\n"),
              s(:str, "\n"),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_add,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :specs,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :map),
              s(:args,
                s(:arg, :spec)),
              s(:array,
                s(:send,
                  s(:lvar, :spec), :name),
                s(:send,
                  s(:lvar, :spec), :version),
                s(:send,
                  s(:lvar, :spec), :original_platform)))),
          s(:lvasgn, :specs_dump_gz,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Zlib), :GzipWriter), :wrap,
              s(:lvar, :specs_dump_gz)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :specs),
              s(:lvar, :io))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@new_repo)),
              s(:str, "/specs."),
              s(:begin,
                s(:ivar, :@marshal_version)),
              s(:str, ".gz")),
            s(:send,
              s(:lvar, :specs_dump_gz), :string)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--add"),
              s(:dstr,
                s(:begin,
                  s(:ivar, :@new_repo))))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@gem_repo),
              s(:ivar, :@new_repo)),
            s(:send,
              s(:const, nil, :Gem), :sources)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:begin,
                s(:ivar, :@new_repo)),
              s(:str, " added to sources\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_add_nonexistent_source,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:dstr,
              s(:str, "http://beta-gems.example.com/specs."),
              s(:begin,
                s(:ivar, :@marshal_version)),
              s(:str, ".gz"))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:lvar, :uri),
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:send, nil, :raise,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                  s(:str, "it died"),
                  s(:lvar, :uri))))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--add"),
              s(:str, "http://beta-gems.example.com"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Error fetching http://beta-gems.example.com:\n"),
              s(:str, "\tit died ("),
              s(:begin,
                s(:lvar, :uri)),
              s(:str, ")\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_add_redundant_source,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--add"),
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_repo))))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@gem_repo)),
            s(:send,
              s(:const, nil, :Gem), :sources)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "source "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, " already present in the cache\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_add_http_rubygems_org,
        s(:args),
        s(:begin,
          s(:lvasgn, :http_rubygems_org,
            s(:str, "http://rubygems.org")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :specs,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :map),
              s(:args,
                s(:arg, :spec)),
              s(:array,
                s(:send,
                  s(:lvar, :spec), :name),
                s(:send,
                  s(:lvar, :spec), :version),
                s(:send,
                  s(:lvar, :spec), :original_platform)))),
          s(:lvasgn, :specs_dump_gz,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Zlib), :GzipWriter), :wrap,
              s(:lvar, :specs_dump_gz)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :specs),
              s(:lvar, :io))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:lvar, :http_rubygems_org)),
              s(:str, "/specs."),
              s(:begin,
                s(:ivar, :@marshal_version)),
              s(:str, ".gz")),
            s(:send,
              s(:lvar, :specs_dump_gz), :string)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--add"),
              s(:dstr,
                s(:begin,
                  s(:lvar, :http_rubygems_org))))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@gem_repo)),
            s(:send,
              s(:const, nil, :Gem), :sources)),
          s(:lvasgn, :expected,
            s(:dstr)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_add_bad_uri,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--add"),
              s(:str, "beta-gems.example.com"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@gem_repo)),
            s(:send,
              s(:const, nil, :Gem), :sources)),
          s(:lvasgn, :expected,
            s(:str, "beta-gems.example.com is not a URI\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_clear_all,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--clear-all"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:str, "*** Removed specs cache ***\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :Gem), :spec_cache_dir)),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :dir)),
            s(:str, "cache dir removed")))),
      s(:def, :test_execute_list,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--list"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "*** CURRENT SOURCES ***\n"),
              s(:str, "\n"),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remove,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--remove"),
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_repo))))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, " removed from sources\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remove_no_network,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--remove"),
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_repo))))),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "Marshal."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version))),
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError)))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, " removed from sources\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_update,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--update"))),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 1))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "source cache successfully updated\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))))))
