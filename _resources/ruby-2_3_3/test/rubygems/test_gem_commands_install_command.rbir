s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/install_command")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/rdoc")),
  s(:class,
    s(:const, nil, :TestGemCommandsInstallCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :common_installer_setup),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :InstallCommand), :new)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :document),
            s(:array)),
          s(:ivasgn, :@gemdeps,
            s(:str, "tmp_install_gemdeps")),
          s(:ivasgn, :@orig_args,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :build_args)),
          s(:send, nil, :common_installer_setup))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :common_installer_teardown),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Command), :build_args=,
            s(:ivar, :@orig_args)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:ivar, :@gemdeps)),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:ivar, :@gemdeps)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gemdeps)),
                s(:str, ".lock"))),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gemdeps)),
                s(:str, ".lock"))), nil))),
      s(:def, :test_execute_exclude_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:str, "2.pre")))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_execute_explicit_version_includes_prerelease,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:str, "2.a"))))),
          s(:lvasgn, :a2_pre,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "a-2.a"))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:send,
                s(:lvar, :a2_pre), :name),
              s(:str, "--version"),
              s(:send,
                s(:send,
                  s(:lvar, :a2_pre), :version), :to_s),
              s(:str, "--no-ri"),
              s(:str, "--no-rdoc"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :prerelease))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :options), :[],
                s(:sym, :version)), :satisfied_by?,
              s(:send,
                s(:lvar, :a2_pre), :version))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2.a")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_execute_local,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:str, "a-2")), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :orig_dir,
                s(:send,
                  s(:const, nil, :Dir), :pwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                        s(:send,
                          s(:ivar, :@ui), :error)),
                      s(:args),
                      s(:send,
                        s(:ivar, :@cmd), :execute))),
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :orig_dir)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "1 gem installed"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_no_user_install,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :skip,
              s(:str, "skipped on MS Windows (chmod has no effect)")), nil),
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :user_install),
            s(:false)),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:str, "a-2")), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :orig_dir,
                s(:send,
                  s(:const, nil, :Dir), :pwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :FileUtils), :chmod,
                      s(:int, 493),
                      s(:ivar, :@userhome)),
                    s(:send,
                      s(:const, nil, :FileUtils), :chmod,
                      s(:int, 365),
                      s(:ivar, :@gemhome)),
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const, nil, :Gem), :FilePermissionError)),
                      s(:args),
                      s(:send,
                        s(:ivar, :@cmd), :execute))),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:lvar, :orig_dir)),
                    s(:send,
                      s(:const, nil, :FileUtils), :chmod,
                      s(:int, 493),
                      s(:ivar, :@gemhome))))))))),
      s(:def, :test_execute_local_missing,
        s(:args),
        s(:begin,
          s(:send, nil, :spec_fetcher),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "no_such_gem"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :MockGemUi), :TermError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@cmd), :execute))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :e), :exit_code)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ould not find a valid gem 'no_such_gem'"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_no_gem,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)))),
      s(:def, :test_execute_nonexistent,
        s(:args),
        s(:begin,
          s(:send, nil, :spec_fetcher),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "nonexistent"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :MockGemUi), :TermError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@cmd), :execute))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :e), :exit_code)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ould not find a valid gem 'nonexistent'"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_bad_source,
        s(:args),
        s(:begin,
          s(:send, nil, :spec_fetcher),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :spec_cache_dir),
              s(:str, "not-there.nothing%80"),
              s(:str, "latest_specs.4.8"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :path))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :path),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:array)))),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:array,
              s(:str, "http://not-there.nothing"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "nonexistent"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :MockGemUi), :TermError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@cmd), :execute))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :e), :exit_code)))),
          s(:lvasgn, :errs,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :error), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "ould not find a valid gem 'nonexistent'"),
              s(:regopt)),
            s(:send,
              s(:lvar, :errs), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Unable to download data from http://not-there.nothing"),
              s(:regopt)),
            s(:send,
              s(:lvar, :errs), :shift)))),
      s(:def, :test_execute_nonexistent_hint_disabled,
        s(:args),
        s(:begin,
          s(:lvasgn, :misspelled,
            s(:str, "nonexistent_with_hint")),
          s(:lvasgn, :correctly_spelled,
            s(:str, "non_existent_with_hint")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:lvar, :correctly_spelled),
              s(:int, 2))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:lvar, :misspelled))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :suggest_alternate),
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :MockGemUi), :TermError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@cmd), :execute))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :e), :exit_code)))),
          s(:lvasgn, :expected,
            s(:str, "ERROR:  Could not find a valid gem 'nonexistent_with_hint' (>= 0) in any repository\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_nonexistent_with_hint,
        s(:args),
        s(:begin,
          s(:lvasgn, :misspelled,
            s(:str, "nonexistent_with_hint")),
          s(:lvasgn, :correctly_spelled,
            s(:str, "non_existent_with_hint")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:lvar, :correctly_spelled),
              s(:int, 2))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:lvar, :misspelled))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :MockGemUi), :TermError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@cmd), :execute))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :e), :exit_code)))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "ERROR:  Could not find a valid gem 'nonexistent_with_hint' (>= 0) in any repository\n"),
              s(:str, "ERROR:  Possible alternatives: non_existent_with_hint\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_nonexistent_with_dashes,
        s(:args),
        s(:begin,
          s(:lvasgn, :misspelled,
            s(:str, "non-existent_with-hint")),
          s(:lvasgn, :correctly_spelled,
            s(:str, "nonexistent-with_hint")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:lvar, :correctly_spelled),
              s(:int, 2))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:lvar, :misspelled))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :MockGemUi), :TermError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@cmd), :execute))),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :e), :exit_code)))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "ERROR:  Could not find a valid gem 'non-existent_with-hint' (>= 0) in any repository"),
              s(:str, "ERROR:  Possible alternatives: nonexistent-with_hint"))),
          s(:lvasgn, :output,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :error), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :output)))),
      s(:def, :test_execute_conflicting_install_options,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :user_install),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :install_dir),
            s(:str, "whatever")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :expected,
            s(:str, "ERROR:  Use --install-dir or --user-install but not both\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_prerelease_skipped_when_no_flag_set,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:str, "3.a")))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :prerelease),
            s(:false)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_execute_prerelease_wins_over_previous_ver,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:str, "2.a")))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :prerelease),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2.a")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_execute_prerelease_skipped_when_non_pre_available,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:str, "2.pre")),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :prerelease),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_execute_rdoc,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :<=,
              s(:str, "1.8.7")),
            s(:send, nil, :skip), nil),
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)))),
          s(:send,
            s(:const, nil, :Gem), :done_installing,
            s(:block_pass,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RDoc), :method,
                s(:sym, :generation_hook)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :document),
            s(:array,
              s(:str, "rdoc"),
              s(:str, "ri"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:lvasgn, :a2,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "a-2"))),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:lvar, :a2), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :old,
                s(:send,
                  s(:const, nil, :Dir), :getwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                        s(:send,
                          s(:ivar, :@ui), :error)),
                      s(:args),
                      s(:send,
                        s(:ivar, :@cmd), :execute))),
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :old)))))),
          s(:send, nil, :wait_for_child_process_to_exit),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a2), :doc_dir),
              s(:str, "ri"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :a2), :doc_dir),
              s(:str, "rdoc"))))),
      s(:def, :test_execute_saves_build_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)))),
          s(:lvasgn, :args,
            s(:array,
              s(:str, "--with-awesome=true"),
              s(:str, "--more-awesome=yes"))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Command), :build_args=,
            s(:lvar, :args)),
          s(:lvasgn, :a2,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "a-2"))),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:lvar, :a2), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :old,
                s(:send,
                  s(:const, nil, :Dir), :getwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                        s(:send,
                          s(:ivar, :@ui), :error)),
                      s(:args),
                      s(:send,
                        s(:ivar, :@cmd), :execute))),
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :old)))))),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :a2), :build_info_file)),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :path)),
          s(:send, nil, :assert_equal,
            s(:lvar, :args),
            s(:send,
              s(:lvar, :a2), :build_args)))),
      s(:def, :test_execute_remote,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "1 gem installed"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_remote_ignores_files,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 2))))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:lvasgn, :a1,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "a-1"))),
          s(:lvasgn, :a2,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "a-2"))),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:lvar, :a2), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "gems/"),
              s(:begin,
                s(:send,
                  s(:lvar, :a2), :file_name))),
            s(:send, nil, :read_binary,
              s(:send,
                s(:lvar, :a1), :cache_file))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:send,
                s(:lvar, :a2), :name))),
          s(:lvasgn, :gemdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"))),
          s(:lvasgn, :a2_gemspec,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemdir),
              s(:str, "a-2.gemspec"))),
          s(:lvasgn, :a1_gemspec,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemdir),
              s(:str, "a-1.gemspec"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:lvar, :a1_gemspec)),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:lvar, :a2_gemspec)),
          s(:lvasgn, :start,
            s(:send,
              s(:const, nil, :Dir), :[],
              s(:dstr,
                s(:begin,
                  s(:lvar, :gemdir)),
                s(:str, "/*")))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:ivar, :@tempdir)),
              s(:args),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                  s(:send,
                    s(:ivar, :@ui), :error)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "1 gem installed"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:lvasgn, :fin,
            s(:send,
              s(:const, nil, :Dir), :[],
              s(:dstr,
                s(:begin,
                  s(:lvar, :gemdir)),
                s(:str, "/*")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:lvar, :a1_gemspec)),
            s(:send,
              s(:lvar, :fin), :-,
              s(:lvar, :start))))),
      s(:def, :test_execute_two,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "b"),
                  s(:int, 2))))),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:str, "a-2")), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:str, "b-2")), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :orig_dir,
                s(:send,
                  s(:const, nil, :Dir), :pwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                        s(:send,
                          s(:ivar, :@ui), :error)),
                      s(:args),
                      s(:send,
                        s(:ivar, :@cmd), :execute))),
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :orig_dir)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2"),
              s(:str, "b-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "2 gems installed"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_two_version,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :version),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, "> 1"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :MockGemUi), :TermError)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@cmd), :execute))),
              s(:send, nil, :assert_equal,
                s(:int, 1),
                s(:send,
                  s(:lvar, :e), :exit_code)))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@cmd), :installed_specs)),
          s(:lvasgn, :msg,
            s(:str, "ERROR:  Can't use --version w/ multiple gems. Use name:ver instead.")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:lvar, :msg),
            s(:send,
              s(:send,
                s(:ivar, :@ui), :error), :chomp)))),
      s(:def, :test_execute_conservative,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "b"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :conservative),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :orig_dir,
                s(:send,
                  s(:const, nil, :Dir), :pwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :MockGemUi), :SystemExitException)),
                      s(:args),
                      s(:send,
                        s(:ivar, :@cmd), :execute))),
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :orig_dir)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :assert_match,
            s(:str, "1 gem installed"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_install_gem_ignore_dependencies_both,
        s(:args),
        s(:begin,
          s(:lvasgn, :done_installing,
            s(:false)),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :done_installing),
            s(:args),
            s(:lvasgn, :done_installing,
              s(:true))),
          s(:lvasgn, :spec,
            s(:send, nil, :quick_spec,
              s(:str, "a"),
              s(:int, 2))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :spec)),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:lvar, :spec), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :ignore_dependencies),
            s(:true)),
          s(:send,
            s(:ivar, :@cmd), :install_gem,
            s(:str, "a"),
            s(:str, ">= 0")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))),
          s(:send, nil, :assert,
            s(:lvar, :done_installing),
            s(:str, "documentation was not generated")))),
      s(:def, :test_install_gem_ignore_dependencies_remote,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :ignore_dependencies),
            s(:true)),
          s(:send,
            s(:ivar, :@cmd), :install_gem,
            s(:str, "a"),
            s(:str, ">= 0")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))),
      s(:def, :test_install_gem_ignore_dependencies_specific_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :quick_spec,
              s(:str, "a"),
              s(:int, 2))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :spec)),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:lvar, :spec), :cache_file),
            s(:ivar, :@tempdir)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :ignore_dependencies),
            s(:true)),
          s(:send,
            s(:ivar, :@cmd), :install_gem,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:send,
                s(:lvar, :spec), :file_name)),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))))),
      s(:def, :test_parses_requirement_from_gemname,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "b"),
                s(:int, 2)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:lvasgn, :req,
            s(:str, "a:10.0")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:lvar, :req))),
          s(:lvasgn, :e,
            s(:nil)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :orig_dir,
                s(:send,
                  s(:const, nil, :Dir), :pwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:lvasgn, :e,
                      s(:block,
                        s(:send, nil, :assert_raises,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :MockGemUi), :TermError)),
                        s(:args),
                        s(:send,
                          s(:ivar, :@cmd), :execute)))),
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :orig_dir)))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :e), :exit_code)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Could not find a valid gem 'a' \\(= 10.0\\)"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_show_errors_on_failure,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:array,
              s(:str, "http://not-there.nothing"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "blah"))),
          s(:lvasgn, :e,
            s(:nil)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :orig_dir,
                s(:send,
                  s(:const, nil, :Dir), :pwd)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :chdir,
                      s(:ivar, :@tempdir)),
                    s(:lvasgn, :e,
                      s(:block,
                        s(:send, nil, :assert_raises,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :MockGemUi), :TermError)),
                        s(:args),
                        s(:send,
                          s(:ivar, :@cmd), :execute)))),
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :orig_dir)))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :e), :exit_code)),
          s(:send, nil, :assert_match,
            s(:str, "Unable to download data"),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_show_source_problems_even_on_success,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "a"),
              s(:int, 2))),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :<<,
            s(:str, "http://nonexistent.example")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "1 gem installed"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:lvasgn, :e,
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:lvasgn, :x,
            s(:str, "WARNING:  Unable to pull data from 'http://nonexistent.example': no data for http://nonexistent.example/specs.4.8.gz (http://nonexistent.example/specs.4.8.gz)\n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :x),
            s(:lvar, :e)))),
      s(:def, :test_execute_uses_from_a_gemdeps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'a'"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "Using a (2)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gemdeps)),
                s(:str, ".lock")))))),
      s(:def, :test_execute_uses_from_a_gemdeps_with_no_lock,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'a'"))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--no-lock"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "Using a (2)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@gemdeps)),
                  s(:str, ".lock"))), :!)))),
      s(:def, :test_execute_installs_from_a_gemdeps_with_conservative,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:int, 1)))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'a'"))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--conservative"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "Using a (1)"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_installs_from_a_gemdeps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "a"),
              s(:int, 2))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'a'"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_match,
            s(:str, "Installing a (2)"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_installs_deps_a_gemdeps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "q"),
                s(:str, "1.0")),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "r"),
                s(:str, "2.0"),
                s(:hash,
                  s(:pair,
                    s(:str, "q"),
                    s(:nil)))))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'r'"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :names,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "q-1.0"),
              s(:str, "r-2.0")),
            s(:lvar, :names)),
          s(:send, nil, :assert_match,
            s(:str, "Installing q (1.0)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, "Installing r (2.0)"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_uses_deps_a_gemdeps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "r"),
                s(:str, "2.0"),
                s(:hash,
                  s(:pair,
                    s(:str, "q"),
                    s(:nil)))),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "q"),
                s(:str, "1.0")))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'r'"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :names,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "r-2.0")),
            s(:lvar, :names)),
          s(:send, nil, :assert_match,
            s(:str, "Using q (1.0)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, "Installing r (2.0)"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_installs_deps_a_gemdeps_into_a_path,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "q"),
                s(:str, "1.0")),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "r"),
                s(:str, "2.0"),
                s(:hash,
                  s(:pair,
                    s(:str, "q"),
                    s(:nil)))))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'r'"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :install_dir),
            s(:str, "gf-path")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :names,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "q-1.0"),
              s(:str, "r-2.0")),
            s(:lvar, :names)),
          s(:send, nil, :assert_match,
            s(:str, "Installing q (1.0)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, "Installing r (2.0)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:str, "gf-path/specifications/q-1.0.gemspec")),
            s(:str, "not installed")),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:str, "gf-path/specifications/r-2.0.gemspec")),
            s(:str, "not installed")))),
      s(:def, :test_execute_with_gemdeps_path_ignores_system,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :download,
                  s(:str, "q"),
                  s(:str, "1.0")),
                s(:send,
                  s(:lvar, :fetcher), :download,
                  s(:str, "r"),
                  s(:str, "2.0"),
                  s(:hash,
                    s(:pair,
                      s(:str, "q"),
                      s(:nil))))))),
          s(:send, nil, :install_specs,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "q-1.0"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'r'"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :install_dir),
            s(:str, "gf-path")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :names,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "q-1.0"),
              s(:str, "r-2.0")),
            s(:lvar, :names)),
          s(:send, nil, :assert_match,
            s(:str, "Installing q (1.0)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, "Installing r (2.0)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:str, "gf-path/specifications/q-1.0.gemspec")),
            s(:str, "not installed")),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:str, "gf-path/specifications/r-2.0.gemspec")),
            s(:str, "not installed")))),
      s(:def, :test_execute_uses_deps_a_gemdeps_with_a_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "q"),
                  s(:str, "1.0")),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "r"),
                  s(:str, "2.0"),
                  s(:hash,
                    s(:pair,
                      s(:str, "q"),
                      s(:nil))))))),
          s(:lvasgn, :i,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Installer), :at,
              s(:send,
                s(:send,
                  s(:lvar, :specs), :[],
                  s(:str, "q-1.0")), :cache_file),
              s(:hash,
                s(:pair,
                  s(:sym, :install_dir),
                  s(:str, "gf-path"))))),
          s(:send,
            s(:lvar, :i), :install),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:str, "gf-path/specifications/q-1.0.gemspec")),
            s(:str, "not installed")),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:ivar, :@gemdeps),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, "gem 'r'"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :install_dir),
            s(:str, "gf-path")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :gemdeps),
            s(:ivar, :@gemdeps)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :SystemExitException),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :names,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :installed_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "r-2.0")),
            s(:lvar, :names)),
          s(:send, nil, :assert_match,
            s(:str, "Using q (1.0)"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, "Installing r (2.0)"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_handle_options_file,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "Gemfile")),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-g"),
              s(:str, "Gemfile"))),
          s(:send, nil, :assert_equal,
            s(:str, "Gemfile"),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :gemdeps))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:str, "Gemfile")),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "gem.deps.rb")),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--file"),
              s(:str, "gem.deps.rb"))),
          s(:send, nil, :assert_equal,
            s(:str, "gem.deps.rb"),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :gemdeps))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:str, "gem.deps.rb")),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "Isolate")),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-g"))),
          s(:send, nil, :assert_equal,
            s(:str, "Isolate"),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :gemdeps))),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "Gemfile")),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-g"))),
          s(:send, nil, :assert_equal,
            s(:str, "Gemfile"),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :gemdeps))),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:str, "gem.deps.rb")),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-g"))),
          s(:send, nil, :assert_equal,
            s(:str, "gem.deps.rb"),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :gemdeps))))),
      s(:def, :test_handle_options_suggest,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :suggest_alternate))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--no-suggestions"))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :suggest_alternate))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--suggestions"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :suggest_alternate))))),
      s(:def, :test_handle_options_without,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--without"),
              s(:str, "test"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :test)),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :without_groups))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--without"),
              s(:str, "test,development"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :test),
              s(:sym, :development)),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :without_groups))))))))
