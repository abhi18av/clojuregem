s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set/lockfile")),
  s(:class,
    s(:const, nil, :TestGemRequestSetLockfile),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:ivasgn, :@fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :FakeFetcher), :new))),
          s(:send, nil, :util_set_arch,
            s(:str, "i686-darwin8.10.1")),
          s(:ivasgn, :@set,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:ivasgn, :@git_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :GitSet), :new)),
          s(:ivasgn, :@vendor_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :VendorSet), :new)),
          s(:send,
            s(:ivar, :@set), :instance_variable_set,
            s(:sym, :@git_set),
            s(:ivar, :@git_set)),
          s(:send,
            s(:ivar, :@set), :instance_variable_set,
            s(:sym, :@vendor_set),
            s(:ivar, :@vendor_set)),
          s(:ivasgn, :@gem_deps_file,
            s(:str, "gem.deps.rb")))),
      s(:def, :lockfile,
        s(:args),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :RequestSet), :Lockfile), :build,
          s(:ivar, :@set),
          s(:ivar, :@gem_deps_file))),
      s(:def, :write_lockfile,
        s(:args,
          s(:arg, :lockfile)),
        s(:begin,
          s(:ivasgn, :@lock_file,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_deps_file)),
                s(:str, ".lock")))),
          s(:block,
            s(:send, nil, :open,
              s(:ivar, :@lock_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:lvar, :lockfile))))),
      s(:def, :test_add_DEPENDENCIES,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:block,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "b")))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:send,
            s(:ivar, :@set), :resolve),
          s(:lvasgn, :out,
            s(:array)),
          s(:send,
            s(:send, nil, :lockfile), :add_DEPENDENCIES,
            s(:lvar, :out)),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "DEPENDENCIES"),
              s(:str, "  a"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_DEPENDENCIES_from_gem_deps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:block,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "b")))),
          s(:lvasgn, :dependencies,
            s(:hash,
              s(:pair,
                s(:str, "a"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :new,
                  s(:str, "~> 2.0"))))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:send,
            s(:ivar, :@set), :resolve),
          s(:ivasgn, :@lockfile,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :RequestSet), :Lockfile), :new,
              s(:ivar, :@set),
              s(:ivar, :@gem_deps_file),
              s(:lvar, :dependencies))),
          s(:lvasgn, :out,
            s(:array)),
          s(:send,
            s(:ivar, :@lockfile), :add_DEPENDENCIES,
            s(:lvar, :out)),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "DEPENDENCIES"),
              s(:str, "  a (~> 2.0)"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_GEM,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :add_dependency,
                    s(:str, "b")),
                  s(:send,
                    s(:lvar, :s), :add_development_dependency,
                    s(:str, "c")))),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "bundler"),
                s(:int, 1)))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "bundler")),
          s(:send,
            s(:ivar, :@set), :resolve),
          s(:lvasgn, :out,
            s(:array)),
          s(:send,
            s(:send, nil, :lockfile), :add_GEM,
            s(:lvar, :out),
            s(:send,
              s(:send, nil, :lockfile), :spec_groups)),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "GEM"),
              s(:str, "  remote: http://gems.example.com/"),
              s(:str, "  specs:"),
              s(:str, "    a (2)"),
              s(:str, "      b"),
              s(:str, "    b (2)"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_add_PLATFORMS,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :add_dependency,
                  s(:str, "b"))),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "b"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :CURRENT))))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:send,
            s(:ivar, :@set), :resolve),
          s(:lvasgn, :out,
            s(:array)),
          s(:send,
            s(:send, nil, :lockfile), :add_PLATFORMS,
            s(:lvar, :out)),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "PLATFORMS"),
              s(:str, "  ruby"),
              s(:str, "  x86-darwin-8"),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :out)))),
      s(:def, :test_relative_path_from,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:send,
              s(:send, nil, :lockfile), :relative_path_from,
              s(:str, "/foo"),
              s(:str, "/foo/bar"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "/foo")),
            s(:lvar, :path)),
          s(:lvasgn, :path,
            s(:send,
              s(:send, nil, :lockfile), :relative_path_from,
              s(:str, "/foo"),
              s(:str, "/foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "."),
            s(:lvar, :path)))),
      s(:def, :test_to_s_gem,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 2))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_gem_dependency,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0")),
                  s(:pair,
                    s(:str, "b"),
                    s(:str, ">= 0")))),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "c"),
                s(:int, 2)))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b\n"),
              s(:str, "      c\n"),
              s(:str, "    b (2)\n"),
              s(:str, "    c (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"),
              s(:str, "  b\n"),
              s(:str, "  c\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_gem_dependency_non_default,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, ">= 1")))),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "b")),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b (>= 1)\n"),
              s(:str, "    b (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"),
              s(:str, "  b\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_gem_dependency_requirement,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, ">= 0")))),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a"),
            s(:str, ">= 1")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "      b\n"),
              s(:str, "    b (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a (>= 1)\n"),
              s(:str, "  b\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_gem_path,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :version),
              s(:lvasgn, :directory)),
            s(:send, nil, :vendor_gem)),
          s(:send,
            s(:ivar, :@vendor_set), :add_vendor_gem,
            s(:lvar, :name),
            s(:lvar, :directory)),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "PATH\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:lvar, :directory)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    "),
              s(:begin,
                s(:lvar, :name)),
              s(:str, " ("),
              s(:begin,
                s(:lvar, :version)),
              s(:str, ")\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_gem_path_absolute,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :version),
              s(:lvasgn, :directory)),
            s(:send, nil, :vendor_gem)),
          s(:send,
            s(:ivar, :@vendor_set), :add_vendor_gem,
            s(:lvar, :name),
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :directory))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "PATH\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:lvar, :directory)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    "),
              s(:begin,
                s(:lvar, :name)),
              s(:str, " ("),
              s(:begin,
                s(:lvar, :version)),
              s(:str, ")\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_gem_platform,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:block,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local)))),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2-"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local)),
              s(:str, ")\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_gem_source,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "a"),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :spec_fetcher,
              s(:str, "http://other.example/")),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "b"),
              s(:int, 2))),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :<<,
            s(:str, "http://other.example/")),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "a")),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "b")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "GEM\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (2)\n"),
              s(:str, "\n"),
              s(:str, "GEM\n"),
              s(:str, "  remote: http://other.example/\n"),
              s(:str, "  specs:\n"),
              s(:str, "    b (2)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a\n"),
              s(:str, "  b\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_to_s_git,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :_),
              s(:lvasgn, :repository)),
            s(:send, nil, :git_gem)),
          s(:lvasgn, :head,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :repository)),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :mkdir,
                s(:str, "b")),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:str, "b")),
                s(:args),
                s(:begin,
                  s(:lvasgn, :b,
                    s(:block,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :Specification), :new,
                        s(:str, "b"),
                        s(:int, 1)),
                      s(:args,
                        s(:arg, :s)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :add_dependency,
                          s(:str, "a"),
                          s(:str, "~> 1.0")),
                        s(:send,
                          s(:lvar, :s), :add_dependency,
                          s(:str, "c"),
                          s(:str, "~> 1.0"))))),
                  s(:block,
                    s(:send, nil, :open,
                      s(:str, "b.gemspec"),
                      s(:str, "w")),
                    s(:args,
                      s(:arg, :io)),
                    s(:send,
                      s(:lvar, :io), :write,
                      s(:send,
                        s(:lvar, :b), :to_ruby))),
                  s(:send, nil, :system,
                    s(:ivar, :@git),
                    s(:str, "add"),
                    s(:str, "b.gemspec")),
                  s(:send, nil, :system,
                    s(:ivar, :@git),
                    s(:str, "commit"),
                    s(:str, "--quiet"),
                    s(:str, "-m"),
                    s(:str, "add b/b.gemspec")))),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir,
                s(:str, "c")),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:str, "c")),
                s(:args),
                s(:begin,
                  s(:lvasgn, :c,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Specification), :new,
                      s(:str, "c"),
                      s(:int, 1))),
                  s(:block,
                    s(:send, nil, :open,
                      s(:str, "c.gemspec"),
                      s(:str, "w")),
                    s(:args,
                      s(:arg, :io)),
                    s(:send,
                      s(:lvar, :io), :write,
                      s(:send,
                        s(:lvar, :c), :to_ruby))),
                  s(:send, nil, :system,
                    s(:ivar, :@git),
                    s(:str, "add"),
                    s(:str, "c.gemspec")),
                  s(:send, nil, :system,
                    s(:ivar, :@git),
                    s(:str, "commit"),
                    s(:str, "--quiet"),
                    s(:str, "-m"),
                    s(:str, "add c/c.gemspec")))),
              s(:lvasgn, :head,
                s(:send,
                  s(:xstr,
                    s(:begin,
                      s(:ivar, :@git)),
                    s(:str, " rev-parse HEAD")), :strip)))),
          s(:send,
            s(:ivar, :@git_set), :add_git_gem,
            s(:str, "a"),
            s(:lvar, :repository),
            s(:str, "HEAD"),
            s(:true)),
          s(:send,
            s(:ivar, :@git_set), :add_git_gem,
            s(:str, "b"),
            s(:lvar, :repository),
            s(:str, "HEAD"),
            s(:true)),
          s(:send,
            s(:ivar, :@git_set), :add_git_gem,
            s(:str, "c"),
            s(:lvar, :repository),
            s(:str, "HEAD"),
            s(:true)),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "b")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "GIT\n"),
              s(:str, "  remote: "),
              s(:begin,
                s(:lvar, :repository)),
              s(:str, "\n"),
              s(:str, "  revision: "),
              s(:begin,
                s(:lvar, :head)),
              s(:str, "\n"),
              s(:str, "  specs:\n"),
              s(:str, "    a (1)\n"),
              s(:str, "    b (1)\n"),
              s(:str, "      a (~> 1.0)\n"),
              s(:str, "      c (~> 1.0)\n"),
              s(:str, "    c (1)\n"),
              s(:str, "\n"),
              s(:str, "PLATFORMS\n"),
              s(:str, "  ruby\n"),
              s(:str, "\n"),
              s(:str, "DEPENDENCIES\n"),
              s(:str, "  a!\n"),
              s(:str, "  b!\n"),
              s(:str, "  c!\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send, nil, :lockfile), :to_s)))),
      s(:def, :test_write,
        s(:args),
        s(:begin,
          s(:send,
            s(:send, nil, :lockfile), :write),
          s(:lvasgn, :gem_deps_lock_file,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_deps_file)),
              s(:str, ".lock"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :gem_deps_lock_file)),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :gem_deps_lock_file))))),
      s(:def, :test_write_error,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@set), :gem,
            s(:str, "nonexistent")),
          s(:lvasgn, :gem_deps_lock_file,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_deps_file)),
              s(:str, ".lock"))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :gem_deps_lock_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "hello"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
            s(:args),
            s(:send,
              s(:send, nil, :lockfile), :write)),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :gem_deps_lock_file)),
          s(:send, nil, :assert_equal,
            s(:str, "hello"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :gem_deps_lock_file))))))))
