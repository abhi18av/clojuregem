s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/dependency_command")),
  s(:class,
    s(:const, nil, :TestGemCommandsDependencyCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :DependencyCommand), :new)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)))),
      s(:def, :test_execute,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "foo")),
            s(:args,
              s(:arg, :gem)),
            s(:begin,
              s(:send,
                s(:lvar, :gem), :add_dependency,
                s(:str, "bar"),
                s(:str, "> 1")),
              s(:send,
                s(:lvar, :gem), :add_dependency,
                s(:str, "baz"),
                s(:str, "> 1")))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "Gem foo-2\n  bar (> 1)\n  baz (> 1)\n\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_no_args,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:send, nil, :new_spec,
              s(:str, "x"),
              s(:str, "2"))),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "dep_x"),
                s(:int, 1),
                s(:hash,
                  s(:pair,
                    s(:str, "x"),
                    s(:str, ">= 1")))),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Gem a-1\n"),
              s(:str, "\n"),
              s(:str, "Gem a-2.a\n"),
              s(:str, "\n"),
              s(:str, "Gem dep_x-1\n"),
              s(:str, "  x (>= 1)\n"),
              s(:str, "\n"),
              s(:str, "Gem pl-1-x86-linux\n"),
              s(:str, "\n"),
              s(:str, "Gem x-2\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_no_match,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, "No gems found matching foo (>= 0)\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_pipe_format,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "foo")),
              s(:args,
                s(:arg, :gem)),
              s(:send,
                s(:lvar, :gem), :add_dependency,
                s(:str, "bar"),
                s(:str, "> 1")))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "bar"),
              s(:int, 2))),
          s(:send, nil, :install_specs,
            s(:lvar, :spec)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :pipe_format),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "bar --version '> 1'\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_regexp,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a_evil"),
                s(:int, 9)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "/[ab]/"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Gem a-1\n"),
              s(:str, "\n"),
              s(:str, "Gem a-2.a\n"),
              s(:str, "\n"),
              s(:str, "Gem a_evil-9\n"),
              s(:str, "\n"),
              s(:str, "Gem b-2\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_reverse,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "foo")),
            s(:args,
              s(:arg, :gem)),
            s(:send,
              s(:lvar, :gem), :add_dependency,
              s(:str, "bar"),
              s(:str, "> 1"))),
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "baz")),
            s(:args,
              s(:arg, :gem)),
            s(:send,
              s(:lvar, :gem), :add_dependency,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :reverse_dependencies),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Gem foo-2\n"),
              s(:str, "  bar (> 1)\n"),
              s(:str, "  Used by\n"),
              s(:str, "    baz-2 (foo (>= 0))\n"),
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_reverse_remote,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :reverse_dependencies),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:lvasgn, :expected,
            s(:str, "ERROR:  Only reverse dependencies for local gems are supported.\n")),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remote,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:send, nil, :new_spec,
              s(:str, "bar"),
              s(:str, "2"))),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "foo"),
              s(:int, 2),
              s(:hash,
                s(:pair,
                  s(:str, "bar"),
                  s(:str, "> 1"))))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "Gem foo-2\n  bar (> 1)\n\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remote_version,
        s(:args),
        s(:begin,
          s(:ivasgn, :@fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :FakeFetcher), :new)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:ivar, :@fetcher)),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :version),
            s(:send, nil, :req,
              s(:str, "= 1"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "Gem a-1\n\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:str, "2.a"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :prerelease),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "Gem a-2.a\n\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))))))
