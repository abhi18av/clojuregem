s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/source")),
  s(:class,
    s(:const, nil, :TestGemSourceSpecificFile),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:masgn,
            s(:mlhs,
              s(:ivasgn, :@a),
              s(:ivasgn, :@a_gem)),
            s(:send, nil, :util_gem,
              s(:str, "a"),
              s(:str, "1"))),
          s(:ivasgn, :@sf,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :SpecificFile), :new,
              s(:ivar, :@a_gem))))),
      s(:def, :test_path,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@a_gem),
          s(:send,
            s(:ivar, :@sf), :path))),
      s(:def, :test_spec,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@a),
          s(:send,
            s(:ivar, :@sf), :spec))),
      s(:def, :test_load_specs,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:send,
              s(:ivar, :@a), :name_tuple)),
          s(:send,
            s(:ivar, :@sf), :load_specs))),
      s(:def, :test_fetch_spec,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@a),
          s(:send,
            s(:ivar, :@sf), :fetch_spec,
            s(:send,
              s(:ivar, :@a), :name_tuple)))),
      s(:def, :test_fetch_spec_fails_on_unknown_name,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raises,
            s(:const,
              s(:const, nil, :Gem), :Exception)),
          s(:args),
          s(:send,
            s(:ivar, :@sf), :fetch_spec,
            s(:nil)))),
      s(:def, :test_download,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@a_gem),
          s(:send,
            s(:ivar, :@sf), :download,
            s(:ivar, :@a)))),
      s(:def, :test_spaceship,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :quick_gem,
              s(:str, "a"),
              s(:str, "1"))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :a1)),
          s(:lvasgn, :remote,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :specific,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :SpecificFile), :new,
              s(:send,
                s(:lvar, :a1), :cache_file))),
          s(:lvasgn, :installed,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Installed), :new)),
          s(:lvasgn, :local,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Local), :new)),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :specific), :<=>,
              s(:lvar, :specific)),
            s(:str, "specific  <=> specific")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :remote), :<=>,
              s(:lvar, :specific)),
            s(:str, "remote    <=> specific")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :specific), :<=>,
              s(:lvar, :remote)),
            s(:str, "specific  <=> remote")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :specific), :<=>,
              s(:lvar, :local)),
            s(:str, "specific  <=> local")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :local), :<=>,
              s(:lvar, :specific)),
            s(:str, "local     <=> specific")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :specific), :<=>,
              s(:lvar, :installed)),
            s(:str, "specific  <=> installed")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :installed), :<=>,
              s(:lvar, :specific)),
            s(:str, "installed <=> specific")),
          s(:lvasgn, :a2,
            s(:send, nil, :quick_gem,
              s(:str, "a"),
              s(:str, "2"))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :a2)),
          s(:lvasgn, :b1,
            s(:send, nil, :quick_gem,
              s(:str, "b"),
              s(:str, "1"))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :b1)),
          s(:lvasgn, :a1_source,
            s(:lvar, :specific)),
          s(:lvasgn, :a2_source,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :SpecificFile), :new,
              s(:send,
                s(:lvar, :a2), :cache_file))),
          s(:lvasgn, :b1_source,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :SpecificFile), :new,
              s(:send,
                s(:lvar, :b1), :cache_file))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :a1_source), :<=>,
              s(:lvar, :b1_source)),
            s(:str, "a1_source <=> b1_source")),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :a1_source), :<=>,
              s(:lvar, :a2_source)),
            s(:str, "a1_source <=> a2_source")),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :a1_source), :<=>,
              s(:lvar, :a1_source)),
            s(:str, "a1_source <=> a1_source")),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :a2_source), :<=>,
              s(:lvar, :a1_source)),
            s(:str, "a2_source <=> a1_source")))))))
