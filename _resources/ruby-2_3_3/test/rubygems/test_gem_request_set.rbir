s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set")),
  s(:class,
    s(:const, nil, :TestGemRequestSet),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:ivasgn, :@fetcher,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :FakeFetcher), :new))),
          s(:ivasgn, :@DR,
            s(:const,
              s(:const, nil, :Gem), :Resolver)))),
      s(:def, :test_gem,
        s(:args),
        s(:begin,
          s(:send, nil, :util_spec,
            s(:str, "a"),
            s(:str, "2")),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a"),
            s(:str, "= 2")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:str, "a"),
                s(:str, "=2"))),
            s(:send,
              s(:lvar, :rs), :dependencies)))),
      s(:def, :test_gem_duplicate,
        s(:args),
        s(:begin,
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a"),
            s(:str, "1")),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a"),
            s(:str, "2")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "= 1"),
                s(:str, "= 2"))),
            s(:send,
              s(:lvar, :rs), :dependencies)))),
      s(:def, :test_import,
        s(:args),
        s(:begin,
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :import,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "b")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a")),
              s(:send, nil, :dep,
                s(:str, "b"))),
            s(:send,
              s(:lvar, :rs), :dependencies)))),
      s(:def, :test_install_from_gemdeps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :done_installing_ran,
            s(:false)),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :done_installing),
            s(:args,
              s(:arg, :installer),
              s(:arg, :specs)),
            s(:lvasgn, :done_installing_ran,
              s(:true))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :installed,
            s(:array)),
          s(:block,
            s(:send, nil, :open,
              s(:str, "gem.deps.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:send,
                s(:lvar, :io), :puts,
                s(:str, "gem \"a\"")),
              s(:send,
                s(:lvar, :io), :flush),
              s(:lvasgn, :result,
                s(:block,
                  s(:send,
                    s(:lvar, :rs), :install_from_gemdeps,
                    s(:hash,
                      s(:pair,
                        s(:sym, :gemdeps),
                        s(:send,
                          s(:lvar, :io), :path)))),
                  s(:args,
                    s(:arg, :req),
                    s(:arg, :installer)),
                  s(:send,
                    s(:lvar, :installed), :<<,
                    s(:send,
                      s(:lvar, :req), :full_name)))),
              s(:send, nil, :assert_kind_of,
                s(:const, nil, :Array),
                s(:lvar, :result)))),
          s(:send, nil, :assert_includes,
            s(:lvar, :installed),
            s(:str, "a-2")),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "a-2"))),
          s(:send, nil, :assert_path_exists,
            s(:str, "gem.deps.rb.lock")),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :rs), :remote)),
          s(:send, nil, :refute,
            s(:lvar, :done_installing_ran)))),
      s(:def, :test_install_from_gemdeps_explain,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:block,
            s(:send, nil, :open,
              s(:str, "gem.deps.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:send,
                s(:lvar, :io), :puts,
                s(:str, "gem \"a\"")),
              s(:send,
                s(:lvar, :io), :flush),
              s(:lvasgn, :expected,
                s(:dstr,
                  s(:str, "Gems to install:\n"),
                  s(:str, "  a-2\n"))),
              s(:block,
                s(:send, nil, :assert_output,
                  s(:lvar, :expected)),
                s(:args),
                s(:send,
                  s(:lvar, :rs), :install_from_gemdeps,
                  s(:hash,
                    s(:pair,
                      s(:sym, :gemdeps),
                      s(:send,
                        s(:lvar, :io), :path)),
                    s(:pair,
                      s(:sym, :explain),
                      s(:true))))))))),
      s(:def, :test_install_from_gemdeps_install_dir,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:send, nil, :util_clear_gems),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :dir),
              s(:str, "gems"),
              s(:str, "a-2"))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :installed,
            s(:array)),
          s(:block,
            s(:send, nil, :open,
              s(:str, "gem.deps.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "gem \"a\""))),
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :gemdeps),
                s(:str, "gem.deps.rb")),
              s(:pair,
                s(:sym, :install_dir),
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@gemhome)),
                  s(:str, "2"))))),
          s(:block,
            s(:send,
              s(:lvar, :rs), :install_from_gemdeps,
              s(:lvar, :options)),
            s(:args,
              s(:arg, :req),
              s(:arg, :installer)),
            s(:send,
              s(:lvar, :installed), :<<,
              s(:send,
                s(:lvar, :req), :full_name))),
          s(:send, nil, :assert_includes,
            s(:lvar, :installed),
            s(:str, "a-2")),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :dir),
              s(:str, "gems"),
              s(:str, "a-2"))))),
      s(:def, :test_install_from_gemdeps_local,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:block,
            s(:send, nil, :open,
              s(:str, "gem.deps.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:send,
                s(:lvar, :io), :puts,
                s(:str, "gem \"a\"")),
              s(:send,
                s(:lvar, :io), :flush),
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
                s(:args),
                s(:send,
                  s(:lvar, :rs), :install_from_gemdeps,
                  s(:hash,
                    s(:pair,
                      s(:sym, :gemdeps),
                      s(:send,
                        s(:lvar, :io), :path)),
                    s(:pair,
                      s(:sym, :domain),
                      s(:sym, :local))))))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :rs), :remote)))),
      s(:def, :test_install_from_gemdeps_lockfile,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "b"),
                s(:int, 1),
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:str, ">= 0")))))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :installed,
            s(:array)),
          s(:block,
            s(:send, nil, :open,
              s(:str, "gem.deps.rb.lock"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:dstr,
                s(:str, "GEM\n"),
                s(:str, "  remote: "),
                s(:begin,
                  s(:ivar, :@gem_repo)),
                s(:str, "\n"),
                s(:str, "  specs:\n"),
                s(:str, "    a (1)\n"),
                s(:str, "    b (1)\n"),
                s(:str, "      a (~> 1.0)\n"),
                s(:str, "\n"),
                s(:str, "PLATFORMS\n"),
                s(:str, "  "),
                s(:begin,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "DEPENDENCIES\n"),
                s(:str, "  b\n")))),
          s(:block,
            s(:send, nil, :open,
              s(:str, "gem.deps.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "gem \"b\""))),
          s(:block,
            s(:send,
              s(:lvar, :rs), :install_from_gemdeps,
              s(:hash,
                s(:pair,
                  s(:sym, :gemdeps),
                  s(:str, "gem.deps.rb")))),
            s(:args,
              s(:arg, :req),
              s(:arg, :installer)),
            s(:send,
              s(:lvar, :installed), :<<,
              s(:send,
                s(:lvar, :req), :full_name))),
          s(:send, nil, :assert_includes,
            s(:lvar, :installed),
            s(:str, "b-1")),
          s(:send, nil, :assert_includes,
            s(:lvar, :installed),
            s(:str, "a-1")),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"),
              s(:str, "a-1.gemspec"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"),
              s(:str, "b-1.gemspec"))))),
      s(:def, :test_install_from_gemdeps_version_mismatch,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :installed,
            s(:array)),
          s(:block,
            s(:send, nil, :open,
              s(:str, "gem.deps.rb"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:send,
                s(:lvar, :io), :puts,
                s(:dstr,
                  s(:str, "gem \"a\"\n"),
                  s(:str, "ruby \"0\"\n"))),
              s(:send,
                s(:lvar, :io), :flush),
              s(:block,
                s(:send,
                  s(:lvar, :rs), :install_from_gemdeps,
                  s(:hash,
                    s(:pair,
                      s(:sym, :gemdeps),
                      s(:send,
                        s(:lvar, :io), :path)))),
                s(:args,
                  s(:arg, :req),
                  s(:arg, :installer)),
                s(:send,
                  s(:lvar, :installed), :<<,
                  s(:send,
                    s(:lvar, :req), :full_name))))),
          s(:send, nil, :assert_includes,
            s(:lvar, :installed),
            s(:str, "a-2")))),
      s(:def, :test_load_gemdeps,
        s(:args),
        s(:begin,
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "gem.deps.rb")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "gem \"a\"")),
                s(:send,
                  s(:lvar, :io), :flush),
                s(:lvasgn, :gem_deps,
                  s(:send,
                    s(:lvar, :rs), :load_gemdeps,
                    s(:send,
                      s(:lvar, :io), :path))),
                s(:send, nil, :assert_kind_of,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :RequestSet), :GemDependencyAPI),
                  s(:lvar, :gem_deps)),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"))),
            s(:send,
              s(:lvar, :rs), :dependencies)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :rs), :git_set)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :rs), :vendor_set)))),
      s(:def, :test_load_gemdeps_installing,
        s(:args),
        s(:begin,
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "gem.deps.rb")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "ruby \"0\"")),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "gem \"a\"")),
                s(:send,
                  s(:lvar, :io), :flush),
                s(:lvasgn, :gem_deps,
                  s(:send,
                    s(:lvar, :rs), :load_gemdeps,
                    s(:send,
                      s(:lvar, :io), :path),
                    s(:array),
                    s(:true))),
                s(:send, nil, :assert_kind_of,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :RequestSet), :GemDependencyAPI),
                  s(:lvar, :gem_deps)),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send, nil, :dep,
                s(:str, "a"))),
            s(:send,
              s(:lvar, :rs), :dependencies)))),
      s(:def, :test_load_gemdeps_without_groups,
        s(:args),
        s(:begin,
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "gem.deps.rb")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:str, "gem \"a\", :group => :test")),
                s(:send,
                  s(:lvar, :io), :flush),
                s(:send,
                  s(:lvar, :rs), :load_gemdeps,
                  s(:send,
                    s(:lvar, :io), :path),
                  s(:array,
                    s(:sym, :test))),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :rs), :dependencies)))),
      s(:def, :test_resolve,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 2"))))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2"))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:lvasgn, :orig_errors,
            s(:send,
              s(:lvar, :rs), :errors)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :rs), :resolve,
              s(:send,
                s(:const, nil, :StaticSet), :new,
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :res), :size)),
          s(:lvasgn, :names,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :res), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2"),
              s(:str, "b-2")),
            s(:lvar, :names)),
          s(:send, nil, :refute_same,
            s(:lvar, :orig_errors),
            s(:send,
              s(:lvar, :rs), :errors)))),
      s(:def, :test_bug_bug_990,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.b"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "~> 1.a"))))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.b"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 1"))))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.1.b"))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :prerelease=,
            s(:true)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :rs), :resolve,
              s(:send,
                s(:const, nil, :StaticSet), :new,
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b),
                  s(:lvar, :c))))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :res), :size)),
          s(:lvasgn, :names,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :res), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1.b"),
              s(:str, "b-1.b"),
              s(:str, "c-1.1.b")),
            s(:lvar, :names)))),
      s(:def, :test_resolve_development,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :a))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :development=,
            s(:true)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :rs), :resolve,
              s(:send,
                s(:const, nil, :StaticSet), :new,
                s(:array,
                  s(:lvar, :spec))))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :res), :size)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :rs), :resolver), :development)),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:lvar, :rs), :resolver), :development_shallow)))),
      s(:def, :test_resolve_development_shallow,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "b")))),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "b"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "c")))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:int, 1))),
          s(:lvasgn, :a_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :a))),
          s(:lvasgn, :b_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :b))),
          s(:lvasgn, :c_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :c))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :development=,
            s(:true)),
          s(:send,
            s(:lvar, :rs), :development_shallow=,
            s(:true)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :rs), :resolve,
              s(:send,
                s(:const, nil, :StaticSet), :new,
                s(:array,
                  s(:lvar, :a_spec),
                  s(:lvar, :b_spec),
                  s(:lvar, :c_spec))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :res), :size)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :rs), :resolver), :development)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :rs), :resolver), :development_shallow)))),
      s(:def, :test_resolve_git,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :_),
              s(:lvasgn, :repository)),
            s(:send, nil, :git_gem)),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "gem.deps.rb")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:dstr,
                    s(:str, "        gem \""),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "\", :git => \""),
                    s(:begin,
                      s(:lvar, :repository)),
                    s(:str, "\"\n"))),
                s(:send,
                  s(:lvar, :io), :flush),
                s(:send,
                  s(:lvar, :rs), :load_gemdeps,
                  s(:send,
                    s(:lvar, :io), :path)),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :rs), :resolve)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :res), :size)),
          s(:lvasgn, :names,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :res), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1")),
            s(:lvar, :names)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const,
                s(:ivar, :@DR), :BestSet),
              s(:const,
                s(:ivar, :@DR), :GitSet),
              s(:const,
                s(:ivar, :@DR), :VendorSet),
              s(:const,
                s(:ivar, :@DR), :SourceSet)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :rs), :sets), :map),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:lvar, :set), :class))))),
      s(:def, :test_resolve_ignore_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 2"))))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2"))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :ignore_dependencies=,
            s(:true)),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :rs), :resolve,
              s(:send,
                s(:const, nil, :StaticSet), :new,
                s(:array,
                  s(:lvar, :a),
                  s(:lvar, :b))))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :res), :size)),
          s(:lvasgn, :names,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :res), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-2")),
            s(:lvar, :names)))),
      s(:def, :test_resolve_incompatible,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a2,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a"),
            s(:str, "= 1")),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a"),
            s(:str, "= 2")),
          s(:lvasgn, :set,
            s(:send,
              s(:const, nil, :StaticSet), :new,
              s(:array,
                s(:lvar, :a1),
                s(:lvar, :a2)))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
            s(:args),
            s(:send,
              s(:lvar, :rs), :resolve,
              s(:lvar, :set))))),
      s(:def, :test_resolve_vendor,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a_name),
              s(:lvasgn, :_),
              s(:lvasgn, :a_directory)),
            s(:block,
              s(:send, nil, :vendor_gem,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "b"),
                s(:str, "~> 2.0")))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :b_name),
              s(:lvasgn, :_),
              s(:lvasgn, :b_directory)),
            s(:send, nil, :vendor_gem,
              s(:str, "b"),
              s(:int, 2))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :tf,
            s(:block,
              s(:send,
                s(:const, nil, :Tempfile), :open,
                s(:str, "gem.deps.rb")),
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:dstr,
                    s(:str, "        gem \""),
                    s(:begin,
                      s(:lvar, :a_name)),
                    s(:str, "\", :path => \""),
                    s(:begin,
                      s(:lvar, :a_directory)),
                    s(:str, "\"\n"),
                    s(:str, "        gem \""),
                    s(:begin,
                      s(:lvar, :b_name)),
                    s(:str, "\", :path => \""),
                    s(:begin,
                      s(:lvar, :b_directory)),
                    s(:str, "\"\n"))),
                s(:send,
                  s(:lvar, :io), :flush),
                s(:send,
                  s(:lvar, :rs), :load_gemdeps,
                  s(:send,
                    s(:lvar, :io), :path)),
                s(:lvar, :io)))),
          s(:if,
            s(:send,
              s(:lvar, :tf), :respond_to?,
              s(:sym, :close!)),
            s(:send,
              s(:lvar, :tf), :close!), nil),
          s(:lvasgn, :res,
            s(:send,
              s(:lvar, :rs), :resolve)),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:lvar, :res), :size)),
          s(:lvasgn, :names,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :res), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name)), :sort)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-2")),
            s(:lvar, :names)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const,
                s(:ivar, :@DR), :BestSet),
              s(:const,
                s(:ivar, :@DR), :GitSet),
              s(:const,
                s(:ivar, :@DR), :VendorSet),
              s(:const,
                s(:ivar, :@DR), :SourceSet)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :rs), :sets), :map),
              s(:args,
                s(:arg, :set)),
              s(:send,
                s(:lvar, :set), :class))))),
      s(:def, :test_sorted_requests,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 2"))))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 2"))))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "2"))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :resolve,
            s(:send,
              s(:const, nil, :StaticSet), :new,
              s(:array,
                s(:lvar, :a),
                s(:lvar, :b),
                s(:lvar, :c)))),
          s(:lvasgn, :names,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :rs), :sorted_requests), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "c-2"),
              s(:str, "b-2"),
              s(:str, "a-2")),
            s(:lvar, :names)))),
      s(:def, :test_install,
        s(:args),
        s(:begin,
          s(:lvasgn, :done_installing_ran,
            s(:false)),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :done_installing),
            s(:args),
            s(:lvasgn, :done_installing_ran,
              s(:true))),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "= 1")))),
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "b"),
                s(:str, "1")))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :resolve),
          s(:lvasgn, :reqs,
            s(:array)),
          s(:lvasgn, :installers,
            s(:array)),
          s(:lvasgn, :installed,
            s(:block,
              s(:send,
                s(:lvar, :rs), :install,
                s(:hash)),
              s(:args,
                s(:arg, :req),
                s(:arg, :installer)),
              s(:begin,
                s(:send,
                  s(:lvar, :reqs), :<<,
                  s(:lvar, :req)),
                s(:send,
                  s(:lvar, :installers), :<<,
                  s(:lvar, :installer))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b-1"),
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:lvar, :reqs), :map),
              s(:args,
                s(:arg, :req)),
              s(:send,
                s(:lvar, :req), :full_name))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b-1"),
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:lvar, :installers), :map),
              s(:args,
                s(:arg, :installer)),
              s(:send,
                s(:send,
                  s(:lvar, :installer), :spec), :full_name))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"),
              s(:str, "a-1.gemspec"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"),
              s(:str, "b-1.gemspec"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b-1"),
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:lvar, :installed), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))),
          s(:send, nil, :assert,
            s(:lvar, :done_installing_ran)))),
      s(:def, :test_install_into,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "= 1")))),
              s(:send,
                s(:lvar, :fetcher), :gem,
                s(:str, "b"),
                s(:str, "1")))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :resolve),
          s(:lvasgn, :installed,
            s(:block,
              s(:send,
                s(:lvar, :rs), :install_into,
                s(:ivar, :@tempdir)),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:ivar, :@tempdir),
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "GEM_HOME"))))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "specifications"),
              s(:str, "a-1.gemspec"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "specifications"),
              s(:str, "b-1.gemspec"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b-1"),
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:lvar, :installed), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name))))),
      s(:def, :test_install_into_development_shallow,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:str, "1")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :add_development_dependency,
                  s(:str, "b"),
                  s(:str, "= 1"))),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "b"),
                  s(:str, "1")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :add_development_dependency,
                  s(:str, "c"),
                  s(:str, "= 1"))),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "c"),
                s(:str, "1")))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :development=,
            s(:true)),
          s(:send,
            s(:lvar, :rs), :development_shallow=,
            s(:true)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :resolve),
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :development),
                s(:true)),
              s(:pair,
                s(:sym, :development_shallow),
                s(:true)))),
          s(:lvasgn, :installed,
            s(:block,
              s(:send,
                s(:lvar, :rs), :install_into,
                s(:ivar, :@tempdir),
                s(:true),
                s(:lvar, :options)),
              s(:args),
              s(:send, nil, :assert_equal,
                s(:ivar, :@tempdir),
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "GEM_HOME"))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1")),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :installed), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :full_name)), :sort)))),
      s(:def, :test_sorted_requests_development_shallow,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "b")))),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "b"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "c")))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:int, 1))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :development=,
            s(:true)),
          s(:send,
            s(:lvar, :rs), :development_shallow=,
            s(:true)),
          s(:lvasgn, :a_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :a))),
          s(:lvasgn, :b_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :b))),
          s(:lvasgn, :c_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :c))),
          s(:send,
            s(:lvar, :rs), :resolve,
            s(:send,
              s(:const, nil, :StaticSet), :new,
              s(:array,
                s(:lvar, :a_spec),
                s(:lvar, :b_spec),
                s(:lvar, :c_spec)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b-1"),
              s(:str, "a-1")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :rs), :sorted_requests), :map),
              s(:args,
                s(:arg, :req)),
              s(:send,
                s(:lvar, :req), :full_name))))),
      s(:def, :test_tsort_each_child_development,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "b")))),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "b"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "c")))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:int, 1))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :development=,
            s(:true)),
          s(:send,
            s(:lvar, :rs), :development_shallow=,
            s(:true)),
          s(:lvasgn, :a_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :a))),
          s(:lvasgn, :b_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :b))),
          s(:lvasgn, :c_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :c))),
          s(:send,
            s(:lvar, :rs), :resolve,
            s(:send,
              s(:const, nil, :StaticSet), :new,
              s(:array,
                s(:lvar, :a_spec),
                s(:lvar, :b_spec),
                s(:lvar, :c_spec)))),
          s(:lvasgn, :a_req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ActivationRequest), :new,
              s(:lvar, :a_spec),
              s(:nil))),
          s(:lvasgn, :deps,
            s(:send,
              s(:send,
                s(:lvar, :rs), :enum_for,
                s(:sym, :tsort_each_child),
                s(:lvar, :a_req)), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b")),
            s(:block,
              s(:send,
                s(:lvar, :deps), :map),
              s(:args,
                s(:arg, :dep)),
              s(:send,
                s(:lvar, :dep), :name))))),
      s(:def, :test_tsort_each_child_development_shallow,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "b")))),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "b"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_development_dependency,
                s(:str, "c")))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:int, 1))),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :rs), :gem,
            s(:str, "a")),
          s(:send,
            s(:lvar, :rs), :development=,
            s(:true)),
          s(:send,
            s(:lvar, :rs), :development_shallow=,
            s(:true)),
          s(:lvasgn, :a_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :a))),
          s(:lvasgn, :b_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :b))),
          s(:lvasgn, :c_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :SpecSpecification), :new,
              s(:nil),
              s(:lvar, :c))),
          s(:send,
            s(:lvar, :rs), :resolve,
            s(:send,
              s(:const, nil, :StaticSet), :new,
              s(:array,
                s(:lvar, :a_spec),
                s(:lvar, :b_spec),
                s(:lvar, :c_spec)))),
          s(:lvasgn, :b_req,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ActivationRequest), :new,
              s(:lvar, :b_spec),
              s(:nil))),
          s(:lvasgn, :deps,
            s(:send,
              s(:send,
                s(:lvar, :rs), :enum_for,
                s(:sym, :tsort_each_child),
                s(:lvar, :b_req)), :to_a)),
          s(:send, nil, :assert_empty,
            s(:lvar, :deps)))))))
