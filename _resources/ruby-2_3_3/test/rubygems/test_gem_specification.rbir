s(:begin,
  s(:send, nil, :require,
    s(:str, "benchmark")),
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "pathname")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "rubygems/ext")),
  s(:send, nil, :require,
    s(:str, "rubygems/specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/installer")),
  s(:class,
    s(:const, nil, :TestGemSpecification),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:casgn, nil, :LEGACY_YAML_SPEC,
        s(:dstr,
          s(:str, "--- !ruby/object:Gem::Specification\n"),
          s(:str, "rubygems_version: \"1.0\"\n"),
          s(:str, "name: keyedlist\n"),
          s(:str, "version: !ruby/object:Gem::Version\n"),
          s(:str, "  version: 0.4.0\n"),
          s(:str, "date: 2004-03-28 15:37:49.828000 +02:00\n"),
          s(:str, "platform:\n"),
          s(:str, "summary: A Hash which automatically computes keys.\n"),
          s(:str, "require_paths:\n"),
          s(:str, "  - lib\n"),
          s(:str, "files:\n"),
          s(:str, "  - lib/keyedlist.rb\n"),
          s(:str, "autorequire: keyedlist\n"),
          s(:str, "author: Florian Gross\n"),
          s(:str, "email: flgr@ccan.de\n"),
          s(:str, "has_rdoc: true\n"))),
      s(:casgn, nil, :LEGACY_RUBY_SPEC,
        s(:dstr,
          s(:str, "Gem::Specification.new do |s|\n"),
          s(:str, "  s.name = %q{keyedlist}\n"),
          s(:str, "  s.version = %q{0.4.0}\n"),
          s(:str, "  s.has_rdoc = true\n"),
          s(:str, "  s.summary = %q{A Hash which automatically computes keys.}\n"),
          s(:str, "  s.files = [%q{lib/keyedlist.rb}]\n"),
          s(:str, "  s.require_paths = [%q{lib}]\n"),
          s(:str, "  s.autorequire = %q{keyedlist}\n"),
          s(:str, "  s.author = %q{Florian Gross}\n"),
          s(:str, "  s.email = %q{flgr@ccan.de}\n"),
          s(:str, "end\n"))),
      s(:def, :make_spec_c1,
        s(:args),
        s(:ivasgn, :@c1,
          s(:block,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :executable=,
                s(:str, "exec")),
              s(:send,
                s(:send,
                  s(:lvar, :s), :extensions), :<<,
                s(:str, "ext/a/extconf.rb")),
              s(:send,
                s(:lvar, :s), :test_file=,
                s(:str, "test/suite.rb")),
              s(:send,
                s(:send,
                  s(:lvar, :s), :requirements), :<<,
                s(:str, "A working computer")),
              s(:send,
                s(:lvar, :s), :rubyforge_project=,
                s(:str, "example")),
              s(:send,
                s(:lvar, :s), :license=,
                s(:str, "MIT")),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "rake"),
                s(:str, "> 0.4")),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "jabber4r"),
                s(:str, "> 0.0.0")),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:str, "pqa"),
                s(:array,
                  s(:str, "> 0.4"),
                  s(:str, "<= 0.6"))),
              s(:send,
                s(:lvar, :s), :mark_version),
              s(:send,
                s(:lvar, :s), :files=,
                s(:array,
                  s(:str, "lib/code.rb"))))))),
      s(:def, :ext_spec,
        s(:args),
        s(:ivasgn, :@ext,
          s(:block,
            s(:send, nil, :util_spec,
              s(:str, "ext"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :executable=,
                s(:str, "exec")),
              s(:send,
                s(:lvar, :s), :test_file=,
                s(:str, "test/suite.rb")),
              s(:send,
                s(:lvar, :s), :extensions=,
                s(:array,
                  s(:str, "ext/extconf.rb"))),
              s(:send,
                s(:lvar, :s), :license=,
                s(:str, "MIT")),
              s(:send,
                s(:lvar, :s), :mark_version),
              s(:send,
                s(:lvar, :s), :files=,
                s(:array,
                  s(:str, "lib/code.rb"))),
              s(:send,
                s(:lvar, :s), :installed_by_version=,
                s(:send, nil, :v,
                  s(:str, "2.2"))))))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@a1,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :executable=,
                  s(:str, "exec")),
                s(:send,
                  s(:lvar, :s), :test_file=,
                  s(:str, "test/suite.rb")),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :requirements), :<<,
                  s(:str, "A working computer")),
                s(:send,
                  s(:lvar, :s), :rubyforge_project=,
                  s(:str, "example")),
                s(:send,
                  s(:lvar, :s), :license=,
                  s(:str, "MIT")),
                s(:send,
                  s(:lvar, :s), :mark_version),
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "lib/code.rb")))))),
          s(:ivasgn, :@a2,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:str, "2")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :files=,
                s(:array,
                  s(:str, "lib/code.rb"))))),
          s(:ivasgn, :@a3,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:str, "3")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :metadata), :[]=,
                s(:str, "allowed_push_host"),
                s(:str, "https://privategemserver.com")))),
          s(:ivasgn, :@current_version,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Specification), :CURRENT_SPECIFICATION_VERSION)),
          s(:send, nil, :load,
            s(:str, "rubygems/syck_hack.rb")))),
      s(:def, :test_self_activate,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:send, nil, :util_spec,
              s(:str, "foo"),
              s(:str, "1"))),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "foo-1")),
            s(:lvar, :foo)))),
      s(:def, :test_self_activate_ambiguous_direct,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1"))),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2"))),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :reset),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)")),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "b-2"),
                s(:str, "c-2")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_find_in_unresolved_tree_is_not_exponentiental,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :num_of_pkg,
              s(:int, 7)),
            s(:lvasgn, :num_of_version_per_pkg,
              s(:int, 3)),
            s(:lvasgn, :packages,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 0),
                      s(:lvar, :num_of_pkg))), :map),
                s(:args,
                  s(:arg, :pkgi)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 0),
                        s(:lvar, :num_of_version_per_pkg))), :map),
                  s(:args,
                    s(:arg, :pkg_version)),
                  s(:begin,
                    s(:lvasgn, :deps,
                      s(:send,
                        s(:const, nil, :Hash), :[],
                        s(:block,
                          s(:send,
                            s(:begin,
                              s(:irange,
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :pkgi), :+,
                                    s(:int, 1))),
                                s(:lvar, :num_of_pkg))), :map),
                          s(:args,
                            s(:arg, :deppkgi)),
                          s(:array,
                            s(:dstr,
                              s(:str, "pkg"),
                              s(:begin,
                                s(:lvar, :deppkgi))),
                            s(:str, ">= 0"))))),
                    s(:send, nil, :new_spec,
                      s(:dstr,
                        s(:str, "pkg"),
                        s(:begin,
                          s(:lvar, :pkgi))),
                      s(:send,
                        s(:lvar, :pkg_version), :to_s),
                      s(:lvar, :deps)))))),
            s(:lvasgn, :base,
              s(:send, nil, :new_spec,
                s(:str, "pkg_base"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "pkg0"),
                    s(:str, ">= 0"))))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :reset),
            s(:send, nil, :install_specs,
              s(:splat,
                s(:send,
                  s(:send,
                    s(:lvar, :packages), :flatten), :reverse))),
            s(:send, nil, :install_specs,
              s(:lvar, :base)),
            s(:send,
              s(:lvar, :base), :activate),
            s(:lvasgn, :tms,
              s(:block,
                s(:send,
                  s(:const, nil, :Benchmark), :measure),
                s(:args),
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const, nil, :LoadError)),
                  s(:args),
                  s(:send, nil, :require,
                    s(:str, "no_such_file_foo"))))),
            s(:send, nil, :assert_operator,
              s(:send,
                s(:lvar, :tms), :total),
              s(:sym, :<=),
              s(:int, 10))))),
      s(:def, :test_self_activate_ambiguous_indirect,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)")),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "b-2"),
                s(:str, "c-2")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_self_activate_ambiguous_indirect_conflict,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :a2,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:str, "1"))),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :b1),
              s(:lvar, :a1),
              s(:lvar, :a2),
              s(:lvar, :c2),
              s(:lvar, :b2)),
            s(:send,
              s(:lvar, :a2), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-2")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)")),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-2"),
                s(:str, "b-1"),
                s(:str, "c-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_self_activate_ambiguous_unrelated,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"))),
            s(:lvasgn, :d1,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :d1),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)")),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "d-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)")),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_require_should_prefer_latest_gem_level1,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/c.rb"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/c.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :require,
              s(:str, "c")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "b-2"),
                s(:str, "c-2")),
              s(:send, nil, :loaded_spec_names))))),
      s(:def, :test_require_should_prefer_latest_gem_level2,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :d1,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d2,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :d1),
              s(:lvar, :d2),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "b-2"),
                s(:str, "c-2"),
                s(:str, "d-2")),
              s(:send, nil, :loaded_spec_names))))),
      s(:def, :test_require_finds_in_2nd_level_indirect,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 2"))))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 2"))))),
            s(:lvasgn, :d1,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d2,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d3,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "3"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :d1),
              s(:lvar, :d2),
              s(:lvar, :d3),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "b-2"),
                s(:str, "c-2"),
                s(:str, "d-2")),
              s(:send, nil, :loaded_spec_names))))),
      s(:def, :test_require_should_prefer_reachable_gems,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 0"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 2"))))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 2"))))),
            s(:lvasgn, :d1,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d2,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d3,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "3"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :e,
              s(:send, nil, :new_spec,
                s(:str, "anti_d"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :d1),
              s(:lvar, :d2),
              s(:lvar, :d3),
              s(:lvar, :e),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "b-2"),
                s(:str, "c-2"),
                s(:str, "d-2")),
              s(:send, nil, :loaded_spec_names))))),
      s(:def, :test_require_should_not_conflict,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :base,
              s(:send, nil, :new_spec,
                s(:str, "0"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "A"),
                    s(:str, ">= 1"))))),
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "A"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2")),
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))),
                s(:str, "lib/a.rb"))),
            s(:lvasgn, :a2,
              s(:send, nil, :new_spec,
                s(:str, "A"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2")),
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))),
                s(:str, "lib/a.rb"))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, "= 1"))),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, "= 2"))),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:hash),
                s(:str, "lib/c.rb"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:hash),
                s(:str, "lib/c.rb"))),
            s(:lvasgn, :c3,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "3"),
                s(:hash),
                s(:str, "lib/c.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :c3),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1),
              s(:lvar, :a2),
              s(:lvar, :base)),
            s(:send,
              s(:lvar, :base), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "0-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "A (>= 1)")),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "0-1"),
                s(:str, "A-2"),
                s(:str, "b-2"),
                s(:str, "c-2")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_inner_clonflict_in_indirect_gems,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1")),
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "< 3"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 2"))))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 2"))))),
            s(:lvasgn, :c3,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "3"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 3"))))),
            s(:lvasgn, :d1,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d2,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d3,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "3"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :d1),
              s(:lvar, :d2),
              s(:lvar, :d3),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :c3),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_includes,
              s(:array,
                s(:array,
                  s(:str, "a-1"),
                  s(:str, "b-2"),
                  s(:str, "c-3"),
                  s(:str, "d-2")),
                s(:array,
                  s(:str, "a-1"),
                  s(:str, "b-2"),
                  s(:str, "d-2"))),
              s(:send, nil, :loaded_spec_names))))),
      s(:def, :test_inner_clonflict_in_indirect_gems_reversed,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "xc"),
                    s(:str, ">= 1"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "xc"),
                    s(:str, ">= 1")),
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "< 3"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "xc"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 3"))))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "xc"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 2"))))),
            s(:lvasgn, :c3,
              s(:send, nil, :new_spec,
                s(:str, "xc"),
                s(:str, "3"),
                s(:hash,
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "<= 3"))))),
            s(:lvasgn, :d1,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d2,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "2"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d3,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "3"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :d1),
              s(:lvar, :d2),
              s(:lvar, :d3),
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :c3),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :require,
              s(:str, "d")),
            s(:send, nil, :assert_includes,
              s(:array,
                s(:array,
                  s(:str, "a-1"),
                  s(:str, "b-2"),
                  s(:str, "d-2"),
                  s(:str, "xc-3")),
                s(:array,
                  s(:str, "a-1"),
                  s(:str, "b-2"),
                  s(:str, "d-2"))),
              s(:send, nil, :loaded_spec_names))))),
      s(:def, :test_self_activate_checks_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"))),
          s(:send,
            s(:lvar, :a), :add_dependency,
            s(:str, "c"),
            s(:str, "= 1.0")),
          s(:send,
            s(:lvar, :a), :add_dependency,
            s(:str, "b"),
            s(:str, "~> 1.0")),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.0"))),
          s(:lvasgn, :b2,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2.0"))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 2.0"))))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :c),
            s(:lvar, :a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :LoadError)),
              s(:args),
              s(:send, nil, :assert_activate,
                s(:nil),
                s(:lvar, :a),
                s(:lvar, :c),
                s(:str, "b")))),
          s(:lvasgn, :expected,
            s(:str, "can't satisfy 'b (~> 1.0)', already activated 'b-2.0'")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_self_activate_divergent,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "~> 1.0")),
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1.0"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.0"))),
          s(:lvasgn, :b2,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2.0"))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 2.0"))))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :c),
            s(:lvar, :a)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :ConflictError)),
              s(:args),
              s(:send, nil, :assert_activate,
                s(:nil),
                s(:lvar, :a),
                s(:lvar, :c),
                s(:str, "b")))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Unable to activate c-1.0,"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "because b-1.0 conflicts with b .= 2.0"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_self_activate_old_required,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :e1)),
            s(:send, nil, :util_spec,
              s(:str, "e"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "d"),
                  s(:str, "= 1"))))),
          s(:ivasgn, :@d1,
            s(:send, nil, :util_spec,
              s(:str, "d"),
              s(:str, "1"))),
          s(:ivasgn, :@d2,
            s(:send, nil, :util_spec,
              s(:str, "d"),
              s(:str, "2"))),
          s(:send, nil, :install_specs,
            s(:ivar, :@d1),
            s(:ivar, :@d2),
            s(:lvar, :e1)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "d-1"),
              s(:str, "e-1")),
            s(:lvar, :e1),
            s(:str, "d")))),
      s(:def, :test_self_activate_platform_alternate,
        s(:args),
        s(:begin,
          s(:ivasgn, :@x1_m,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "x"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:array,
                    s(:str, "cpu"),
                    s(:str, "my_platform"),
                    s(:str, "1")))))),
          s(:ivasgn, :@x1_o,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "x"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:array,
                    s(:str, "cpu"),
                    s(:str, "other_platform"),
                    s(:str, "1")))))),
          s(:ivasgn, :@w1,
            s(:send, nil, :util_spec,
              s(:str, "w"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "x"),
                  s(:nil))))),
          s(:send, nil, :util_set_arch,
            s(:str, "cpu-my_platform1")),
          s(:send, nil, :install_specs,
            s(:ivar, :@x1_m),
            s(:ivar, :@x1_o),
            s(:ivar, :@w1)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "x-1-cpu-my_platform-1"),
              s(:str, "w-1")),
            s(:ivar, :@w1),
            s(:ivar, :@x1_m)))),
      s(:def, :test_self_activate_platform_bump,
        s(:args),
        s(:begin,
          s(:ivasgn, :@y1,
            s(:send, nil, :util_spec,
              s(:str, "y"),
              s(:str, "1"))),
          s(:ivasgn, :@y1_1_p,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "y"),
                s(:str, "1.1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:array,
                    s(:str, "cpu"),
                    s(:str, "my_platform"),
                    s(:str, "1")))))),
          s(:ivasgn, :@z1,
            s(:send, nil, :util_spec,
              s(:str, "z"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "y"),
                  s(:nil))))),
          s(:send, nil, :install_specs,
            s(:ivar, :@y1),
            s(:ivar, :@y1_1_p),
            s(:ivar, :@z1)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "y-1"),
              s(:str, "z-1")),
            s(:ivar, :@z1),
            s(:ivar, :@y1)))),
      s(:def, :test_self_activate_prerelease,
        s(:args),
        s(:begin,
          s(:ivasgn, :@c1_pre,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.a"),
              s(:hash,
                s(:pair,
                  s(:str, "a"),
                  s(:str, "1.a")),
                s(:pair,
                  s(:str, "b"),
                  s(:str, "1"))))),
          s(:ivasgn, :@a1_pre,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.a"))),
          s(:ivasgn, :@b1,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "b"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :add_dependency,
                  s(:str, "a")),
                s(:send,
                  s(:lvar, :s), :add_development_dependency,
                  s(:str, "aa"))))),
          s(:send, nil, :install_specs,
            s(:ivar, :@a1_pre),
            s(:ivar, :@b1),
            s(:ivar, :@c1_pre)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "a-1.a"),
              s(:str, "b-1"),
              s(:str, "c-1.a")),
            s(:ivar, :@c1_pre),
            s(:ivar, :@a1_pre),
            s(:ivar, :@b1)))),
      s(:def, :test_self_activate_via_require,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/b/c.rb"))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:nil),
              s(:str, "lib/b/c.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :a1), :activate),
          s(:block,
            s(:send, nil, :save_loaded_features),
            s(:args),
            s(:send, nil, :require,
              s(:str, "b/c"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_self_activate_via_require_wtf,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0")),
                  s(:pair,
                    s(:str, "d"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1"))),
                s(:str, "lib/b.rb"))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2"))),
                s(:str, "lib/b.rb"))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"))),
            s(:lvasgn, :d1,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, "< 2"))),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :d2,
              s(:send, nil, :new_spec,
                s(:str, "d"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, "< 2"))),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :c2),
              s(:lvar, :b1),
              s(:lvar, :b2),
              s(:lvar, :d1),
              s(:lvar, :d2),
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)"),
                s(:str, "d (> 0)")),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :require,
              s(:str, "b")),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Gem), :LoadError)),
                s(:args),
                s(:send, nil, :require,
                  s(:str, "d")))),
            s(:send, nil, :assert_equal,
              s(:str, "unable to find a version of 'd' to activate"),
              s(:send,
                s(:lvar, :e), :message)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "b-2"),
                s(:str, "c-2")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "d (> 0)")),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_self_activate_deep_unambiguous,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1"))))),
          s(:lvasgn, :b2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "2"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 2"))))),
          s(:lvasgn, :c1,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:lvasgn, :c2,
            s(:send, nil, :new_spec,
              s(:str, "c"),
              s(:str, "2"))),
          s(:send, nil, :install_specs,
            s(:lvar, :c1),
            s(:lvar, :c2),
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send,
            s(:lvar, :a1), :activate),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1"),
              s(:str, "b-1"),
              s(:str, "c-1")),
            s(:send, nil, :loaded_spec_names)))),
      s(:def, :test_self_activate_loaded,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:send, nil, :util_spec,
              s(:str, "foo"),
              s(:str, "1"))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :foo), :activate)),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :foo), :activate)))),
      s(:def, :test_self_activate_unrelated,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 1.0"))))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.0"))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.0"))),
          s(:send, nil, :install_specs,
            s(:lvar, :b),
            s(:lvar, :c),
            s(:lvar, :a)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "b-1.0"),
              s(:str, "c-1.0"),
              s(:str, "a-1.0")),
            s(:lvar, :a),
            s(:lvar, :c),
            s(:str, "b")))),
      s(:def, :test_self_activate_over,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 1.0")),
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1.0"))))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.0"))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.1"))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2.0"))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "~> 1.0"))))),
          s(:send, nil, :install_specs,
            s(:lvar, :a)),
          s(:send,
            s(:lvar, :a), :activate),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a-1.0"),
              s(:str, "c-1.0")),
            s(:send, nil, :loaded_spec_names)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "b (>= 1.0, ~> 1.0)")),
            s(:send, nil, :unresolved_names)))),
      s(:def, :test_self_activate_under,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "~> 1.0")),
                s(:pair,
                  s(:str, "c"),
                  s(:str, "= 1.0"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.0"))),
          s(:lvasgn, :b1_1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.1"))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 1.0"))))),
          s(:send, nil, :install_specs,
            s(:lvar, :b1),
            s(:lvar, :b1_1),
            s(:lvar, :c),
            s(:lvar, :a)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "b-1.0"),
              s(:str, "c-1.0"),
              s(:str, "a-1.0")),
            s(:lvar, :a),
            s(:lvar, :c),
            s(:str, "b")))),
      s(:def, :test_self_activate_dropped,
        s(:args),
        s(:begin,
          s(:lvasgn, :a1,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:nil))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1"),
              s(:hash,
                s(:pair,
                  s(:str, "c"),
                  s(:nil))))),
          s(:lvasgn, :b2,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2"))),
          s(:lvasgn, :c1,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1"))),
          s(:send, nil, :install_specs,
            s(:lvar, :c1),
            s(:lvar, :b1),
            s(:lvar, :b2),
            s(:lvar, :a1)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "b-2"),
              s(:str, "a-1")),
            s(:lvar, :a1),
            s(:str, "b")))),
      s(:def, :test_self_activate_raggi_the_edgecase_generator,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, ">= 1.0")),
                s(:pair,
                  s(:str, "c"),
                  s(:str, ">= 1.0"))))),
          s(:lvasgn, :b1,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.0"))),
          s(:lvasgn, :b1_0,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.1"),
              s(:hash,
                s(:pair,
                  s(:str, "z"),
                  s(:str, ">= 1.0"))))),
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"),
              s(:str, "1.0"),
              s(:hash,
                s(:pair,
                  s(:str, "b"),
                  s(:str, "= 1.0"))))),
          s(:lvasgn, :z,
            s(:send, nil, :util_spec,
              s(:str, "z"),
              s(:str, "1"))),
          s(:send, nil, :install_specs,
            s(:lvar, :z),
            s(:lvar, :b1),
            s(:lvar, :b1_0),
            s(:lvar, :c),
            s(:lvar, :z)),
          s(:send, nil, :assert_activate,
            s(:array,
              s(:str, "b-1.0"),
              s(:str, "c-1.0"),
              s(:str, "a-1.0")),
            s(:lvar, :a),
            s(:lvar, :c),
            s(:str, "b")))),
      s(:def, :test_self_activate_conflict,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "1.0"))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2.0"))),
          s(:send, nil, :gem,
            s(:str, "b"),
            s(:str, "= 1.0")),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :LoadError)),
            s(:args),
            s(:send, nil, :gem,
              s(:str, "b"),
              s(:str, "= 2.0"))))),
      s(:def, :test_self_all_equals,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :new_spec,
              s(:str, "foo"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/foo.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :all=,
            s(:array,
              s(:lvar, :a))),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_inactive_by_path,
              s(:str, "foo"))))),
      s(:def, :test_self_attribute_names,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected_value,
            s(:array,
              s(:str, "authors"),
              s(:str, "autorequire"),
              s(:str, "bindir"),
              s(:str, "cert_chain"),
              s(:str, "date"),
              s(:str, "dependencies"),
              s(:str, "description"),
              s(:str, "email"),
              s(:str, "executables"),
              s(:str, "extensions"),
              s(:str, "extra_rdoc_files"),
              s(:str, "files"),
              s(:str, "homepage"),
              s(:str, "licenses"),
              s(:str, "metadata"),
              s(:str, "name"),
              s(:str, "platform"),
              s(:str, "post_install_message"),
              s(:str, "rdoc_options"),
              s(:str, "require_paths"),
              s(:str, "required_ruby_version"),
              s(:str, "required_rubygems_version"),
              s(:str, "requirements"),
              s(:str, "rubyforge_project"),
              s(:str, "rubygems_version"),
              s(:str, "signing_key"),
              s(:str, "specification_version"),
              s(:str, "summary"),
              s(:str, "test_files"),
              s(:str, "version"))),
          s(:lvasgn, :actual_value,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :attribute_names), :map),
                s(:args,
                  s(:arg, :a)),
                s(:send,
                  s(:lvar, :a), :to_s)), :sort)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_value),
            s(:lvar, :actual_value)))),
      s(:def, :test_self__load_future,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new)),
          s(:send,
            s(:lvar, :spec), :name=,
            s(:str, "a")),
          s(:send,
            s(:lvar, :spec), :version=,
            s(:str, "1")),
          s(:send,
            s(:lvar, :spec), :specification_version=,
            s(:send,
              s(:ivar, :@current_version), :+,
              s(:int, 1))),
          s(:lvasgn, :new_spec,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :spec)))),
          s(:send, nil, :assert_equal,
            s(:str, "a"),
            s(:send,
              s(:lvar, :new_spec), :name)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:int, 1)),
            s(:send,
              s(:lvar, :new_spec), :version)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@current_version),
            s(:send,
              s(:lvar, :new_spec), :specification_version)))),
      s(:def, :test_self_from_yaml,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@specification_version),
            s(:nil)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :from_yaml,
              s(:send,
                s(:ivar, :@a1), :to_yaml))),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Specification), :NONEXISTENT_SPECIFICATION_VERSION),
            s(:send,
              s(:lvar, :spec), :specification_version)))),
      s(:def, :test_self_from_yaml_syck_date_bug,
        s(:args),
        s(:begin,
          s(:lvasgn, :yaml,
            s(:send,
              s(:ivar, :@a1), :to_yaml)),
          s(:send,
            s(:lvar, :yaml), :sub!,
            s(:regexp,
              s(:str, "^date:.*"),
              s(:regopt)),
            s(:str, "date: 2011-04-26 00:00:00.000000000Z")),
          s(:lvasgn, :new_spec,
            s(:block,
              s(:send, nil, :with_syck),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :from_yaml,
                s(:lvar, :yaml)))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Time),
            s(:send,
              s(:ivar, :@a1), :date)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Time),
            s(:send,
              s(:lvar, :new_spec), :date)))),
      s(:def, :test_self_from_yaml_syck_default_key_bug,
        s(:args),
        s(:begin,
          s(:lvasgn, :yaml,
            s(:dstr,
              s(:str, "--- !ruby/object:Gem::Specification\n"),
              s(:str, "name: posix-spawn\n"),
              s(:str, "version: !ruby/object:Gem::Version\n"),
              s(:str, "  version: 0.3.6\n"),
              s(:str, "  prerelease:\n"),
              s(:str, "dependencies:\n"),
              s(:str, "- !ruby/object:Gem::Dependency\n"),
              s(:str, "  name: rake-compiler\n"),
              s(:str, "  requirement: &70243867725240 !ruby/object:Gem::Requirement\n"),
              s(:str, "    none: false\n"),
              s(:str, "    requirements:\n"),
              s(:str, "    - - =\n"),
              s(:str, "      - !ruby/object:Gem::Version\n"),
              s(:str, "        version: 0.7.6\n"),
              s(:str, "  type: :development\n"),
              s(:str, "  prerelease: false\n"),
              s(:str, "  version_requirements: *70243867725240\n"),
              s(:str, "platform: ruby\n"),
              s(:str, "files: []\n"),
              s(:str, "test_files: []\n"),
              s(:str, "bindir:\n"))),
          s(:lvasgn, :new_spec,
            s(:block,
              s(:send, nil, :with_syck),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :from_yaml,
                s(:lvar, :yaml)))),
          s(:lvasgn, :op,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :new_spec), :dependencies), :first), :requirement), :requirements), :first), :first)),
          s(:send, nil, :refute_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :YAML), :Syck), :DefaultKey),
            s(:lvar, :op)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "DefaultKey"),
              s(:regopt)),
            s(:send,
              s(:lvar, :new_spec), :to_ruby)))),
      s(:def, :test_self_from_yaml_cleans_up_defaultkey,
        s(:args),
        s(:begin,
          s(:lvasgn, :yaml,
            s(:dstr,
              s(:str, "--- !ruby/object:Gem::Specification\n"),
              s(:str, "name: posix-spawn\n"),
              s(:str, "version: !ruby/object:Gem::Version\n"),
              s(:str, "  version: 0.3.6\n"),
              s(:str, "  prerelease:\n"),
              s(:str, "dependencies:\n"),
              s(:str, "- !ruby/object:Gem::Dependency\n"),
              s(:str, "  name: rake-compiler\n"),
              s(:str, "  requirement: &70243867725240 !ruby/object:Gem::Requirement\n"),
              s(:str, "    none: false\n"),
              s(:str, "    requirements:\n"),
              s(:str, "    - - !ruby/object:YAML::Syck::DefaultKey {}\n"),
              s(:str, "\n"),
              s(:str, "      - !ruby/object:Gem::Version\n"),
              s(:str, "        version: 0.7.6\n"),
              s(:str, "  type: :development\n"),
              s(:str, "  prerelease: false\n"),
              s(:str, "  version_requirements: *70243867725240\n"),
              s(:str, "platform: ruby\n"),
              s(:str, "files: []\n"),
              s(:str, "test_files: []\n"),
              s(:str, "bindir:\n"))),
          s(:lvasgn, :new_spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :from_yaml,
              s(:lvar, :yaml))),
          s(:lvasgn, :op,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :new_spec), :dependencies), :first), :requirement), :requirements), :first), :first)),
          s(:send, nil, :refute_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :YAML), :Syck), :DefaultKey),
            s(:lvar, :op)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "DefaultKey"),
              s(:regopt)),
            s(:send,
              s(:lvar, :new_spec), :to_ruby)))),
      s(:def, :test_self_from_yaml_cleans_up_defaultkey_from_newer_192,
        s(:args),
        s(:begin,
          s(:lvasgn, :yaml,
            s(:dstr,
              s(:str, "--- !ruby/object:Gem::Specification\n"),
              s(:str, "name: posix-spawn\n"),
              s(:str, "version: !ruby/object:Gem::Version\n"),
              s(:str, "  version: 0.3.6\n"),
              s(:str, "  prerelease:\n"),
              s(:str, "dependencies:\n"),
              s(:str, "- !ruby/object:Gem::Dependency\n"),
              s(:str, "  name: rake-compiler\n"),
              s(:str, "  requirement: &70243867725240 !ruby/object:Gem::Requirement\n"),
              s(:str, "    none: false\n"),
              s(:str, "    requirements:\n"),
              s(:str, "    - - !ruby/object:Syck::DefaultKey {}\n"),
              s(:str, "\n"),
              s(:str, "      - !ruby/object:Gem::Version\n"),
              s(:str, "        version: 0.7.6\n"),
              s(:str, "  type: :development\n"),
              s(:str, "  prerelease: false\n"),
              s(:str, "  version_requirements: *70243867725240\n"),
              s(:str, "platform: ruby\n"),
              s(:str, "files: []\n"),
              s(:str, "test_files: []\n"),
              s(:str, "bindir:\n"))),
          s(:lvasgn, :new_spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :from_yaml,
              s(:lvar, :yaml))),
          s(:lvasgn, :op,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :new_spec), :dependencies), :first), :requirement), :requirements), :first), :first)),
          s(:send, nil, :refute_kind_of,
            s(:const,
              s(:const,
                s(:const, nil, :YAML), :Syck), :DefaultKey),
            s(:lvar, :op)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "DefaultKey"),
              s(:regopt)),
            s(:send,
              s(:lvar, :new_spec), :to_ruby)))),
      s(:def, :test_self_from_yaml_cleans_up_Date_objects,
        s(:args),
        s(:begin,
          s(:lvasgn, :yaml,
            s(:dstr,
              s(:str, "--- !ruby/object:Gem::Specification\n"),
              s(:str, "rubygems_version: 0.8.1\n"),
              s(:str, "specification_version: 1\n"),
              s(:str, "name: diff-lcs\n"),
              s(:str, "version: !ruby/object:Gem::Version\n"),
              s(:str, "  version: 1.1.2\n"),
              s(:str, "date: 2004-10-20\n"),
              s(:str, "summary: Provides a list of changes that represent the difference between two sequenced collections.\n"),
              s(:str, "require_paths:\n"),
              s(:str, "  - lib\n"),
              s(:str, "author: Austin Ziegler\n"),
              s(:str, "email: diff-lcs@halostatue.ca\n"),
              s(:str, "homepage: http://rubyforge.org/projects/ruwiki/\n"),
              s(:str, "rubyforge_project: ruwiki\n"),
              s(:str, "description: \"Test\"\n"),
              s(:str, "bindir: bin\n"),
              s(:str, "has_rdoc: true\n"),
              s(:str, "required_ruby_version: !ruby/object:Gem::Version::Requirement\n"),
              s(:str, "  requirements:\n"),
              s(:str, "    -\n"),
              s(:str, "      - \">=\"\n"),
              s(:str, "      - !ruby/object:Gem::Version\n"),
              s(:str, "        version: 1.8.1\n"),
              s(:str, "  version:\n"),
              s(:str, "platform: ruby\n"),
              s(:str, "files:\n"),
              s(:str, "  - tests/00test.rb\n"),
              s(:str, "rdoc_options:\n"),
              s(:str, "  - \"--title\"\n"),
              s(:str, "  - \"Diff::LCS -- A Diff Algorithm\"\n"),
              s(:str, "  - \"--main\"\n"),
              s(:str, "  - README\n"),
              s(:str, "  - \"--line-numbers\"\n"),
              s(:str, "extra_rdoc_files:\n"),
              s(:str, "  - README\n"),
              s(:str, "  - ChangeLog\n"),
              s(:str, "  - Install\n"),
              s(:str, "executables:\n"),
              s(:str, "  - ldiff\n"),
              s(:str, "  - htmldiff\n"),
              s(:str, "extensions: []\n"),
              s(:str, "requirements: []\n"),
              s(:str, "dependencies: []\n"))),
          s(:lvasgn, :new_spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :from_yaml,
              s(:lvar, :yaml))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Time),
            s(:send,
              s(:lvar, :new_spec), :date)))),
      s(:def, :test_self_load,
        s(:args),
        s(:begin,
          s(:lvasgn, :full_path,
            s(:send,
              s(:ivar, :@a2), :spec_file)),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :full_path)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:ivar, :@a2), :to_ruby_for_cache))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :load,
              s(:lvar, :full_path))),
          s(:send,
            s(:send,
              s(:ivar, :@a2), :files), :clear),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :spec)))),
      s(:def, :test_self_load_relative,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :open,
              s(:str, "a-2.gemspec"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:ivar, :@a2), :to_ruby_for_cache))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :load,
              s(:str, "a-2.gemspec"))),
          s(:send,
            s(:send,
              s(:ivar, :@a2), :files), :clear),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :spec)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "a-2.gemspec")),
            s(:send,
              s(:lvar, :spec), :loaded_from)))),
      s(:def, :test_self_load_tainted,
        s(:args),
        s(:begin,
          s(:lvasgn, :full_path,
            s(:send,
              s(:ivar, :@a2), :spec_file)),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :full_path)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:ivar, :@a2), :to_ruby_for_cache))),
          s(:send,
            s(:lvar, :full_path), :taint),
          s(:lvasgn, :loader,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:begin,
                s(:gvasgn, :$SAFE,
                  s(:int, 1)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :load,
                  s(:lvar, :full_path))))),
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :loader), :value)),
          s(:send,
            s(:send,
              s(:ivar, :@a2), :files), :clear),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :spec)))),
      s(:def, :test_self_load_escape_curly,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :name=,
            s(:str, "a};raise \"improper escaping\";%q{")),
          s(:lvasgn, :full_path,
            s(:send,
              s(:ivar, :@a2), :spec_file)),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :write_file,
                  s(:lvar, :full_path)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send,
                    s(:ivar, :@a2), :to_ruby_for_cache))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:send, nil, :skip,
                  s(:dstr,
                    s(:str, "cannot create '"),
                    s(:begin,
                      s(:lvar, :full_path)),
                    s(:str, "' on this platform")))), nil)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :load,
              s(:lvar, :full_path))),
          s(:send,
            s(:send,
              s(:ivar, :@a2), :files), :clear),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :spec)))),
      s(:def, :test_self_load_escape_interpolation,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :name=,
            s(:str, "a\#{raise %<improper escaping>}")),
          s(:lvasgn, :full_path,
            s(:send,
              s(:ivar, :@a2), :spec_file)),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :write_file,
                  s(:lvar, :full_path)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send,
                    s(:ivar, :@a2), :to_ruby_for_cache))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:send, nil, :skip,
                  s(:dstr,
                    s(:str, "cannot create '"),
                    s(:begin,
                      s(:lvar, :full_path)),
                    s(:str, "' on this platform")))), nil)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :load,
              s(:lvar, :full_path))),
          s(:send,
            s(:send,
              s(:ivar, :@a2), :files), :clear),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :spec)))),
      s(:def, :test_self_load_escape_quote,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :name=,
            s(:str, "a\";raise \"improper escaping\";\"")),
          s(:lvasgn, :full_path,
            s(:send,
              s(:ivar, :@a2), :spec_file)),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :write_file,
                  s(:lvar, :full_path)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send,
                    s(:ivar, :@a2), :to_ruby_for_cache))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EINVAL)), nil,
                s(:send, nil, :skip,
                  s(:dstr,
                    s(:str, "cannot create '"),
                    s(:begin,
                      s(:lvar, :full_path)),
                    s(:str, "' on this platform")))), nil)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :load,
              s(:lvar, :full_path))),
          s(:send,
            s(:send,
              s(:ivar, :@a2), :files), :clear),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :spec)))),
      s(:if,
        s(:defined?,
          s(:const, nil, :Encoding)),
        s(:def, :test_self_load_utf8_with_ascii_encoding,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :int_enc,
                s(:send,
                  s(:const, nil, :Encoding), :default_internal)),
              s(:block,
                s(:send, nil, :silence_warnings),
                s(:args),
                s(:send,
                  s(:const, nil, :Encoding), :default_internal=,
                  s(:str, "US-ASCII"))),
              s(:lvasgn, :spec2,
                s(:send,
                  s(:ivar, :@a2), :dup)),
              s(:lvasgn, :bin,
                s(:send,
                  s(:str, "噸"), :dup)),
              s(:send,
                s(:lvar, :spec2), :authors=,
                s(:array,
                  s(:lvar, :bin))),
              s(:lvasgn, :full_path,
                s(:send,
                  s(:lvar, :spec2), :spec_file)),
              s(:block,
                s(:send, nil, :write_file,
                  s(:lvar, :full_path)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :spec2), :to_ruby_for_cache), :force_encoding,
                      s(:str, "BINARY")), :sub,
                    s(:str, "\\u{5678}"),
                    s(:send,
                      s(:lvar, :bin), :force_encoding,
                      s(:str, "BINARY"))))),
              s(:lvasgn, :spec,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :load,
                  s(:lvar, :full_path))),
              s(:send,
                s(:send,
                  s(:lvar, :spec2), :files), :clear),
              s(:send, nil, :assert_equal,
                s(:lvar, :spec2),
                s(:lvar, :spec))),
            s(:block,
              s(:send, nil, :silence_warnings),
              s(:args),
              s(:send,
                s(:const, nil, :Encoding), :default_internal=,
                s(:lvar, :int_enc))))), nil),
      s(:def, :test_self_load_legacy_ruby,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Deprecate), :skip_during),
              s(:args),
              s(:send, nil, :eval,
                s(:const, nil, :LEGACY_RUBY_SPEC)))),
          s(:send, nil, :assert_equal,
            s(:str, "keyedlist"),
            s(:send,
              s(:lvar, :spec), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "0.4.0"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :version), :to_s)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Specification), :TODAY),
            s(:send,
              s(:lvar, :spec), :date)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:lvar, :spec), :required_ruby_version), :satisfied_by?,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "1")))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:lvar, :spec), :has_unit_tests?)))),
      s(:def, :test_self_normalize_yaml_input_with_183_yaml,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:str, "!ruby/object:Gem::Specification ")),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "--- "),
              s(:begin,
                s(:lvar, :input))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :normalize_yaml_input,
              s(:lvar, :input))))),
      s(:def, :test_self_normalize_yaml_input_with_non_183_yaml,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:str, "--- !ruby/object:Gem::Specification ")),
          s(:send, nil, :assert_equal,
            s(:lvar, :input),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :normalize_yaml_input,
              s(:lvar, :input))))),
      s(:def, :test_self_normalize_yaml_input_with_183_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:str, "!ruby/object:Gem::Specification ")),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "--- "),
              s(:begin,
                s(:lvar, :input))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :normalize_yaml_input,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:lvar, :input)))))),
      s(:def, :test_self_normalize_yaml_input_with_non_183_io,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:str, "--- !ruby/object:Gem::Specification ")),
          s(:send, nil, :assert_equal,
            s(:lvar, :input),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :normalize_yaml_input,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:lvar, :input)))))),
      s(:def, :test_self_normalize_yaml_input_with_192_yaml,
        s(:args),
        s(:begin,
          s(:lvasgn, :input,
            s(:str, "--- !ruby/object:Gem::Specification \nblah: !!null \n")),
          s(:lvasgn, :expected,
            s(:str, "--- !ruby/object:Gem::Specification \nblah: \n")),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :normalize_yaml_input,
              s(:lvar, :input))))),
      s(:def, :test_self_outdated,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :download,
                s(:str, "a"),
                s(:int, 4)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a")),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :outdated)))),
      s(:def, :test_self_outdated_and_latest_remotes,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :download,
                  s(:str, "a"),
                  s(:int, 4)),
                s(:send,
                  s(:lvar, :fetcher), :download,
                  s(:str, "b"),
                  s(:int, 3)),
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:str, "3.a")),
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "b"),
                  s(:int, 2))))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:send,
                  s(:lvar, :specs), :[],
                  s(:str, "a-3.a")),
                s(:send, nil, :v,
                  s(:int, 4))),
              s(:array,
                s(:send,
                  s(:lvar, :specs), :[],
                  s(:str, "b-2")),
                s(:send, nil, :v,
                  s(:int, 3))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :outdated_and_latest_version), :to_a)))),
      s(:def, :test_self_remove_spec,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:ivar, :@a1)),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a-1")),
          s(:send, nil, :assert_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :stubs), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name)),
            s(:str, "a-1")),
          s(:send, nil, :uninstall_gem,
            s(:ivar, :@a1)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send, nil, :refute_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a-1")),
          s(:send, nil, :refute_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :stubs), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name)),
            s(:str, "a-1")))),
      s(:def, :test_self_remove_spec_removed,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:ivar, :@a1), :spec_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:ivar, :@a1), :to_ruby))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:ivar, :@a1), :spec_file)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send, nil, :refute_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a-1")),
          s(:send, nil, :refute_includes,
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :stubs), :map),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :full_name)),
            s(:str, "a-1")))),
      s(:casgn, nil, :DATA_PATH,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "../data"),
          s(:str, "(string)"))),
      s(:def, :test_handles_private_null_type,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :DATA_PATH),
              s(:str, "null-type.gemspec.rz"))),
          s(:lvasgn, :data,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Gem), :inflate,
                s(:send,
                  s(:const, nil, :Gem), :read_binary,
                  s(:lvar, :path))))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :data), :rubyforge_project)))),
      s(:if,
        s(:send,
          s(:const, nil, :RUBY_VERSION), :=~,
          s(:regexp,
            s(:str, "1\\.9\\.2"),
            s(:regopt))),
        s(:def, :test_emits_zulu_timestamps_properly,
          s(:args),
          s(:begin,
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :Time), :utc,
                s(:int, 2012),
                s(:int, 3),
                s(:int, 12))),
            s(:send,
              s(:ivar, :@a2), :date=,
              s(:lvar, :t)),
            s(:lvasgn, :yaml,
              s(:block,
                s(:send, nil, :with_psych),
                s(:args),
                s(:send,
                  s(:ivar, :@a2), :to_yaml))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "date: 2012-03-12 00:00:00\\.000000000 Z"),
                s(:regopt)),
              s(:lvar, :yaml)))), nil),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :name=,
                  s(:str, "blah")),
                s(:send,
                  s(:lvar, :s), :version=,
                  s(:str, "1.3.5"))))),
          s(:send, nil, :assert_equal,
            s(:str, "blah"),
            s(:send,
              s(:lvar, :spec), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "1.3.5"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :version), :to_s)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:send,
              s(:lvar, :spec), :platform)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:lvar, :spec), :summary)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :files)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :test_files)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :rdoc_options)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :extra_rdoc_files)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :executables)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :extensions)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :requirements)),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:lvar, :spec), :dependencies)),
          s(:send, nil, :assert_equal,
            s(:str, "bin"),
            s(:send,
              s(:lvar, :spec), :bindir)),
          s(:send, nil, :assert_equal,
            s(:str, ">= 0"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :required_ruby_version), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, ">= 0"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :required_rubygems_version), :to_s)))),
      s(:def, :test_initialize_future,
        s(:args),
        s(:begin,
          s(:lvasgn, :version,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :CURRENT_SPECIFICATION_VERSION), :+,
              s(:int, 1))),
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :name=,
                  s(:str, "blah")),
                s(:send,
                  s(:lvar, :s), :version=,
                  s(:str, "1.3.5")),
                s(:send,
                  s(:lvar, :s), :specification_version=,
                  s(:lvar, :version)),
                s(:send,
                  s(:lvar, :s), :new_unknown_attribute=,
                  s(:str, "a value"))))),
          s(:send, nil, :assert_equal,
            s(:str, "blah"),
            s(:send,
              s(:lvar, :spec), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "1.3.5"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :version), :to_s)))),
      s(:def, :test_initialize_copy,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :name=,
                  s(:str, "blah")),
                s(:send,
                  s(:lvar, :s), :version=,
                  s(:str, "1.3.5")),
                s(:send,
                  s(:lvar, :s), :summary=,
                  s(:str, "summary")),
                s(:send,
                  s(:lvar, :s), :description=,
                  s(:str, "description")),
                s(:send,
                  s(:lvar, :s), :authors=,
                  s(:array,
                    s(:str, "author a"),
                    s(:str, "author b"))),
                s(:send,
                  s(:lvar, :s), :licenses=,
                  s(:str, "BSD-2-Clause")),
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:str, "lib/file.rb")),
                s(:send,
                  s(:lvar, :s), :test_files=,
                  s(:str, "test/file.rb")),
                s(:send,
                  s(:lvar, :s), :rdoc_options=,
                  s(:str, "--foo")),
                s(:send,
                  s(:lvar, :s), :extra_rdoc_files=,
                  s(:str, "README.txt")),
                s(:send,
                  s(:lvar, :s), :executables=,
                  s(:str, "exec")),
                s(:send,
                  s(:lvar, :s), :extensions=,
                  s(:str, "ext/extconf.rb")),
                s(:send,
                  s(:lvar, :s), :requirements=,
                  s(:str, "requirement")),
                s(:send,
                  s(:lvar, :s), :add_dependency,
                  s(:str, "some_gem"))))),
          s(:lvasgn, :new_spec,
            s(:send,
              s(:lvar, :spec), :dup)),
          s(:send, nil, :assert_equal,
            s(:str, "blah"),
            s(:send,
              s(:lvar, :spec), :name)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :spec), :name),
            s(:send,
              s(:lvar, :new_spec), :name)),
          s(:send, nil, :assert_equal,
            s(:str, "1.3.5"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :version), :to_s)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :spec), :version),
            s(:send,
              s(:lvar, :new_spec), :version)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:send,
              s(:lvar, :spec), :platform)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :spec), :platform),
            s(:send,
              s(:lvar, :new_spec), :platform)),
          s(:send, nil, :assert_equal,
            s(:str, "summary"),
            s(:send,
              s(:lvar, :spec), :summary)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :spec), :summary),
            s(:send,
              s(:lvar, :new_spec), :summary)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:str, "README.txt"),
                s(:str, "bin/exec"),
                s(:str, "ext/extconf.rb"),
                s(:str, "lib/file.rb"),
                s(:str, "test/file.rb")), :sort),
            s(:send,
              s(:lvar, :spec), :files)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :files),
            s(:send,
              s(:lvar, :new_spec), :files),
            s(:str, "files")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "test/file.rb")),
            s(:send,
              s(:lvar, :spec), :test_files)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :test_files),
            s(:send,
              s(:lvar, :new_spec), :test_files),
            s(:str, "test_files")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "--foo")),
            s(:send,
              s(:lvar, :spec), :rdoc_options)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :rdoc_options),
            s(:send,
              s(:lvar, :new_spec), :rdoc_options),
            s(:str, "rdoc_options")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "README.txt")),
            s(:send,
              s(:lvar, :spec), :extra_rdoc_files)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :extra_rdoc_files),
            s(:send,
              s(:lvar, :new_spec), :extra_rdoc_files),
            s(:str, "extra_rdoc_files")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "exec")),
            s(:send,
              s(:lvar, :spec), :executables)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :executables),
            s(:send,
              s(:lvar, :new_spec), :executables),
            s(:str, "executables")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "ext/extconf.rb")),
            s(:send,
              s(:lvar, :spec), :extensions)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :extensions),
            s(:send,
              s(:lvar, :new_spec), :extensions),
            s(:str, "extensions")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "requirement")),
            s(:send,
              s(:lvar, :spec), :requirements)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :requirements),
            s(:send,
              s(:lvar, :new_spec), :requirements),
            s(:str, "requirements")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:str, "some_gem"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default))),
            s(:send,
              s(:lvar, :spec), :dependencies)),
          s(:send, nil, :refute_same,
            s(:send,
              s(:lvar, :spec), :dependencies),
            s(:send,
              s(:lvar, :new_spec), :dependencies),
            s(:str, "dependencies")),
          s(:send, nil, :assert_equal,
            s(:str, "bin"),
            s(:send,
              s(:lvar, :spec), :bindir)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :spec), :bindir),
            s(:send,
              s(:lvar, :new_spec), :bindir)),
          s(:send, nil, :assert_equal,
            s(:str, ">= 0"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :required_ruby_version), :to_s)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :spec), :required_ruby_version),
            s(:send,
              s(:lvar, :new_spec), :required_ruby_version)),
          s(:send, nil, :assert_equal,
            s(:str, ">= 0"),
            s(:send,
              s(:send,
                s(:lvar, :spec), :required_rubygems_version), :to_s)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:lvar, :spec), :required_rubygems_version),
            s(:send,
              s(:lvar, :new_spec), :required_rubygems_version)))),
      s(:def, :test_initialize_copy_broken,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :name=,
                  s(:str, "a")),
                s(:send,
                  s(:lvar, :s), :version=,
                  s(:str, "1"))))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@licenses),
            s(:sym, :blah)),
          s(:send,
            s(:lvar, :spec), :loaded_from=,
            s(:str, "/path/to/file")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :FormatException)),
              s(:args),
              s(:send,
                s(:lvar, :spec), :dup))),
          s(:send, nil, :assert_equal,
            s(:str, "a-1 has an invalid value for @licenses"),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:str, "/path/to/file"),
            s(:send,
              s(:lvar, :e), :file_path)))),
      s(:def, :test__dump,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :platform=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local)),
          s(:send,
            s(:ivar, :@a2), :instance_variable_set,
            s(:sym, :@original_platform),
            s(:str, "old_platform")),
          s(:lvasgn, :data,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:ivar, :@a2))),
          s(:lvasgn, :same_spec,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :data))),
          s(:send, nil, :assert_equal,
            s(:str, "old_platform"),
            s(:send,
              s(:lvar, :same_spec), :original_platform)))),
      s(:def, :test_activate,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :activate),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@a2), :activated?)))),
      s(:def, :test_add_dependency_with_type,
        s(:args),
        s(:begin,
          s(:lvasgn, :gem,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "awesome"),
                s(:str, "1.0")),
              s(:args,
                s(:arg, :awesome)),
              s(:begin,
                s(:send,
                  s(:lvar, :awesome), :add_dependency,
                  s(:true)),
                s(:send,
                  s(:lvar, :awesome), :add_dependency,
                  s(:sym, :gem_name))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "true"),
              s(:str, "gem_name")),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :gem), :dependencies), :map),
              s(:args,
                s(:arg, :dep)),
              s(:send,
                s(:lvar, :dep), :name))))),
      s(:def, :test_add_dependency_from_existing_dependency,
        s(:args),
        s(:begin,
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "existing_dep"),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :new,
                s(:str, "> 1")),
              s(:sym, :runtime))),
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :add_dependency,
                s(:lvar, :dep)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :dep),
            s(:send,
              s(:send,
                s(:lvar, :spec), :dependencies), :first)))),
      s(:def, :test_add_dependency_with_type_explicit,
        s(:args),
        s(:begin,
          s(:lvasgn, :gem,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "awesome"),
                s(:str, "1.0")),
              s(:args,
                s(:arg, :awesome)),
              s(:send,
                s(:lvar, :awesome), :add_development_dependency,
                s(:str, "monkey")))),
          s(:lvasgn, :monkey,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :gem), :dependencies), :detect),
              s(:args,
                s(:arg, :d)),
              s(:send,
                s(:send,
                  s(:lvar, :d), :name), :==,
                s(:str, "monkey")))),
          s(:send, nil, :assert_equal,
            s(:sym, :development),
            s(:send,
              s(:lvar, :monkey), :type)))),
      s(:def, :test_author,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "A User"),
          s(:send,
            s(:ivar, :@a1), :author))),
      s(:def, :test_authors,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "A User")),
          s(:send,
            s(:ivar, :@a1), :authors))),
      s(:def, :test_bindir_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :bindir=,
            s(:str, "apps")),
          s(:send, nil, :assert_equal,
            s(:str, "apps"),
            s(:send,
              s(:ivar, :@a1), :bindir)))),
      s(:def, :test_bindir_equals_nil,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :bindir=,
            s(:nil)),
          s(:send,
            s(:ivar, :@a2), :executable=,
            s(:str, "app")),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@a2), :bindir)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:str, "app"),
                s(:str, "lib/code.rb")), :sort),
            s(:send,
              s(:ivar, :@a2), :files)))),
      s(:def, :test_extensions_equals_nil,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :instance_variable_set,
            s(:sym, :@extensions),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@a2), :instance_variable_get,
              s(:sym, :@extensions))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:ivar, :@a2), :files)))),
      s(:def, :test_test_files_equals_nil,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :instance_variable_set,
            s(:sym, :@test_files),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@a2), :instance_variable_get,
              s(:sym, :@test_files))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:ivar, :@a2), :files)))),
      s(:def, :test_executables_equals_nil,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :instance_variable_set,
            s(:sym, :@executables),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@a2), :instance_variable_get,
              s(:sym, :@executables))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:ivar, :@a2), :files)))),
      s(:def, :test_extra_rdoc_files_equals_nil,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :instance_variable_set,
            s(:sym, :@extra_rdoc_files),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@a2), :instance_variable_get,
              s(:sym, :@extra_rdoc_files))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/code.rb")),
            s(:send,
              s(:ivar, :@a2), :files)))),
      s(:def, :test_build_args,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ext), :build_args)),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:ivar, :@ext), :build_info_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ext), :build_args)),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:ivar, :@ext), :build_info_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "--with-foo-dir=wherever"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "--with-foo-dir=wherever")),
            s(:send,
              s(:ivar, :@ext), :build_args)))),
      s(:def, :test_build_extensions,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:ivar, :@ext), :extension_dir),
            s(:str, "sanity check")),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@ext), :extensions),
            s(:str, "sanity check")),
          s(:lvasgn, :extconf_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@ext), :gem_dir),
              s(:send,
                s(:send,
                  s(:ivar, :@ext), :extensions), :first))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :extconf_rb))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :extconf_rb),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:dstr,
                s(:str, "        open 'Makefile', 'w' do |f|\n"),
                s(:str, "          f.puts \"clean:\\n\\techo clean\"\n"),
                s(:str, "          f.puts \"default:\\n\\techo built\"\n"),
                s(:str, "          f.puts \"install:\\n\\techo installed\"\n"),
                s(:str, "        end\n")))),
          s(:send,
            s(:ivar, :@ext), :build_extensions),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:ivar, :@ext), :extension_dir)))),
      s(:def, :test_default_spec_stub_is_marked_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :default,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:int, 2))),
          s(:send, nil, :install_default_gems,
            s(:lvar, :default)),
          s(:lvasgn, :stub,
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :stubs), :find),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :name), :==,
                s(:str, "default")))),
          s(:send, nil, :assert_predicate,
            s(:lvar, :stub),
            s(:sym, :default_gem?)),
          s(:lvasgn, :stub,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :find_all_by_name,
                s(:str, "default")), :first)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :stub),
            s(:sym, :default_gem?)))),
      s(:def, :test_build_extensions_built,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@ext), :extensions),
            s(:str, "sanity check")),
          s(:lvasgn, :gem_build_complete,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@ext), :extension_dir),
              s(:str, "gem.build_complete"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:ivar, :@ext), :extension_dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:lvar, :gem_build_complete)),
          s(:send,
            s(:ivar, :@ext), :build_extensions),
          s(:lvasgn, :gem_make_out,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@ext), :extension_dir),
              s(:str, "gem_make.out"))),
          s(:send, nil, :refute_path_exists,
            s(:lvar, :gem_make_out)))),
      s(:def, :test_build_extensions_default_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:int, 1))),
          s(:send,
            s(:send,
              s(:lvar, :spec), :extensions), :<<,
            s(:str, "extconf.rb")),
          s(:lvasgn, :extconf_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:lvar, :spec), :gem_dir),
              s(:send,
                s(:send,
                  s(:lvar, :spec), :extensions), :first))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :extconf_rb))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :extconf_rb),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:dstr,
                s(:str, "        open 'Makefile', 'w' do |f|\n"),
                s(:str, "          f.puts \"default:\\n\\techo built\"\n"),
                s(:str, "          f.puts \"install:\\n\\techo installed\"\n"),
                s(:str, "        end\n")))),
          s(:send,
            s(:lvar, :spec), :build_extensions),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :spec), :extension_dir)))),
      s(:def, :test_build_extensions_error,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@ext), :extensions),
            s(:str, "sanity check")),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :BuildError)),
            s(:args),
            s(:send,
              s(:ivar, :@ext), :build_extensions)))),
      s(:def, :test_build_extensions_extensions_dir_unwritable,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :Gem), :win_platform?),
              s(:send, nil, :skip,
                s(:str, "chmod not supported")), nil),
            s(:send, nil, :ext_spec),
            s(:send, nil, :refute_empty,
              s(:send,
                s(:ivar, :@ext), :extensions),
              s(:str, "sanity check")),
            s(:lvasgn, :extconf_rb,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@ext), :gem_dir),
                s(:send,
                  s(:send,
                    s(:ivar, :@ext), :extensions), :first))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :extconf_rb))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :extconf_rb),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :write,
                s(:dstr,
                  s(:str, "        open 'Makefile', 'w' do |f|\n"),
                  s(:str, "          f.puts \"clean:\\n\\techo clean\"\n"),
                  s(:str, "          f.puts \"default:\\n\\techo built\"\n"),
                  s(:str, "          f.puts \"install:\\n\\techo installed\"\n"),
                  s(:str, "        end\n")))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@ext), :base_dir),
                s(:str, "extensions"))),
            s(:send,
              s(:const, nil, :FileUtils), :chmod,
              s(:int, 365),
              s(:send,
                s(:ivar, :@ext), :base_dir)),
            s(:send,
              s(:const, nil, :FileUtils), :chmod,
              s(:int, 365),
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@ext), :base_dir),
                s(:str, "extensions"))),
            s(:send,
              s(:ivar, :@ext), :build_extensions),
            s(:send, nil, :refute_path_exists,
              s(:send,
                s(:ivar, :@ext), :extension_dir))),
          s(:if,
            s(:begin,
              s(:or,
                s(:gvar, :$DEBUG),
                s(:send, nil, :win_platform?))), nil,
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :chmod,
                s(:int, 493),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:ivar, :@ext), :base_dir),
                  s(:str, "extensions"))),
              s(:send,
                s(:const, nil, :FileUtils), :chmod,
                s(:int, 493),
                s(:send,
                  s(:ivar, :@ext), :base_dir)))))),
      s(:def, :test_build_extensions_no_extensions_dir_unwritable,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :Gem), :win_platform?),
              s(:send, nil, :skip,
                s(:str, "chmod not supported")), nil),
            s(:send, nil, :ext_spec),
            s(:send, nil, :refute_empty,
              s(:send,
                s(:ivar, :@ext), :extensions),
              s(:str, "sanity check")),
            s(:lvasgn, :extconf_rb,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@ext), :gem_dir),
                s(:send,
                  s(:send,
                    s(:ivar, :@ext), :extensions), :first))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :extconf_rb))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :extconf_rb),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :write,
                s(:dstr,
                  s(:str, "        open 'Makefile', 'w' do |f|\n"),
                  s(:str, "          f.puts \"clean:\\n\\techo clean\"\n"),
                  s(:str, "          f.puts \"default:\\n\\techo built\"\n"),
                  s(:str, "          f.puts \"install:\\n\\techo installed\"\n"),
                  s(:str, "        end\n")))),
            s(:send,
              s(:const, nil, :FileUtils), :rm_r,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@gemhome),
                s(:str, "extensions"))),
            s(:send,
              s(:const, nil, :FileUtils), :chmod,
              s(:int, 365),
              s(:ivar, :@gemhome)),
            s(:send,
              s(:ivar, :@ext), :build_extensions),
            s(:lvasgn, :gem_make_out,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@ext), :extension_dir),
                s(:str, "gem_make.out"))),
            s(:send, nil, :refute_path_exists,
              s(:lvar, :gem_make_out))),
          s(:send,
            s(:const, nil, :FileUtils), :chmod,
            s(:int, 493),
            s(:ivar, :@gemhome)))),
      s(:def, :test_build_extensions_none,
        s(:args),
        s(:begin,
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:ivar, :@a1), :extension_dir),
            s(:str, "sanity check")),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@a1), :extensions),
            s(:str, "sanity check")),
          s(:send,
            s(:ivar, :@a1), :build_extensions),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:ivar, :@a1), :extension_dir)))),
      s(:def, :test_build_extensions_old,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@ext), :extensions),
            s(:str, "sanity check")),
          s(:send,
            s(:ivar, :@ext), :installed_by_version=,
            s(:send, nil, :v,
              s(:int, 0))),
          s(:send,
            s(:ivar, :@ext), :build_extensions),
          s(:lvasgn, :gem_make_out,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@ext), :extension_dir),
              s(:str, "gem_make.out"))),
          s(:send, nil, :refute_path_exists,
            s(:lvar, :gem_make_out)))),
      s(:def, :test_build_extensions_preview,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:lvasgn, :extconf_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@ext), :gem_dir),
              s(:send,
                s(:send,
                  s(:ivar, :@ext), :extensions), :first))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :extconf_rb))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :extconf_rb),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:dstr,
                s(:str, "        open 'Makefile', 'w' do |f|\n"),
                s(:str, "          f.puts \"clean:\\n\\techo clean\"\n"),
                s(:str, "          f.puts \"default:\\n\\techo built\"\n"),
                s(:str, "          f.puts \"install:\\n\\techo installed\"\n"),
                s(:str, "        end\n")))),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@ext), :extensions),
            s(:str, "sanity check")),
          s(:send,
            s(:ivar, :@ext), :installed_by_version=,
            s(:send, nil, :v,
              s(:str, "2.2.0.preview.2"))),
          s(:send,
            s(:ivar, :@ext), :build_extensions),
          s(:lvasgn, :gem_make_out,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@ext), :extension_dir),
              s(:str, "gem_make.out"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :gem_make_out)))),
      s(:def, :test_contains_requirable_file_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :code_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@a1), :gem_dir),
              s(:str, "lib"),
              s(:str, "code.rb"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :code_rb))),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:lvar, :code_rb)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@a1), :contains_requirable_file?,
              s(:str, "code"))))),
      s(:def, :test_contains_requirable_file_eh_extension,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :err)),
            s(:block,
              s(:send, nil, :capture_io),
              s(:args),
              s(:send, nil, :refute,
                s(:send,
                  s(:ivar, :@ext), :contains_requirable_file?,
                  s(:str, "nonexistent"))))),
          s(:lvasgn, :expected,
            s(:send,
              s(:str, "Ignoring ext-1 because its extensions are not built.  "), :+,
              s(:str, "Try: gem pristine ext --version 1\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :err)))),
      s(:def, :test_date,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Specification), :TODAY),
          s(:send,
            s(:ivar, :@a1), :date))),
      s(:def, :test_date_equals_date,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:send,
              s(:const, nil, :Date), :new,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :date)))),
      s(:def, :test_date_equals_string,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:str, "2003-09-17")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :date)))),
      s(:def, :test_date_equals_string_bad,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raises,
            s(:const,
              s(:const, nil, :Gem), :InvalidSpecificationException)),
          s(:args),
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:str, "9/11/2003")))),
      s(:def, :test_date_equals_time,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:send,
              s(:const, nil, :Time), :local,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :date)))),
      s(:def, :test_date_equals_time_local,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:send,
              s(:const, nil, :Time), :local,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 19),
              s(:int, 50),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :date)))),
      s(:def, :test_date_equals_time_utc,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 19),
              s(:int, 50),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2003),
              s(:int, 9),
              s(:int, 17),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :date)))),
      s(:def, :test_date_tolerates_hour_sec_zulu,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:str, "2012-01-12 11:22:33.4444444 Z")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2012),
              s(:int, 1),
              s(:int, 12),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :date)))),
      s(:def, :test_date_tolerates_hour_sec_and_timezone,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :date=,
            s(:str, "2012-01-12 11:22:33.4444444 +02:33")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2012),
              s(:int, 1),
              s(:int, 12),
              s(:int, 0),
              s(:int, 0),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :date)))),
      s(:def, :test_dependencies,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_deps),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@bonobo),
              s(:ivar, :@monkey)),
            s(:send,
              s(:ivar, :@gem), :dependencies)))),
      s(:def, :test_dependent_gems,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_deps),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@gem), :dependent_gems)),
          s(:lvasgn, :bonobo,
            s(:send, nil, :util_spec,
              s(:str, "bonobo"),
              s(:int, 1))),
          s(:send, nil, :install_gem,
            s(:lvar, :bonobo)),
          s(:send, nil, :install_gem,
            s(:ivar, :@gem)),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:ivar, :@gem),
                s(:ivar, :@bonobo),
                s(:array,
                  s(:lvar, :bonobo))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :bonobo), :dependent_gems)))),
      s(:def, :test_doc_dir,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :File), :join,
            s(:ivar, :@gemhome),
            s(:str, "doc"),
            s(:str, "a-1")),
          s(:send,
            s(:ivar, :@a1), :doc_dir))),
      s(:def, :test_doc_dir_type,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :File), :join,
            s(:ivar, :@gemhome),
            s(:str, "doc"),
            s(:str, "a-1"),
            s(:str, "ri")),
          s(:send,
            s(:ivar, :@a1), :doc_dir,
            s(:str, "ri")))),
      s(:def, :test_runtime_dependencies,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_deps),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@bonobo)),
            s(:send,
              s(:ivar, :@gem), :runtime_dependencies)))),
      s(:def, :test_development_dependencies,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_deps),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@monkey)),
            s(:send,
              s(:ivar, :@gem), :development_dependencies)))),
      s(:def, :test_description,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "This is a test description"),
          s(:send,
            s(:ivar, :@a1), :description))),
      s(:def, :test_eql_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :g1,
            s(:send, nil, :new_spec,
              s(:str, "gem"),
              s(:int, 1))),
          s(:lvasgn, :g2,
            s(:send, nil, :new_spec,
              s(:str, "gem"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:lvar, :g1),
            s(:lvar, :g2)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :g1), :hash),
            s(:send,
              s(:lvar, :g2), :hash)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :g1), :eql?,
              s(:lvar, :g2))))),
      s(:def, :test_eql_eh_extensions,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@a1), :dup)),
          s(:send,
            s(:lvar, :spec), :extensions=,
            s(:str, "xx")),
          s(:send, nil, :refute_operator,
            s(:ivar, :@a1),
            s(:sym, :eql?),
            s(:lvar, :spec)),
          s(:send, nil, :refute_operator,
            s(:lvar, :spec),
            s(:sym, :eql?),
            s(:ivar, :@a1)))),
      s(:def, :test_executables,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :executable=,
            s(:str, "app")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "app")),
            s(:send,
              s(:ivar, :@a1), :executables)))),
      s(:def, :test_executable_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :executable=,
            s(:str, "app")),
          s(:send, nil, :assert_equal,
            s(:str, "app"),
            s(:send,
              s(:ivar, :@a2), :executable)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:str, "bin/app"),
                s(:str, "lib/code.rb")), :sort),
            s(:send,
              s(:ivar, :@a2), :files)))),
      s(:def, :test_extensions,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "ext/extconf.rb")),
          s(:send,
            s(:send, nil, :ext_spec), :extensions))),
      s(:def, :test_extension_dir,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :enable_shared),
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[]=,
                  s(:str, "ENABLE_SHARED"))),
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "ENABLE_SHARED")),
                s(:str, "no"))),
            s(:send, nil, :ext_spec),
            s(:send, nil, :refute_empty,
              s(:send,
                s(:ivar, :@ext), :extensions)),
            s(:lvasgn, :expected,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@ext), :base_dir),
                s(:str, "extensions"),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :local), :to_s),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Gem), :ruby_api_version)),
                  s(:str, "-static")),
                s(:send,
                  s(:ivar, :@ext), :full_name))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:ivar, :@ext), :extension_dir))),
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[]=,
            s(:str, "ENABLE_SHARED"),
            s(:lvar, :enable_shared)))),
      s(:def, :test_extension_dir_override,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :enable_shared),
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[]=,
                  s(:str, "ENABLE_SHARED"))),
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "ENABLE_SHARED")),
                s(:str, "no"))),
            s(:sclass,
              s(:const, nil, :Gem),
              s(:begin,
                s(:alias,
                  s(:sym, :orig_default_ext_dir_for),
                  s(:sym, :default_ext_dir_for)),
                s(:send, nil, :remove_method,
                  s(:sym, :default_ext_dir_for)),
                s(:defs,
                  s(:const, nil, :Gem), :default_ext_dir_for,
                  s(:args,
                    s(:arg, :base_dir)),
                  s(:str, "elsewhere")))),
            s(:send, nil, :ext_spec),
            s(:send, nil, :refute_empty,
              s(:send,
                s(:ivar, :@ext), :extensions)),
            s(:lvasgn, :expected,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "elsewhere"),
                s(:send,
                  s(:ivar, :@ext), :full_name))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:ivar, :@ext), :extension_dir))),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[]=,
              s(:str, "ENABLE_SHARED"),
              s(:lvar, :enable_shared)),
            s(:sclass,
              s(:const, nil, :Gem),
              s(:begin,
                s(:send, nil, :remove_method,
                  s(:sym, :default_ext_dir_for)),
                s(:alias,
                  s(:sym, :default_ext_dir_for),
                  s(:sym, :orig_default_ext_dir_for))))))),
      s(:def, :test_files,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :files=,
            s(:array,
              s(:str, "files"),
              s(:str, "bin/common"))),
          s(:send,
            s(:ivar, :@a1), :test_files=,
            s(:array,
              s(:str, "test_files"),
              s(:str, "bin/common"))),
          s(:send,
            s(:ivar, :@a1), :executables=,
            s(:array,
              s(:str, "executables"),
              s(:str, "common"))),
          s(:send,
            s(:ivar, :@a1), :extra_rdoc_files=,
            s(:array,
              s(:str, "extra_rdoc_files"),
              s(:str, "bin/common"))),
          s(:send,
            s(:ivar, :@a1), :extensions=,
            s(:array,
              s(:str, "extensions"),
              s(:str, "bin/common"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "bin/common"),
              s(:str, "bin/executables"),
              s(:str, "extensions"),
              s(:str, "extra_rdoc_files"),
              s(:str, "files"),
              s(:str, "test_files"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@a1), :files)))),
      s(:def, :test_files_append,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :files=,
            s(:array,
              s(:str, "files"),
              s(:str, "bin/common"))),
          s(:send,
            s(:ivar, :@a1), :test_files=,
            s(:array,
              s(:str, "test_files"),
              s(:str, "bin/common"))),
          s(:send,
            s(:ivar, :@a1), :executables=,
            s(:array,
              s(:str, "executables"),
              s(:str, "common"))),
          s(:send,
            s(:ivar, :@a1), :extra_rdoc_files=,
            s(:array,
              s(:str, "extra_rdoc_files"),
              s(:str, "bin/common"))),
          s(:send,
            s(:ivar, :@a1), :extensions=,
            s(:array,
              s(:str, "extensions"),
              s(:str, "bin/common"))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "bin/common"),
              s(:str, "bin/executables"),
              s(:str, "extensions"),
              s(:str, "extra_rdoc_files"),
              s(:str, "files"),
              s(:str, "test_files"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@a1), :files)),
          s(:send,
            s(:send,
              s(:ivar, :@a1), :files), :<<,
            s(:str, "generated_file.c")),
          s(:send,
            s(:lvar, :expected), :<<,
            s(:str, "generated_file.c")),
          s(:send,
            s(:lvar, :expected), :sort!),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@a1), :files)))),
      s(:def, :test_files_duplicate,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :files=,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d"),
              s(:str, "b"))),
          s(:send,
            s(:ivar, :@a2), :extra_rdoc_files=,
            s(:array,
              s(:str, "x"),
              s(:str, "y"),
              s(:str, "z"),
              s(:str, "x"))),
          s(:send,
            s(:ivar, :@a2), :normalize),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d"),
              s(:str, "x"),
              s(:str, "y"),
              s(:str, "z")),
            s(:send,
              s(:ivar, :@a2), :files)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "x"),
              s(:str, "y"),
              s(:str, "z")),
            s(:send,
              s(:ivar, :@a2), :extra_rdoc_files)))),
      s(:def, :test_files_extra_rdoc_files,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :files=,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d"))),
          s(:send,
            s(:ivar, :@a2), :extra_rdoc_files=,
            s(:array,
              s(:str, "x"),
              s(:str, "y"),
              s(:str, "z"))),
          s(:send,
            s(:ivar, :@a2), :normalize),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a"),
              s(:str, "b"),
              s(:str, "c"),
              s(:str, "d"),
              s(:str, "x"),
              s(:str, "y"),
              s(:str, "z")),
            s(:send,
              s(:ivar, :@a2), :files)))),
      s(:def, :test_files_non_array,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :files=,
            s(:str, "F")),
          s(:send,
            s(:ivar, :@a1), :test_files=,
            s(:str, "TF")),
          s(:send,
            s(:ivar, :@a1), :executables=,
            s(:str, "X")),
          s(:send,
            s(:ivar, :@a1), :extra_rdoc_files=,
            s(:str, "ERF")),
          s(:send,
            s(:ivar, :@a1), :extensions=,
            s(:str, "E")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "E"),
              s(:str, "ERF"),
              s(:str, "F"),
              s(:str, "TF"),
              s(:str, "bin/X")),
            s(:send,
              s(:ivar, :@a1), :files)))),
      s(:def, :test_files_non_array_pathological,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@files),
            s(:str, "F")),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@test_files),
            s(:str, "TF")),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@extra_rdoc_files),
            s(:str, "ERF")),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@extensions),
            s(:str, "E")),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@executables),
            s(:str, "X")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "E"),
              s(:str, "ERF"),
              s(:str, "F"),
              s(:str, "TF"),
              s(:str, "bin/X")),
            s(:send,
              s(:ivar, :@a1), :files)),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Integer),
            s(:send,
              s(:ivar, :@a1), :hash)))),
      s(:def, :test_for_cache,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :add_runtime_dependency,
            s(:str, "b"),
            s(:str, "1")),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@a2), :dependencies), :first), :instance_variable_set,
            s(:sym, :@type),
            s(:nil)),
          s(:send,
            s(:ivar, :@a2), :required_rubygems_version=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, "> 0"))),
          s(:send,
            s(:ivar, :@a2), :test_files=,
            s(:array,
              s(:str, "test/test_b.rb"))),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@a2), :files)),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@a2), :test_files)),
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@a2), :for_cache)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :spec), :files)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:lvar, :spec), :test_files)),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@a2), :files)),
          s(:send, nil, :refute_empty,
            s(:send,
              s(:ivar, :@a2), :test_files)))),
      s(:def, :test_full_gem_path,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@a1), :full_name)),
            s(:send,
              s(:ivar, :@a1), :full_gem_path)),
          s(:send,
            s(:ivar, :@a1), :original_platform=,
            s(:str, "mswin32")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@a1), :original_name)),
            s(:send,
              s(:ivar, :@a1), :full_gem_path)))),
      s(:def, :test_full_gem_path_double_slash,
        s(:args),
        s(:begin,
          s(:lvasgn, :gemhome,
            s(:send,
              s(:send,
                s(:ivar, :@gemhome), :to_s), :sub,
              s(:regexp,
                s(:str, "\\w/"),
                s(:regopt)),
              s(:str, "\\&/"))),
          s(:send,
            s(:ivar, :@a1), :loaded_from=,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome),
              s(:str, "specifications"),
              s(:send,
                s(:ivar, :@a1), :spec_name))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@a1), :full_name))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@a1), :full_gem_path)))),
      s(:def, :test_full_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "a-1"),
            s(:send,
              s(:ivar, :@a1), :full_name)),
          s(:ivasgn, :@a1,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "a"),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:array,
                s(:str, "universal"),
                s(:str, "darwin"),
                s(:nil)))),
          s(:send, nil, :assert_equal,
            s(:str, "a-1-universal-darwin"),
            s(:send,
              s(:ivar, :@a1), :full_name)),
          s(:ivasgn, :@a1,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "a"),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@new_platform),
            s(:str, "mswin32")),
          s(:send, nil, :assert_equal,
            s(:str, "a-1-mswin32"),
            s(:send,
              s(:ivar, :@a1), :full_name),
            s(:str, "legacy")),
          s(:if,
            s(:send, nil, :win_platform?),
            s(:return), nil),
          s(:ivasgn, :@a1,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new,
              s(:str, "a"),
              s(:int, 1))),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "current")),
          s(:send, nil, :assert_equal,
            s(:str, "a-1-x86-darwin-8"),
            s(:send,
              s(:ivar, :@a1), :full_name)))),
      s(:def, :test_full_name_windows,
        s(:args),
        s(:begin,
          s(:lvasgn, :test_cases,
            s(:hash,
              s(:pair,
                s(:str, "i386-mswin32"),
                s(:str, "a-1-x86-mswin32-60")),
              s(:pair,
                s(:str, "i386-mswin32_80"),
                s(:str, "a-1-x86-mswin32-80")),
              s(:pair,
                s(:str, "i386-mingw32"),
                s(:str, "a-1-x86-mingw32")))),
          s(:block,
            s(:send,
              s(:lvar, :test_cases), :each),
            s(:args,
              s(:arg, :arch),
              s(:arg, :expected)),
            s(:begin,
              s(:ivasgn, :@a1,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :new,
                  s(:str, "a"),
                  s(:int, 1))),
              s(:send, nil, :util_set_arch,
                s(:lvar, :arch)),
              s(:send,
                s(:ivar, :@a1), :platform=,
                s(:str, "current")),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send,
                  s(:ivar, :@a1), :full_name)))))),
      s(:def, :test_gem_build_complete_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :expected,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@a1), :extension_dir),
              s(:str, "gem.build_complete"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@a1), :gem_build_complete_path)))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@a1), :hash),
            s(:send,
              s(:ivar, :@a1), :hash)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@a1), :hash),
            s(:send,
              s(:send,
                s(:ivar, :@a1), :dup), :hash)),
          s(:send, nil, :refute_equal,
            s(:send,
              s(:ivar, :@a1), :hash),
            s(:send,
              s(:ivar, :@a2), :hash)))),
      s(:def, :test_installed_by_version,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send, nil, :v,
              s(:int, 0)),
            s(:send,
              s(:ivar, :@a1), :installed_by_version)),
          s(:send,
            s(:ivar, :@a1), :installed_by_version=,
            s(:send,
              s(:const, nil, :Gem), :rubygems_version)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :rubygems_version),
            s(:send,
              s(:ivar, :@a1), :installed_by_version)))),
      s(:def, :test_base_dir,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:ivar, :@gemhome),
          s(:send,
            s(:ivar, :@a1), :base_dir))),
      s(:def, :test_base_dir_not_loaded,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@loaded_from),
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :dir),
            s(:send,
              s(:ivar, :@a1), :base_dir)))),
      s(:def, :test_base_dir_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :default_specifications_dir),
              s(:send,
                s(:ivar, :@a1), :spec_name))),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@loaded_from),
            s(:lvar, :default_dir)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :default_dir),
            s(:send,
              s(:ivar, :@a1), :base_dir)))),
      s(:def, :test_lib_files,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :files=,
            s(:array,
              s(:str, "lib/foo.rb"),
              s(:str, "Rakefile"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "lib/foo.rb")),
            s(:send,
              s(:ivar, :@a1), :lib_files)))),
      s(:def, :test_license,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "MIT"),
          s(:send,
            s(:ivar, :@a1), :license))),
      s(:def, :test_licenses,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "MIT")),
          s(:send,
            s(:ivar, :@a1), :licenses))),
      s(:def, :test_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "a"),
          s(:send,
            s(:ivar, :@a1), :name))),
      s(:def, :test_original_name,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "a-1"),
            s(:send,
              s(:ivar, :@a1), :full_name)),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "i386-linux")),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@original_platform),
            s(:str, "i386-linux")),
          s(:send, nil, :assert_equal,
            s(:str, "a-1-i386-linux"),
            s(:send,
              s(:ivar, :@a1), :original_name)))),
      s(:def, :test_platform,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY),
          s(:send,
            s(:ivar, :@a1), :platform))),
      s(:def, :test_platform_change_reset_full_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :orig_full_name,
            s(:send,
              s(:ivar, :@a1), :full_name)),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "universal-unknown")),
          s(:send, nil, :refute_equal,
            s(:lvar, :orig_full_name),
            s(:send,
              s(:ivar, :@a1), :full_name)))),
      s(:def, :test_platform_change_reset_cache_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :orig_cache_file,
            s(:send,
              s(:ivar, :@a1), :cache_file)),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "universal-unknown")),
          s(:send, nil, :refute_equal,
            s(:lvar, :orig_cache_file),
            s(:send,
              s(:ivar, :@a1), :cache_file)))),
      s(:def, :test_platform_equals,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:nil)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:send,
              s(:ivar, :@a1), :platform)),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY)),
          s(:send, nil, :assert_equal,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:send,
              s(:ivar, :@a1), :platform)),
          s(:lvasgn, :test_cases,
            s(:hash,
              s(:pair,
                s(:str, "i386-mswin32"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:str, "60"))),
              s(:pair,
                s(:str, "i386-mswin32_80"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mswin32"),
                  s(:str, "80"))),
              s(:pair,
                s(:str, "i386-mingw32"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "mingw32"),
                  s(:nil))),
              s(:pair,
                s(:str, "x86-darwin8"),
                s(:array,
                  s(:str, "x86"),
                  s(:str, "darwin"),
                  s(:str, "8"))))),
          s(:block,
            s(:send,
              s(:lvar, :test_cases), :each),
            s(:args,
              s(:arg, :arch),
              s(:arg, :expected)),
            s(:begin,
              s(:send, nil, :util_set_arch,
                s(:lvar, :arch)),
              s(:send,
                s(:ivar, :@a1), :platform=,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :CURRENT)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:lvar, :expected)),
                s(:send,
                  s(:ivar, :@a1), :platform)))))),
      s(:def, :test_platform_equals_current,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :CURRENT)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local),
            s(:send,
              s(:ivar, :@a1), :platform)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :local), :to_s),
            s(:send,
              s(:ivar, :@a1), :original_platform)))),
      s(:def, :test_platform_equals_legacy,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "mswin32")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "x86-mswin32")),
            s(:send,
              s(:ivar, :@a1), :platform)),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "i586-linux")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "x86-linux")),
            s(:send,
              s(:ivar, :@a1), :platform)),
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "powerpc-darwin")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "ppc-darwin")),
            s(:send,
              s(:ivar, :@a1), :platform)))),
      s(:def, :test_prerelease_spec_adds_required_rubygems_version,
        s(:args),
        s(:begin,
          s(:ivasgn, :@prerelease,
            s(:send, nil, :util_spec,
              s(:str, "tardis"),
              s(:str, "2.2.0.a"))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@prerelease), :required_rubygems_version), :satisfied_by?,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "1.3.1")))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@prerelease), :required_rubygems_version), :satisfied_by?,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "1.4.0")))))),
      s(:def, :test_require_paths,
        s(:args),
        s(:block,
          s(:send, nil, :enable_shared,
            s(:str, "no")),
          s(:args),
          s(:begin,
            s(:send, nil, :ext_spec),
            s(:send,
              s(:ivar, :@ext), :require_paths=,
              s(:str, "lib")),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:send,
                  s(:ivar, :@ext), :extension_dir),
                s(:str, "lib")),
              s(:send,
                s(:ivar, :@ext), :require_paths))))),
      s(:def, :test_require_paths_default_ext_dir_for,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:sclass,
              s(:const, nil, :Gem),
              s(:begin,
                s(:send, nil, :send,
                  s(:sym, :alias_method),
                  s(:sym, :orig_default_ext_dir_for),
                  s(:sym, :default_ext_dir_for)),
                s(:send, nil, :remove_method,
                  s(:sym, :default_ext_dir_for)))),
            s(:defs,
              s(:const, nil, :Gem), :default_ext_dir_for,
              s(:args,
                s(:arg, :base_dir)),
              s(:str, "/foo")),
            s(:block,
              s(:send, nil, :enable_shared,
                s(:str, "no")),
              s(:args),
              s(:begin,
                s(:send, nil, :ext_spec),
                s(:send,
                  s(:ivar, :@ext), :require_paths=,
                  s(:str, "lib")),
                s(:send, nil, :assert_equal,
                  s(:array,
                    s(:send,
                      s(:const, nil, :File), :expand_path,
                      s(:str, "/foo/ext-1")),
                    s(:str, "lib")),
                  s(:send,
                    s(:ivar, :@ext), :require_paths))))),
          s(:sclass,
            s(:const, nil, :Gem),
            s(:begin,
              s(:send, nil, :send,
                s(:sym, :remove_method),
                s(:sym, :default_ext_dir_for)),
              s(:send, nil, :send,
                s(:sym, :alias_method),
                s(:sym, :default_ext_dir_for),
                s(:sym, :orig_default_ext_dir_for)),
              s(:send, nil, :send,
                s(:sym, :remove_method),
                s(:sym, :orig_default_ext_dir_for)))))),
      s(:def, :test_source,
        s(:args),
        s(:send, nil, :assert_kind_of,
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Source), :Installed),
          s(:send,
            s(:ivar, :@a1), :source))),
      s(:def, :test_source_paths,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send,
            s(:ivar, :@ext), :require_paths=,
            s(:array,
              s(:str, "lib"),
              s(:str, "ext"),
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@ext), :extensions), :<<,
            s(:str, "bar/baz")),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "lib"),
              s(:str, "ext"),
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ext), :source_paths)))),
      s(:def, :test_full_require_paths,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send,
            s(:ivar, :@ext), :require_paths=,
            s(:str, "lib")),
          s(:lvasgn, :expected,
            s(:array,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@gemhome),
                s(:str, "gems"),
                s(:send,
                  s(:ivar, :@ext), :original_name),
                s(:str, "lib")),
              s(:send,
                s(:ivar, :@ext), :extension_dir))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ext), :full_require_paths)))),
      s(:def, :test_to_fullpath,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send,
            s(:ivar, :@ext), :require_paths=,
            s(:str, "lib")),
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@ext), :original_name),
              s(:str, "lib"))),
          s(:lvasgn, :expected_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :dir),
              s(:str, "code.rb"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:lvar, :expected_rb)),
          s(:lvasgn, :dir,
            s(:send,
              s(:ivar, :@ext), :extension_dir)),
          s(:lvasgn, :ext,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "DLEXT"))),
          s(:lvasgn, :expected_so,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :dir),
              s(:dstr,
                s(:str, "ext."),
                s(:begin,
                  s(:lvar, :ext))))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:lvar, :expected_so)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "code"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "code.rb"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:dstr,
                s(:str, "code."),
                s(:begin,
                  s(:lvar, :ext))))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "ext"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "ext.rb"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:dstr,
                s(:str, "ext."),
                s(:begin,
                  s(:lvar, :ext))))),
          s(:send,
            s(:ivar, :@ext), :activate),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_rb),
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "code"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_rb),
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "code.rb"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:dstr,
                s(:str, "code."),
                s(:begin,
                  s(:lvar, :ext))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_so),
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "ext"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "ext.rb"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_so),
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:dstr,
                s(:str, "ext."),
                s(:begin,
                  s(:lvar, :ext))))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "notexist"))))),
      s(:def, :test_fullpath_return_rb_extension_file_when_exist_the_same_name_file,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send,
            s(:ivar, :@ext), :require_paths=,
            s(:str, "lib")),
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@ext), :original_name),
              s(:str, "lib"))),
          s(:lvasgn, :expected_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :dir),
              s(:str, "code.rb"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:lvar, :expected_rb)),
          s(:lvasgn, :dir,
            s(:send,
              s(:ivar, :@ext), :extension_dir)),
          s(:lvasgn, :ext,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "DLEXT"))),
          s(:lvasgn, :expected_so,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :dir),
              s(:dstr,
                s(:str, "code."),
                s(:begin,
                  s(:lvar, :ext))))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:lvar, :expected_so)),
          s(:send,
            s(:ivar, :@ext), :activate),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected_rb),
            s(:send,
              s(:ivar, :@ext), :to_fullpath,
              s(:str, "code"))))),
      s(:def, :test_require_already_activated,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :a1)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :assert,
              s(:send, nil, :require,
                s(:str, "d"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_require_already_activated_indirect_conflict,
        s(:args),
        s(:block,
          s(:send, nil, :save_loaded_features),
          s(:args),
          s(:begin,
            s(:lvasgn, :a1,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :a2,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "b"),
                    s(:str, "> 0"))))),
            s(:lvasgn, :b1,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "1"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 1"))))),
            s(:lvasgn, :b2,
              s(:send, nil, :new_spec,
                s(:str, "b"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "c"),
                    s(:str, ">= 2"))))),
            s(:lvasgn, :c1,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "1"),
                s(:nil),
                s(:str, "lib/d.rb"))),
            s(:lvasgn, :c2,
              s(:send, nil, :new_spec,
                s(:str, "c"),
                s(:str, "2"),
                s(:hash,
                  s(:pair,
                    s(:str, "a"),
                    s(:str, "1"))),
                s(:str, "lib/d.rb"))),
            s(:send, nil, :install_specs,
              s(:lvar, :c1),
              s(:lvar, :b1),
              s(:lvar, :a1),
              s(:lvar, :a2),
              s(:lvar, :c2),
              s(:lvar, :b2)),
            s(:send,
              s(:lvar, :a1), :activate),
            s(:send,
              s(:lvar, :c1), :activate),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "c-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)")),
              s(:send, nil, :unresolved_names)),
            s(:send, nil, :assert,
              s(:send, nil, :require,
                s(:str, "d"))),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "a-1"),
                s(:str, "c-1")),
              s(:send, nil, :loaded_spec_names)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "b (> 0)")),
              s(:send, nil, :unresolved_names))))),
      s(:def, :test_requirements,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "A working computer")),
          s(:send,
            s(:ivar, :@a1), :requirements))),
      s(:def, :test_allowed_push_host,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@a1), :metadata), :[],
              s(:str, "allowed_push_host"))),
          s(:send, nil, :assert_equal,
            s(:str, "https://privategemserver.com"),
            s(:send,
              s(:send,
                s(:ivar, :@a3), :metadata), :[],
              s(:str, "allowed_push_host"))))),
      s(:def, :test_runtime_dependencies_legacy,
        s(:args),
        s(:begin,
          s(:send, nil, :make_spec_c1),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :runtime_dependencies), :each),
            s(:args,
              s(:arg, :dep)),
            s(:send,
              s(:lvar, :dep), :instance_variable_set,
              s(:sym, :@type),
              s(:nil))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "rake"),
              s(:str, "jabber4r"),
              s(:str, "pqa"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@c1), :runtime_dependencies), :map),
              s(:args,
                s(:arg, :d)),
              s(:send,
                s(:lvar, :d), :name))))),
      s(:def, :test_spaceship_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :s2,
            s(:send, nil, :new_spec,
              s(:str, "b"),
              s(:str, "1"))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :<=>,
                s(:lvar, :s2)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :<=>,
                s(:lvar, :s1)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:begin,
              s(:send,
                s(:lvar, :s2), :<=>,
                s(:lvar, :s1)))))),
      s(:def, :test_spaceship_platform,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :s2,
            s(:block,
              s(:send, nil, :new_spec,
                s(:str, "a"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:str, "x86-my_platform1"))))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :<=>,
                s(:lvar, :s2)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :<=>,
                s(:lvar, :s1)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:begin,
              s(:send,
                s(:lvar, :s2), :<=>,
                s(:lvar, :s1)))))),
      s(:def, :test_spaceship_version,
        s(:args),
        s(:begin,
          s(:lvasgn, :s1,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "1"))),
          s(:lvasgn, :s2,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:str, "2"))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :<=>,
                s(:lvar, :s2)))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:begin,
              s(:send,
                s(:lvar, :s1), :<=>,
                s(:lvar, :s1)))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:begin,
              s(:send,
                s(:lvar, :s2), :<=>,
                s(:lvar, :s1)))))),
      s(:def, :test_spec_file,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const, nil, :File), :join,
            s(:ivar, :@gemhome),
            s(:str, "specifications"),
            s(:str, "a-1.gemspec")),
          s(:send,
            s(:ivar, :@a1), :spec_file))),
      s(:def, :test_spec_name,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "a-1.gemspec"),
          s(:send,
            s(:ivar, :@a1), :spec_name))),
      s(:def, :test_summary,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "this is a summary"),
          s(:send,
            s(:ivar, :@a1), :summary))),
      s(:def, :test_test_files,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :test_file=,
            s(:str, "test/suite.rb")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "test/suite.rb")),
            s(:send,
              s(:ivar, :@a1), :test_files)))),
      s(:def, :test_runtime_predicate_true,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :add_runtime_dependency,
            s(:str, "b"),
            s(:str, "1")),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:send,
                s(:ivar, :@a2), :dependencies), :first),
            s(:sym, :runtime?)),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@a2), :dependencies), :first), :instance_variable_set,
            s(:sym, :@type),
            s(:nil)),
          s(:send, nil, :assert_predicate,
            s(:send,
              s(:send,
                s(:ivar, :@a2), :dependencies), :first),
            s(:sym, :runtime?)))),
      s(:def, :test_runtime_predicate_false,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :add_development_dependency,
            s(:str, "b"),
            s(:str, "1")),
          s(:send, nil, :refute_predicate,
            s(:send,
              s(:send,
                s(:ivar, :@a2), :dependencies), :first),
            s(:sym, :runtime?)))),
      s(:def, :test_to_ruby,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :add_runtime_dependency,
            s(:str, "b"),
            s(:str, "1")),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@a2), :dependencies), :first), :instance_variable_set,
            s(:sym, :@type),
            s(:nil)),
          s(:send,
            s(:ivar, :@a2), :required_rubygems_version=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, "> 0"))),
          s(:send,
            s(:send,
              s(:ivar, :@a2), :require_paths), :<<,
            s(:str, "other")),
          s(:lvasgn, :ruby_code,
            s(:send,
              s(:ivar, :@a2), :to_ruby)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "# -*- encoding: utf-8 -*-\n"),
              s(:str, "# stub: a 2 ruby lib\u0000other\n"),
              s(:str, "\n"),
              s(:str, "Gem::Specification.new do |s|\n"),
              s(:str, "  s.name = \"a\".freeze\n"),
              s(:str, "  s.version = \"2\"\n"),
              s(:str, "\n"),
              s(:str, "  s.required_rubygems_version = Gem::Requirement.new(\"> 0\".freeze) if s.respond_to? :required_rubygems_version=\n"),
              s(:str, "  s.require_paths = [\"lib\".freeze, \"other\".freeze]\n"),
              s(:str, "  s.authors = [\"A User\".freeze]\n"),
              s(:str, "  s.date = \""),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :TODAY), :strftime,
                  s(:str, "%Y-%m-%d"))),
              s(:str, "\"\n"),
              s(:str, "  s.description = \"This is a test description\".freeze\n"),
              s(:str, "  s.email = \"example@example.com\".freeze\n"),
              s(:str, "  s.files = [\"lib/code.rb\".freeze]\n"),
              s(:str, "  s.homepage = \"http://example.com\".freeze\n"),
              s(:str, "  s.rubygems_version = \""),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, "\".freeze\n"),
              s(:str, "  s.summary = \"this is a summary\".freeze\n"),
              s(:str, "\n"),
              s(:str, "  if s.respond_to? :specification_version then\n"),
              s(:str, "    s.specification_version = "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :CURRENT_SPECIFICATION_VERSION)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then\n"),
              s(:str, "      s.add_runtime_dependency(%q<b>.freeze, [\"= 1\"])\n"),
              s(:str, "    else\n"),
              s(:str, "      s.add_dependency(%q<b>.freeze, [\"= 1\"])\n"),
              s(:str, "    end\n"),
              s(:str, "  else\n"),
              s(:str, "    s.add_dependency(%q<b>.freeze, [\"= 1\"])\n"),
              s(:str, "  end\n"),
              s(:str, "end\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :ruby_code)),
          s(:lvasgn, :same_spec,
            s(:send, nil, :eval,
              s(:lvar, :ruby_code))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :same_spec)))),
      s(:def, :test_to_ruby_for_cache,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :add_runtime_dependency,
            s(:str, "b"),
            s(:str, "1")),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@a2), :dependencies), :first), :instance_variable_set,
            s(:sym, :@type),
            s(:nil)),
          s(:send,
            s(:ivar, :@a2), :required_rubygems_version=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, "> 0"))),
          s(:send,
            s(:ivar, :@a2), :installed_by_version=,
            s(:send,
              s(:const, nil, :Gem), :rubygems_version)),
          s(:lvasgn, :ruby_code,
            s(:send,
              s(:ivar, :@a2), :to_ruby_for_cache)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "# -*- encoding: utf-8 -*-\n"),
              s(:str, "# stub: a 2 ruby lib\n"),
              s(:str, "\n"),
              s(:str, "Gem::Specification.new do |s|\n"),
              s(:str, "  s.name = \"a\".freeze\n"),
              s(:str, "  s.version = \"2\"\n"),
              s(:str, "\n"),
              s(:str, "  s.required_rubygems_version = Gem::Requirement.new(\"> 0\".freeze) if s.respond_to? :required_rubygems_version=\n"),
              s(:str, "  s.require_paths = [\"lib\".freeze]\n"),
              s(:str, "  s.authors = [\"A User\".freeze]\n"),
              s(:str, "  s.date = \""),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :TODAY), :strftime,
                  s(:str, "%Y-%m-%d"))),
              s(:str, "\"\n"),
              s(:str, "  s.description = \"This is a test description\".freeze\n"),
              s(:str, "  s.email = \"example@example.com\".freeze\n"),
              s(:str, "  s.homepage = \"http://example.com\".freeze\n"),
              s(:str, "  s.rubygems_version = \""),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, "\".freeze\n"),
              s(:str, "  s.summary = \"this is a summary\".freeze\n"),
              s(:str, "\n"),
              s(:str, "  s.installed_by_version = \""),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, "\" if s.respond_to? :installed_by_version\n"),
              s(:str, "\n"),
              s(:str, "  if s.respond_to? :specification_version then\n"),
              s(:str, "    s.specification_version = "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :CURRENT_SPECIFICATION_VERSION)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then\n"),
              s(:str, "      s.add_runtime_dependency(%q<b>.freeze, [\"= 1\"])\n"),
              s(:str, "    else\n"),
              s(:str, "      s.add_dependency(%q<b>.freeze, [\"= 1\"])\n"),
              s(:str, "    end\n"),
              s(:str, "  else\n"),
              s(:str, "    s.add_dependency(%q<b>.freeze, [\"= 1\"])\n"),
              s(:str, "  end\n"),
              s(:str, "end\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :ruby_code)),
          s(:lvasgn, :same_spec,
            s(:send, nil, :eval,
              s(:lvar, :ruby_code))),
          s(:send,
            s(:ivar, :@a2), :files=,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a2),
            s(:lvar, :same_spec)))),
      s(:def, :test_to_ruby_fancy,
        s(:args),
        s(:begin,
          s(:send, nil, :make_spec_c1),
          s(:send,
            s(:ivar, :@c1), :platform=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local)),
          s(:lvasgn, :ruby_code,
            s(:send,
              s(:ivar, :@c1), :to_ruby)),
          s(:lvasgn, :local,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local)),
          s(:lvasgn, :expected_platform,
            s(:dstr,
              s(:str, "["),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :local), :cpu), :inspect)),
              s(:str, ", "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :local), :os), :inspect)),
              s(:str, ", "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :local), :version), :inspect)),
              s(:str, "]"))),
          s(:lvasgn, :stub_require_paths,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :instance_variable_get,
                s(:sym, :@require_paths)), :join,
              s(:str, "\u0000"))),
          s(:lvasgn, :extensions,
            s(:send,
              s(:send,
                s(:ivar, :@c1), :extensions), :join,
              s(:str, "\u0000"))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "# -*- encoding: utf-8 -*-\n"),
              s(:str, "# stub: a 1 "),
              s(:begin,
                s(:if,
                  s(:send, nil, :win_platform?),
                  s(:str, "x86-mswin32-60"),
                  s(:str, "x86-darwin-8"))),
              s(:str, " "),
              s(:begin,
                s(:lvar, :stub_require_paths)),
              s(:str, "\n"),
              s(:str, "# stub: "),
              s(:begin,
                s(:lvar, :extensions)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "Gem::Specification.new do |s|\n"),
              s(:str, "  s.name = \"a\".freeze\n"),
              s(:str, "  s.version = \"1\"\n"),
              s(:str, "  s.platform = Gem::Platform.new("),
              s(:begin,
                s(:lvar, :expected_platform)),
              s(:str, ")\n"),
              s(:str, "\n"),
              s(:str, "  s.required_rubygems_version = Gem::Requirement.new(\">= 0\".freeze) if s.respond_to? :required_rubygems_version=\n"),
              s(:str, "  s.require_paths = [\"lib\".freeze]\n"),
              s(:str, "  s.authors = [\"A User\".freeze]\n"),
              s(:str, "  s.date = \""),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :TODAY), :strftime,
                  s(:str, "%Y-%m-%d"))),
              s(:str, "\"\n"),
              s(:str, "  s.description = \"This is a test description\".freeze\n"),
              s(:str, "  s.email = \"example@example.com\".freeze\n"),
              s(:str, "  s.executables = [\"exec\".freeze]\n"),
              s(:str, "  s.extensions = [\"ext/a/extconf.rb\".freeze]\n"),
              s(:str, "  s.files = [\"bin/exec\".freeze, \"ext/a/extconf.rb\".freeze, \"lib/code.rb\".freeze, \"test/suite.rb\".freeze]\n"),
              s(:str, "  s.homepage = \"http://example.com\".freeze\n"),
              s(:str, "  s.licenses = [\"MIT\".freeze]\n"),
              s(:str, "  s.requirements = [\"A working computer\".freeze]\n"),
              s(:str, "  s.rubyforge_project = \"example\".freeze\n"),
              s(:str, "  s.rubygems_version = \""),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, "\".freeze\n"),
              s(:str, "  s.summary = \"this is a summary\".freeze\n"),
              s(:str, "  s.test_files = [\"test/suite.rb\".freeze]\n"),
              s(:str, "\n"),
              s(:str, "  if s.respond_to? :specification_version then\n"),
              s(:str, "    s.specification_version = 4\n"),
              s(:str, "\n"),
              s(:str, "    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then\n"),
              s(:str, "      s.add_runtime_dependency(%q<rake>.freeze, [\"> 0.4\"])\n"),
              s(:str, "      s.add_runtime_dependency(%q<jabber4r>.freeze, [\"> 0.0.0\"])\n"),
              s(:str, "      s.add_runtime_dependency(%q<pqa>.freeze, [\"<= 0.6\", \"> 0.4\"])\n"),
              s(:str, "    else\n"),
              s(:str, "      s.add_dependency(%q<rake>.freeze, [\"> 0.4\"])\n"),
              s(:str, "      s.add_dependency(%q<jabber4r>.freeze, [\"> 0.0.0\"])\n"),
              s(:str, "      s.add_dependency(%q<pqa>.freeze, [\"<= 0.6\", \"> 0.4\"])\n"),
              s(:str, "    end\n"),
              s(:str, "  else\n"),
              s(:str, "    s.add_dependency(%q<rake>.freeze, [\"> 0.4\"])\n"),
              s(:str, "    s.add_dependency(%q<jabber4r>.freeze, [\"> 0.0.0\"])\n"),
              s(:str, "    s.add_dependency(%q<pqa>.freeze, [\"<= 0.6\", \"> 0.4\"])\n"),
              s(:str, "  end\n"),
              s(:str, "end\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :ruby_code)),
          s(:lvasgn, :same_spec,
            s(:send, nil, :eval,
              s(:lvar, :ruby_code))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@c1),
            s(:lvar, :same_spec)))),
      s(:def, :test_to_ruby_legacy,
        s(:args),
        s(:begin,
          s(:lvasgn, :gemspec1,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Deprecate), :skip_during),
              s(:args),
              s(:send, nil, :eval,
                s(:const, nil, :LEGACY_RUBY_SPEC)))),
          s(:lvasgn, :ruby_code,
            s(:send,
              s(:lvar, :gemspec1), :to_ruby)),
          s(:lvasgn, :gemspec2,
            s(:send, nil, :eval,
              s(:lvar, :ruby_code))),
          s(:send, nil, :assert_equal,
            s(:lvar, :gemspec1),
            s(:lvar, :gemspec2)))),
      s(:def, :test_to_ruby_nested_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :metadata,
            s(:hash)),
          s(:send,
            s(:lvar, :metadata), :[]=,
            s(:lvar, :metadata),
            s(:lvar, :metadata)),
          s(:send,
            s(:ivar, :@a2), :metadata=,
            s(:lvar, :metadata)),
          s(:lvasgn, :ruby,
            s(:send,
              s(:ivar, :@a2), :to_ruby)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^  s\\.metadata = \\{ \""),
              s(:regopt)),
            s(:lvar, :ruby)))),
      s(:def, :test_to_ruby_platform,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a2), :platform=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local)),
          s(:send,
            s(:ivar, :@a2), :instance_variable_set,
            s(:sym, :@original_platform),
            s(:str, "old_platform")),
          s(:lvasgn, :ruby_code,
            s(:send,
              s(:ivar, :@a2), :to_ruby)),
          s(:lvasgn, :same_spec,
            s(:send, nil, :eval,
              s(:lvar, :ruby_code))),
          s(:send, nil, :assert_equal,
            s(:str, "old_platform"),
            s(:send,
              s(:lvar, :same_spec), :original_platform)))),
      s(:def, :test_to_yaml,
        s(:args),
        s(:begin,
          s(:lvasgn, :yaml_str,
            s(:send,
              s(:ivar, :@a1), :to_yaml)),
          s(:send, nil, :refute_match,
            s(:str, "!!null"),
            s(:lvar, :yaml_str)),
          s(:lvasgn, :same_spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :from_yaml,
              s(:lvar, :yaml_str))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a1),
            s(:lvar, :same_spec)))),
      s(:def, :test_to_yaml_fancy,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local)),
          s(:lvasgn, :yaml_str,
            s(:send,
              s(:ivar, :@a1), :to_yaml)),
          s(:lvasgn, :same_spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :from_yaml,
              s(:lvar, :yaml_str))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local),
            s(:send,
              s(:lvar, :same_spec), :platform)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@a1),
            s(:lvar, :same_spec)))),
      s(:def, :test_to_yaml_platform_empty_string,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@original_platform),
            s(:str, "")),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^platform: ruby$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@a1), :to_yaml)))),
      s(:def, :test_to_yaml_platform_legacy,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :platform=,
            s(:str, "powerpc-darwin7.9.0")),
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@original_platform),
            s(:str, "powerpc-darwin7.9.0")),
          s(:lvasgn, :yaml_str,
            s(:send,
              s(:ivar, :@a1), :to_yaml)),
          s(:lvasgn, :same_spec,
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:lvar, :yaml_str))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:str, "powerpc-darwin7")),
            s(:send,
              s(:lvar, :same_spec), :platform)),
          s(:send, nil, :assert_equal,
            s(:str, "powerpc-darwin7.9.0"),
            s(:send,
              s(:lvar, :same_spec), :original_platform)))),
      s(:def, :test_to_yaml_platform_nil,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@a1), :instance_variable_set,
            s(:sym, :@original_platform),
            s(:nil)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^platform: ruby$"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@a1), :to_yaml)))),
      s(:def, :test_validate,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@a1), :validate))))),
      s(:def, :x,
        s(:args,
          s(:arg, :s)),
        s(:send,
          s(:lvar, :s), :gsub,
          s(:regexp,
            s(:str, "xxx"),
            s(:regopt)),
          s(:str, ""))),
      s(:def, :w,
        s(:args),
        s(:send, nil, :x,
          s(:str, "WARxxxNING"))),
      s(:def, :t,
        s(:args),
        s(:send, nil, :x,
          s(:str, "TOxxxDO"))),
      s(:def, :f,
        s(:args),
        s(:send, nil, :x,
          s(:str, "FxxxIXME"))),
      s(:def, :test_validate_authors,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :authors=,
                s(:array,
                  s(:str, ""))),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  no author specified\n")),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "error")),
              s(:send,
                s(:ivar, :@a1), :authors=,
                s(:array,
                  s(:send,
                    s(:const, nil, :Object), :new))),
              s(:send, nil, :assert_equal,
                s(:array),
                s(:send,
                  s(:ivar, :@a1), :authors)),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:str, "authors may not be empty"),
                s(:send,
                  s(:lvar, :e), :message)),
              s(:send,
                s(:ivar, :@a1), :authors=,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :f)),
                    s(:str, " (who is writing this software)")))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not an author")),
                s(:send,
                  s(:lvar, :e), :message)),
              s(:send,
                s(:ivar, :@a1), :authors=,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :t)),
                    s(:str, " (who is writing this software)")))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not an author")),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_validate_autorequire,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :autorequire=,
                s(:str, "code")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  deprecated autorequire specified\n")),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "error")))))),
      s(:def, :test_validate_dependencies,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "b"),
                s(:str, ">= 1.0.rc1")),
              s(:send,
                s(:ivar, :@a1), :add_development_dependency,
                s(:str, "c"),
                s(:str, ">= 2.0.rc2")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "d"),
                s(:str, "~> 1.2.3")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "e"),
                s(:str, "~> 1.2.3.4")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "g"),
                s(:str, "~> 1.2.3"),
                s(:str, ">= 1.2.3.4")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "h"),
                s(:str, ">= 1.2.3"),
                s(:str, "<= 2")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "i"),
                s(:str, ">= 1.2")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "j"),
                s(:str, ">= 1.2.3")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "k"),
                s(:str, "> 1.2")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "l"),
                s(:str, "> 1.2.3")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "m"),
                s(:str, "~> 2.1.0")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "n"),
                s(:str, "~> 0.1.0")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:lvasgn, :expected,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  prerelease dependency on b (>= 1.0.rc1) is not recommended\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  prerelease dependency on c (>= 2.0.rc2, development) is not recommended\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  pessimistic dependency on d (~> 1.2.3) may be overly strict\n"),
                  s(:str, "  if d is semantically versioned, use:\n"),
                  s(:str, "    add_runtime_dependency 'd', '~> 1.2', '>= 1.2.3'\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  pessimistic dependency on e (~> 1.2.3.4) may be overly strict\n"),
                  s(:str, "  if e is semantically versioned, use:\n"),
                  s(:str, "    add_runtime_dependency 'e', '~> 1.2', '>= 1.2.3.4'\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  open-ended dependency on i (>= 1.2) is not recommended\n"),
                  s(:str, "  if i is semantically versioned, use:\n"),
                  s(:str, "    add_runtime_dependency 'i', '~> 1.2'\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  open-ended dependency on j (>= 1.2.3) is not recommended\n"),
                  s(:str, "  if j is semantically versioned, use:\n"),
                  s(:str, "    add_runtime_dependency 'j', '~> 1.2', '>= 1.2.3'\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  open-ended dependency on k (> 1.2) is not recommended\n"),
                  s(:str, "  if k is semantically versioned, use:\n"),
                  s(:str, "    add_runtime_dependency 'k', '~> 1.2', '> 1.2'\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  open-ended dependency on l (> 1.2.3) is not recommended\n"),
                  s(:str, "  if l is semantically versioned, use:\n"),
                  s(:str, "    add_runtime_dependency 'l', '~> 1.2', '> 1.2.3'\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  pessimistic dependency on m (~> 2.1.0) may be overly strict\n"),
                  s(:str, "  if m is semantically versioned, use:\n"),
                  s(:str, "    add_runtime_dependency 'm', '~> 2.1', '>= 2.1.0'\n"),
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  See http://guides.rubygems.org/specification-reference/ for help\n"))),
              s(:send, nil, :assert_equal,
                s(:lvar, :expected),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "warning")))))),
      s(:def, :test_validate_dependencies_duplicates,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "b"),
                s(:str, "~> 1.2")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "b"),
                s(:str, ">= 1.2.3")),
              s(:send,
                s(:ivar, :@a1), :add_development_dependency,
                s(:str, "c"),
                s(:str, "~> 1.2")),
              s(:send,
                s(:ivar, :@a1), :add_development_dependency,
                s(:str, "c"),
                s(:str, ">= 1.2.3")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:begin,
                  s(:lvasgn, :e,
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const, nil, :Gem), :InvalidSpecificationException)),
                      s(:args),
                      s(:send,
                        s(:ivar, :@a1), :validate))),
                  s(:lvasgn, :expected,
                    s(:dstr,
                      s(:str, "duplicate dependency on b (>= 1.2.3), (~> 1.2) use:\n"),
                      s(:str, "    add_runtime_dependency 'b', '>= 1.2.3', '~> 1.2'\n"),
                      s(:str, "duplicate dependency on c (>= 1.2.3, development), (~> 1.2) use:\n"),
                      s(:str, "    add_development_dependency 'c', '>= 1.2.3', '~> 1.2'\n"))),
                  s(:send, nil, :assert_equal,
                    s(:lvar, :expected),
                    s(:send,
                      s(:lvar, :e), :message)))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  See http://guides.rubygems.org/specification-reference/ for help\n")),
                s(:send,
                  s(:ivar, :@ui), :error)))))),
      s(:def, :test_validate_dependencies_allowed_duplicates,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "b"),
                s(:str, "~> 1.2")),
              s(:send,
                s(:ivar, :@a1), :add_development_dependency,
                s(:str, "b"),
                s(:str, "= 1.2.3")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "warning")))))),
      s(:def, :test_validate_prerelease_dependencies_with_prerelease_version,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :version=,
                s(:str, "1.0.0.beta.1")),
              s(:send,
                s(:ivar, :@a1), :add_runtime_dependency,
                s(:str, "b"),
                s(:str, "~> 1.2.0.beta.1")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_equal,
                s(:str, ""),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "warning")))))),
      s(:def, :test_validate_description,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :description=,
                s(:str, "")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:ivasgn, :@ui,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :new)),
              s(:send,
                s(:ivar, :@a1), :summary=,
                s(:str, "this is my summary")),
              s(:send,
                s(:ivar, :@a1), :description=,
                s(:send,
                  s(:ivar, :@a1), :summary)),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  description and summary are identical\n")),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "error")),
              s(:send,
                s(:ivar, :@a1), :description=,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, " (describe your package)"))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not a description")),
                s(:send,
                  s(:lvar, :e), :message)),
              s(:send,
                s(:ivar, :@a1), :description=,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, " (describe your package)"))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not a description")),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_validate_email,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :email=,
                s(:str, "")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  no email specified\n")),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "error")),
              s(:send,
                s(:ivar, :@a1), :email=,
                s(:send,
                  s(:str, "FIxxxXME (your e-mail)"), :sub,
                  s(:regexp,
                    s(:str, "xxx"),
                    s(:regopt)),
                  s(:str, ""))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not an email")),
                s(:send,
                  s(:lvar, :e), :message)),
              s(:send,
                s(:ivar, :@a1), :email=,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, " (your e-mail)"))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not an email")),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_validate_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException)),
              s(:args),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :new), :validate))),
          s(:send, nil, :assert_equal,
            s(:str, "missing value for attribute name"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_validate_error,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :InvalidSpecificationException)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :new), :validate))),
          s(:send, nil, :assert_match,
            s(:str, "See http://guides.rubygems.org/specification-reference/ for help"),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_validate_executables,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "bin"))),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bin"),
                s(:str, "exec")),
              s(:str, "w")),
            s(:args), nil),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "exec"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:ivar, :@tempdir)),
              s(:args),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@a1), :validate)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "exec")),
            s(:send,
              s(:ivar, :@a1), :executables)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output),
            s(:str, "output")),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:begin,
                s(:send, nil, :w)),
              s(:str, ":  bin/exec is missing #! line\n")),
            s(:send,
              s(:ivar, :@ui), :error),
            s(:str, "error")))),
      s(:def, :test_validate_empty_require_paths,
        s(:args),
        s(:if,
          s(:send, nil, :win_platform?),
          s(:send, nil, :skip,
            s(:str, "test_validate_empty_require_paths skipped on MS Windows (symlink)")),
          s(:begin,
            s(:send, nil, :util_setup_validate),
            s(:send,
              s(:ivar, :@a1), :require_paths=,
              s(:array)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :Gem), :InvalidSpecificationException)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate))),
            s(:send, nil, :assert_equal,
              s(:str, "specification must have at least one require_path"),
              s(:send,
                s(:lvar, :e), :message))))),
      s(:def, :test_validate_files,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :skip,
              s(:str, "test_validate_files skipped on MS Windows (symlink)")), nil),
          s(:send, nil, :util_setup_validate),
          s(:op_asgn,
            s(:send,
              s(:ivar, :@a1), :files), :+,
            s(:array,
              s(:str, "lib"),
              s(:str, "lib2"))),
          s(:send,
            s(:send,
              s(:ivar, :@a1), :extensions), :<<,
            s(:str, "ext/a/extconf.rb")),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :vc_windows?), nil,
                s(:send,
                  s(:const, nil, :FileUtils), :ln_s,
                  s(:str, "lib/code.rb"),
                  s(:str, "lib2"))),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:str, "WARNING:  lib2 is a symlink, which is not supported on all platforms"),
                s(:send,
                  s(:ivar, :@ui), :error)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:str, "bin/exec"),
                s(:str, "ext/a/extconf.rb"),
                s(:str, "lib/code.rb"),
                s(:str, "lib2"),
                s(:str, "test/suite.rb")), :sort),
            s(:send,
              s(:ivar, :@a1), :files)))),
      s(:def, :test_validate_files_recursive,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:send,
              s(:ivar, :@a1), :file_name)),
          s(:send,
            s(:ivar, :@a1), :files=,
            s(:array,
              s(:send,
                s(:ivar, :@a1), :file_name))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException)),
              s(:args),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:ivar, :@a1), :full_name)),
              s(:str, " contains itself ("),
              s(:begin,
                s(:send,
                  s(:ivar, :@a1), :file_name)),
              s(:str, "), check your files list")),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_validate_homepage,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :homepage=,
                s(:nil)),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  no homepage specified\n")),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "error")),
              s(:ivasgn, :@ui,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :new)),
              s(:send,
                s(:ivar, :@a1), :homepage=,
                s(:str, "")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  no homepage specified\n")),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "error")),
              s(:send,
                s(:ivar, :@a1), :homepage=,
                s(:str, "over at my cool site")),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:str, "\"over at my cool site\" is not a URI"),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_validate_license,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@a1), :licenses), :clear),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "WARNING:  licenses is empty, but is recommended.  Use a license identifier from\n"),
              s(:str, "http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.\n")),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_validate_license_values,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :licenses=,
                s(:array,
                  s(:str, "BSD"))),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "WARNING:  license value 'BSD' is invalid.  Use a license identifier from\n"),
              s(:str, "http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.\n")),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_validate_license_values_plus,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :licenses=,
                s(:array,
                  s(:str, "GPL-2.0+"))),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_validate_license_values_with,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :licenses=,
                s(:array,
                  s(:str, "GPL-2.0+ WITH Autoconf-exception-2.0"))),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_validate_license_with_nonsense_suffix,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :licenses=,
                s(:array,
                  s(:str, "GPL-2.0+ FOO"),
                  s(:str, "GPL-2.0 FOO"))),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "WARNING:  license value 'GPL-2.0+ FOO' is invalid.  Use a license identifier from\n"),
              s(:str, "http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.\n")),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "WARNING:  license value 'GPL-2.0 FOO' is invalid.  Use a license identifier from\n"),
              s(:str, "http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.\n")),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_validate_license_gives_suggestions,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :licenses=,
                s(:array,
                  s(:str, "ruby"))),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_match,
            s(:dstr,
              s(:str, "WARNING:  license value 'ruby' is invalid.  Use a license identifier from\n"),
              s(:str, "http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.\n"),
              s(:str, "Did you mean 'Ruby'?\n")),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_validate_name,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@a1), :name=,
                  s(:sym, :json)),
                s(:send,
                  s(:ivar, :@a1), :validate)))),
          s(:send, nil, :assert_equal,
            s(:str, "invalid value for attribute name: \":json\""),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_validate_non_nil,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :non_nil_attributes), :each),
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :name), :==,
                      s(:sym, :files)),
                    s(:next), nil),
                  s(:lvasgn, :spec,
                    s(:send,
                      s(:ivar, :@a1), :dup)),
                  s(:send,
                    s(:lvar, :spec), :instance_variable_set,
                    s(:dstr,
                      s(:str, "@"),
                      s(:begin,
                        s(:lvar, :name))),
                    s(:nil)),
                  s(:lvasgn, :e,
                    s(:block,
                      s(:send, nil, :assert_raises,
                        s(:const,
                          s(:const, nil, :Gem), :InvalidSpecificationException)),
                      s(:args),
                      s(:send,
                        s(:lvar, :spec), :validate))),
                  s(:send, nil, :assert_match,
                    s(:regexp,
                      s(:str, "^"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :e), :message)))))))),
      s(:def, :test_validate_permissions,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :File), :chmod,
                s(:int, 416),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:str, "lib"),
                  s(:str, "code.rb"))),
              s(:send,
                s(:const, nil, :File), :chmod,
                s(:int, 416),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:str, "bin"),
                  s(:str, "exec"))),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  lib/code.rb is not world-readable\n")),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  bin/exec is not world-readable\n")),
                s(:send,
                  s(:ivar, :@ui), :error)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  bin/exec is not executable\n")),
                s(:send,
                  s(:ivar, :@ui), :error)))))),
      s(:def, :test_validate_permissions_of_missing_file_non_packaging,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :File), :delete,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:str, "lib"),
                  s(:str, "code.rb"))),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send, nil, :assert,
                  s(:send,
                    s(:ivar, :@a1), :validate,
                    s(:false)))))))),
      s(:def, :test_validate_platform_legacy,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :platform=,
                s(:str, "mswin32")),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send,
                s(:ivar, :@a1), :platform=,
                s(:str, "i586-linux")),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send,
                s(:ivar, :@a1), :platform=,
                s(:str, "powerpc-darwin")),
              s(:send, nil, :assert,
                s(:send,
                  s(:ivar, :@a1), :validate)))))),
      s(:def, :test_validate_rubygems_version,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:send,
            s(:ivar, :@a1), :rubygems_version=,
            s(:str, "3")),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException)),
              s(:args),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "expected RubyGems version "),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, ", was 3")),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_validate_specification_version,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :specification_version=,
                s(:str, "1.0")),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:block,
                    s(:send, nil, :use_ui,
                      s(:ivar, :@ui)),
                    s(:args),
                    s(:send,
                      s(:ivar, :@a1), :validate)))),
              s(:lvasgn, :err,
                s(:str, "specification_version must be a Fixnum (did you mean version?)")),
              s(:send, nil, :assert_equal,
                s(:lvar, :err),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_validate_summary,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@a1), :summary=,
                s(:str, "")),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@a1), :validate)),
              s(:send, nil, :assert_match,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :w)),
                  s(:str, ":  no summary specified\n")),
                s(:send,
                  s(:ivar, :@ui), :error),
                s(:str, "error")),
              s(:send,
                s(:ivar, :@a1), :summary=,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, " (describe your package)"))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not a summary")),
                s(:send,
                  s(:lvar, :e), :message)),
              s(:send,
                s(:ivar, :@a1), :summary=,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, " (describe your package)"))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@a1), :validate))),
              s(:send, nil, :assert_equal,
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :f)),
                  s(:str, "\" or \""),
                  s(:begin,
                    s(:send, nil, :t)),
                  s(:str, "\" is not a summary")),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_validate_warning,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@a1), :licenses), :clear),
              s(:send,
                s(:ivar, :@a1), :validate))),
          s(:send, nil, :assert_match,
            s(:str, "See http://guides.rubygems.org/specification-reference/ for help"),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_version,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Version), :new,
            s(:str, "1")),
          s(:send,
            s(:ivar, :@a1), :version))),
      s(:def, :test_version_change_reset_full_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :orig_full_name,
            s(:send,
              s(:ivar, :@a1), :full_name)),
          s(:send,
            s(:ivar, :@a1), :version=,
            s(:str, "2")),
          s(:send, nil, :refute_equal,
            s(:lvar, :orig_full_name),
            s(:send,
              s(:ivar, :@a1), :full_name)))),
      s(:def, :test_version_change_reset_cache_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :orig_cache_file,
            s(:send,
              s(:ivar, :@a1), :cache_file)),
          s(:send,
            s(:ivar, :@a1), :version=,
            s(:str, "2")),
          s(:send, nil, :refute_equal,
            s(:lvar, :orig_cache_file),
            s(:send,
              s(:ivar, :@a1), :cache_file)))),
      s(:def, :test__load_fixes_Date_objects,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :new_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@date),
            s(:send,
              s(:const, nil, :Date), :today)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:lvar, :spec)))),
          s(:send, nil, :assert_kind_of,
            s(:const, nil, :Time),
            s(:send,
              s(:lvar, :spec), :date)))),
      s(:def, :test_load_errors_contain_filename,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :specfile,
              s(:send,
                s(:const, nil, :Tempfile), :new,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :name), :downcase))),
            s(:send,
              s(:lvar, :specfile), :write,
              s(:str, "raise 'boom'")),
            s(:send,
              s(:lvar, :specfile), :close),
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send, nil, :capture_io),
                  s(:args),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :load,
                    s(:send,
                      s(:lvar, :specfile), :path))),
                s(:resbody, nil,
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:lvasgn, :name_rexp,
                      s(:send,
                        s(:const, nil, :Regexp), :new,
                        s(:send,
                          s(:const, nil, :Regexp), :escape,
                          s(:send,
                            s(:lvar, :specfile), :path)))),
                    s(:send, nil, :assert,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :e), :backtrace), :grep,
                          s(:lvar, :name_rexp)), :any?)))), nil))),
          s(:send,
            s(:lvar, :specfile), :delete))),
      s(:def, :test_latest_specs,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :new,
                    s(:str, "x86-my_platform1")))),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :new,
                    s(:str, "x86-my_platform1")))),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :new,
                    s(:str, "x86-other_platform1")))),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 3)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :new,
                    s(:str, "x86-other_platform1")))))),
          s(:lvasgn, :expected,
            s(:array,
              s(:str, "a-2"),
              s(:str, "a-2-x86-my_platform-1"),
              s(:str, "a-3-x86-other_platform-1"))),
          s(:lvasgn, :latest_specs,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :latest_specs), :map,
                s(:block_pass,
                  s(:sym, :full_name))), :sort)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :latest_specs)))),
      s(:def, :test_metadata_validates_ok,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:ivasgn, :@m1,
                s(:block,
                  s(:send, nil, :quick_gem,
                    s(:str, "m"),
                    s(:str, "1")),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :files=,
                      s(:array,
                        s(:str, "lib/code.rb"))),
                    s(:send,
                      s(:lvar, :s), :metadata=,
                      s(:hash,
                        s(:pair,
                          s(:str, "one"),
                          s(:str, "two")),
                        s(:pair,
                          s(:str, "two"),
                          s(:str, "three"))))))),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@m1), :validate)))))),
      s(:def, :test_metadata_key_type_validation_fails,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:ivasgn, :@m2,
                s(:block,
                  s(:send, nil, :quick_gem,
                    s(:str, "m"),
                    s(:str, "2")),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :files=,
                      s(:array,
                        s(:str, "lib/code.rb"))),
                    s(:send,
                      s(:lvar, :s), :metadata=,
                      s(:hash,
                        s(:pair,
                          s(:int, 1),
                          s(:str, "fail"))))))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@m2), :validate))),
              s(:send, nil, :assert_equal,
                s(:str, "metadata keys must be a String"),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_metadata_key_size_validation_fails,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:ivasgn, :@m2,
                s(:block,
                  s(:send, nil, :quick_gem,
                    s(:str, "m"),
                    s(:str, "2")),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :files=,
                      s(:array,
                        s(:str, "lib/code.rb"))),
                    s(:send,
                      s(:lvar, :s), :metadata=,
                      s(:hash,
                        s(:pair,
                          s(:begin,
                            s(:send,
                              s(:str, "x"), :*,
                              s(:int, 129))),
                          s(:str, "fail"))))))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@m2), :validate))),
              s(:send, nil, :assert_equal,
                s(:str, "metadata key too large (129 > 128)"),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_metadata_value_type_validation_fails,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:ivasgn, :@m2,
                s(:block,
                  s(:send, nil, :quick_gem,
                    s(:str, "m"),
                    s(:str, "2")),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :files=,
                      s(:array,
                        s(:str, "lib/code.rb"))),
                    s(:send,
                      s(:lvar, :s), :metadata=,
                      s(:hash,
                        s(:pair,
                          s(:str, "fail"),
                          s(:array))))))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@m2), :validate))),
              s(:send, nil, :assert_equal,
                s(:str, "metadata values must be a String"),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_metadata_value_size_validation_fails,
        s(:args),
        s(:begin,
          s(:send, nil, :util_setup_validate),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:ivasgn, :@m2,
                s(:block,
                  s(:send, nil, :quick_gem,
                    s(:str, "m"),
                    s(:str, "2")),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :s), :files=,
                      s(:array,
                        s(:str, "lib/code.rb"))),
                    s(:send,
                      s(:lvar, :s), :metadata=,
                      s(:hash,
                        s(:pair,
                          s(:str, "fail"),
                          s(:begin,
                            s(:send,
                              s(:str, "x"), :*,
                              s(:int, 1025))))))))),
              s(:lvasgn, :e,
                s(:block,
                  s(:send, nil, :assert_raises,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@m2), :validate))),
              s(:send, nil, :assert_equal,
                s(:str, "metadata value too large (1025 > 1024)"),
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:def, :test_metadata_specs,
        s(:args),
        s(:begin,
          s(:lvasgn, :valid_ruby_spec,
            s(:dstr,
              s(:str, "# -*- encoding: utf-8 -*-\n"),
              s(:str, "# stub: m 1 ruby lib\n"),
              s(:str, "\n"),
              s(:str, "Gem::Specification.new do |s|\n"),
              s(:str, "  s.name = \"m\".freeze\n"),
              s(:str, "  s.version = \"1\"\n"),
              s(:str, "\n"),
              s(:str, "  s.required_rubygems_version = Gem::Requirement.new(\">= 0\".freeze) if s.respond_to? :required_rubygems_version=\n"),
              s(:str, "  s.metadata = { \"one\" => \"two\", \"two\" => \"three\" } if s.respond_to? :metadata=\n"),
              s(:str, "  s.require_paths = [\"lib\".freeze]\n"),
              s(:str, "  s.authors = [\"A User\".freeze]\n"),
              s(:str, "  s.date = \""),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :TODAY), :strftime,
                  s(:str, "%Y-%m-%d"))),
              s(:str, "\"\n"),
              s(:str, "  s.description = \"This is a test description\".freeze\n"),
              s(:str, "  s.email = \"example@example.com\".freeze\n"),
              s(:str, "  s.files = [\"lib/code.rb\".freeze]\n"),
              s(:str, "  s.homepage = \"http://example.com\".freeze\n"),
              s(:str, "  s.rubygems_version = \""),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, "\".freeze\n"),
              s(:str, "  s.summary = \"this is a summary\".freeze\n"),
              s(:str, "end\n"))),
          s(:ivasgn, :@m1,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:str, "m"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "lib/code.rb"))),
                s(:send,
                  s(:lvar, :s), :metadata=,
                  s(:hash,
                    s(:pair,
                      s(:str, "one"),
                      s(:str, "two")),
                    s(:pair,
                      s(:str, "two"),
                      s(:str, "three"))))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@m1), :to_ruby),
            s(:lvar, :valid_ruby_spec)))),
      s(:def, :test_missing_extensions_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@ext), :missing_extensions?)),
          s(:lvasgn, :extconf_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@ext), :gem_dir),
              s(:send,
                s(:send,
                  s(:ivar, :@ext), :extensions), :first))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :extconf_rb))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :extconf_rb),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:dstr,
                s(:str, "        open 'Makefile', 'w' do |f|\n"),
                s(:str, "          f.puts \"clean:\\n\\techo clean\"\n"),
                s(:str, "          f.puts \"default:\\n\\techo built\"\n"),
                s(:str, "          f.puts \"install:\\n\\techo installed\"\n"),
                s(:str, "        end\n")))),
          s(:send,
            s(:ivar, :@ext), :build_extensions),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@ext), :missing_extensions?)))),
      s(:def, :test_missing_extensions_eh_default_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:int, 1))),
          s(:send,
            s(:send,
              s(:lvar, :spec), :extensions), :<<,
            s(:str, "extconf.rb")),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :spec), :missing_extensions?)))),
      s(:def, :test_missing_extensions_eh_legacy,
        s(:args),
        s(:begin,
          s(:send, nil, :ext_spec),
          s(:send,
            s(:ivar, :@ext), :installed_by_version=,
            s(:send, nil, :v,
              s(:str, "2.2.0.preview.2"))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@ext), :missing_extensions?)),
          s(:send,
            s(:ivar, :@ext), :installed_by_version=,
            s(:send, nil, :v,
              s(:str, "2.2.0.preview.1"))),
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@ext), :missing_extensions?)))),
      s(:def, :test_missing_extensions_eh_none,
        s(:args),
        s(:send, nil, :refute,
          s(:send,
            s(:ivar, :@a1), :missing_extensions?))),
      s(:def, :test_find_by_name,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "a"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "a"),
              s(:str, "1"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "a"),
              s(:str, ">1"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :LoadError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "monkeys"))))),
      s(:def, :test_find_by_name_prerelease,
        s(:args),
        s(:begin,
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"),
              s(:str, "2.a"))),
          s(:send,
            s(:lvar, :b), :activate),
          s(:send, nil, :install_specs,
            s(:lvar, :b)),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "b"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :LoadError)),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "b"),
              s(:str, "1"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "b"),
              s(:str, ">1"))))),
      s(:def, :test_find_by_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :new_spec,
              s(:str, "foo"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/foo.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_path,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :a), :activate),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_path,
              s(:str, "foo"))))),
      s(:def, :test_find_inactive_by_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :new_spec,
              s(:str, "foo"),
              s(:str, "1"),
              s(:nil),
              s(:str, "lib/foo.rb"))),
          s(:send, nil, :install_specs,
            s(:lvar, :a)),
          s(:send, nil, :assert_equal,
            s(:lvar, :a),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_inactive_by_path,
              s(:str, "foo"))),
          s(:send,
            s(:lvar, :a), :activate),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_inactive_by_path,
              s(:str, "foo"))))),
      s(:def, :test_load_default_gem,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :map,
              s(:block_pass,
                s(:sym, :full_name)))),
          s(:lvasgn, :default_gem_spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "2.0.0.0"),
              s(:nil),
              s(:str, "default/gem.rb"))),
          s(:lvasgn, :spec_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@default_spec_dir),
              s(:send,
                s(:lvar, :default_gem_spec), :spec_name))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :spec_path)),
            s(:args,
              s(:arg, :file)),
            s(:send,
              s(:lvar, :file), :print,
              s(:send,
                s(:lvar, :default_gem_spec), :to_ruby))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "default-2.0.0.0")),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :map,
              s(:block_pass,
                s(:sym, :full_name)))))),
      s(:def, :test_detect_bundled_gem_in_old_ruby,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :util_set_RUBY_VERSION,
              s(:str, "1.9.3"),
              s(:int, 551)),
            s(:lvasgn, :spec,
              s(:block,
                s(:send, nil, :new_spec,
                  s(:str, "bigdecimal"),
                  s(:str, "1.1.0")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :summary=,
                  s(:str, "This bigdecimal is bundled with Ruby")))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :spec), :bundled_gem_in_old_ruby?))),
          s(:send, nil, :util_restore_RUBY_VERSION))),
      s(:def, :util_setup_deps,
        s(:args),
        s(:begin,
          s(:ivasgn, :@gem,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "awesome"),
                s(:str, "1.0")),
              s(:args,
                s(:arg, :awesome)),
              s(:begin,
                s(:send,
                  s(:lvar, :awesome), :add_runtime_dependency,
                  s(:str, "bonobo"),
                  s(:array)),
                s(:send,
                  s(:lvar, :awesome), :add_development_dependency,
                  s(:str, "monkey"),
                  s(:array))))),
          s(:ivasgn, :@bonobo,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "bonobo"),
              s(:array))),
          s(:ivasgn, :@monkey,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "monkey"),
              s(:array),
              s(:sym, :development))))),
      s(:def, :util_setup_validate,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:ivar, :@tempdir)),
          s(:args),
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:const, nil, :File), :join,
                s(:str, "ext"),
                s(:str, "a"))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:str, "lib")),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:str, "test")),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:str, "bin")),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:send,
                s(:const, nil, :File), :join,
                s(:str, "ext"),
                s(:str, "a"),
                s(:str, "extconf.rb"))),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:send,
                s(:const, nil, :File), :join,
                s(:str, "lib"),
                s(:str, "code.rb"))),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:send,
                s(:const, nil, :File), :join,
                s(:str, "test"),
                s(:str, "suite.rb"))),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:str, "bin/exec"),
                s(:str, "w"),
                s(:int, 493)),
              s(:args,
                s(:arg, :fp)),
              s(:send,
                s(:lvar, :fp), :puts,
                s(:dstr,
                  s(:str, "#!"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Gem), :ruby)))))))),
      s(:def, :with_syck,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:kwbegin,
              s(:ensure,
                s(:rescue,
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :verbose),
                        s(:gvasgn, :$VERBOSE)),
                      s(:array,
                        s(:gvar, :$VERBOSE),
                        s(:nil))),
                    s(:send, nil, :require,
                      s(:str, "yaml")),
                    s(:lvasgn, :old_engine,
                      s(:send,
                        s(:const,
                          s(:const, nil, :YAML), :ENGINE), :yamler)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :YAML), :ENGINE), :yamler=,
                      s(:str, "syck")),
                    s(:send, nil, :load,
                      s(:str, "rubygems/syck_hack.rb"))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NameError)), nil, nil), nil),
                s(:gvasgn, :$VERBOSE,
                  s(:lvar, :verbose)))),
            s(:yield)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :YAML), :ENGINE), :yamler=,
                  s(:lvar, :old_engine)),
                s(:send, nil, :load,
                  s(:str, "rubygems/syck_hack.rb"))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError)), nil, nil), nil)))),
      s(:def, :with_psych,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "yaml")),
                  s(:lvasgn, :old_engine,
                    s(:send,
                      s(:const,
                        s(:const, nil, :YAML), :ENGINE), :yamler)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :YAML), :ENGINE), :yamler=,
                    s(:str, "psych")),
                  s(:send, nil, :load,
                    s(:str, "rubygems/syck_hack.rb"))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NameError)), nil, nil), nil)),
            s(:yield)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :YAML), :ENGINE), :yamler=,
                  s(:lvar, :old_engine)),
                s(:send, nil, :load,
                  s(:str, "rubygems/syck_hack.rb"))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError)), nil, nil), nil)))),
      s(:def, :silence_warnings,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :old_verbose),
                s(:gvasgn, :$VERBOSE)),
              s(:array,
                s(:gvar, :$VERBOSE),
                s(:false))),
            s(:yield)),
          s(:gvasgn, :$VERBOSE,
            s(:lvar, :old_verbose)))))))
