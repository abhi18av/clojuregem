s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/specification_command")),
  s(:class,
    s(:const, nil, :TestGemCommandsSpecificationCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :SpecificationCommand), :new)))),
      s(:def, :test_execute,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:send, nil, :util_spec,
              s(:str, "foo"))),
          s(:send, nil, :install_specs,
            s(:lvar, :foo)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Gem::Specification"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "name: foo"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_all,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "foo"),
              s(:str, "0.0.1"))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "foo"),
              s(:str, "0.0.2"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :all),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Gem::Specification"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "name: foo"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "version: 0.0.1"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "version: 0.0.2"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_all_conflicts_with_version,
        s(:args),
        s(:begin,
          s(:send, nil, :util_spec,
            s(:str, "foo"),
            s(:str, "0.0.1")),
          s(:send, nil, :util_spec,
            s(:str, "foo"),
            s(:str, "0.0.2")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :all),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :version),
            s(:str, "1")),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, "ERROR:  Specify --all or -v, not both\n"),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_bad_name,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, "ERROR:  No gem matching 'foo (>= 0)' found\n"),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_bad_name_with_version,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :version),
            s(:str, "1.3.2")),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, "ERROR:  No gem matching 'foo (= 1.3.2)' found\n"),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_exact_match,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "foo"))),
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "foo_bar"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Gem::Specification"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "name: foo"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_field,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:send, nil, :new_spec,
              s(:str, "foo"),
              s(:str, "2"))),
          s(:send, nil, :install_specs,
            s(:lvar, :foo)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"),
              s(:str, "name"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:send,
                s(:ivar, :@ui), :output))))),
      s(:def, :test_execute_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "foo")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :files=,
                s(:array,
                  s(:str, "lib/code.rb"))))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :foo)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:send,
                s(:lvar, :foo), :cache_file))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Gem::Specification"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "name: foo"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_marshal,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:send, nil, :new_spec,
              s(:str, "foo"),
              s(:str, "2"))),
          s(:send, nil, :install_specs,
            s(:lvar, :foo)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :format),
            s(:sym, :marshal)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:lvar, :foo),
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:ivar, :@ui), :output))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remote,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "foo"),
              s(:int, 1))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A--- !ruby/object:Gem::Specification"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "name: foo"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_remote_with_version,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "foo"),
                s(:str, "1")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "foo"),
                s(:str, "2")))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :version),
            s(:str, "1")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :from_yaml,
              s(:send,
                s(:ivar, :@ui), :output))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:str, "1")),
            s(:send,
              s(:lvar, :spec), :version)))),
      s(:def, :test_execute_remote_without_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "foo"),
                s(:str, "2.0.0")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "foo"),
                s(:str, "2.0.1.pre")))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A--- !ruby/object:Gem::Specification"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "name: foo"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:send,
                s(:ivar, :@ui), :output))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:str, "2.0.0")),
            s(:send,
              s(:lvar, :spec), :version)))),
      s(:def, :test_execute_remote_with_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "foo"),
                s(:str, "2.0.0")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "foo"),
                s(:str, "2.0.1.pre")))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :prerelease),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A--- !ruby/object:Gem::Specification"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "name: foo"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:lvasgn, :spec,
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:send,
                s(:ivar, :@ui), :output))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:str, "2.0.1.pre")),
            s(:send,
              s(:lvar, :spec), :version)))),
      s(:def, :test_execute_ruby,
        s(:args),
        s(:begin,
          s(:lvasgn, :foo,
            s(:send, nil, :util_spec,
              s(:str, "foo"))),
          s(:send, nil, :install_specs,
            s(:lvar, :foo)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :format),
            s(:sym, :ruby)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Gem::Specification.new"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "s.name = \"foo\""),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))))))
