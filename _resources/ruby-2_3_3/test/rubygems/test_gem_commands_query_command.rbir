s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/query_command")),
  s(:module,
    s(:const, nil, :TestGemCommandsQueryCommandSetup),
    s(:def, :setup,
      s(:args),
      s(:begin,
        s(:zsuper),
        s(:ivasgn, :@cmd,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Commands), :QueryCommand), :new)),
        s(:ivasgn, :@specs,
          s(:send, nil, :add_gems_to_fetcher)),
        s(:send,
          s(:send,
            s(:ivar, :@fetcher), :data), :[]=,
          s(:dstr,
            s(:begin,
              s(:ivar, :@gem_repo)),
            s(:str, "Marshal."),
            s(:begin,
              s(:send,
                s(:const, nil, :Gem), :marshal_version))),
          s(:block,
            s(:send, nil, :proc),
            s(:args),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :FetchError))))))),
  s(:class,
    s(:const, nil, :TestGemCommandsQueryCommandWithInstalledGems),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TestGemCommandsQueryCommandSetup)),
      s(:def, :test_execute,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (2)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_all,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"),
              s(:str, "--all"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (2, 1)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_all_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"),
              s(:str, "--all"),
              s(:str, "--prerelease"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (3.a, 2, 1)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_details,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :summary=,
                    s(:send,
                      s(:str, "This is a lot of text. "), :*,
                      s(:int, 4))),
                  s(:send,
                    s(:lvar, :s), :authors=,
                    s(:array,
                      s(:str, "Abraham Lincoln"),
                      s(:str, "Hirohito"))),
                  s(:send,
                    s(:lvar, :s), :homepage=,
                    s(:str, "http://a.example.com/")))),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"),
              s(:str, "-d"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (2)\n"),
              s(:str, "    Authors: Abraham Lincoln, Hirohito\n"),
              s(:str, "    Homepage: http://a.example.com/\n"),
              s(:str, "\n"),
              s(:str, "    This is a lot of text. This is a lot of text. This is a lot of text.\n"),
              s(:str, "    This is a lot of text.\n"),
              s(:str, "\n"),
              s(:str, "pl (1)\n"),
              s(:str, "    Platform: i386-linux\n"),
              s(:str, "    Author: A User\n"),
              s(:str, "    Homepage: http://example.com\n"),
              s(:str, "\n"),
              s(:str, "    this is a summary\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_installed,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-n"),
              s(:str, "a"),
              s(:str, "--installed"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :SystemExitException)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, "true\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_installed_inverse,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-n"),
              s(:str, "a"),
              s(:str, "--no-installed"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute)))),
          s(:send, nil, :assert_equal,
            s(:str, "false\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :exit_code)))),
      s(:def, :test_execute_installed_inverse_not_installed,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-n"),
              s(:str, "not_installed"),
              s(:str, "--no-installed"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :SystemExitException)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, "true\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_installed_no_name,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--installed"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute)))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, "ERROR:  You must specify a gem name\n"),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:lvar, :e), :exit_code)))),
      s(:def, :test_execute_installed_not_installed,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-n"),
              s(:str, "not_installed"),
              s(:str, "--installed"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute)))),
          s(:send, nil, :assert_equal,
            s(:str, "false\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :exit_code)))),
      s(:def, :test_execute_installed_version,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-n"),
              s(:str, "a"),
              s(:str, "--installed"),
              s(:str, "--version"),
              s(:str, "2"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :SystemExitException)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, "true\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_installed_version_not_installed,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-n"),
              s(:str, "c"),
              s(:str, "--installed"),
              s(:str, "--version"),
              s(:str, "2"))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :MockGemUi), :TermError)),
              s(:args),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute)))),
          s(:send, nil, :assert_equal,
            s(:str, "false\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :e), :exit_code)))),
      s(:def, :test_execute_local,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** LOCAL GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (3.a, 2, 1)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_local_notty,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array)),
          s(:send,
            s(:send,
              s(:ivar, :@ui), :outs), :tty=,
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "a (3.a, 2, 1)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_local_quiet,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :verbose=,
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "a (3.a, 2, 1)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_no_versions,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"),
              s(:str, "--no-versions"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a\n"),
              s(:str, "pl\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_notty,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"))),
          s(:send,
            s(:send,
              s(:ivar, :@ui), :outs), :tty=,
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "a (2)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_prerelease,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"),
              s(:str, "--prerelease"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (3.a)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_prerelease_local,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-l"),
              s(:str, "--prerelease"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** LOCAL GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (3.a, 2, 1)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, "WARNING:  prereleases are always shown locally\n"),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remote,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (2)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remote_notty,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array)),
          s(:send,
            s(:send,
              s(:ivar, :@ui), :outs), :tty=,
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "a (3.a, 2, 1)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remote_quiet,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :verbose=,
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "a (2)\n"),
              s(:str, "pl (1 i386-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_make_entry,
        s(:args),
        s(:begin,
          s(:lvasgn, :a_2_name,
            s(:send,
              s(:send,
                s(:ivar, :@specs), :[],
                s(:str, "a-2")), :original_name)),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :delete,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "quick/Marshal."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version)),
              s(:str, "/"),
              s(:begin,
                s(:lvar, :a_2_name)),
              s(:str, ".gemspec.rz"))),
          s(:lvasgn, :a2,
            s(:send,
              s(:ivar, :@specs), :[],
              s(:str, "a-2"))),
          s(:lvasgn, :entry_tuples,
            s(:array,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :NameTuple), :new,
                  s(:send,
                    s(:lvar, :a2), :name),
                  s(:send,
                    s(:lvar, :a2), :version),
                  s(:send,
                    s(:lvar, :a2), :platform)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :sources), :first)))),
          s(:lvasgn, :platforms,
            s(:hash,
              s(:pair,
                s(:send,
                  s(:lvar, :a2), :version),
                s(:array,
                  s(:send,
                    s(:lvar, :a2), :platform))))),
          s(:lvasgn, :entry,
            s(:send,
              s(:ivar, :@cmd), :send,
              s(:sym, :make_entry),
              s(:lvar, :entry_tuples),
              s(:lvar, :platforms))),
          s(:send, nil, :assert_equal,
            s(:str, "a (2)"),
            s(:lvar, :entry)))),
      s(:def, :test_execute_multiple_args,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "a"),
              s(:str, "pl"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^a "),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^pl "),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_show_gems,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :name),
            s(:regexp,
              s(:regopt))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :domain),
            s(:sym, :remote)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :send,
              s(:sym, :show_gems),
              s(:regexp,
                s(:str, "a"),
                s(:regopt, :i)),
              s(:false))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^a "),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "^pl "),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:send, nil, :private),
      s(:def, :add_gems_to_fetcher,
        s(:args),
        s(:block,
          s(:send, nil, :spec_fetcher),
          s(:args,
            s(:arg, :fetcher)),
          s(:begin,
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 1)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 2)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:str, "3.a"))))))),
  s(:class,
    s(:const, nil, :TestGemCommandsQueryCommandWithoutInstalledGems),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TestGemCommandsQueryCommandSetup)),
      s(:def, :test_execute_platform,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:str, "x86-linux"))),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:str, "universal-darwin"))))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-r"),
              s(:str, "-a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (2 universal-darwin, 1 ruby x86-linux)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_default_details,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 2))),
          s(:lvasgn, :a1,
            s(:send, nil, :new_default_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:send, nil, :install_default_specs,
            s(:lvar, :a1)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-l"),
              s(:str, "-d"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** LOCAL GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (2, 1)\n"),
              s(:str, "    Author: A User\n"),
              s(:str, "    Homepage: http://example.com\n"),
              s(:str, "    Installed at (2): "),
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "\n"),
              s(:str, "                 (1, default): "),
              s(:begin,
                s(:send,
                  s(:lvar, :a1), :base_dir)),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "    this is a summary\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_local_details,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:str, "x86-linux"))),
              s(:block,
                s(:send,
                  s(:lvar, :fetcher), :spec,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :summary=,
                    s(:send,
                      s(:str, "This is a lot of text. "), :*,
                      s(:int, 4))),
                  s(:send,
                    s(:lvar, :s), :authors=,
                    s(:array,
                      s(:str, "Abraham Lincoln"),
                      s(:str, "Hirohito"))),
                  s(:send,
                    s(:lvar, :s), :homepage=,
                    s(:str, "http://a.example.com/")),
                  s(:send,
                    s(:lvar, :s), :platform=,
                    s(:str, "universal-darwin")))),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "-l"),
              s(:str, "-d"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :str,
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send,
            s(:lvar, :str), :gsub!,
            s(:regexp,
              s(:str, "\\(\\d\\): [^\\n]*"),
              s(:regopt)),
            s(:str, "-")),
          s(:send,
            s(:lvar, :str), :gsub!,
            s(:regexp,
              s(:str, "at: [^\\n]*"),
              s(:regopt)),
            s(:str, "at: -")),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** LOCAL GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "a (2, 1)\n"),
              s(:str, "    Platforms:\n"),
              s(:str, "        1: x86-linux\n"),
              s(:str, "        2: universal-darwin\n"),
              s(:str, "    Authors: Abraham Lincoln, Hirohito\n"),
              s(:str, "    Homepage: http://a.example.com/\n"),
              s(:str, "    Installed at -\n"),
              s(:str, "                 -\n"),
              s(:str, "\n"),
              s(:str, "    This is a lot of text. This is a lot of text. This is a lot of text.\n"),
              s(:str, "    This is a lot of text.\n"),
              s(:str, "\n"),
              s(:str, "pl (1)\n"),
              s(:str, "    Platform: i386-linux\n"),
              s(:str, "    Author: A User\n"),
              s(:str, "    Homepage: http://example.com\n"),
              s(:str, "    Installed at: -\n"),
              s(:str, "\n"),
              s(:str, "    this is a summary\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_execute_exact,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "coolgem-omg"),
                s(:int, 3)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "coolgem"),
                s(:str, "4.2.1")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "wow_coolgem"),
                s(:int, 1)))),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--remote"),
              s(:str, "--exact"),
              s(:str, "coolgem"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "*** REMOTE GEMS ***\n"),
              s(:str, "\n"),
              s(:str, "coolgem (4.2.1)\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:send, nil, :private),
      s(:def, :add_gems_to_fetcher,
        s(:args),
        s(:block,
          s(:send, nil, :spec_fetcher),
          s(:args,
            s(:arg, :fetcher)),
          s(:begin,
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "a"),
              s(:int, 1)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "a"),
              s(:int, 2)),
            s(:send,
              s(:lvar, :fetcher), :download,
              s(:str, "a"),
              s(:str, "3.a"))))))))
