s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:class,
    s(:const, nil, :TestGemResolverActivationRequest),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@DR,
            s(:const,
              s(:const, nil, :Gem), :Resolver)),
          s(:ivasgn, :@dep,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, ">= 0")),
              s(:nil))),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Local), :new)),
          s(:lvasgn, :platform,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY)),
          s(:ivasgn, :@a1,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :IndexSpecification), :new,
              s(:nil),
              s(:str, "a"),
              s(:send, nil, :v,
                s(:int, 1)),
              s(:lvar, :source),
              s(:lvar, :platform))),
          s(:ivasgn, :@a2,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :IndexSpecification), :new,
              s(:nil),
              s(:str, "a"),
              s(:send, nil, :v,
                s(:int, 2)),
              s(:lvar, :source),
              s(:lvar, :platform))),
          s(:ivasgn, :@a3,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :IndexSpecification), :new,
              s(:nil),
              s(:str, "a"),
              s(:send, nil, :v,
                s(:int, 3)),
              s(:lvar, :source),
              s(:lvar, :platform))),
          s(:ivasgn, :@req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:ivar, :@a3),
              s(:ivar, :@dep),
              s(:array,
                s(:ivar, :@a1),
                s(:ivar, :@a2)))))),
      s(:def, :test_development_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:ivar, :@req), :development?)),
          s(:lvasgn, :dep_req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :DependencyRequest), :new,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, ">= 0"),
                s(:sym, :development)),
              s(:nil))),
          s(:lvasgn, :act_req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:ivar, :@a3),
              s(:lvar, :dep_req),
              s(:array,
                s(:ivar, :@a1),
                s(:ivar, :@a2)))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :act_req), :development?)))),
      s(:def, :test_inspect,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_match,
            s(:str, "a-3"),
            s(:send,
              s(:ivar, :@req), :inspect)),
          s(:send, nil, :assert_match,
            s(:str, "from a (>= 0)"),
            s(:send,
              s(:ivar, :@req), :inspect)),
          s(:send, nil, :assert_match,
            s(:str, "(others possible: a-1, a-2)"),
            s(:send,
              s(:ivar, :@req), :inspect)))),
      s(:def, :test_inspect_legacy,
        s(:args),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:ivar, :@a3),
              s(:ivar, :@dep),
              s(:true))),
          s(:send, nil, :assert_match,
            s(:str, "(others possible)"),
            s(:send,
              s(:lvar, :req), :inspect)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:ivar, :@a3),
              s(:ivar, :@dep),
              s(:false))),
          s(:send, nil, :refute_match,
            s(:str, "(others possible)"),
            s(:send,
              s(:lvar, :req), :inspect)))),
      s(:def, :test_installed_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :v_spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :VendorSpecification), :new,
              s(:nil),
              s(:ivar, :@a3))),
          s(:ivasgn, :@req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:lvar, :v_spec),
              s(:ivar, :@dep),
              s(:array,
                s(:ivar, :@a1),
                s(:ivar, :@a2)))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@req), :installed?)))),
      s(:def, :test_others_possible_eh,
        s(:args),
        s(:begin,
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@req), :others_possible?)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:ivar, :@a3),
              s(:ivar, :@dep),
              s(:array))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :req), :others_possible?)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:ivar, :@a3),
              s(:ivar, :@dep),
              s(:true))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :req), :others_possible?)),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:ivar, :@DR), :ActivationRequest), :new,
              s(:ivar, :@a3),
              s(:ivar, :@dep),
              s(:false))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :req), :others_possible?)))))))
