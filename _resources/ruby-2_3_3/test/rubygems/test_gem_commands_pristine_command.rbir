s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/pristine_command")),
  s(:class,
    s(:const, nil, :TestGemCommandsPristineCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :common_installer_setup),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :PristineCommand), :new)))),
      s(:def, :test_execute,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :executables=,
                  s(:array,
                    s(:str, "foo"))),
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "bin/foo"),
                    s(:str, "lib/a.rb")))))),
          s(:block,
            s(:send, nil, :write_file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "lib"),
                s(:str, "a.rb"))),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, "puts __FILE__"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bin"),
                s(:str, "foo"))),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, "#!/usr/bin/ruby"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:lvasgn, :foo_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:lvar, :a), :full_name),
              s(:str, "bin"),
              s(:str, "foo"))),
          s(:lvasgn, :a_rb_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:lvar, :a), :full_name),
              s(:str, "lib"),
              s(:str, "a.rb"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :foo_path)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "I changed it!"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :a_rb_path)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "I changed it!"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:str, "#!/usr/bin/ruby\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :foo_path)),
            s(:lvar, :foo_path)),
          s(:send, nil, :assert_equal,
            s(:str, "puts __FILE__\n"),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :a_rb_path)),
            s(:lvar, :a_rb_path)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_execute_all,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :executables=,
                s(:array,
                  s(:str, "foo"))))),
          s(:block,
            s(:send, nil, :write_file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bin"),
                s(:str, "foo"))),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, "#!/usr/bin/ruby"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:lvasgn, :gem_bin,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:lvar, :a), :full_name),
              s(:str, "bin"),
              s(:str, "foo"))),
          s(:lvasgn, :gem_stub,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "bin"),
              s(:str, "foo"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:lvar, :gem_bin)),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:lvar, :gem_stub)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--all"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem_bin))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem_stub))),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_execute_env_shebang,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :executables=,
                  s(:array,
                    s(:str, "foo"))),
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "bin/foo")))))),
          s(:block,
            s(:send, nil, :write_file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bin"),
                s(:str, "foo"))),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, "#!/usr/bin/ruby"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:lvasgn, :gem_exec,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "bin"),
              s(:str, "foo"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:lvar, :gem_exec)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--all"),
              s(:str, "--env-shebang"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :gem_exec)),
          s(:lvasgn, :ruby_exec,
            s(:send, nil, :sprintf,
              s(:send,
                s(:const, nil, :Gem), :default_exec_format),
              s(:str, "ruby"))),
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\A#!\\s*"),
                s(:begin,
                  s(:lvar, :ruby_exec)),
                s(:regopt)),
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :gem_exec))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\A#!\\s*/usr/bin/env "),
                s(:begin,
                  s(:lvar, :ruby_exec)),
                s(:regopt)),
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :gem_exec)))))),
      s(:def, :test_execute_extensions_explicit,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :extensions), :<<,
                s(:str, "ext/a/extconf.rb")))),
          s(:lvasgn, :ext_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "ext"),
              s(:str, "a"),
              s(:str, "extconf.rb"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :ext_path)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:dstr,
                s(:str, "      File.open \"Makefile\", \"w\" do |f|\n"),
                s(:str, "        f.puts \"clean:\\n\\techo cleaned\\n\"\n"),
                s(:str, "        f.puts \"all:\\n\\techo built\\n\"\n"),
                s(:str, "        f.puts \"install:\\n\\techo installed\\n\"\n"),
                s(:str, "      end\n")))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:send, nil, :install_gem,
            s(:lvar, :b)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :extensions),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :extensions_set),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:str, "Building native extensions.  This could take a while..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_execute_no_extension,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :extensions), :<<,
                s(:str, "ext/a/extconf.rb")))),
          s(:lvasgn, :ext_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "ext"),
              s(:str, "a"),
              s(:str, "extconf.rb"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :ext_path)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:str, "# extconf.rb\nrequire 'mkmf'; create_makefile 'a'"))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :a)),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :extensions),
            s(:false)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Skipped "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name)),
              s(:str, ", it needs to compile an extension")),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_execute_with_extension_with_build_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :extensions), :<<,
                s(:str, "ext/a/extconf.rb")))),
          s(:lvasgn, :ext_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "ext"),
              s(:str, "a"),
              s(:str, "extconf.rb"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:lvar, :ext_path)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:dstr,
                s(:str, "      File.open \"Makefile\", \"w\" do |f|\n"),
                s(:str, "        f.puts \"clean:\\n\\techo cleaned\\n\"\n"),
                s(:str, "        f.puts \"all:\\n\\techo built\\n\"\n"),
                s(:str, "        f.puts \"install:\\n\\techo installed\\n\"\n"),
                s(:str, "      end\n")))),
          s(:lvasgn, :build_args,
            s(:array,
              s(:str, "--with-awesome=true"),
              s(:str, "--sweet"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a),
            s(:hash,
              s(:pair,
                s(:sym, :build_args),
                s(:lvar, :build_args)))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:str, "Building native extensions with: '--with-awesome=true --sweet'"),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:str, "This could take a while..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_execute_many,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:send, nil, :install_gem,
            s(:lvar, :b)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :b), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_skip,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:send, nil, :install_gem,
            s(:lvar, :b)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :skip),
            s(:str, "a")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Skipped "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name)),
              s(:str, ", it was given through options")),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :b), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_execute_many_multi_repo,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:send,
            s(:const, nil, :Gem), :clear_paths),
          s(:lvasgn, :gemhome2,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gemhome2"))),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:lvar, :gemhome2),
            s(:array,
              s(:lvar, :gemhome2),
              s(:ivar, :@gemhome))),
          s(:lvasgn, :b,
            s(:send, nil, :util_spec,
              s(:str, "b"))),
          s(:send, nil, :install_gem,
            s(:lvar, :b)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Restoring gems to pristine condition..."),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :a), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "Restored "),
              s(:begin,
                s(:send,
                  s(:lvar, :b), :full_name))),
            s(:send,
              s(:lvar, :out), :shift)),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "a-2"))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome2),
              s(:str, "gems"),
              s(:str, "a-2"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome2),
              s(:str, "gems"),
              s(:str, "b-2"))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "b-2"))))),
      s(:def, :test_execute_missing_cache_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 2)),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 3)),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:str, "3.a"))))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:str, "a-2")), :cache_file)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "Restoring gems to pristine condition..."),
                s(:str, "Restored a-1"),
                s(:str, "Cached gem for a-2 not found, attempting to fetch..."),
                s(:str, "Restored a-2"),
                s(:str, "Restored a-3.a"),
                s(:str, "Restored a-3")), :each),
            s(:args,
              s(:arg, :line)),
            s(:send, nil, :assert_equal,
              s(:lvar, :line),
              s(:send,
                s(:lvar, :out), :shift))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)))),
      s(:def, :test_execute_missing_cache_gem_when_multi_repo,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send, nil, :spec_fetcher),
              s(:args,
                s(:arg, :fetcher)),
              s(:begin,
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "a"),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :fetcher), :gem,
                  s(:str, "b"),
                  s(:int, 1))))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "a-1"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "b-1"))),
          s(:send, nil, :install_gem,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "a-1"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "cache"),
              s(:str, "a-1.gem"))),
          s(:send,
            s(:const, nil, :Gem), :clear_paths),
          s(:lvasgn, :gemhome2,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gemhome2"))),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:lvar, :gemhome2),
            s(:array,
              s(:lvar, :gemhome2),
              s(:ivar, :@gemhome))),
          s(:send, nil, :install_gem,
            s(:send,
              s(:lvar, :specs), :[],
              s(:str, "b-1"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome2),
              s(:str, "cache"),
              s(:str, "b-1.gem"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :out,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "Restoring gems to pristine condition..."),
                s(:str, "Cached gem for a-1 not found, attempting to fetch..."),
                s(:str, "Restored a-1"),
                s(:str, "Cached gem for b-1 not found, attempting to fetch..."),
                s(:str, "Restored b-1")), :each),
            s(:args,
              s(:arg, :line)),
            s(:send, nil, :assert_equal,
              s(:lvar, :line),
              s(:send,
                s(:lvar, :out), :shift))),
          s(:send, nil, :assert_empty,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :out), :inspect)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "cache"),
              s(:str, "a-1.gem"))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome2),
              s(:str, "cache"),
              s(:str, "a-2.gem"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "a-1"))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome2),
              s(:str, "gems"),
              s(:str, "a-1"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome2),
              s(:str, "cache"),
              s(:str, "b-1.gem"))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "cache"),
              s(:str, "b-2.gem"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome2),
              s(:str, "gems"),
              s(:str, "b-1"))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "b-1"))))),
      s(:def, :test_execute_no_gem,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :CommandLineError)),
              s(:args),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :execute)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "at least one gem name"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_execute_only_executables,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :executables=,
                  s(:array,
                    s(:str, "foo"))),
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "bin/foo"),
                    s(:str, "lib/a.rb")))))),
          s(:block,
            s(:send, nil, :write_file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "lib"),
                s(:str, "a.rb"))),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, "puts __FILE__"))),
          s(:block,
            s(:send, nil, :write_file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "bin"),
                s(:str, "foo"))),
            s(:args,
              s(:arg, :fp)),
            s(:send,
              s(:lvar, :fp), :puts,
              s(:str, "#!/usr/bin/ruby"))),
          s(:send, nil, :install_gem,
            s(:lvar, :a)),
          s(:lvasgn, :gem_lib,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:lvar, :a), :full_name),
              s(:str, "lib"),
              s(:str, "a.rb"))),
          s(:lvasgn, :gem_exec,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "bin"),
              s(:str, "foo"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:lvar, :gem_exec)),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:lvar, :gem_lib)),
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--all"),
              s(:str, "--only-executables"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem_exec))),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem_lib))))),
      s(:def, :test_execute_unknown_gem_at_remote_source,
        s(:args),
        s(:begin,
          s(:send, nil, :install_specs,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Restoring gems to pristine condition..."),
              s(:str, "Cached gem for a-2 not found, attempting to fetch..."),
              s(:str, "Skipped a-2, it was not found from cache and remote sources")),
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_default_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_gem_spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "2.0.0.0"),
              s(:nil),
              s(:str, "default/gem.rb"))),
          s(:send, nil, :install_default_specs,
            s(:lvar, :default_gem_spec)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "default"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Restoring gems to pristine condition..."),
              s(:str, "Skipped default-2.0.0.0, it is a default gem")),
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_bundled_gem_on_old_rubies,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :util_set_RUBY_VERSION,
              s(:str, "1.9.3"),
              s(:int, 551)),
            s(:lvasgn, :spec,
              s(:block,
                s(:send, nil, :util_spec,
                  s(:str, "bigdecimal"),
                  s(:str, "1.1.0")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :summary=,
                  s(:str, "This bigdecimal is bundled with Ruby")))),
            s(:send, nil, :install_specs,
              s(:lvar, :spec)),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[]=,
              s(:sym, :args),
              s(:array,
                s(:str, "bigdecimal"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:str, "Restoring gems to pristine condition..."),
                s(:str, "Skipped bigdecimal-1.1.0, it is bundled with old Ruby")),
              s(:send,
                s(:send,
                  s(:ivar, :@ui), :output), :split,
                s(:str, "\n"))),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error))),
          s(:send, nil, :util_restore_RUBY_VERSION))),
      s(:def, :test_handle_options,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array)),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :all))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :extensions))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :extensions_set))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :version))))),
      s(:def, :test_handle_options_extensions,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array,
              s(:str, "--extensions"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :extensions))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :extensions_set))))))))
