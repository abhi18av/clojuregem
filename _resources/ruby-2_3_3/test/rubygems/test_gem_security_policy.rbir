s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)), nil,
    s(:send, nil, :warn,
      s(:str, "Skipping Gem::Security::Policy tests.  openssl not found."))),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)),
    s(:class,
      s(:const, nil, :TestGemSecurityPolicy),
      s(:const,
        s(:const, nil, :Gem), :TestCase),
      s(:begin,
        s(:casgn, nil, :ALTERNATE_KEY,
          s(:send, nil, :load_key,
            s(:str, "alternate"))),
        s(:casgn, nil, :INVALID_KEY,
          s(:send, nil, :load_key,
            s(:str, "invalid"))),
        s(:casgn, nil, :CHILD_KEY,
          s(:send, nil, :load_key,
            s(:str, "child"))),
        s(:casgn, nil, :GRANDCHILD_KEY,
          s(:send, nil, :load_key,
            s(:str, "grandchild"))),
        s(:casgn, nil, :INVALIDCHILD_KEY,
          s(:send, nil, :load_key,
            s(:str, "invalidchild"))),
        s(:casgn, nil, :ALTERNATE_CERT,
          s(:send, nil, :load_cert,
            s(:str, "alternate"))),
        s(:casgn, nil, :CA_CERT,
          s(:send, nil, :load_cert,
            s(:str, "ca"))),
        s(:casgn, nil, :CHILD_CERT,
          s(:send, nil, :load_cert,
            s(:str, "child"))),
        s(:casgn, nil, :EXPIRED_CERT,
          s(:send, nil, :load_cert,
            s(:str, "expired"))),
        s(:casgn, nil, :FUTURE_CERT,
          s(:send, nil, :load_cert,
            s(:str, "future"))),
        s(:casgn, nil, :GRANDCHILD_CERT,
          s(:send, nil, :load_cert,
            s(:str, "grandchild"))),
        s(:casgn, nil, :INVALIDCHILD_CERT,
          s(:send, nil, :load_cert,
            s(:str, "invalidchild"))),
        s(:casgn, nil, :INVALID_ISSUER_CERT,
          s(:send, nil, :load_cert,
            s(:str, "invalid_issuer"))),
        s(:casgn, nil, :INVALID_SIGNER_CERT,
          s(:send, nil, :load_cert,
            s(:str, "invalid_signer"))),
        s(:casgn, nil, :WRONG_KEY_CERT,
          s(:send, nil, :load_cert,
            s(:str, "wrong_key"))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@spec,
              s(:block,
                s(:send, nil, :quick_gem,
                  s(:str, "a")),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:send,
                    s(:lvar, :s), :description=,
                    s(:str, "Ï€")),
                  s(:send,
                    s(:lvar, :s), :files=,
                    s(:array,
                      s(:str, "lib/code.rb")))))),
            s(:ivasgn, :@sha1,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :Digest), :SHA1)),
            s(:ivasgn, :@trust_dir,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :trust_dir), :dir)),
            s(:ivasgn, :@no,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :NoSecurity)),
            s(:ivasgn, :@almost_no,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :AlmostNoSecurity)),
            s(:ivasgn, :@low,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :LowSecurity)),
            s(:ivasgn, :@medium,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :MediumSecurity)),
            s(:ivasgn, :@high,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :HighSecurity)),
            s(:ivasgn, :@chain,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Policy), :new,
                s(:str, "Chain"),
                s(:hash,
                  s(:pair,
                    s(:sym, :verify_data),
                    s(:true)),
                  s(:pair,
                    s(:sym, :verify_signer),
                    s(:true)),
                  s(:pair,
                    s(:sym, :verify_chain),
                    s(:true)),
                  s(:pair,
                    s(:sym, :verify_root),
                    s(:false)),
                  s(:pair,
                    s(:sym, :only_trusted),
                    s(:false)),
                  s(:pair,
                    s(:sym, :only_signed),
                    s(:false))))),
            s(:ivasgn, :@root,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Policy), :new,
                s(:str, "Root"),
                s(:hash,
                  s(:pair,
                    s(:sym, :verify_data),
                    s(:true)),
                  s(:pair,
                    s(:sym, :verify_signer),
                    s(:true)),
                  s(:pair,
                    s(:sym, :verify_chain),
                    s(:true)),
                  s(:pair,
                    s(:sym, :verify_root),
                    s(:true)),
                  s(:pair,
                    s(:sym, :only_trusted),
                    s(:false)),
                  s(:pair,
                    s(:sym, :only_signed),
                    s(:false))))))),
        s(:def, :test_check_data,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:send, nil, :digest,
                s(:str, "hello"))),
            s(:lvasgn, :signature,
              s(:send, nil, :sign,
                s(:lvar, :data))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@almost_no), :check_data,
                s(:const, nil, :PUBLIC_KEY),
                s(:ivar, :@sha1),
                s(:lvar, :signature),
                s(:lvar, :data))))),
        s(:def, :test_check_data_invalid,
          s(:args),
          s(:begin,
            s(:lvasgn, :data,
              s(:send, nil, :digest,
                s(:str, "hello"))),
            s(:lvasgn, :signature,
              s(:send, nil, :sign,
                s(:lvar, :data))),
            s(:lvasgn, :invalid,
              s(:send, nil, :digest,
                s(:str, "hello!"))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@almost_no), :check_data,
                  s(:const, nil, :PUBLIC_KEY),
                  s(:ivar, :@sha1),
                  s(:lvar, :signature),
                  s(:lvar, :invalid)))),
            s(:send, nil, :assert_equal,
              s(:str, "invalid signature"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :chain,
              s(:array,
                s(:const, nil, :PUBLIC_CERT),
                s(:const, nil, :CHILD_CERT),
                s(:const, nil, :GRANDCHILD_CERT))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@chain), :check_chain,
                s(:lvar, :chain),
                s(:send,
                  s(:const, nil, :Time), :now))))),
        s(:def, :test_check_chain_empty_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_chain,
                  s(:array),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:str, "empty signing chain"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_chain_invalid,
          s(:args),
          s(:begin,
            s(:lvasgn, :chain,
              s(:array,
                s(:const, nil, :PUBLIC_CERT),
                s(:const, nil, :CHILD_CERT),
                s(:const, nil, :INVALIDCHILD_CERT))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_chain,
                  s(:lvar, :chain),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:str, "invalid signing chain: "), :+,
                  s(:dstr,
                    s(:str, "certificate "),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :INVALIDCHILD_CERT), :subject)),
                    s(:str, " "))), :+,
                s(:dstr,
                  s(:str, "was not issued by "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :CHILD_CERT), :subject)))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_chain_no_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_chain,
                  s(:nil),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing signing chain"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_cert,
          s(:args),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@low), :check_cert,
              s(:const, nil, :PUBLIC_CERT),
              s(:nil),
              s(:send,
                s(:const, nil, :Time), :now)))),
        s(:def, :test_check_cert_expired,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@low), :check_cert,
                  s(:const, nil, :EXPIRED_CERT),
                  s(:nil),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "certificate "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :EXPIRED_CERT), :subject)),
                  s(:str, " ")), :+,
                s(:dstr,
                  s(:str, "not valid after "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :EXPIRED_CERT), :not_after)))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_cert_future,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@low), :check_cert,
                  s(:const, nil, :FUTURE_CERT),
                  s(:nil),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "certificate "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :FUTURE_CERT), :subject)),
                  s(:str, " ")), :+,
                s(:dstr,
                  s(:str, "not valid before "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :FUTURE_CERT), :not_before)))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_cert_invalid_issuer,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@low), :check_cert,
                  s(:const, nil, :INVALID_ISSUER_CERT),
                  s(:const, nil, :PUBLIC_CERT),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "certificate "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :INVALID_ISSUER_CERT), :subject)),
                  s(:str, " ")), :+,
                s(:dstr,
                  s(:str, "was not issued by "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :PUBLIC_CERT), :subject)))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_cert_issuer,
          s(:args),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@low), :check_cert,
              s(:const, nil, :CHILD_CERT),
              s(:const, nil, :PUBLIC_CERT),
              s(:send,
                s(:const, nil, :Time), :now)))),
        s(:def, :test_check_cert_no_signer,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@high), :check_cert,
                  s(:nil),
                  s(:nil),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing signing certificate"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_key,
          s(:args),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@almost_no), :check_key,
              s(:const, nil, :PUBLIC_CERT),
              s(:const, nil, :PRIVATE_KEY)))),
        s(:def, :test_check_key_no_signer,
          s(:args),
          s(:begin,
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@almost_no), :check_key,
                s(:nil),
                s(:nil))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@high), :check_key,
                  s(:nil),
                  s(:nil)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing key or signature"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_key_wrong_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@almost_no), :check_key,
                  s(:const, nil, :PUBLIC_CERT),
                  s(:const, nil, :ALTERNATE_KEY)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "certificate "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :PUBLIC_CERT), :subject)),
                  s(:str, " ")), :+,
                s(:str, "does not match the signing key")),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_root,
          s(:args),
          s(:begin,
            s(:lvasgn, :chain,
              s(:array,
                s(:const, nil, :PUBLIC_CERT),
                s(:const, nil, :CHILD_CERT),
                s(:const, nil, :INVALIDCHILD_CERT))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@chain), :check_root,
                s(:lvar, :chain),
                s(:send,
                  s(:const, nil, :Time), :now))))),
        s(:def, :test_check_root_empty_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_root,
                  s(:array),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing root certificate"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_root_invalid_signer,
          s(:args),
          s(:begin,
            s(:lvasgn, :chain,
              s(:array,
                s(:const, nil, :INVALID_SIGNER_CERT))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_root,
                  s(:lvar, :chain),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "certificate "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :INVALID_SIGNER_CERT), :subject)),
                  s(:str, " ")), :+,
                s(:dstr,
                  s(:str, "was not issued by "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :INVALID_SIGNER_CERT), :issuer)))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_root_not_self_signed,
          s(:args),
          s(:begin,
            s(:lvasgn, :chain,
              s(:array,
                s(:const, nil, :INVALID_ISSUER_CERT))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_root,
                  s(:lvar, :chain),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "root certificate "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :INVALID_ISSUER_CERT), :subject)),
                  s(:str, " ")), :+,
                s(:dstr,
                  s(:str, "is not self-signed (issuer "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :INVALID_ISSUER_CERT), :issuer)),
                  s(:str, ")"))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_root_no_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_root,
                  s(:nil),
                  s(:send,
                    s(:const, nil, :Time), :now)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing signing chain"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_trust,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@high), :check_trust,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:ivar, :@sha1),
                s(:ivar, :@trust_dir))))),
        s(:def, :test_check_trust_child,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@high), :check_trust,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT),
                  s(:const, nil, :CHILD_CERT)),
                s(:ivar, :@sha1),
                s(:ivar, :@trust_dir))))),
        s(:def, :test_check_trust_empty_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_trust,
                  s(:array),
                  s(:ivar, :@sha1),
                  s(:ivar, :@trust_dir)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing root certificate"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_trust_mismatch,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@high), :check_trust,
                  s(:array,
                    s(:const, nil, :WRONG_KEY_CERT)),
                  s(:ivar, :@sha1),
                  s(:ivar, :@trust_dir)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "trusted root certificate "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :PUBLIC_CERT), :subject)),
                  s(:str, " checksum ")), :+,
                s(:str, "does not match signing root certificate checksum")),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_trust_no_chain,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@chain), :check_trust,
                  s(:nil),
                  s(:ivar, :@sha1),
                  s(:ivar, :@trust_dir)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing signing chain"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_trust_no_trust,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@high), :check_trust,
                  s(:array,
                    s(:const, nil, :PUBLIC_CERT)),
                  s(:ivar, :@sha1),
                  s(:ivar, :@trust_dir)))),
            s(:send, nil, :assert_equal,
              s(:dstr,
                s(:str, "root cert "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :PUBLIC_CERT), :subject)),
                s(:str, " is not trusted")),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_check_trust_no_trust_child,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@high), :check_trust,
                  s(:array,
                    s(:const, nil, :PUBLIC_CERT),
                    s(:const, nil, :CHILD_CERT)),
                  s(:ivar, :@sha1),
                  s(:ivar, :@trust_dir)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:str, "root cert "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :PUBLIC_CERT), :subject)),
                  s(:str, " is not trusted ")), :+,
                s(:dstr,
                  s(:str, "(root of signing cert "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :CHILD_CERT), :subject)),
                  s(:str, ")"))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_subject,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "email:nobody@example"),
              s(:send,
                s(:ivar, :@no), :subject,
                s(:const, nil, :PUBLIC_CERT))),
            s(:send, nil, :assert_equal,
              s(:str, "/C=JP/O=JIN.GR.JP/OU=RRR/CN=CA"),
              s(:send,
                s(:ivar, :@no), :subject,
                s(:const, nil, :CA_CERT))))),
        s(:def, :test_verify,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@almost_no), :verify,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:nil),
                s(:splat,
                  s(:send, nil, :dummy_signatures)))))),
        s(:def, :test_verify_chain_signatures,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@high), :verify,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:nil),
                s(:splat,
                  s(:send, nil, :dummy_signatures)))))),
        s(:def, :test_verify_chain_key,
          s(:args),
          s(:send,
            s(:ivar, :@almost_no), :verify,
            s(:array,
              s(:const, nil, :PUBLIC_CERT)),
            s(:const, nil, :PRIVATE_KEY),
            s(:splat,
              s(:send, nil, :dummy_signatures)))),
        s(:def, :test_verify_no_digests,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :_),
                s(:lvasgn, :signatures)),
              s(:send, nil, :dummy_signatures)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@almost_no), :verify,
                  s(:array,
                    s(:const, nil, :PUBLIC_CERT)),
                  s(:nil),
                  s(:hash),
                  s(:lvar, :signatures)))),
            s(:send, nil, :assert_equal,
              s(:str, "no digests provided (probable bug)"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_verify_no_digests_no_security,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :_),
                s(:lvasgn, :signatures)),
              s(:send, nil, :dummy_signatures)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@no), :verify,
                  s(:array,
                    s(:const, nil, :PUBLIC_CERT)),
                  s(:nil),
                  s(:hash),
                  s(:lvar, :signatures)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing digest for 0"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_verify_no_signatures,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :digests)),
              s(:send, nil, :dummy_signatures)),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@no), :verify,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:nil),
                s(:lvar, :digests),
                s(:hash),
                s(:str, "some_gem"))),
            s(:send, nil, :assert_match,
              s(:str, "WARNING:  some_gem is not signed\n"),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception)),
              s(:args),
              s(:send,
                s(:ivar, :@high), :verify,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:nil),
                s(:lvar, :digests),
                s(:hash))))),
        s(:def, :test_verify_no_signatures_no_digests,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@no), :verify,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:nil),
                s(:hash),
                s(:hash),
                s(:str, "some_gem"))),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error)))),
        s(:def, :test_verify_not_enough_signatures,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :digests),
                s(:lvasgn, :signatures)),
              s(:send, nil, :dummy_signatures)),
            s(:lvasgn, :data,
              s(:send, nil, :digest,
                s(:str, "goodbye"))),
            s(:send,
              s(:lvar, :signatures), :[]=,
              s(:int, 1),
              s(:send,
                s(:const, nil, :PRIVATE_KEY), :sign,
                s(:send,
                  s(:ivar, :@sha1), :new),
                s(:send,
                  s(:lvar, :data), :digest))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@almost_no), :verify,
                  s(:array,
                    s(:const, nil, :PUBLIC_CERT)),
                  s(:nil),
                  s(:lvar, :digests),
                  s(:lvar, :signatures)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing digest for 1"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_verify_no_trust,
          s(:args),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :digests),
                s(:lvasgn, :signatures)),
              s(:send, nil, :dummy_signatures)),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@low), :verify,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:nil),
                s(:lvar, :digests),
                s(:lvar, :signatures),
                s(:str, "some_gem"))),
            s(:send, nil, :assert_equal,
              s(:str, "WARNING:  email:nobody@example is not trusted for some_gem\n"),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception)),
              s(:args),
              s(:send,
                s(:ivar, :@medium), :verify,
                s(:array,
                  s(:const, nil, :PUBLIC_CERT)),
                s(:nil),
                s(:lvar, :digests),
                s(:lvar, :signatures))))),
        s(:def, :test_verify_wrong_digest_type,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:lvasgn, :sha512,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :Digest), :SHA512)),
            s(:lvasgn, :data,
              s(:send,
                s(:lvar, :sha512), :new)),
            s(:send,
              s(:lvar, :data), :<<,
              s(:str, "hello")),
            s(:lvasgn, :digests,
              s(:hash,
                s(:pair,
                  s(:str, "SHA512"),
                  s(:hash,
                    s(:pair,
                      s(:int, 0),
                      s(:lvar, :data)))))),
            s(:lvasgn, :signature,
              s(:send,
                s(:const, nil, :PRIVATE_KEY), :sign,
                s(:send,
                  s(:lvar, :sha512), :new),
                s(:send,
                  s(:lvar, :data), :digest))),
            s(:lvasgn, :signatures,
              s(:hash,
                s(:pair,
                  s(:int, 0),
                  s(:lvar, :signature)))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@almost_no), :verify,
                  s(:array,
                    s(:const, nil, :PUBLIC_CERT)),
                  s(:nil),
                  s(:lvar, :digests),
                  s(:lvar, :signatures)))),
            s(:send, nil, :assert_equal,
              s(:str, "no digests provided (probable bug)"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_verify_signatures_chain,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:const, nil, :PUBLIC_CERT),
                s(:const, nil, :CHILD_CERT))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@chain), :verify_signatures,
                s(:ivar, :@spec),
                s(:splat,
                  s(:send, nil, :dummy_signatures,
                    s(:const, nil, :CHILD_KEY))))))),
        s(:def, :test_verify_signatures_data,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:const, nil, :PUBLIC_CERT))),
            s(:send,
              s(:ivar, :@almost_no), :verify_signatures,
              s(:ivar, :@spec),
              s(:splat,
                s(:send, nil, :dummy_signatures))))),
        s(:def, :test_verify_signatures_root,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:const, nil, :PUBLIC_CERT),
                s(:const, nil, :CHILD_CERT))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@root), :verify_signatures,
                s(:ivar, :@spec),
                s(:splat,
                  s(:send, nil, :dummy_signatures,
                    s(:const, nil, :CHILD_KEY))))))),
        s(:def, :test_verify_signatures_signer,
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:const, nil, :PUBLIC_CERT))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@low), :verify_signatures,
                s(:ivar, :@spec),
                s(:splat,
                  s(:send, nil, :dummy_signatures)))))),
        s(:def, :test_verify_signatures_trust,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:const, nil, :PUBLIC_CERT))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@high), :verify_signatures,
                s(:ivar, :@spec),
                s(:splat,
                  s(:send, nil, :dummy_signatures)))))),
        s(:def, :test_verify_signatures,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:send,
                  s(:const, nil, :PUBLIC_CERT), :to_s))),
            s(:lvasgn, :metadata_gz,
              s(:send,
                s(:const, nil, :Gem), :gzip,
                s(:send,
                  s(:ivar, :@spec), :to_yaml))),
            s(:lvasgn, :package,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Package), :new,
                s(:str, "nonexistent.gem"))),
            s(:send,
              s(:send,
                s(:lvar, :package), :checksums), :[]=,
              s(:str, "SHA1"),
              s(:hash)),
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:lvar, :metadata_gz))),
            s(:defs,
              s(:lvar, :s), :full_name,
              s(:args),
              s(:str, "metadata.gz")),
            s(:lvasgn, :digests,
              s(:send,
                s(:lvar, :package), :digest,
                s(:lvar, :s))),
            s(:lvasgn, :metadata_gz_digest,
              s(:send,
                s(:send,
                  s(:lvar, :digests), :[],
                  s(:str, "SHA1")), :[],
                s(:str, "metadata.gz"))),
            s(:lvasgn, :signatures,
              s(:hash)),
            s(:send,
              s(:lvar, :signatures), :[]=,
              s(:str, "metadata.gz"),
              s(:send,
                s(:const, nil, :PRIVATE_KEY), :sign,
                s(:send,
                  s(:ivar, :@sha1), :new),
                s(:send,
                  s(:lvar, :metadata_gz_digest), :digest))),
            s(:send, nil, :assert,
              s(:send,
                s(:ivar, :@high), :verify_signatures,
                s(:ivar, :@spec),
                s(:lvar, :digests),
                s(:lvar, :signatures))))),
        s(:def, :test_verify_signatures_missing,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:send,
                  s(:const, nil, :PUBLIC_CERT), :to_s))),
            s(:lvasgn, :metadata_gz,
              s(:send,
                s(:const, nil, :Gem), :gzip,
                s(:send,
                  s(:ivar, :@spec), :to_yaml))),
            s(:lvasgn, :package,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Package), :new,
                s(:str, "nonexistent.gem"))),
            s(:send,
              s(:send,
                s(:lvar, :package), :checksums), :[]=,
              s(:str, "SHA1"),
              s(:hash)),
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:lvar, :metadata_gz))),
            s(:defs,
              s(:lvar, :s), :full_name,
              s(:args),
              s(:str, "metadata.gz")),
            s(:lvasgn, :digests,
              s(:send,
                s(:lvar, :package), :digest,
                s(:lvar, :s))),
            s(:send,
              s(:send,
                s(:lvar, :digests), :[],
                s(:str, "SHA1")), :[]=,
              s(:str, "data.tar.gz"),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Digest), :new,
                s(:str, "SHA1"),
                s(:str, "hello"))),
            s(:lvasgn, :metadata_gz_digest,
              s(:send,
                s(:send,
                  s(:lvar, :digests), :[],
                  s(:str, "SHA1")), :[],
                s(:str, "metadata.gz"))),
            s(:lvasgn, :signatures,
              s(:hash)),
            s(:send,
              s(:lvar, :signatures), :[]=,
              s(:str, "metadata.gz"),
              s(:send,
                s(:const, nil, :PRIVATE_KEY), :sign,
                s(:send,
                  s(:ivar, :@sha1), :new),
                s(:send,
                  s(:lvar, :metadata_gz_digest), :digest))),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:ivar, :@high), :verify_signatures,
                  s(:ivar, :@spec),
                  s(:lvar, :digests),
                  s(:lvar, :signatures)))),
            s(:send, nil, :assert_equal,
              s(:str, "missing signature for data.tar.gz"),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_verify_signatures_none,
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:const, nil, :PUBLIC_CERT)),
            s(:send,
              s(:ivar, :@spec), :cert_chain=,
              s(:array,
                s(:send,
                  s(:const, nil, :PUBLIC_CERT), :to_s))),
            s(:lvasgn, :metadata_gz,
              s(:send,
                s(:const, nil, :Gem), :gzip,
                s(:send,
                  s(:ivar, :@spec), :to_yaml))),
            s(:lvasgn, :package,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Package), :new,
                s(:str, "nonexistent.gem"))),
            s(:send,
              s(:send,
                s(:lvar, :package), :checksums), :[]=,
              s(:str, "SHA1"),
              s(:hash)),
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:lvar, :metadata_gz))),
            s(:defs,
              s(:lvar, :s), :full_name,
              s(:args),
              s(:str, "metadata.gz")),
            s(:lvasgn, :digests,
              s(:send,
                s(:lvar, :package), :digest,
                s(:lvar, :s))),
            s(:send,
              s(:send,
                s(:lvar, :digests), :[],
                s(:str, "SHA1")), :[]=,
              s(:str, "data.tar.gz"),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Digest), :new,
                s(:str, "SHA1"),
                s(:str, "hello"))),
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception)),
              s(:args),
              s(:send,
                s(:ivar, :@high), :verify_signatures,
                s(:ivar, :@spec),
                s(:lvar, :digests),
                s(:hash))))),
        s(:def, :digest,
          s(:args,
            s(:arg, :data)),
          s(:begin,
            s(:lvasgn, :digester,
              s(:send,
                s(:ivar, :@sha1), :new)),
            s(:send,
              s(:lvar, :digester), :<<,
              s(:lvar, :data)),
            s(:lvar, :digester))),
        s(:def, :sign,
          s(:args,
            s(:arg, :data),
            s(:optarg, :key,
              s(:const, nil, :PRIVATE_KEY))),
          s(:send,
            s(:lvar, :key), :sign,
            s(:send,
              s(:ivar, :@sha1), :new),
            s(:send,
              s(:lvar, :data), :digest))),
        s(:def, :dummy_signatures,
          s(:args,
            s(:optarg, :key,
              s(:const, nil, :PRIVATE_KEY))),
          s(:begin,
            s(:lvasgn, :data,
              s(:send, nil, :digest,
                s(:str, "hello"))),
            s(:lvasgn, :digests,
              s(:hash,
                s(:pair,
                  s(:str, "SHA1"),
                  s(:hash,
                    s(:pair,
                      s(:int, 0),
                      s(:lvar, :data)))))),
            s(:lvasgn, :signatures,
              s(:hash,
                s(:pair,
                  s(:int, 0),
                  s(:send, nil, :sign,
                    s(:lvar, :data),
                    s(:lvar, :key))))),
            s(:return,
              s(:lvar, :digests),
              s(:lvar, :signatures)))))), nil))
