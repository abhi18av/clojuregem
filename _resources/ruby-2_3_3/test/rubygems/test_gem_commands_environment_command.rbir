s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/environment_command")),
  s(:class,
    s(:const, nil, :TestGemCommandsEnvironmentCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :EnvironmentCommand), :new)))),
      s(:def, :test_execute,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :orig_sources,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :sources), :dup)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :orig_path),
                s(:send,
                  s(:const, nil, :ENV), :[]=,
                  s(:str, "PATH"))),
              s(:array,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "PATH")),
                s(:send,
                  s(:array,
                    s(:str, "/usr/local/bin"),
                    s(:str, "/usr/bin"),
                    s(:str, "/bin")), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR)))),
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :sources), :replace,
              s(:array,
                s(:str, "http://gems.example.com"))),
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :[]=,
              s(:str, "gemcutter_key"),
              s(:str, "blah")),
            s(:send,
              s(:ivar, :@cmd), :send,
              s(:sym, :handle_options),
              s(:array)),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "RUBYGEMS VERSION: (\\d\\.)+\\d"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "RUBY VERSION: \\d\\.\\d\\.\\d \\(.*\\) \\[.*\\]"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "INSTALLATION DIRECTORY: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:ivar, :@gemhome))),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "RUBYGEMS PREFIX: "),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "RUBY EXECUTABLE:.*"),
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "ruby_install_name"))),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "SYSTEM CONFIGURATION DIRECTORY:"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "EXECUTABLE DIRECTORY:"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "RUBYGEMS PLATFORMS:"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "- "),
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :local)),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "GEM PATHS:"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "- "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:ivar, :@gemhome))),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "GEM CONFIGURATION:"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\"gemcutter_key\" => \"\\*\\*\\*\\*\""),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, ":verbose => "),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "REMOTE SOURCES:"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "- SHELL PATH:"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "- /usr/local/bin$"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "- /usr/bin$"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "- /bin$"),
                s(:regopt)),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_empty,
              s(:send,
                s(:ivar, :@ui), :error))),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :sources), :replace,
              s(:lvar, :orig_sources)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "PATH"),
              s(:lvar, :orig_path))))),
      s(:def, :test_execute_gemdir,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "gemdir"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_gempath,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "gempath"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_gempath_multiple,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Gem), :clear_paths),
          s(:lvasgn, :path,
            s(:send,
              s(:array,
                s(:ivar, :@gemhome),
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@gemhome)),
                  s(:str, "2"))), :join,
              s(:const,
                s(:const, nil, :File), :PATH_SEPARATOR))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_PATH"),
            s(:lvar, :path)),
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "gempath"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :path), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_packageversion,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "packageversion"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :RubyGemsPackageVersion)),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_remotesources,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :orig_sources,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :sources), :dup)),
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :sources), :replace,
              s(:array,
                s(:str, "http://gems.example.com"))),
            s(:send,
              s(:ivar, :@cmd), :send,
              s(:sym, :handle_options),
              s(:array,
                s(:str, "remotesources"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute)),
            s(:send, nil, :assert_equal,
              s(:str, "http://gems.example.com\n"),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error))),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:lvar, :orig_sources)))),
      s(:def, :test_execute_unknown,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "unknown"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_version,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "version"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_platform,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "platform"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :platforms), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))))))
