s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/request")),
  s(:send, nil, :require,
    s(:str, "ostruct")),
  s(:send, nil, :require,
    s(:str, "base64")),
  s(:class,
    s(:const, nil, :TestGemRequest),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:casgn, nil, :CA_CERT_FILE,
        s(:send, nil, :cert_path,
          s(:str, "ca"))),
      s(:casgn, nil, :CHILD_CERT,
        s(:send, nil, :load_cert,
          s(:str, "child"))),
      s(:casgn, nil, :PUBLIC_CERT,
        s(:send, nil, :load_cert,
          s(:str, "public"))),
      s(:casgn, nil, :PUBLIC_CERT_FILE,
        s(:send, nil, :cert_path,
          s(:str, "public"))),
      s(:casgn, nil, :SSL_CERT,
        s(:send, nil, :load_cert,
          s(:str, "ssl"))),
      s(:def, :make_request,
        s(:args,
          s(:arg, :uri),
          s(:arg, :request_class),
          s(:arg, :last_modified),
          s(:arg, :proxy)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Request), :create_with_proxy,
          s(:lvar, :uri),
          s(:lvar, :request_class),
          s(:lvar, :last_modified),
          s(:lvar, :proxy))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:ivasgn, :@proxies,
            s(:array,
              s(:str, "http_proxy"),
              s(:str, "https_proxy"),
              s(:str, "HTTP_PROXY"),
              s(:str, "http_proxy_user"),
              s(:str, "HTTP_PROXY_USER"),
              s(:str, "http_proxy_pass"),
              s(:str, "HTTP_PROXY_PASS"),
              s(:str, "no_proxy"),
              s(:str, "NO_PROXY"))),
          s(:ivasgn, :@old_proxies,
            s(:block,
              s(:send,
                s(:ivar, :@proxies), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:lvar, :k)))),
          s(:block,
            s(:send,
              s(:ivar, :@proxies), :each),
            s(:args,
              s(:arg, :k)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:lvar, :k),
              s(:nil))),
          s(:zsuper),
          s(:ivasgn, :@proxy_uri,
            s(:str, "http://localhost:1234")),
          s(:ivasgn, :@uri,
            s(:send, nil, :URI,
              s(:str, "http://example"))),
          s(:ivasgn, :@request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:nil))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :[]=,
            s(:sym, :http_proxy),
            s(:nil)),
          s(:block,
            s(:send,
              s(:ivar, :@proxies), :each_with_index),
            s(:args,
              s(:arg, :k),
              s(:arg, :i)),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:lvar, :k),
              s(:send,
                s(:ivar, :@old_proxies), :[],
                s(:lvar, :i)))))),
      s(:def, :test_initialize_proxy,
        s(:args),
        s(:begin,
          s(:lvasgn, :proxy_uri,
            s(:str, "http://proxy.example.com")),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:lvar, :proxy_uri))),
          s(:send, nil, :assert_equal,
            s(:lvar, :proxy_uri),
            s(:send,
              s(:send,
                s(:lvar, :request), :proxy_uri), :to_s)))),
      s(:def, :test_initialize_proxy_URI,
        s(:args),
        s(:begin,
          s(:lvasgn, :proxy_uri,
            s(:str, "http://proxy.example.com")),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:send, nil, :URI,
                s(:lvar, :proxy_uri)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :proxy_uri),
            s(:send,
              s(:send,
                s(:lvar, :request), :proxy_uri), :to_s)))),
      s(:def, :test_initialize_proxy_ENV,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy"),
            s(:ivar, :@proxy_uri)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy_user"),
            s(:str, "foo")),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy_pass"),
            s(:str, "bar")),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:lvasgn, :proxy,
            s(:send,
              s(:lvar, :request), :proxy_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "foo"),
            s(:send,
              s(:lvar, :proxy), :user)),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:lvar, :proxy), :password)))),
      s(:def, :test_initialize_proxy_ENV_https,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "https_proxy"),
            s(:ivar, :@proxy_uri)),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:send, nil, :URI,
                s(:str, "https://example")),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:lvasgn, :proxy,
            s(:send,
              s(:lvar, :request), :proxy_uri)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :URI,
              s(:ivar, :@proxy_uri)),
            s(:lvar, :proxy)))),
      s(:def, :test_configure_connection_for_https,
        s(:args),
        s(:begin,
          s(:lvasgn, :connection,
            s(:send,
              s(:const,
                s(:const, nil, :Net), :HTTP), :new,
              s(:str, "localhost"),
              s(:int, 443))),
          s(:lvasgn, :request,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const,
                    s(:const, nil, :Gem), :Request)),
                s(:args),
                s(:defs,
                  s(:self), :get_cert_files,
                  s(:args),
                  s(:array,
                    s(:const,
                      s(:const, nil, :TestGemRequest), :PUBLIC_CERT_FILE)))), :create_with_proxy,
              s(:send, nil, :URI,
                s(:str, "https://example")),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Request), :configure_connection_for_https,
            s(:lvar, :connection),
            s(:send,
              s(:lvar, :request), :cert_files)),
          s(:lvasgn, :cert_store,
            s(:send,
              s(:lvar, :connection), :cert_store)),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :cert_store), :verify,
              s(:const, nil, :CHILD_CERT))))),
      s(:def, :test_configure_connection_for_https_ssl_ca_cert,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ssl_ca_cert),
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :configuration), :ssl_ca_cert=)),
              s(:array,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :configuration), :ssl_ca_cert),
                s(:const, nil, :CA_CERT_FILE))),
            s(:lvasgn, :connection,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :new,
                s(:str, "localhost"),
                s(:int, 443))),
            s(:lvasgn, :request,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Class), :new,
                    s(:const,
                      s(:const, nil, :Gem), :Request)),
                  s(:args),
                  s(:defs,
                    s(:self), :get_cert_files,
                    s(:args),
                    s(:array,
                      s(:const,
                        s(:const, nil, :TestGemRequest), :PUBLIC_CERT_FILE)))), :create_with_proxy,
                s(:send, nil, :URI,
                  s(:str, "https://example")),
                s(:nil),
                s(:nil),
                s(:nil))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Request), :configure_connection_for_https,
              s(:lvar, :connection),
              s(:send,
                s(:lvar, :request), :cert_files)),
            s(:lvasgn, :cert_store,
              s(:send,
                s(:lvar, :connection), :cert_store)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :cert_store), :verify,
                s(:const, nil, :CHILD_CERT))),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :cert_store), :verify,
                s(:const, nil, :SSL_CERT)))),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :ssl_ca_cert=,
            s(:lvar, :ssl_ca_cert)))),
      s(:def, :test_get_proxy_from_env_fallback,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy"),
            s(:ivar, :@proxy_uri)),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:lvasgn, :proxy,
            s(:send,
              s(:lvar, :request), :proxy_uri)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :URI,
              s(:ivar, :@proxy_uri)),
            s(:lvar, :proxy)))),
      s(:def, :test_get_proxy_from_env_https,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "https_proxy"),
            s(:ivar, :@proxy_uri)),
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:str, "https://example"))),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:lvar, :uri),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:lvasgn, :proxy,
            s(:send,
              s(:lvar, :request), :proxy_uri)),
          s(:send, nil, :assert_equal,
            s(:send, nil, :URI,
              s(:ivar, :@proxy_uri)),
            s(:lvar, :proxy)))),
      s(:def, :test_get_proxy_from_env_domain,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy"),
            s(:ivar, :@proxy_uri)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy_user"),
            s(:str, "foo\\user")),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy_pass"),
            s(:str, "my bar")),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:lvasgn, :proxy,
            s(:send,
              s(:lvar, :request), :proxy_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "foo\\user"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :UriFormatter), :new,
                s(:send,
                  s(:lvar, :proxy), :user)), :unescape)),
          s(:send, nil, :assert_equal,
            s(:str, "my bar"),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :UriFormatter), :new,
                s(:send,
                  s(:lvar, :proxy), :password)), :unescape)))),
      s(:def, :test_get_proxy_from_env_escape,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy"),
            s(:ivar, :@proxy_uri)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy_user"),
            s(:str, "foo@user")),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "http_proxy_pass"),
            s(:str, "my@bar")),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:lvasgn, :proxy,
            s(:send,
              s(:lvar, :request), :proxy_uri)),
          s(:send, nil, :assert_equal,
            s(:str, "foo%40user"),
            s(:send,
              s(:lvar, :proxy), :user)),
          s(:send, nil, :assert_equal,
            s(:str, "my%40bar"),
            s(:send,
              s(:lvar, :proxy), :password)))),
      s(:def, :test_get_proxy_from_env_normalize,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "HTTP_PROXY"),
            s(:str, "fakeurl:12345")),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:str, "http://fakeurl:12345"),
            s(:send,
              s(:send,
                s(:lvar, :request), :proxy_uri), :to_s)))),
      s(:def, :test_get_proxy_from_env_empty,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "HTTP_PROXY"),
            s(:str, "")),
          s(:send,
            s(:const, nil, :ENV), :delete,
            s(:str, "http_proxy")),
          s(:lvasgn, :request,
            s(:send, nil, :make_request,
              s(:ivar, :@uri),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :request), :proxy_uri)))),
      s(:def, :test_fetch,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_repo)),
                s(:str, "/specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:lvasgn, :response,
            s(:block,
              s(:send, nil, :util_stub_net_http,
                s(:hash,
                  s(:pair,
                    s(:sym, :body),
                    s(:sym, :junk)),
                  s(:pair,
                    s(:sym, :code),
                    s(:int, 200)))),
              s(:args),
              s(:begin,
                s(:ivasgn, :@request,
                  s(:send, nil, :make_request,
                    s(:lvar, :uri),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :Get),
                    s(:nil),
                    s(:nil))),
                s(:send,
                  s(:ivar, :@request), :fetch)))),
          s(:send, nil, :assert_equal,
            s(:int, 200),
            s(:send,
              s(:lvar, :response), :code)),
          s(:send, nil, :assert_equal,
            s(:sym, :junk),
            s(:send,
              s(:lvar, :response), :body)))),
      s(:def, :test_fetch_basic_auth,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:dstr,
                s(:str, "https://user:pass@example.rubygems/specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:lvasgn, :conn,
            s(:block,
              s(:send, nil, :util_stub_net_http,
                s(:hash,
                  s(:pair,
                    s(:sym, :body),
                    s(:sym, :junk)),
                  s(:pair,
                    s(:sym, :code),
                    s(:int, 200)))),
              s(:args,
                s(:arg, :c)),
              s(:begin,
                s(:ivasgn, :@request,
                  s(:send, nil, :make_request,
                    s(:lvar, :uri),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :Get),
                    s(:nil),
                    s(:nil))),
                s(:send,
                  s(:ivar, :@request), :fetch),
                s(:lvar, :c)))),
          s(:lvasgn, :auth_header,
            s(:send,
              s(:send,
                s(:lvar, :conn), :payload), :[],
              s(:str, "Authorization"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "Basic "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Base64), :encode64,
                    s(:str, "user:pass")))), :strip),
            s(:lvar, :auth_header)))),
      s(:def, :test_fetch_basic_auth_encoded,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:dstr,
                s(:str, "https://user:%7BDEScede%7Dpass@example.rubygems/specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:lvasgn, :conn,
            s(:block,
              s(:send, nil, :util_stub_net_http,
                s(:hash,
                  s(:pair,
                    s(:sym, :body),
                    s(:sym, :junk)),
                  s(:pair,
                    s(:sym, :code),
                    s(:int, 200)))),
              s(:args,
                s(:arg, :c)),
              s(:begin,
                s(:ivasgn, :@request,
                  s(:send, nil, :make_request,
                    s(:lvar, :uri),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :Get),
                    s(:nil),
                    s(:nil))),
                s(:send,
                  s(:ivar, :@request), :fetch),
                s(:lvar, :c)))),
          s(:lvasgn, :auth_header,
            s(:send,
              s(:send,
                s(:lvar, :conn), :payload), :[],
              s(:str, "Authorization"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "Basic "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Base64), :encode64,
                    s(:str, "user:{DEScede}pass")))), :strip),
            s(:lvar, :auth_header)))),
      s(:def, :test_fetch_head,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_repo)),
                s(:str, "/specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:lvasgn, :response,
            s(:block,
              s(:send, nil, :util_stub_net_http,
                s(:hash,
                  s(:pair,
                    s(:sym, :body),
                    s(:str, "")),
                  s(:pair,
                    s(:sym, :code),
                    s(:int, 200)))),
              s(:args,
                s(:arg, :conn)),
              s(:begin,
                s(:ivasgn, :@request,
                  s(:send, nil, :make_request,
                    s(:lvar, :uri),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :Get),
                    s(:nil),
                    s(:nil))),
                s(:send,
                  s(:ivar, :@request), :fetch)))),
          s(:send, nil, :assert_equal,
            s(:int, 200),
            s(:send,
              s(:lvar, :response), :code)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :response), :body)))),
      s(:def, :test_fetch_unmodified,
        s(:args),
        s(:begin,
          s(:lvasgn, :uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@gem_repo)),
                s(:str, "/specs."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :marshal_version))))),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :utc,
              s(:int, 2013),
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:int, 5))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :conn),
              s(:lvasgn, :response)),
            s(:block,
              s(:send, nil, :util_stub_net_http,
                s(:hash,
                  s(:pair,
                    s(:sym, :body),
                    s(:str, "")),
                  s(:pair,
                    s(:sym, :code),
                    s(:int, 304)))),
              s(:args,
                s(:arg, :c)),
              s(:begin,
                s(:ivasgn, :@request,
                  s(:send, nil, :make_request,
                    s(:lvar, :uri),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :Get),
                    s(:lvar, :t),
                    s(:nil))),
                s(:array,
                  s(:lvar, :c),
                  s(:send,
                    s(:ivar, :@request), :fetch))))),
          s(:send, nil, :assert_equal,
            s(:int, 304),
            s(:send,
              s(:lvar, :response), :code)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :response), :body)),
          s(:lvasgn, :modified_header,
            s(:send,
              s(:send,
                s(:lvar, :conn), :payload), :[],
              s(:str, "if-modified-since"))),
          s(:send, nil, :assert_equal,
            s(:str, "Wed, 02 Jan 2013 03:04:05 GMT"),
            s(:lvar, :modified_header)))),
      s(:def, :test_user_agent,
        s(:args),
        s(:begin,
          s(:lvasgn, :ua,
            s(:send,
              s(:send, nil, :make_request,
                s(:ivar, :@uri),
                s(:nil),
                s(:nil),
                s(:nil)), :user_agent)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^RubyGems/\\S+ \\S+ Ruby/\\S+ \\(.*?\\)"),
              s(:regopt)),
            s(:lvar, :ua)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "RubyGems/"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:const,
                    s(:const, nil, :Gem), :VERSION))),
              s(:regopt)),
            s(:lvar, :ua)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Platform), :local), :to_s))),
              s(:str, " "),
              s(:regopt)),
            s(:lvar, :ua)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Ruby/"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:const, nil, :RUBY_VERSION))),
              s(:regopt)),
            s(:lvar, :ua)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\("),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:const, nil, :RUBY_RELEASE_DATE))),
              s(:str, " "),
              s(:regopt)),
            s(:lvar, :ua)))),
      s(:def, :test_user_agent_engine,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :util_save_version),
            s(:if,
              s(:defined?,
                s(:const, nil, :RUBY_ENGINE)),
              s(:send,
                s(:const, nil, :Object), :send,
                s(:sym, :remove_const),
                s(:sym, :RUBY_ENGINE)), nil),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_ENGINE),
              s(:str, "vroom")),
            s(:lvasgn, :ua,
              s(:send,
                s(:send, nil, :make_request,
                  s(:ivar, :@uri),
                  s(:nil),
                  s(:nil),
                  s(:nil)), :user_agent)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\) vroom"),
                s(:regopt)),
              s(:lvar, :ua))),
          s(:send, nil, :util_restore_version))),
      s(:def, :test_user_agent_engine_ruby,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :util_save_version),
            s(:if,
              s(:defined?,
                s(:const, nil, :RUBY_ENGINE)),
              s(:send,
                s(:const, nil, :Object), :send,
                s(:sym, :remove_const),
                s(:sym, :RUBY_ENGINE)), nil),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_ENGINE),
              s(:str, "ruby")),
            s(:lvasgn, :ua,
              s(:send,
                s(:send, nil, :make_request,
                  s(:ivar, :@uri),
                  s(:nil),
                  s(:nil),
                  s(:nil)), :user_agent)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\)"),
                s(:regopt)),
              s(:lvar, :ua))),
          s(:send, nil, :util_restore_version))),
      s(:def, :test_user_agent_patchlevel,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :util_save_version),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_PATCHLEVEL)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_PATCHLEVEL),
              s(:int, 5)),
            s(:lvasgn, :ua,
              s(:send,
                s(:send, nil, :make_request,
                  s(:ivar, :@uri),
                  s(:nil),
                  s(:nil),
                  s(:nil)), :user_agent)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, " patchlevel 5\\)"),
                s(:regopt)),
              s(:lvar, :ua))),
          s(:send, nil, :util_restore_version))),
      s(:def, :test_user_agent_revision,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :util_save_version),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_PATCHLEVEL)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_PATCHLEVEL),
              s(:int, -1)),
            s(:if,
              s(:defined?,
                s(:const, nil, :RUBY_REVISION)),
              s(:send,
                s(:const, nil, :Object), :send,
                s(:sym, :remove_const),
                s(:sym, :RUBY_REVISION)), nil),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_REVISION),
              s(:int, 6)),
            s(:lvasgn, :ua,
              s(:send,
                s(:send, nil, :make_request,
                  s(:ivar, :@uri),
                  s(:nil),
                  s(:nil),
                  s(:nil)), :user_agent)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, " revision 6\\)"),
                s(:regopt)),
              s(:lvar, :ua)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "Ruby/"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:const, nil, :RUBY_VERSION))),
                s(:str, "dev"),
                s(:regopt)),
              s(:lvar, :ua))),
          s(:send, nil, :util_restore_version))),
      s(:def, :test_user_agent_revision_missing,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send, nil, :util_save_version),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_PATCHLEVEL)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_PATCHLEVEL),
              s(:int, -1)),
            s(:if,
              s(:defined?,
                s(:const, nil, :RUBY_REVISION)),
              s(:send,
                s(:const, nil, :Object), :send,
                s(:sym, :remove_const),
                s(:sym, :RUBY_REVISION)), nil),
            s(:lvasgn, :ua,
              s(:send,
                s(:send, nil, :make_request,
                  s(:ivar, :@uri),
                  s(:nil),
                  s(:nil),
                  s(:nil)), :user_agent)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\("),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:const, nil, :RUBY_RELEASE_DATE))),
                s(:str, "\\)"),
                s(:regopt)),
              s(:lvar, :ua))),
          s(:send, nil, :util_restore_version))),
      s(:def, :util_restore_version,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_ENGINE)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_ENGINE)), nil),
          s(:if,
            s(:defined?,
              s(:ivar, :@orig_RUBY_ENGINE)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_ENGINE),
              s(:ivar, :@orig_RUBY_ENGINE)), nil),
          s(:send,
            s(:const, nil, :Object), :send,
            s(:sym, :remove_const),
            s(:sym, :RUBY_PATCHLEVEL)),
          s(:send,
            s(:const, nil, :Object), :send,
            s(:sym, :const_set),
            s(:sym, :RUBY_PATCHLEVEL),
            s(:ivar, :@orig_RUBY_PATCHLEVEL)),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_REVISION)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_REVISION)), nil),
          s(:if,
            s(:defined?,
              s(:ivar, :@orig_RUBY_REVISION)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :const_set),
              s(:sym, :RUBY_REVISION),
              s(:ivar, :@orig_RUBY_REVISION)), nil))),
      s(:def, :util_save_version,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_ENGINE)),
            s(:ivasgn, :@orig_RUBY_ENGINE,
              s(:const, nil, :RUBY_ENGINE)), nil),
          s(:ivasgn, :@orig_RUBY_PATCHLEVEL,
            s(:const, nil, :RUBY_PATCHLEVEL)),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_REVISION)),
            s(:ivasgn, :@orig_RUBY_REVISION,
              s(:const, nil, :RUBY_REVISION)), nil))),
      s(:def, :util_stub_net_http,
        s(:args,
          s(:arg, :hash)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :old_client,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Request), :ConnectionPools), :client)),
            s(:lvasgn, :conn,
              s(:send,
                s(:const, nil, :Conn), :new,
                s(:send,
                  s(:const, nil, :OpenStruct), :new,
                  s(:lvar, :hash)))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Request), :ConnectionPools), :client=,
              s(:lvar, :conn)),
            s(:yield,
              s(:lvar, :conn))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Request), :ConnectionPools), :client=,
            s(:lvar, :old_client)))),
      s(:class,
        s(:const, nil, :Conn), nil,
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :payload)),
          s(:def, :new,
            s(:args,
              s(:restarg, :args)),
            s(:self)),
          s(:def, :use_ssl=,
            s(:args,
              s(:arg, :bool)), nil),
          s(:def, :verify_mode=,
            s(:args,
              s(:arg, :setting)), nil),
          s(:def, :cert_store=,
            s(:args,
              s(:arg, :setting)), nil),
          s(:def, :start,
            s(:args), nil),
          s(:def, :initialize,
            s(:args,
              s(:arg, :response)),
            s(:begin,
              s(:ivasgn, :@response,
                s(:lvar, :response)),
              s(:send,
                s(:self), :payload=,
                s(:nil)))),
          s(:def, :request,
            s(:args,
              s(:arg, :req)),
            s(:begin,
              s(:send,
                s(:self), :payload=,
                s(:lvar, :req)),
              s(:ivar, :@response))))))))
