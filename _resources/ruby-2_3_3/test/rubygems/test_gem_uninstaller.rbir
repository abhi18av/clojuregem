s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/installer_test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/uninstaller")),
  s(:class,
    s(:const, nil, :TestGemUninstaller),
    s(:const,
      s(:const, nil, :Gem), :InstallerTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :common_installer_setup),
          s(:block,
            s(:send, nil, :build_rake_in),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:send, nil, :ui)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@installer), :install),
                s(:ivasgn, :@spec,
                  s(:send,
                    s(:ivar, :@installer), :spec)),
                s(:send,
                  s(:ivar, :@user_installer), :install),
                s(:ivasgn, :@user_spec,
                  s(:send,
                    s(:ivar, :@user_installer), :spec))))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset))),
      s(:def, :test_initialize_expand_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:sym, :install_dir),
                  s(:str, "/foo//bar"))))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "/foo/bar$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :uninstaller), :instance_variable_get,
              s(:sym, :@gem_home))))),
      s(:def, :test_ask_if_ok,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :util_spec,
              s(:str, "c"))),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil))),
          s(:lvasgn, :ok,
            s(:sym, :junk)),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:lvasgn, :ok,
              s(:send,
                s(:lvar, :uninstaller), :ask_if_ok,
                s(:lvar, :c)))),
          s(:send, nil, :refute,
            s(:lvar, :ok)))),
      s(:def, :test_remove_all,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:lvar, :uninstaller), :remove_all,
              s(:array,
                s(:ivar, :@spec)))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:ivar, :@spec), :gem_dir)))),
      s(:def, :test_remove_executables_force_keep,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:false))))),
          s(:lvasgn, :executable,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :bindir,
                s(:send,
                  s(:ivar, :@user_spec), :base_dir)),
              s(:str, "executable"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :executable)),
            s(:str, "executable not written")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:lvar, :uninstaller), :remove_executables,
              s(:ivar, :@user_spec))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :executable))),
          s(:send, nil, :assert_equal,
            s(:str, "Executables and scripts will remain installed.\n"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_remove_executables_force_remove,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:lvasgn, :executable,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :bindir,
                s(:send,
                  s(:ivar, :@user_spec), :base_dir)),
              s(:str, "executable"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :executable)),
            s(:str, "executable not written")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:lvar, :uninstaller), :remove_executables,
              s(:ivar, :@user_spec))),
          s(:send, nil, :assert_equal,
            s(:str, "Removing executable\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :executable))))),
      s(:def, :test_remove_executables_user,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:lvar, :uninstaller), :remove_executables,
              s(:ivar, :@user_spec))),
          s(:lvasgn, :exec_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_dir),
              s(:str, "bin"),
              s(:str, "executable"))),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :exec_path)),
            s(:str, "exec still exists in user bin dir")),
          s(:send, nil, :assert_equal,
            s(:str, "Removing executable\n"),
            s(:send,
              s(:ivar, :@ui), :output)))),
      s(:def, :test_remove_executables_user_format,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Installer), :exec_format=,
              s(:str, "foo-%s-bar")),
            s(:lvasgn, :uninstaller,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Uninstaller), :new,
                s(:nil),
                s(:hash,
                  s(:pair,
                    s(:sym, :executables),
                    s(:true)),
                  s(:pair,
                    s(:sym, :format_executable),
                    s(:true))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:lvar, :uninstaller), :remove_executables,
                s(:ivar, :@user_spec))),
            s(:lvasgn, :exec_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_dir),
                s(:str, "bin"),
                s(:str, "foo-executable-bar"))),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :exec_path)),
              s(:str, "removed exec from bin dir")),
            s(:send, nil, :assert_equal,
              s(:str, "Removing foo-executable-bar\n"),
              s(:send,
                s(:ivar, :@ui), :output))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Installer), :exec_format=,
            s(:nil)))),
      s(:def, :test_remove_executables_user_format_disabled,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Installer), :exec_format=,
              s(:str, "foo-%s-bar")),
            s(:lvasgn, :uninstaller,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Uninstaller), :new,
                s(:nil),
                s(:hash,
                  s(:pair,
                    s(:sym, :executables),
                    s(:true))))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:lvar, :uninstaller), :remove_executables,
                s(:ivar, :@user_spec))),
            s(:lvasgn, :exec_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_dir),
                s(:str, "bin"),
                s(:str, "executable"))),
            s(:send, nil, :refute,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :exec_path)),
              s(:str, "removed exec from bin dir")),
            s(:send, nil, :assert_equal,
              s(:str, "Removing executable\n"),
              s(:send,
                s(:ivar, :@ui), :output))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Installer), :exec_format=,
            s(:nil)))),
      s(:def, :test_remove_not_in_home,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil),
              s(:hash,
                s(:pair,
                  s(:sym, :install_dir),
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@gemhome)),
                    s(:str, "2")))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :GemNotInHomeException)),
              s(:args),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:send, nil, :ui)),
                s(:args),
                s(:send,
                  s(:lvar, :uninstaller), :remove,
                  s(:ivar, :@spec))))),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Gem '"),
              s(:begin,
                s(:send,
                  s(:ivar, :@spec), :full_name)),
              s(:str, "' is not installed in directory "),
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "2"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:ivar, :@spec), :gem_dir)))),
      s(:def, :test_path_ok_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :uninstaller), :path_ok?,
              s(:ivar, :@gemhome),
              s(:ivar, :@spec))))),
      s(:def, :test_path_ok_eh_legacy,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil))),
          s(:send,
            s(:ivar, :@spec), :loaded_from=,
            s(:send,
              s(:send,
                s(:ivar, :@spec), :loaded_from), :gsub,
              s(:send,
                s(:ivar, :@spec), :full_name),
              s(:str, "\\&-legacy"))),
          s(:send,
            s(:ivar, :@spec), :internal_init),
          s(:send,
            s(:ivar, :@spec), :platform=,
            s(:str, "legacy")),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :uninstaller), :path_ok?,
              s(:ivar, :@gemhome),
              s(:ivar, :@spec))))),
      s(:def, :test_path_ok_eh_user,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:nil))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :uninstaller), :path_ok?,
              s(:send,
                s(:const, nil, :Gem), :user_dir),
              s(:ivar, :@user_spec))))),
      s(:def, :test_uninstall,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:send,
                s(:ivar, :@spec), :name),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:lvasgn, :gem_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@spec), :full_name))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :pre_uninstall),
            s(:args),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :gem_dir)),
              s(:str, "gem_dir should exist"))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :post_uninstall),
            s(:args),
            s(:send, nil, :refute,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :gem_dir)),
              s(:str, "gem_dir should not exist"))),
          s(:send,
            s(:lvar, :uninstaller), :uninstall),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem_dir))),
          s(:send, nil, :assert_same,
            s(:lvar, :uninstaller),
            s(:ivar, :@pre_uninstall_hook_arg)),
          s(:send, nil, :assert_same,
            s(:lvar, :uninstaller),
            s(:ivar, :@post_uninstall_hook_arg)))),
      s(:def, :test_uninstall_default_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "2"))),
          s(:send, nil, :install_default_gems,
            s(:lvar, :spec)),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:send,
                s(:lvar, :spec), :name),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InstallError)),
              s(:args),
              s(:send,
                s(:lvar, :uninstaller), :uninstall))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "gem \"default\" cannot be uninstalled "), :+,
              s(:str, "because it is a default gem")),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_uninstall_default_gem_with_same_version,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "2"))),
          s(:send, nil, :install_default_gems,
            s(:lvar, :default_spec)),
          s(:lvasgn, :spec,
            s(:send, nil, :new_spec,
              s(:str, "default"),
              s(:str, "2"))),
          s(:send, nil, :install_gem,
            s(:lvar, :spec)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:send,
                s(:lvar, :spec), :name),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:send,
            s(:lvar, :uninstaller), :uninstall),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:lvar, :spec), :gem_dir)))),
      s(:def, :test_uninstall_extension,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@spec), :extensions), :<<,
            s(:str, "extconf.rb")),
          s(:block,
            s(:send, nil, :write_file,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "extconf.rb"))),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:dstr,
                s(:str, "require 'mkmf'\n"),
                s(:str, "create_makefile '"),
                s(:begin,
                  s(:send,
                    s(:ivar, :@spec), :name)),
                s(:str, "'\n")))),
          s(:op_asgn,
            s(:send,
              s(:ivar, :@spec), :files), :+,
            s(:array,
              s(:str, "extconf.rb"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :build,
                  s(:ivar, :@spec))),
              s(:lvasgn, :installer,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Installer), :at,
                  s(:lvar, :path))),
              s(:send,
                s(:lvar, :installer), :install))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:ivar, :@spec), :extension_dir),
            s(:str, "sanity check")),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:send,
                s(:ivar, :@spec), :name),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:send,
            s(:lvar, :uninstaller), :uninstall),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:ivar, :@spec), :extension_dir)))),
      s(:def, :test_uninstall_nonexistent,
        s(:args),
        s(:begin,
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "bogus"),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InstallError)),
              s(:args),
              s(:send,
                s(:lvar, :uninstaller), :uninstall))),
          s(:send, nil, :assert_equal,
            s(:str, "gem \"bogus\" is not installed"),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_uninstall_not_ok,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "z")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_runtime_dependency,
              s(:send,
                s(:ivar, :@spec), :name))),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:send,
                s(:ivar, :@spec), :name))),
          s(:lvasgn, :gem_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@spec), :full_name))),
          s(:lvasgn, :executable,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "bin"),
              s(:str, "executable"))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem_dir)),
            s(:str, "gem_dir must exist")),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :executable)),
            s(:str, "executable must exist")),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "n\n"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :DependencyRemovalException)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:lvar, :ui)),
              s(:args),
              s(:send,
                s(:lvar, :uninstaller), :uninstall))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem_dir)),
            s(:str, "gem_dir must still exist")),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :executable)),
            s(:str, "executable must still exist")))),
      s(:def, :test_uninstall_user_install,
        s(:args),
        s(:begin,
          s(:ivasgn, :@user_spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_name,
              s(:str, "b"))),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:send,
                s(:ivar, :@user_spec), :name),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true)),
                s(:pair,
                  s(:sym, :user_install),
                  s(:true))))),
          s(:lvasgn, :gem_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@user_spec), :gem_dir))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :pre_uninstall),
            s(:args),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :gem_dir))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :post_uninstall),
            s(:args),
            s(:send, nil, :refute_path_exists,
              s(:lvar, :gem_dir))),
          s(:send,
            s(:lvar, :uninstaller), :uninstall),
          s(:send, nil, :refute_path_exists,
            s(:lvar, :gem_dir)),
          s(:send, nil, :assert_same,
            s(:lvar, :uninstaller),
            s(:ivar, :@pre_uninstall_hook_arg)),
          s(:send, nil, :assert_same,
            s(:lvar, :uninstaller),
            s(:ivar, :@post_uninstall_hook_arg)))),
      s(:def, :test_uninstall_wrong_repo,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "2")),
            s(:array,
              s(:ivar, :@gemhome))),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:send,
                s(:ivar, :@spec), :name),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true))))),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InstallError)),
              s(:args),
              s(:send,
                s(:lvar, :uninstaller), :uninstall))),
          s(:lvasgn, :expected,
            s(:send,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:ivar, :@spec), :name)),
                s(:str, " is not installed in GEM_HOME, try:\n"),
                s(:str, "\tgem uninstall -i "),
                s(:begin,
                  s(:ivar, :@gemhome)),
                s(:str, " a\n")), :strip)),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :e), :message)))),
      s(:def, :test_uninstall_selection,
        s(:args),
        s(:begin,
          s(:send, nil, :util_make_gems),
          s(:lvasgn, :list,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_all_by_name,
              s(:str, "a"))),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "a"))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "1\ny\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:lvar, :uninstaller), :uninstall)),
          s(:lvasgn, :updated_list,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_all_by_name,
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :list), :length), :-,
              s(:int, 1)),
            s(:send,
              s(:lvar, :updated_list), :length)),
          s(:send, nil, :assert_match,
            s(:str, " 1. a-1"),
            s(:send,
              s(:lvar, :ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, " 2. a-2"),
            s(:send,
              s(:lvar, :ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, " 3. a-3.a"),
            s(:send,
              s(:lvar, :ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, " 4. All versions"),
            s(:send,
              s(:lvar, :ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, "uninstalled a-1"),
            s(:send,
              s(:lvar, :ui), :output)))),
      s(:def, :test_uninstall_selection_greater_than_one,
        s(:args),
        s(:begin,
          s(:send, nil, :util_make_gems),
          s(:lvasgn, :list,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_all_by_name,
              s(:str, "a"))),
          s(:lvasgn, :uninstaller,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :new,
                s(:str, "2\ny\n"))),
            s(:args),
            s(:send,
              s(:lvar, :uninstaller), :uninstall)),
          s(:lvasgn, :updated_list,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_all_by_name,
              s(:str, "a"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :list), :length), :-,
              s(:int, 1)),
            s(:send,
              s(:lvar, :updated_list), :length)))),
      s(:def, :test_uninstall_prompts_about_broken_deps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "r"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_dependency,
              s(:str, "q"),
              s(:str, "= 1"))),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1")),
          s(:lvasgn, :un,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "q"))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:lvar, :un), :uninstall)),
          s(:lvasgn, :lines,
            s(:send,
              s(:send,
                s(:lvar, :ui), :output), :split,
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "You have requested to uninstall the gem:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :shift)),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "r-1 depends on q \\(= 1\\)"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Successfully uninstalled q-1"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :last)))),
      s(:def, :test_uninstall_only_lists_unsatisfied_deps,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "r"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_dependency,
              s(:str, "q"),
              s(:str, "~> 1.0"))),
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "x"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_dependency,
              s(:str, "q"),
              s(:str, "= 1.0"))),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1.0")),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1.1")),
          s(:lvasgn, :un,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "q"),
              s(:hash,
                s(:pair,
                  s(:sym, :version),
                  s(:str, "1.0"))))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:lvar, :un), :uninstall)),
          s(:lvasgn, :lines,
            s(:send,
              s(:send,
                s(:lvar, :ui), :output), :split,
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "You have requested to uninstall the gem:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :shift)),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "x-1 depends on q \\(= 1.0\\)"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Successfully uninstalled q-1.0"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :last)))),
      s(:def, :test_uninstall_doesnt_prompt_when_other_gem_satisfies_requirement,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "r"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_dependency,
              s(:str, "q"),
              s(:str, "~> 1.0"))),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1.0")),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1.1")),
          s(:lvasgn, :un,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "q"),
              s(:hash,
                s(:pair,
                  s(:sym, :version),
                  s(:str, "1.0"))))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:lvar, :un), :uninstall)),
          s(:lvasgn, :lines,
            s(:send,
              s(:send,
                s(:lvar, :ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Successfully uninstalled q-1.0"),
            s(:send,
              s(:lvar, :lines), :shift)))),
      s(:def, :test_uninstall_doesnt_prompt_when_removing_a_dev_dep,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "r"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_development_dependency,
              s(:str, "q"),
              s(:str, "= 1.0"))),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1.0")),
          s(:lvasgn, :un,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "q"),
              s(:hash,
                s(:pair,
                  s(:sym, :version),
                  s(:str, "1.0"))))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:lvar, :un), :uninstall)),
          s(:lvasgn, :lines,
            s(:send,
              s(:send,
                s(:lvar, :ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Successfully uninstalled q-1.0"),
            s(:send,
              s(:lvar, :lines), :shift)))),
      s(:def, :test_uninstall_doesnt_prompt_and_raises_when_abort_on_dependent_set,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "r"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_dependency,
              s(:str, "q"),
              s(:str, "= 1"))),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1")),
          s(:lvasgn, :un,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "q"),
              s(:hash,
                s(:pair,
                  s(:sym, :abort_on_dependent),
                  s(:true))))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const, nil, :Gem), :DependencyRemovalException)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:lvar, :ui)),
              s(:args),
              s(:send,
                s(:lvar, :un), :uninstall))))),
      s(:def, :test_uninstall_prompt_includes_dep_type,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :quick_gem,
              s(:str, "r"),
              s(:str, "1")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :add_development_dependency,
              s(:str, "q"),
              s(:str, "= 1"))),
          s(:send, nil, :quick_gem,
            s(:str, "q"),
            s(:str, "1")),
          s(:lvasgn, :un,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Uninstaller), :new,
              s(:str, "q"),
              s(:hash,
                s(:pair,
                  s(:sym, :check_dev),
                  s(:true))))),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:lvar, :un), :uninstall)),
          s(:lvasgn, :lines,
            s(:send,
              s(:send,
                s(:lvar, :ui), :output), :split,
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "You have requested to uninstall the gem:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :shift)),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send,
            s(:lvar, :lines), :shift),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "r-1 depends on q \\(= 1, development\\)"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Successfully uninstalled q-1"),
              s(:regopt)),
            s(:send,
              s(:lvar, :lines), :last)))))))
