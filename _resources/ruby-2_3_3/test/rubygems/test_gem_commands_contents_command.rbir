s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/contents_command")),
  s(:class,
    s(:const, nil, :TestGemCommandsContentsCommand),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :ContentsCommand), :new)))),
      s(:def, :gem,
        s(:args,
          s(:arg, :name),
          s(:optarg, :version,
            s(:int, 2))),
        s(:begin,
          s(:lvasgn, :spec,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:lvar, :name),
                s(:lvar, :version)),
              s(:args,
                s(:arg, :gem)),
              s(:send,
                s(:lvar, :gem), :files=,
                s(:array,
                  s(:dstr,
                    s(:str, "lib/"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ".rb")),
                  s(:str, "Rakefile"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :full_name))),
                  s(:str, "lib"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ".rb")))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :full_name))),
                  s(:str, "Rakefile"))))))),
      s(:def, :test_execute,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "lib/foo\\.rb"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Rakefile"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_all,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :all),
            s(:true)),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:send, nil, :gem,
            s(:str, "bar")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "lib/foo\\.rb"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "lib/bar\\.rb"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Rakefile"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_bad_gem,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Unable to find gem 'foo' in default gem paths"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Directories searched:"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_exact_match,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:send, nil, :gem,
            s(:str, "bar")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "lib/foo\\.rb"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Rakefile"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_lib_only,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :lib_only),
            s(:true)),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "lib/foo\\.rb"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :refute_match,
            s(:regexp,
              s(:str, "Rakefile"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_missing_single,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :MockGemUi), :TermError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@cmd), :execute))),
          s(:send, nil, :assert_match,
            s(:str, "Unable to find gem 'foo'"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_missing_multiple,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:str, "lib/foo.rb"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:str, "Unable to find gem 'bar'"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_multiple,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:send, nil, :gem,
            s(:str, "bar")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "lib/foo\\.rb"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "lib/bar\\.rb"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Rakefile"),
              s(:regopt)),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_show_install_dir,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :show_install_dir),
            s(:true)),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "foo-2"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:lvar, :expected)),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_show_install_dir_version,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :show_install_dir),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :version),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, "= 1"))),
          s(:send, nil, :gem,
            s(:str, "foo"),
            s(:int, 1)),
          s(:send, nil, :gem,
            s(:str, "foo"),
            s(:int, 2)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:str, "foo-1"))),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:lvar, :expected)),
              s(:str, "\n")),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_no_prefix,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "foo"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :prefix),
            s(:false)),
          s(:send, nil, :gem,
            s(:str, "foo")),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:dstr,
              s(:str, "Rakefile\n"),
              s(:str, "lib/foo.rb\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_execute_default_gem,
        s(:args),
        s(:begin,
          s(:lvasgn, :default_gem_spec,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "2.0.0.0"),
              s(:nil),
              s(:str, "default/gem.rb"))),
          s(:send,
            s(:lvar, :default_gem_spec), :executables=,
            s(:array,
              s(:str, "default_command"))),
          s(:op_asgn,
            s(:send,
              s(:lvar, :default_gem_spec), :files), :+,
            s(:array,
              s(:str, "default_gem.so"))),
          s(:send, nil, :install_default_specs,
            s(:lvar, :default_gem_spec)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "default"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :expected,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:array,
                        s(:send,
                          s(:const,
                            s(:const, nil, :RbConfig), :CONFIG), :[],
                          s(:str, "bindir")),
                        s(:str, "default_command")),
                      s(:array,
                        s(:send,
                          s(:const,
                            s(:const, nil, :RbConfig), :CONFIG), :[],
                          s(:str, "rubylibdir")),
                        s(:str, "default/gem.rb")),
                      s(:array,
                        s(:send,
                          s(:const,
                            s(:const, nil, :RbConfig), :CONFIG), :[],
                          s(:str, "archdir")),
                        s(:str, "default_gem.so"))), :sort), :map),
                s(:args,
                  s(:arg, :a)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :a))), :join,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :chomp)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_handle_options,
        s(:args),
        s(:begin,
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :lib_only))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :prefix))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :specdirs))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :version))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :show_install_dir))),
          s(:send,
            s(:ivar, :@cmd), :send,
            s(:sym, :handle_options),
            s(:array,
              s(:str, "-l"),
              s(:str, "-s"),
              s(:str, "foo"),
              s(:str, "--version"),
              s(:str, "0.0.2"),
              s(:str, "--no-prefix"),
              s(:str, "--show-install-dir"))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :lib_only))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :prefix))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "foo")),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :specdirs))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, "0.0.2")),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :version))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :show_install_dir))))))))
