s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/spec_fetcher")),
  s(:class,
    s(:const, nil, :TestGemSpecFetcher),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :tuple,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :NameTuple), :new,
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:ivar, :@gem_repo))),
          s(:ivasgn, :@source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@uri))),
          s(:ivasgn, :@sf,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :new)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :new)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:const, nil, :Gem), :sources),
            s(:send,
              s(:lvar, :fetcher), :sources)))),
      s(:def, :test_initialize_source,
        s(:args),
        s(:begin,
          s(:lvasgn, :alternate,
            s(:str, "http://alternate.example")),
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :new,
              s(:lvar, :alternate))),
          s(:send, nil, :refute_same,
            s(:send,
              s(:const, nil, :Gem), :sources),
            s(:send,
              s(:lvar, :fetcher), :sources)),
          s(:send, nil, :assert_equal,
            s(:lvar, :alternate),
            s(:send,
              s(:lvar, :fetcher), :sources)))),
      s(:def, :test_initialize_nonexistent_home_dir,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :rmdir,
            s(:send,
              s(:const, nil, :Gem), :user_home)),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :new)))),
      s(:def, :test_initialize_unwritable_home_dir,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:send, nil, :skip,
              s(:str, "chmod not supported")), nil),
          s(:send,
            s(:const, nil, :FileUtils), :chmod,
            s(:int, 0),
            s(:send,
              s(:const, nil, :Gem), :user_home)),
          s(:kwbegin,
            s(:ensure,
              s(:send, nil, :assert,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :SpecFetcher), :new)),
              s(:send,
                s(:const, nil, :FileUtils), :chmod,
                s(:int, 493),
                s(:send,
                  s(:const, nil, :Gem), :user_home)))))),
      s(:def, :test_spec_for_dependency_all,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "3.a")))),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "a"),
              s(:str, ">= 1"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs_and_sources),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :spec_for_dependency,
              s(:lvar, :dep))),
          s(:lvasgn, :spec_names,
            s(:block,
              s(:send,
                s(:lvar, :specs_and_sources), :map),
              s(:args,
                s(:arg, :spec),
                s(:arg, :source_uri)),
              s(:array,
                s(:send,
                  s(:lvar, :spec), :full_name),
                s(:lvar, :source_uri)))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:str, "a-1"),
                s(:ivar, :@source)),
              s(:array,
                s(:str, "a-2"),
                s(:ivar, :@source)))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:lvar, :spec_names)),
          s(:send, nil, :assert_same,
            s(:send,
              s(:send,
                s(:lvar, :specs_and_sources), :first), :last),
            s(:send,
              s(:send,
                s(:lvar, :specs_and_sources), :last), :last)))),
      s(:def, :test_spec_for_dependency_latest,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "3.a")))),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "a"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs_and_sources),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :spec_for_dependency,
              s(:lvar, :dep))),
          s(:lvasgn, :spec_names,
            s(:block,
              s(:send,
                s(:lvar, :specs_and_sources), :map),
              s(:args,
                s(:arg, :spec),
                s(:arg, :source_uri)),
              s(:array,
                s(:send,
                  s(:lvar, :spec), :full_name),
                s(:lvar, :source_uri)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "a-2"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Source), :new,
                  s(:ivar, :@gem_repo)))),
            s(:lvar, :spec_names)))),
      s(:def, :test_spec_for_dependency_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "1.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs_and_sources),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :spec_for_dependency,
              s(:send, nil, :dep,
                s(:str, "a"),
                s(:str, "1.a")))),
          s(:lvasgn, :spec_names,
            s(:block,
              s(:send,
                s(:lvar, :specs_and_sources), :map),
              s(:args,
                s(:arg, :spec),
                s(:arg, :source_uri)),
              s(:array,
                s(:send,
                  s(:lvar, :spec), :full_name),
                s(:lvar, :source_uri)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "a-1.a"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Source), :new,
                  s(:ivar, :@gem_repo)))),
            s(:lvar, :spec_names)))),
      s(:def, :test_spec_for_dependency_platform,
        s(:args),
        s(:begin,
          s(:send, nil, :util_set_arch,
            s(:str, "i386-linux")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "pl"),
              s(:int, 1))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs_and_sources),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :spec_for_dependency,
              s(:lvar, :dep))),
          s(:lvasgn, :spec_names,
            s(:block,
              s(:send,
                s(:lvar, :specs_and_sources), :map),
              s(:args,
                s(:arg, :spec),
                s(:arg, :source_uri)),
              s(:array,
                s(:send,
                  s(:lvar, :spec), :full_name),
                s(:lvar, :source_uri)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "pl-1-x86-linux"),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Source), :new,
                  s(:ivar, :@gem_repo)))),
            s(:lvar, :spec_names)))),
      s(:def, :test_spec_for_dependency_mismatched_platform,
        s(:args),
        s(:begin,
          s(:send, nil, :util_set_arch,
            s(:str, "hrpa-989")),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :legacy_platform)),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "pl"),
              s(:int, 1))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs_and_sources),
              s(:lvasgn, :errors)),
            s(:send,
              s(:ivar, :@sf), :spec_for_dependency,
              s(:lvar, :dep))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :specs_and_sources), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :errors), :size)),
          s(:lvasgn, :pmm,
            s(:send,
              s(:lvar, :errors), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "i386-linux"),
            s(:send,
              s(:send,
                s(:lvar, :pmm), :platforms), :first)),
          s(:send, nil, :assert_equal,
            s(:str, "Found pl (1), but was for platform i386-linux"),
            s(:send,
              s(:lvar, :pmm), :wordy)))),
      s(:def, :test_spec_for_dependency_bad_fetch_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :src,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:defs,
            s(:lvar, :src), :fetch_spec,
            s(:args,
              s(:arg, :name)),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                s(:str, "bad news from the internet"),
                s(:ivar, :@uri)))),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:array,
              s(:lvar, :src))),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "3.a")))),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:str, "a"),
              s(:str, ">= 1"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs_and_sources),
              s(:lvasgn, :errors)),
            s(:send,
              s(:ivar, :@sf), :spec_for_dependency,
              s(:lvar, :dep))),
          s(:send, nil, :assert_equal,
            s(:array),
            s(:lvar, :specs_and_sources)),
          s(:lvasgn, :sfp,
            s(:send,
              s(:lvar, :errors), :first)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Gem), :SourceFetchProblem),
            s(:lvar, :sfp)),
          s(:send, nil, :assert_equal,
            s(:lvar, :src),
            s(:send,
              s(:lvar, :sfp), :source)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "bad news from the internet ("),
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, ")")),
            s(:send,
              s(:send,
                s(:lvar, :sfp), :error), :message)))),
      s(:def, :test_available_specs_latest,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "3.a")),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :latest))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@source)),
            s(:send,
              s(:lvar, :specs), :keys)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :from_list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:send, nil, :v,
                    s(:int, 2)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:array,
                  s(:str, "pl"),
                  s(:send, nil, :v,
                    s(:int, 1)),
                  s(:str, "i386-linux"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :specs), :[],
              s(:ivar, :@source))))),
      s(:def, :test_available_specs_released,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :released))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@source)),
            s(:send,
              s(:lvar, :specs), :keys)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :from_list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:send, nil, :v,
                    s(:int, 1)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:array,
                  s(:str, "pl"),
                  s(:send, nil, :v,
                    s(:int, 1)),
                  s(:str, "i386-linux"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :specs), :[],
              s(:ivar, :@source))))),
      s(:def, :test_available_specs_complete,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :complete))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@source)),
            s(:send,
              s(:lvar, :specs), :keys)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :from_list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:send, nil, :v,
                    s(:int, 1)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:array,
                  s(:str, "a"),
                  s(:send, nil, :v,
                    s(:str, "2.a")),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:array,
                  s(:str, "b"),
                  s(:send, nil, :v,
                    s(:int, 2)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:array,
                  s(:str, "pl"),
                  s(:send, nil, :v,
                    s(:int, 1)),
                  s(:str, "i386-linux"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :specs), :[],
              s(:ivar, :@source))))),
      s(:def, :test_available_specs_complete_handles_no_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:lvasgn, :v,
            s(:send,
              s(:const, nil, :Gem), :marshal_version)),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :delete,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "prerelease_specs."),
              s(:begin,
                s(:lvar, :v)),
              s(:str, ".gz"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :complete))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:ivar, :@source)),
            s(:send,
              s(:lvar, :specs), :keys)),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :from_list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:send, nil, :v,
                    s(:int, 1)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:array,
                  s(:str, "b"),
                  s(:send, nil, :v,
                    s(:int, 2)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:array,
                  s(:str, "pl"),
                  s(:send, nil, :v,
                    s(:int, 1)),
                  s(:str, "i386-linux"))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :specs), :[],
              s(:ivar, :@source))))),
      s(:def, :test_available_specs_cache,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :latest))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:ivar, :@source)), :empty?)),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "/latest_specs."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version)),
              s(:str, ".gz")),
            s(:nil)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :cached_specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :latest))),
          s(:send, nil, :assert_equal,
            s(:lvar, :specs),
            s(:lvar, :cached_specs)))),
      s(:def, :test_available_specs_cache_released,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "b"),
                s(:int, 2)),
              s(:send,
                s(:lvar, :fetcher), :legacy_platform))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :released))),
          s(:send, nil, :refute,
            s(:send,
              s(:send,
                s(:lvar, :specs), :[],
                s(:ivar, :@source)), :empty?)),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "/specs."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version)),
              s(:str, ".gz")),
            s(:nil)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :cached_specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :released))),
          s(:send, nil, :assert_equal,
            s(:lvar, :specs),
            s(:lvar, :cached_specs)))),
      s(:def, :test_available_specs_prerelease,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:begin,
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:send,
                s(:lvar, :fetcher), :spec,
                s(:str, "a"),
                s(:str, "2.a")))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :_)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :prerelease))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :NameTuple), :from_list,
              s(:array,
                s(:array,
                  s(:str, "a"),
                  s(:send, nil, :v,
                    s(:str, "2.a")),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:lvar, :specs), :[],
              s(:ivar, :@source))))),
      s(:def, :test_available_specs_with_bad_source,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:array,
              s(:str, "http://not-there.nothing"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :specs),
              s(:lvasgn, :errors)),
            s(:send,
              s(:ivar, :@sf), :available_specs,
              s(:sym, :latest))),
          s(:send, nil, :assert_equal,
            s(:hash),
            s(:lvar, :specs)),
          s(:send, nil, :assert_kind_of,
            s(:const,
              s(:const, nil, :Gem), :SourceFetchProblem),
            s(:send,
              s(:lvar, :errors), :first)))))))
