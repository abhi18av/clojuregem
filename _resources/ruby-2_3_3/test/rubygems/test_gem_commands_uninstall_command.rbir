s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/installer_test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/commands/uninstall_command")),
  s(:class,
    s(:const, nil, :TestGemCommandsUninstallCommand),
    s(:const,
      s(:const, nil, :Gem), :InstallerTestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :common_installer_setup),
          s(:block,
            s(:send, nil, :build_rake_in),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@installer), :install))),
          s(:ivasgn, :@cmd,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Commands), :UninstallCommand), :new)),
          s(:ivasgn, :@executable,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "bin"),
              s(:str, "executable"))))),
      s(:def, :test_execute_all_named,
        s(:args),
        s(:begin,
          s(:send, nil, :util_make_gems),
          s(:lvasgn, :default,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "1"))),
          s(:send, nil, :install_default_gems,
            s(:lvar, :default)),
          s(:lvasgn, :gemhome2,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "2"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a_4)),
            s(:send, nil, :util_gem,
              s(:str, "a"),
              s(:int, 4))),
          s(:send, nil, :install_gem,
            s(:lvar, :a_4),
            s(:hash,
              s(:pair,
                s(:sym, :install_dir),
                s(:lvar, :gemhome2)))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :dirs=,
            s(:array,
              s(:ivar, :@gemhome),
              s(:lvar, :gemhome2))),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a-1")),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a-4")),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "b-2")),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "default-1")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :all),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "a_evil-9"),
              s(:str, "b-2"),
              s(:str, "c-1.2"),
              s(:str, "default-1"),
              s(:str, "dep_x-1"),
              s(:str, "pl-1-x86-linux"),
              s(:str, "x-1")),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :all_names), :sort)))),
      s(:def, :test_execute_dependency_order,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:str, "c")),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :add_dependency,
                s(:str, "a")))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :c)),
          s(:lvasgn, :installer,
            s(:send, nil, :util_installer,
              s(:lvar, :c),
              s(:ivar, :@gemhome))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:lvar, :installer), :install)),
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"),
              s(:str, "c"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :executables),
            s(:true)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :output,
            s(:send,
              s(:send,
                s(:lvar, :ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_equal,
            s(:str, "Successfully uninstalled c-2"),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_equal,
            s(:str, "Removing executable"),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_equal,
            s(:str, "Successfully uninstalled a-2"),
            s(:send,
              s(:lvar, :output), :shift)))),
      s(:def, :test_execute_removes_executable,
        s(:args),
        s(:begin,
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new)),
          s(:send, nil, :util_setup_gem,
            s(:lvar, :ui)),
          s(:block,
            s(:send, nil, :build_rake_in),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:lvar, :ui)),
              s(:args),
              s(:send,
                s(:ivar, :@installer), :install))),
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:ivar, :@executable))),
            s(:send, nil, :assert,
              s(:send,
                s(:const, nil, :File), :symlink?,
                s(:ivar, :@executable)))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_f,
            s(:ivar, :@executable)),
          s(:block,
            s(:send, nil, :open,
              s(:ivar, :@executable),
              s(:str, "wb+")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "binary"))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :executables),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:send,
                s(:ivar, :@spec), :name))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :output,
            s(:send,
              s(:send,
                s(:ivar, :@ui), :output), :split,
              s(:str, "\n"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Removing executable"),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Successfully uninstalled"),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:ivar, :@executable))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :output), :shift),
            s(:str, "UI output should have contained only two lines")))),
      s(:def, :test_execute_removes_formatted_executable,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :rm_f,
              s(:ivar, :@executable)),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Installer), :exec_format=,
              s(:str, "foo-%s-bar")),
            s(:send,
              s(:ivar, :@installer), :format_executable=,
              s(:true)),
            s(:send,
              s(:ivar, :@installer), :install),
            s(:lvasgn, :formatted_executable,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@gemhome),
                s(:str, "bin"),
                s(:str, "foo-executable-bar"))),
            s(:send, nil, :assert_equal,
              s(:true),
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :formatted_executable))),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[]=,
              s(:sym, :executables),
              s(:true)),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[]=,
              s(:sym, :format_executable),
              s(:true)),
            s(:send,
              s(:ivar, :@cmd), :execute),
            s(:send, nil, :assert_equal,
              s(:false),
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :formatted_executable)))),
          s(:resbody, nil, nil,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Installer), :exec_format=,
              s(:nil))), nil)),
      s(:def, :test_execute_prerelease,
        s(:args),
        s(:begin,
          s(:ivasgn, :@spec,
            s(:send, nil, :util_spec,
              s(:str, "pre"),
              s(:str, "2.b"))),
          s(:ivasgn, :@gem,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:send,
                s(:ivar, :@spec), :file_name))),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:ivar, :@gem)),
          s(:send, nil, :util_setup_gem),
          s(:block,
            s(:send, nil, :build_rake_in),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@installer), :install))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :executables),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "pre"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:lvasgn, :output,
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "Successfully uninstalled"),
              s(:regopt)),
            s(:lvar, :output)))),
      s(:def, :test_execute_with_force_leaves_executable,
        s(:args),
        s(:begin,
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new)),
          s(:send, nil, :util_make_gems),
          s(:send, nil, :util_setup_gem,
            s(:lvar, :ui)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :version),
            s(:str, "1")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :force),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :all_names), :include?,
                s(:str, "a")), :!)),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@gemhome),
                s(:str, "bin"),
                s(:str, "executable")))))),
      s(:def, :test_execute_with_force_uninstalls_all_versions,
        s(:args),
        s(:begin,
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new,
              s(:str, "y\n"))),
          s(:send, nil, :util_make_gems),
          s(:send, nil, :util_setup_gem,
            s(:lvar, :ui)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :find_all_by_name,
                  s(:str, "a")), :length), :>,
              s(:int, 1))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :force),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "a"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :refute_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a")))),
      s(:def, :test_execute_with_force_ignores_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new)),
          s(:send, nil, :util_make_gems),
          s(:send, nil, :util_setup_gem,
            s(:lvar, :ui)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :find_all_by_name,
                  s(:str, "dep_x")), :length), :>,
              s(:int, 0))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :find_all_by_name,
                  s(:str, "x")), :length), :>,
              s(:int, 0))),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :force),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array,
              s(:str, "x"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:lvar, :ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :find_all_by_name,
                  s(:str, "dep_x")), :length), :>,
              s(:int, 0))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :find_all_by_name,
                  s(:str, "x")), :length), :==,
              s(:int, 0))))),
      s(:def, :test_execute_all,
        s(:args),
        s(:begin,
          s(:send, nil, :util_make_gems),
          s(:lvasgn, :default,
            s(:send, nil, :new_default_spec,
              s(:str, "default"),
              s(:str, "1"))),
          s(:send, nil, :install_default_gems,
            s(:lvar, :default)),
          s(:lvasgn, :gemhome2,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "2"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a_4)),
            s(:send, nil, :util_gem,
              s(:str, "a"),
              s(:int, 4))),
          s(:send, nil, :install_gem,
            s(:lvar, :a_4),
            s(:hash,
              s(:pair,
                s(:sym, :install_dir),
                s(:lvar, :gemhome2)))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :dirs=,
            s(:array,
              s(:ivar, :@gemhome),
              s(:lvar, :gemhome2))),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a-1")),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "a-4")),
          s(:send, nil, :assert_includes,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :all_names),
            s(:str, "default-1")),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :all),
            s(:true)),
          s(:send,
            s(:send,
              s(:ivar, :@cmd), :options), :[]=,
            s(:sym, :args),
            s(:array)),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :execute)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "default-1")),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :all_names), :sort)))),
      s(:def, :test_handle_options,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@cmd), :handle_options,
            s(:array)),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :check_dev))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :install_dir))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :user_install))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :version))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :vendor))))),
      s(:def, :test_handle_options_vendor,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@cmd), :handle_options,
              s(:array,
                s(:str, "--vendor")))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :vendor))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Gem), :vendor_dir),
            s(:send,
              s(:send,
                s(:ivar, :@cmd), :options), :[],
              s(:sym, :install_dir))),
          s(:send, nil, :assert_empty,
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:lvasgn, :expected,
            s(:str, "WARNING:  Use your OS package manager to uninstall vendor gems\n")),
          s(:send, nil, :assert_match,
            s(:lvar, :expected),
            s(:send,
              s(:ivar, :@ui), :error)))),
      s(:def, :test_handle_options_vendor_missing,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :orig_vendordir,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "vendordir"))),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :delete,
              s(:str, "vendordir")),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidOption)),
                s(:args),
                s(:send,
                  s(:ivar, :@cmd), :handle_options,
                  s(:array,
                    s(:str, "--vendor"))))),
            s(:send, nil, :assert_equal,
              s(:str, "invalid option: --vendor your platform is not supported"),
              s(:send,
                s(:lvar, :e), :message)),
            s(:send, nil, :refute,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :options), :[],
                s(:sym, :vendor))),
            s(:send, nil, :refute,
              s(:send,
                s(:send,
                  s(:ivar, :@cmd), :options), :[],
                s(:sym, :install_dir)))),
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[]=,
            s(:str, "vendordir"),
            s(:lvar, :orig_vendordir)))))))
