s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/simple_gem")),
  s(:class,
    s(:const, nil, :TestGemPackageOld),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:block,
            s(:send, nil, :open,
              s(:str, "old_format.gem"),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:const, nil, :SIMPLE_GEM))),
          s(:ivasgn, :@package,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :Old), :new,
              s(:str, "old_format.gem"))),
          s(:ivasgn, :@destination,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "extract"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@destination)))),
      s(:def, :test_contents,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "lib/foo.rb"),
            s(:str, "lib/test.rb"),
            s(:str, "lib/test/wow.rb")),
          s(:send,
            s(:ivar, :@package), :contents))),
      s(:def, :test_contents_security_policy,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send,
            s(:ivar, :@package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :AlmostNoSecurity)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@package), :contents)))),
      s(:def, :test_extract_files,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@package), :extract_files,
            s(:ivar, :@destination)),
          s(:lvasgn, :extracted,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destination),
              s(:str, "lib/foo.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:lvar, :extracted)),
          s(:lvasgn, :mask,
            s(:send,
              s(:int, 33188), :&,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :umask), :~)))),
          s(:if,
            s(:send, nil, :win_platform?), nil,
            s(:send, nil, :assert_equal,
              s(:lvar, :mask),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:lvar, :extracted)), :mode))))),
      s(:def, :test_extract_files_security_policy,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send,
            s(:ivar, :@package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :AlmostNoSecurity)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@package), :extract_files,
              s(:ivar, :@destination))))),
      s(:def, :test_spec,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:str, "testing"),
          s(:send,
            s(:send,
              s(:ivar, :@package), :spec), :name))),
      s(:def, :test_spec_security_policy,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send,
            s(:ivar, :@package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :AlmostNoSecurity)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@package), :spec)))),
      s(:def, :test_verify,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :OpenSSL), :SSL)), nil,
            s(:send, nil, :skip,
              s(:str, "openssl is missing"))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@package), :verify)),
          s(:send,
            s(:ivar, :@package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :NoSecurity)),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@package), :verify)),
          s(:send,
            s(:ivar, :@package), :security_policy=,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :AlmostNoSecurity)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception)),
              s(:args),
              s(:send,
                s(:ivar, :@package), :verify))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:str, "old format gems do not contain signatures "), :+,
              s(:str, "and cannot be verified")),
            s(:send,
              s(:lvar, :e), :message)))))))
