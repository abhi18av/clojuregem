s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/security")),
  s(:if,
    s(:send,
      s(:const, nil, :RUBY_VERSION), :<,
      s(:str, "1.9")),
    s(:send, nil, :require,
      s(:str, "rubygems/fix_openssl_warnings")), nil),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)), nil,
    s(:send, nil, :warn,
      s(:str, "Skipping Gem::Security tests.  openssl not found."))),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)),
    s(:class,
      s(:const, nil, :TestGemSecurity),
      s(:const,
        s(:const, nil, :Gem), :TestCase),
      s(:begin,
        s(:casgn, nil, :CHILD_KEY,
          s(:send, nil, :load_key,
            s(:str, "child"))),
        s(:casgn, nil, :ALTERNATE_CERT,
          s(:send, nil, :load_cert,
            s(:str, "child"))),
        s(:casgn, nil, :CHILD_CERT,
          s(:send, nil, :load_cert,
            s(:str, "child"))),
        s(:casgn, nil, :EXPIRED_CERT,
          s(:send, nil, :load_cert,
            s(:str, "expired"))),
        s(:def, :setup,
          s(:args),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@SEC,
              s(:const,
                s(:const, nil, :Gem), :Security)))),
        s(:def, :test_class_create_cert,
          s(:args),
          s(:begin,
            s(:lvasgn, :name,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :subject)),
            s(:lvasgn, :key,
              s(:const, nil, :PRIVATE_KEY)),
            s(:lvasgn, :cert,
              s(:send,
                s(:ivar, :@SEC), :create_cert,
                s(:lvar, :name),
                s(:lvar, :key),
                s(:int, 60),
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :EXTENSIONS),
                s(:int, 5))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :X509), :Certificate),
              s(:lvar, :cert)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :cert), :version)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:lvar, :cert), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :public_key), :to_pem)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:const, nil, :Time), :now),
              s(:send,
                s(:lvar, :cert), :not_before),
              s(:int, 10)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :+,
                s(:int, 60)),
              s(:send,
                s(:lvar, :cert), :not_after),
              s(:int, 10)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :name), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:int, 3),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :extensions), :length),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :map),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :to_a), :first))),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "basicConstraints")))),
            s(:send, nil, :assert_equal,
              s(:str, "CA:FALSE"),
              s(:send,
                s(:lvar, :constraints), :value)),
            s(:lvasgn, :key_usage,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "keyUsage")))),
            s(:send, nil, :assert_equal,
              s(:str, "Digital Signature, Key Encipherment, Data Encipherment"),
              s(:send,
                s(:lvar, :key_usage), :value)),
            s(:lvasgn, :key_ident,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "subjectKeyIdentifier")))),
            s(:send, nil, :assert_equal,
              s(:int, 59),
              s(:send,
                s(:send,
                  s(:lvar, :key_ident), :value), :length)),
            s(:send, nil, :assert_equal,
              s(:str, "5F:43:6E:F6:9A:8E:45:25:E9:22:E3:7D:37:5E:A4:D5:36:02:85:1B"),
              s(:send,
                s(:lvar, :key_ident), :value)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :name), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :subject), :to_s)))),
        s(:def, :test_class_create_cert_self_signed,
          s(:args),
          s(:begin,
            s(:lvasgn, :subject,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :subject)),
            s(:lvasgn, :cert,
              s(:send,
                s(:ivar, :@SEC), :create_cert_self_signed,
                s(:lvar, :subject),
                s(:const, nil, :PRIVATE_KEY),
                s(:int, 60))),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example"),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_s)))),
        s(:def, :test_class_create_cert_email,
          s(:args),
          s(:begin,
            s(:lvasgn, :email,
              s(:str, "nobody@example")),
            s(:lvasgn, :name,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :subject)),
            s(:lvasgn, :key,
              s(:const, nil, :PRIVATE_KEY)),
            s(:lvasgn, :cert,
              s(:send,
                s(:ivar, :@SEC), :create_cert_email,
                s(:lvar, :email),
                s(:lvar, :key),
                s(:int, 60))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :X509), :Certificate),
              s(:lvar, :cert)),
            s(:send, nil, :assert_equal,
              s(:int, 2),
              s(:send,
                s(:lvar, :cert), :version)),
            s(:send, nil, :assert_equal,
              s(:int, 1),
              s(:send,
                s(:lvar, :cert), :serial)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :public_key), :to_pem)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:const, nil, :Time), :now),
              s(:send,
                s(:lvar, :cert), :not_before),
              s(:int, 10)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :+,
                s(:int, 60)),
              s(:send,
                s(:lvar, :cert), :not_after),
              s(:int, 10)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :name), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :name), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :issuer), :to_s)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send,
                  s(:lvar, :cert), :extensions), :length),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :map),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :to_a), :first))),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "subjectAltName")))),
            s(:send, nil, :assert_equal,
              s(:str, "email:nobody@example"),
              s(:send,
                s(:lvar, :constraints), :value)),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "basicConstraints")))),
            s(:send, nil, :assert_equal,
              s(:str, "CA:FALSE"),
              s(:send,
                s(:lvar, :constraints), :value)),
            s(:lvasgn, :key_usage,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "keyUsage")))),
            s(:send, nil, :assert_equal,
              s(:str, "Digital Signature, Key Encipherment, Data Encipherment"),
              s(:send,
                s(:lvar, :key_usage), :value)),
            s(:lvasgn, :key_ident,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cert), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "subjectKeyIdentifier")))),
            s(:send, nil, :assert_equal,
              s(:int, 59),
              s(:send,
                s(:send,
                  s(:lvar, :key_ident), :value), :length)),
            s(:send, nil, :assert_equal,
              s(:str, "5F:43:6E:F6:9A:8E:45:25:E9:22:E3:7D:37:5E:A4:D5:36:02:85:1B"),
              s(:send,
                s(:lvar, :key_ident), :value)))),
        s(:def, :test_class_create_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:ivar, :@SEC), :create_key,
                s(:int, 1024))),
            s(:send, nil, :assert_kind_of,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :PKey), :RSA),
              s(:lvar, :key)))),
        s(:def, :test_class_email_to_name,
          s(:args),
          s(:begin,
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example"),
              s(:send,
                s(:send,
                  s(:ivar, :@SEC), :email_to_name,
                  s(:str, "nobody@example")), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=nobody/DC=example/DC=com"),
              s(:send,
                s(:send,
                  s(:ivar, :@SEC), :email_to_name,
                  s(:str, "nobody@example.com")), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=no.body/DC=example"),
              s(:send,
                s(:send,
                  s(:ivar, :@SEC), :email_to_name,
                  s(:str, "no.body@example")), :to_s)),
            s(:send, nil, :assert_equal,
              s(:str, "/CN=no_body/DC=example"),
              s(:send,
                s(:send,
                  s(:ivar, :@SEC), :email_to_name,
                  s(:str, "no+body@example")), :to_s)))),
        s(:def, :test_class_re_sign,
          s(:args),
          s(:begin,
            s(:lvasgn, :re_signed,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :re_sign,
                s(:const, nil, :EXPIRED_CERT),
                s(:const, nil, :PRIVATE_KEY),
                s(:int, 60))),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:const, nil, :Time), :now),
              s(:send,
                s(:lvar, :re_signed), :not_before),
              s(:int, 10)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :+,
                s(:int, 60)),
              s(:send,
                s(:lvar, :re_signed), :not_after),
              s(:int, 10)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:const, nil, :EXPIRED_CERT), :serial), :+,
                s(:int, 1)),
              s(:send,
                s(:lvar, :re_signed), :serial)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :re_signed), :verify,
                s(:const, nil, :PUBLIC_KEY))))),
        s(:def, :test_class_re_sign_not_self_signed,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :re_sign,
                  s(:const, nil, :CHILD_CERT),
                  s(:const, nil, :CHILD_KEY)))),
            s(:lvasgn, :child_alt_name,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :CHILD_CERT), :extensions), :find),
                s(:args,
                  s(:arg, :extension)),
                s(:send,
                  s(:send,
                    s(:lvar, :extension), :oid), :==,
                  s(:str, "subjectAltName")))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :child_alt_name), :value)),
                  s(:str, " is not self-signed, contact ")), :+,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ALTERNATE_CERT), :issuer)),
                  s(:str, " to obtain a valid certificate"))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_class_re_sign_wrong_key,
          s(:args),
          s(:begin,
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :re_sign,
                  s(:const, nil, :ALTERNATE_CERT),
                  s(:const, nil, :PRIVATE_KEY)))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:str, "incorrect signing key for re-signing "), :+,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ALTERNATE_CERT), :subject)))),
              s(:send,
                s(:lvar, :e), :message)))),
        s(:def, :test_class_reset,
          s(:args),
          s(:begin,
            s(:lvasgn, :trust_dir,
              s(:send,
                s(:ivar, :@SEC), :trust_dir)),
            s(:send,
              s(:ivar, :@SEC), :reset),
            s(:send, nil, :refute_equal,
              s(:lvar, :trust_dir),
              s(:send,
                s(:ivar, :@SEC), :trust_dir)))),
        s(:def, :test_class_sign,
          s(:args),
          s(:begin,
            s(:lvasgn, :issuer,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :subject)),
            s(:lvasgn, :signee,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/CN=signee/DC=example"))),
            s(:lvasgn, :key,
              s(:const, nil, :PRIVATE_KEY)),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
            s(:send,
              s(:lvar, :cert), :subject=,
              s(:lvar, :signee)),
            s(:send,
              s(:lvar, :cert), :subject=,
              s(:lvar, :signee)),
            s(:send,
              s(:lvar, :cert), :public_key=,
              s(:send,
                s(:lvar, :key), :public_key)),
            s(:lvasgn, :signed,
              s(:send,
                s(:ivar, :@SEC), :sign,
                s(:lvar, :cert),
                s(:lvar, :key),
                s(:const, nil, :PUBLIC_CERT),
                s(:int, 60))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :public_key), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :signee), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :issuer), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :issuer), :to_s)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:const, nil, :Time), :now),
              s(:send,
                s(:lvar, :signed), :not_before),
              s(:int, 10)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :+,
                s(:int, 60)),
              s(:send,
                s(:lvar, :signed), :not_after),
              s(:int, 10)),
            s(:send, nil, :assert_equal,
              s(:int, 4),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :extensions), :length),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :map),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :to_a), :first))),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "issuerAltName")))),
            s(:send, nil, :assert_equal,
              s(:str, "email:nobody@example"),
              s(:send,
                s(:lvar, :constraints), :value),
              s(:str, "issuerAltName")),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "basicConstraints")))),
            s(:send, nil, :assert_equal,
              s(:str, "CA:FALSE"),
              s(:send,
                s(:lvar, :constraints), :value)),
            s(:lvasgn, :key_usage,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "keyUsage")))),
            s(:send, nil, :assert_equal,
              s(:str, "Digital Signature, Key Encipherment, Data Encipherment"),
              s(:send,
                s(:lvar, :key_usage), :value)),
            s(:lvasgn, :key_ident,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "subjectKeyIdentifier")))),
            s(:send, nil, :assert_equal,
              s(:int, 59),
              s(:send,
                s(:send,
                  s(:lvar, :key_ident), :value), :length)),
            s(:send, nil, :assert_equal,
              s(:str, "5F:43:6E:F6:9A:8E:45:25:E9:22:E3:7D:37:5E:A4:D5:36:02:85:1B"),
              s(:send,
                s(:lvar, :key_ident), :value)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :signed), :verify,
                s(:lvar, :key))))),
        s(:def, :test_class_sign_AltName,
          s(:args),
          s(:begin,
            s(:lvasgn, :issuer,
              s(:send,
                s(:const, nil, :PUBLIC_CERT), :subject)),
            s(:lvasgn, :signee,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Name), :parse,
                s(:str, "/CN=signee/DC=example"))),
            s(:lvasgn, :cert,
              s(:send,
                s(:ivar, :@SEC), :create_cert_email,
                s(:str, "signee@example"),
                s(:const, nil, :PRIVATE_KEY))),
            s(:lvasgn, :signed,
              s(:send,
                s(:ivar, :@SEC), :sign,
                s(:lvar, :cert),
                s(:const, nil, :PRIVATE_KEY),
                s(:const, nil, :PUBLIC_CERT),
                s(:int, 60))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:const, nil, :PUBLIC_KEY), :to_pem),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :public_key), :to_pem)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :signee), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :subject), :to_s)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :issuer), :to_s),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :issuer), :to_s)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:const, nil, :Time), :now),
              s(:send,
                s(:lvar, :signed), :not_before),
              s(:int, 10)),
            s(:send, nil, :assert_in_delta,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :+,
                s(:int, 60)),
              s(:send,
                s(:lvar, :signed), :not_after),
              s(:int, 10)),
            s(:send, nil, :assert_equal,
              s(:int, 5),
              s(:send,
                s(:send,
                  s(:lvar, :signed), :extensions), :length),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :map),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :to_a), :first))),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "issuerAltName")))),
            s(:send, nil, :assert_equal,
              s(:str, "email:nobody@example"),
              s(:send,
                s(:lvar, :constraints), :value),
              s(:str, "issuerAltName")),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "subjectAltName")))),
            s(:send, nil, :assert_equal,
              s(:str, "email:signee@example"),
              s(:send,
                s(:lvar, :constraints), :value),
              s(:str, "subjectAltName")),
            s(:lvasgn, :constraints,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "basicConstraints")))),
            s(:send, nil, :assert_equal,
              s(:str, "CA:FALSE"),
              s(:send,
                s(:lvar, :constraints), :value)),
            s(:lvasgn, :key_usage,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "keyUsage")))),
            s(:send, nil, :assert_equal,
              s(:str, "Digital Signature, Key Encipherment, Data Encipherment"),
              s(:send,
                s(:lvar, :key_usage), :value)),
            s(:lvasgn, :key_ident,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :signed), :extensions), :find),
                s(:args,
                  s(:arg, :ext)),
                s(:send,
                  s(:send,
                    s(:lvar, :ext), :oid), :==,
                  s(:str, "subjectKeyIdentifier")))),
            s(:send, nil, :assert_equal,
              s(:int, 59),
              s(:send,
                s(:send,
                  s(:lvar, :key_ident), :value), :length)),
            s(:send, nil, :assert_equal,
              s(:str, "5F:43:6E:F6:9A:8E:45:25:E9:22:E3:7D:37:5E:A4:D5:36:02:85:1B"),
              s(:send,
                s(:lvar, :key_ident), :value)),
            s(:send, nil, :assert,
              s(:send,
                s(:lvar, :signed), :verify,
                s(:const, nil, :PUBLIC_KEY))))),
        s(:def, :test_class_trust_dir,
          s(:args),
          s(:begin,
            s(:lvasgn, :trust_dir,
              s(:send,
                s(:ivar, :@SEC), :trust_dir)),
            s(:lvasgn, :expected,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :Gem), :user_home),
                s(:str, ".gem/trust"))),
            s(:send, nil, :assert_equal,
              s(:lvar, :expected),
              s(:send,
                s(:lvar, :trust_dir), :dir)))),
        s(:def, :test_class_write,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:ivar, :@SEC), :create_key,
                s(:int, 1024))),
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "test-private_key.pem"))),
            s(:send,
              s(:ivar, :@SEC), :write,
              s(:lvar, :key),
              s(:lvar, :path)),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :path)),
            s(:lvasgn, :key_from_file,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :path))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :to_pem),
              s(:lvar, :key_from_file)))),
        s(:def, :test_class_write_encrypted,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:ivar, :@SEC), :create_key,
                s(:int, 1024))),
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "test-private_encrypted_key.pem"))),
            s(:lvasgn, :passphrase,
              s(:str, "It should be long.")),
            s(:send,
              s(:ivar, :@SEC), :write,
              s(:lvar, :key),
              s(:lvar, :path),
              s(:int, 384),
              s(:lvar, :passphrase)),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :path)),
            s(:lvasgn, :key_from_file,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :path)),
                s(:lvar, :passphrase))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :to_pem),
              s(:send,
                s(:lvar, :key_from_file), :to_pem)))),
        s(:def, :test_class_write_encrypted_cipher,
          s(:args),
          s(:begin,
            s(:lvasgn, :key,
              s(:send,
                s(:ivar, :@SEC), :create_key,
                s(:int, 1024))),
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@tempdir),
                s(:str, "test-private_encrypted__with_non_default_cipher_key.pem"))),
            s(:lvasgn, :passphrase,
              s(:str, "It should be long.")),
            s(:lvasgn, :cipher,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Cipher), :new,
                s(:str, "AES-192-CBC"))),
            s(:send,
              s(:ivar, :@SEC), :write,
              s(:lvar, :key),
              s(:lvar, :path),
              s(:int, 384),
              s(:lvar, :passphrase),
              s(:lvar, :cipher)),
            s(:send, nil, :assert_path_exists,
              s(:lvar, :path)),
            s(:lvasgn, :key_file_contents,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :path))),
            s(:send, nil, :assert,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :key_file_contents), :split,
                    s(:str, "\n")), :[],
                  s(:int, 2)), :match,
                s(:send,
                  s(:lvar, :cipher), :name))),
            s(:lvasgn, :key_from_file,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                s(:lvar, :key_file_contents),
                s(:lvar, :passphrase))),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :key), :to_pem),
              s(:send,
                s(:lvar, :key_from_file), :to_pem)))))), nil))
