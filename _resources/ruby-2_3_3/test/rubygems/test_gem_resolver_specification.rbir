s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:class,
    s(:const, nil, :TestGemResolverSpecification),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:class,
        s(:const, nil, :TestSpec),
        s(:const,
          s(:const,
            s(:const, nil, :Gem), :Resolver), :Specification),
        s(:begin,
          s(:send, nil, :attr_writer,
            s(:sym, :source)),
          s(:send, nil, :attr_reader,
            s(:sym, :spec)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:super),
              s(:ivasgn, :@spec,
                s(:lvar, :spec)))))),
      s(:def, :test_install,
        s(:args),
        s(:begin,
          s(:lvasgn, :gemhome,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gemhome)),
              s(:str, "2"))),
          s(:block,
            s(:send, nil, :spec_fetcher),
            s(:args,
              s(:arg, :fetcher)),
            s(:send,
              s(:lvar, :fetcher), :gem,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a_spec,
            s(:send,
              s(:const, nil, :TestSpec), :new,
              s(:lvar, :a))),
          s(:send,
            s(:lvar, :a_spec), :source=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:send,
            s(:lvar, :a_spec), :install,
            s(:hash,
              s(:pair,
                s(:sym, :install_dir),
                s(:lvar, :gemhome)))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome),
              s(:str, "gems"),
              s(:send,
                s(:lvar, :a), :full_name))),
          s(:lvasgn, :expected,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gemhome),
              s(:str, "specifications"),
              s(:send,
                s(:lvar, :a), :spec_name))),
          s(:send, nil, :assert_equal,
            s(:lvar, :expected),
            s(:send,
              s(:send,
                s(:lvar, :a_spec), :spec), :loaded_from)))),
      s(:def, :test_installable_platform_eh,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :a_spec,
            s(:send,
              s(:const, nil, :TestSpec), :new,
              s(:lvar, :a))),
          s(:send, nil, :assert,
            s(:send,
              s(:lvar, :a_spec), :installable_platform?)),
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :util_spec,
                s(:str, "a"),
                s(:int, 1)),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :platform=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:array,
                    s(:str, "cpu"),
                    s(:str, "other_platform"),
                    s(:str, "1")))))),
          s(:lvasgn, :b_spec,
            s(:send,
              s(:const, nil, :TestSpec), :new,
              s(:lvar, :b))),
          s(:send, nil, :refute,
            s(:send,
              s(:lvar, :b_spec), :installable_platform?)))),
      s(:def, :test_source,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :util_spec,
              s(:str, "a"),
              s(:int, 1))),
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@gem_repo))),
          s(:lvasgn, :a_spec,
            s(:send,
              s(:const, nil, :TestSpec), :new,
              s(:lvar, :a))),
          s(:send,
            s(:lvar, :a_spec), :source=,
            s(:lvar, :source)),
          s(:send, nil, :assert_equal,
            s(:lvar, :source),
            s(:send,
              s(:lvar, :a_spec), :source)))))))
