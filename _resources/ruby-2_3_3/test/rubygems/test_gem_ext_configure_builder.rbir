s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/ext")),
  s(:class,
    s(:const, nil, :TestGemExtConfigureBuilder),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@makefile_body,
            s(:str, "clean:\n\t@echo ok\nall:\n\t@echo ok\ninstall:\n\t@echo ok")),
          s(:ivasgn, :@ext,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "ext"))),
          s(:ivasgn, :@dest_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "prefix"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@ext)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@dest_path)))),
      s(:def, :test_self_build,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :vc_windows?),
            s(:send, nil, :skip,
              s(:str, "test_self_build skipped on MS Windows (VC++)")), nil),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@ext),
                s(:str, "./configure")),
              s(:str, "w")),
            s(:args,
              s(:arg, :configure)),
            s(:send,
              s(:lvar, :configure), :puts,
              s(:dstr,
                s(:str, "#!/bin/sh\necho \""),
                s(:begin,
                  s(:ivar, :@makefile_body)),
                s(:str, "\" > Makefile")))),
          s(:lvasgn, :output,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@ext)),
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :ConfigureBuilder), :build,
              s(:nil),
              s(:nil),
              s(:ivar, :@dest_path),
              s(:lvar, :output))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^current directory:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:str, "sh ./configure --prefix="),
              s(:begin,
                s(:ivar, :@dest_path))),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^current directory:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_contains_make_command,
            s(:str, "clean"),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^ok$"),
              s(:regopt, :m)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^current directory:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_contains_make_command,
            s(:str, ""),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^ok$"),
              s(:regopt, :m)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^current directory:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_contains_make_command,
            s(:str, "install"),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^ok$"),
              s(:regopt, :m)),
            s(:send,
              s(:lvar, :output), :shift)))),
      s(:def, :test_self_build_fail,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :vc_windows?),
            s(:send, nil, :skip,
              s(:str, "test_self_build_fail skipped on MS Windows (VC++)")), nil),
          s(:lvasgn, :output,
            s(:array)),
          s(:lvasgn, :error,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const, nil, :Gem), :InstallError)),
              s(:args),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:ivar, :@ext)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Ext), :ConfigureBuilder), :build,
                  s(:nil),
                  s(:nil),
                  s(:ivar, :@dest_path),
                  s(:lvar, :output))))),
          s(:lvasgn, :shell_error_msg,
            s(:regexp,
              s(:str, "(\\./configure: .*)|((?:Can't|cannot) open \\./configure(?:: No such file or directory)?)"),
              s(:regopt))),
          s(:lvasgn, :sh_prefix_configure,
            s(:str, "sh ./configure --prefix=")),
          s(:send, nil, :assert_match,
            s(:str, "configure failed"),
            s(:send,
              s(:lvar, :error), :message)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "^current directory:"),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_equal,
            s(:dstr,
              s(:begin,
                s(:lvar, :sh_prefix_configure)),
              s(:begin,
                s(:ivar, :@dest_path))),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:lvar, :shell_error_msg)),
              s(:regopt)),
            s(:send,
              s(:lvar, :output), :shift)),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :output), :empty?)))),
      s(:def, :test_self_build_has_makefile,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:send, nil, :vc_windows?),
              s(:send,
                s(:send, nil, :nmake_found?), :!)),
            s(:send, nil, :skip,
              s(:str, "test_self_build_has_makefile skipped - nmake not found")), nil),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@ext),
                s(:str, "Makefile")),
              s(:str, "w")),
            s(:args,
              s(:arg, :makefile)),
            s(:send,
              s(:lvar, :makefile), :puts,
              s(:ivar, :@makefile_body))),
          s(:lvasgn, :output,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@ext)),
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :ConfigureBuilder), :build,
              s(:nil),
              s(:nil),
              s(:ivar, :@dest_path),
              s(:lvar, :output))),
          s(:send, nil, :assert_contains_make_command,
            s(:str, "clean"),
            s(:send,
              s(:lvar, :output), :[],
              s(:int, 1))),
          s(:send, nil, :assert_contains_make_command,
            s(:str, ""),
            s(:send,
              s(:lvar, :output), :[],
              s(:int, 4))),
          s(:send, nil, :assert_contains_make_command,
            s(:str, "install"),
            s(:send,
              s(:lvar, :output), :[],
              s(:int, 7))))))))
