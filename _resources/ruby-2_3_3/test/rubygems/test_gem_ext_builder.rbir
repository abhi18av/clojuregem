s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/test_case")),
  s(:send, nil, :require,
    s(:str, "rubygems/ext")),
  s(:send, nil, :require,
    s(:str, "rubygems/installer")),
  s(:class,
    s(:const, nil, :TestGemExtBuilder),
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@ext,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "ext"))),
          s(:ivasgn, :@dest_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "prefix"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@ext)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@dest_path)),
          s(:ivasgn, :@orig_DESTDIR,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "DESTDIR"))),
          s(:ivasgn, :@spec,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:ivasgn, :@builder,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :Builder), :new,
              s(:ivar, :@spec),
              s(:str, ""))))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "DESTDIR"),
            s(:ivar, :@orig_DESTDIR)),
          s(:zsuper))),
      s(:def, :test_class_make,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "DESTDIR"),
            s(:str, "destination")),
          s(:lvasgn, :results,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@ext)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :open,
                  s(:str, "Makefile"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:dstr,
                    s(:str, "all:\n"),
                    s(:str, "\t@"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :ruby)),
                    s(:str, " -e \"puts %Q{all: \#{ENV['DESTDIR']}}\"\n"),
                    s(:str, "\n"),
                    s(:str, "clean:\n"),
                    s(:str, "\t@"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :ruby)),
                    s(:str, " -e \"puts %Q{clean: \#{ENV['DESTDIR']}}\"\n"),
                    s(:str, "\n"),
                    s(:str, "install:\n"),
                    s(:str, "\t@"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :ruby)),
                    s(:str, " -e \"puts %Q{install: \#{ENV['DESTDIR']}}\"\n")))),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Ext), :Builder), :make,
                s(:ivar, :@dest_path),
                s(:lvar, :results)))),
          s(:lvasgn, :results,
            s(:send,
              s(:lvar, :results), :join,
              s(:str, "\n"))),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :>,
              s(:str, "2.0")),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" clean$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\"$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" install$"),
                  s(:regopt)),
                s(:lvar, :results))),
            s(:begin,
              s(:send, nil, :refute_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" clean$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :refute_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\"$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :refute_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" install$"),
                  s(:regopt)),
                s(:lvar, :results)))),
          s(:if,
            s(:send,
              s(:regexp,
                s(:str, "nmake"),
                s(:regopt)), :!~,
              s(:lvar, :results)),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^clean: destination$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^all: destination$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^install: destination$"),
                  s(:regopt)),
                s(:lvar, :results))), nil))),
      s(:def, :test_class_make_no_clean,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "DESTDIR"),
            s(:str, "destination")),
          s(:lvasgn, :results,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@ext)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :open,
                  s(:str, "Makefile"),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :puts,
                  s(:dstr,
                    s(:str, "all:\n"),
                    s(:str, "\t@"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :ruby)),
                    s(:str, " -e \"puts %Q{all: \#{ENV['DESTDIR']}}\"\n"),
                    s(:str, "\n"),
                    s(:str, "install:\n"),
                    s(:str, "\t@"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :ruby)),
                    s(:str, " -e \"puts %Q{install: \#{ENV['DESTDIR']}}\"\n")))),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Ext), :Builder), :make,
                s(:ivar, :@dest_path),
                s(:lvar, :results)))),
          s(:lvasgn, :results,
            s(:send,
              s(:lvar, :results), :join,
              s(:str, "\n"))),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :>,
              s(:str, "2.0")),
            s(:begin,
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" clean$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\"$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" install$"),
                  s(:regopt)),
                s(:lvar, :results))),
            s(:begin,
              s(:send, nil, :refute_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" clean$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :refute_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\"$"),
                  s(:regopt)),
                s(:lvar, :results)),
              s(:send, nil, :refute_match,
                s(:regexp,
                  s(:str, "\"DESTDIR="),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "DESTDIR"))),
                  s(:str, "\" install$"),
                  s(:regopt)),
                s(:lvar, :results)))))),
      s(:def, :test_build_extensions,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@spec), :extensions), :<<,
            s(:str, "ext/extconf.rb")),
          s(:lvasgn, :ext_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :gem_dir),
              s(:str, "ext"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :ext_dir)),
          s(:lvasgn, :extconf_rb,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :ext_dir),
              s(:str, "extconf.rb"))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :extconf_rb),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:dstr,
                s(:str, "        require 'mkmf'\n"),
                s(:str, "\n"),
                s(:str, "        create_makefile 'a'\n")))),
          s(:lvasgn, :ext_lib_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :ext_dir),
              s(:str, "lib"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:lvar, :ext_lib_dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :ext_lib_dir),
              s(:str, "a.rb"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :ext_lib_dir),
              s(:str, "a"))),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :ext_lib_dir),
              s(:str, "a"),
              s(:str, "b.rb"))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@builder), :build_extensions)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:ivar, :@spec), :extension_dir)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:ivar, :@spec), :gem_build_complete_path)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :extension_dir),
              s(:str, "gem_make.out"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :extension_dir),
              s(:str, "a.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :gem_dir),
              s(:str, "lib"),
              s(:str, "a.rb"))),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :gem_dir),
              s(:str, "lib"),
              s(:str, "a"),
              s(:str, "b.rb"))))),
      s(:def, :test_build_extensions_with_gemhome_with_space,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:send, nil, :win_platform?),
              s(:send,
                s(:const, nil, :RUBY_VERSION), :<=,
                s(:str, "2.0"))),
            s(:send, nil, :skip,
              s(:str, "gemhome with spaces does not work with Ruby 1.9.x on Windows")), nil),
          s(:lvasgn, :new_gemhome,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gem home"))),
          s(:send,
            s(:const, nil, :File), :rename,
            s(:ivar, :@gemhome),
            s(:lvar, :new_gemhome)),
          s(:ivasgn, :@gemhome,
            s(:lvar, :new_gemhome)),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:ivar, :@gemhome)),
          s(:ivasgn, :@spec,
            s(:send, nil, :util_spec,
              s(:str, "a"))),
          s(:ivasgn, :@builder,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :Builder), :new,
              s(:ivar, :@spec),
              s(:str, ""))),
          s(:send, nil, :test_build_extensions))),
      s(:def, :test_build_extensions_install_ext_only,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:sclass,
              s(:const, nil, :Gem),
              s(:begin,
                s(:alias,
                  s(:sym, :orig_install_extension_in_lib),
                  s(:sym, :install_extension_in_lib)),
                s(:send, nil, :remove_method,
                  s(:sym, :install_extension_in_lib)),
                s(:defs,
                  s(:const, nil, :Gem), :install_extension_in_lib,
                  s(:args),
                  s(:false)))),
            s(:send,
              s(:send,
                s(:ivar, :@spec), :extensions), :<<,
              s(:str, "ext/extconf.rb")),
            s(:lvasgn, :ext_dir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@spec), :gem_dir),
                s(:str, "ext"))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:lvar, :ext_dir)),
            s(:lvasgn, :extconf_rb,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :ext_dir),
                s(:str, "extconf.rb"))),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :extconf_rb),
                s(:str, "w")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :write,
                s(:dstr,
                  s(:str, "        require 'mkmf'\n"),
                  s(:str, "\n"),
                  s(:str, "        create_makefile 'a'\n")))),
            s(:lvasgn, :ext_lib_dir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :ext_dir),
                s(:str, "lib"))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir,
              s(:lvar, :ext_lib_dir)),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :ext_lib_dir),
                s(:str, "a.rb"))),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :ext_lib_dir),
                s(:str, "a"))),
            s(:send,
              s(:const, nil, :FileUtils), :touch,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :ext_lib_dir),
                s(:str, "a"),
                s(:str, "b.rb"))),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@builder), :build_extensions)),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:ivar, :@spec), :extension_dir)),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:ivar, :@spec), :gem_build_complete_path)),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@spec), :extension_dir),
                s(:str, "gem_make.out"))),
            s(:send, nil, :assert_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@spec), :extension_dir),
                s(:str, "a.rb"))),
            s(:send, nil, :refute_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@spec), :gem_dir),
                s(:str, "lib"),
                s(:str, "a.rb"))),
            s(:send, nil, :refute_path_exists,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@spec), :gem_dir),
                s(:str, "lib"),
                s(:str, "a"),
                s(:str, "b.rb")))),
          s(:sclass,
            s(:const, nil, :Gem),
            s(:begin,
              s(:send, nil, :remove_method,
                s(:sym, :install_extension_in_lib)),
              s(:alias,
                s(:sym, :install_extension_in_lib),
                s(:sym, :orig_install_extension_in_lib)))))),
      s(:def, :test_build_extensions_none,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@builder), :build_extensions)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :extension_dir),
              s(:str, "gem_make.out"))))),
      s(:def, :test_build_extensions_rebuild_failure,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:ivar, :@spec), :extension_dir)),
          s(:send,
            s(:const, nil, :FileUtils), :touch,
            s(:send,
              s(:ivar, :@spec), :gem_build_complete_path)),
          s(:send,
            s(:send,
              s(:ivar, :@spec), :extensions), :<<,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_raises,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :BuildError)),
            s(:args),
            s(:block,
              s(:send, nil, :use_ui,
                s(:ivar, :@ui)),
              s(:args),
              s(:send,
                s(:ivar, :@builder), :build_extensions))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:ivar, :@spec), :gem_build_complete_path)))),
      s(:def, :test_build_extensions_extconf_bad,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@spec), :extensions), :<<,
            s(:str, "extconf.rb")),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:ivar, :@spec), :gem_dir)),
          s(:lvasgn, :e,
            s(:block,
              s(:send, nil, :assert_raises,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Ext), :BuildError)),
              s(:args),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:ivar, :@ui)),
                s(:args),
                s(:send,
                  s(:ivar, :@builder), :build_extensions)))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\AERROR: Failed to build gem native extension.$"),
              s(:regopt)),
            s(:send,
              s(:lvar, :e), :message)),
          s(:send, nil, :assert_equal,
            s(:str, "Building native extensions.  This could take a while...\n"),
            s(:send,
              s(:ivar, :@ui), :output)),
          s(:send, nil, :assert_equal,
            s(:str, ""),
            s(:send,
              s(:ivar, :@ui), :error)),
          s(:lvasgn, :gem_make_out,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :extension_dir),
              s(:str, "gem_make.out"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:send,
                    s(:const, nil, :Gem), :ruby))),
              s(:str, ".* extconf\\.rb"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :gem_make_out))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, ": No such file"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :gem_make_out))),
          s(:send, nil, :refute_path_exists,
            s(:send,
              s(:ivar, :@spec), :gem_build_complete_path)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :gem_make_out)), :include?,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :ruby)),
                s(:str, ":"))), nil,
            s(:send, nil, :skip,
              s(:str, "Gem.ruby is not the name of the binary being run in the end"))),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:send,
                    s(:const, nil, :Gem), :ruby))),
              s(:str, ": No such file"),
              s(:regopt)),
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :gem_make_out))))),
      s(:def, :test_build_extensions_unsupported,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send,
                s(:ivar, :@spec), :gem_dir)),
            s(:lvasgn, :gem_make_out,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@spec), :extension_dir),
                s(:str, "gem_make.out"))),
            s(:send,
              s(:send,
                s(:ivar, :@spec), :extensions), :<<,
              s(:nil)),
            s(:lvasgn, :e,
              s(:block,
                s(:send, nil, :assert_raises,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Ext), :BuildError)),
                s(:args),
                s(:block,
                  s(:send, nil, :use_ui,
                    s(:ivar, :@ui)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@builder), :build_extensions)))),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "^\\s*No builder for extension ''$"),
                s(:regopt)),
              s(:send,
                s(:lvar, :e), :message)),
            s(:send, nil, :assert_equal,
              s(:str, "Building native extensions.  This could take a while...\n"),
              s(:send,
                s(:ivar, :@ui), :output)),
            s(:send, nil, :assert_equal,
              s(:str, ""),
              s(:send,
                s(:ivar, :@ui), :error)),
            s(:send, nil, :assert_equal,
              s(:str, "No builder for extension ''\n"),
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :gem_make_out))),
            s(:send, nil, :refute_path_exists,
              s(:send,
                s(:ivar, :@spec), :gem_build_complete_path))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_f,
            s(:lvar, :gem_make_out)))),
      s(:def, :test_build_extensions_with_build_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :args,
            s(:array,
              s(:str, "--aa"),
              s(:str, "--bb"))),
          s(:send,
            s(:ivar, :@builder), :build_args=,
            s(:lvar, :args)),
          s(:send,
            s(:send,
              s(:ivar, :@spec), :extensions), :<<,
            s(:str, "extconf.rb")),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:ivar, :@spec), :gem_dir)),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:ivar, :@spec), :gem_dir),
                s(:str, "extconf.rb")),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:dstr,
                s(:str, "        puts \"IN EXTCONF\"\n"),
                s(:str, "        extconf_args = File.join File.dirname(__FILE__), 'extconf_args'\n"),
                s(:str, "        File.open extconf_args, 'w' do |f|\n"),
                s(:str, "          f.puts ARGV.inspect\n"),
                s(:str, "        end\n"),
                s(:str, "\n"),
                s(:str, "        File.open 'Makefile', 'w' do |f|\n"),
                s(:str, "          f.puts \"clean:\\n\\techo cleaned\"\n"),
                s(:str, "          f.puts \"default:\\n\\techo built\"\n"),
                s(:str, "          f.puts \"install:\\n\\techo installed\"\n"),
                s(:str, "        end\n")))),
          s(:block,
            s(:send, nil, :use_ui,
              s(:ivar, :@ui)),
            s(:args),
            s(:send,
              s(:ivar, :@builder), :build_extensions)),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:ivar, :@spec), :gem_dir),
              s(:str, "extconf_args"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :args), :inspect),
            s(:send,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :path)), :strip)),
          s(:send, nil, :assert_path_exists,
            s(:send,
              s(:ivar, :@spec), :extension_dir)))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :build_info_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "build_info"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :build_info_dir)),
          s(:lvasgn, :build_info_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :build_info_dir),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:ivar, :@spec), :full_name)),
                s(:str, ".info")))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :build_info_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "--with-foo-dir=/nonexistent"))),
          s(:lvasgn, :builder,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :Builder), :new,
              s(:ivar, :@spec))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "--with-foo-dir=/nonexistent")),
            s(:send,
              s(:lvar, :builder), :build_args)))),
      s(:def, :test_initialize_build_args,
        s(:args),
        s(:begin,
          s(:lvasgn, :builder,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :Builder), :new,
              s(:ivar, :@spec),
              s(:array,
                s(:str, "--with-foo-dir=/nonexistent")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "--with-foo-dir=/nonexistent")),
            s(:send,
              s(:lvar, :builder), :build_args)))))))
