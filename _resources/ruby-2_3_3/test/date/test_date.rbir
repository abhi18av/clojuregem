s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "date")),
  s(:class,
    s(:const, nil, :DateSub),
    s(:const, nil, :Date), nil),
  s(:class,
    s(:const, nil, :DateTimeSub),
    s(:const, nil, :DateTime), nil),
  s(:class,
    s(:const, nil, :TestDate),
    s(:const,
      s(:const,
        s(:const, nil, :Test), :Unit), :TestCase),
    s(:begin,
      s(:def, :test__const,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const,
                s(:const, nil, :Date), :MONTHNAMES), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "January"),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :MONTHNAMES), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 13),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :MONTHNAMES), :size)),
          s(:send, nil, :assert_equal,
            s(:str, "Sunday"),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :DAYNAMES), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :DAYNAMES), :size)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:const,
                s(:const, nil, :Date), :ABBR_MONTHNAMES), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:str, "Jan"),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :ABBR_MONTHNAMES), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 13),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :ABBR_MONTHNAMES), :size)),
          s(:send, nil, :assert_equal,
            s(:str, "Sun"),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :ABBR_DAYNAMES), :[],
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 7),
            s(:send,
              s(:const,
                s(:const, nil, :Date), :ABBR_DAYNAMES), :size)),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Date), :MONTHNAMES), :frozen?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Date), :MONTHNAMES), :[],
                s(:int, 1)), :frozen?)),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Date), :DAYNAMES), :frozen?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Date), :DAYNAMES), :[],
                s(:int, 0)), :frozen?)),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Date), :ABBR_MONTHNAMES), :frozen?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Date), :ABBR_MONTHNAMES), :[],
                s(:int, 1)), :frozen?)),
          s(:send, nil, :assert,
            s(:send,
              s(:const,
                s(:const, nil, :Date), :ABBR_DAYNAMES), :frozen?)),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Date), :ABBR_DAYNAMES), :[],
                s(:int, 0)), :frozen?)))),
      s(:def, :test_sub,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :DateSub), :new)),
          s(:lvasgn, :dt,
            s(:send,
              s(:const, nil, :DateTimeSub), :new)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:send,
              s(:const, nil, :DateSub), :today)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:send,
              s(:const, nil, :DateTimeSub), :now)),
          s(:send, nil, :assert_equal,
            s(:str, "-4712-01-01"),
            s(:send,
              s(:lvar, :d), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "-4712-01-01T00:00:00+00:00"),
            s(:send,
              s(:lvar, :dt), :to_s)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :+,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :-,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :>>,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :<<,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :succ)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :next)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :italy)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :england)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :julian)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :d2,
            s(:send,
              s(:lvar, :d), :gregorian)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :d))),
          s(:lvasgn, :d2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d2),
            s(:lvar, :d)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateSub),
            s(:lvar, :d2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :+,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :-,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :>>,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :<<,
              s(:int, 1))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :succ)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :next)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :italy)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :england)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :julian)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :dt2,
            s(:send,
              s(:lvar, :dt), :gregorian)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:lvar, :dt))),
          s(:lvasgn, :dt2,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:send, nil, :assert_equal,
            s(:lvar, :dt2),
            s(:lvar, :dt)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTimeSub),
            s(:lvar, :dt2)))),
      s(:def, :test_eql_p,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Date), :jd,
              s(:int, 0))),
          s(:lvasgn, :d2,
            s(:send,
              s(:const, nil, :Date), :jd,
              s(:int, 0))),
          s(:lvasgn, :dt,
            s(:send,
              s(:const, nil, :DateTime), :jd,
              s(:int, 0))),
          s(:lvasgn, :dt2,
            s(:send,
              s(:const, nil, :DateTime), :jd,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:lvar, :d2)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :d),
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:lvar, :dt),
            s(:lvar, :dt2)),
          s(:send, nil, :assert_not_equal,
            s(:lvar, :dt),
            s(:int, 0)),
          s(:send, nil, :assert_equal,
            s(:lvar, :d),
            s(:lvar, :dt)),
          s(:send, nil, :assert_equal,
            s(:lvar, :d2),
            s(:lvar, :dt2)))),
      s(:def, :test_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :h,
            s(:hash)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :Date), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 23)),
            s(:int, 0)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :Date), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 24)),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :Date), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 25)),
            s(:int, 2)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :Date), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 25)),
            s(:int, 9)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:lvar, :h), :[],
              s(:send,
                s(:const, nil, :Date), :new,
                s(:int, 1999),
                s(:int, 5),
                s(:int, 25)))),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:lvar, :h), :[],
              s(:send,
                s(:const, nil, :DateTime), :new,
                s(:int, 1999),
                s(:int, 5),
                s(:int, 25)))),
          s(:lvasgn, :h,
            s(:hash)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :DateTime), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 23)),
            s(:int, 0)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :DateTime), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 24)),
            s(:int, 1)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :DateTime), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 25)),
            s(:int, 2)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:send,
              s(:const, nil, :DateTime), :new,
              s(:int, 1999),
              s(:int, 5),
              s(:int, 25)),
            s(:int, 9)),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:lvar, :h), :size)),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:lvar, :h), :[],
              s(:send,
                s(:const, nil, :Date), :new,
                s(:int, 1999),
                s(:int, 5),
                s(:int, 25)))),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:lvar, :h), :[],
              s(:send,
                s(:const, nil, :DateTime), :new,
                s(:int, 1999),
                s(:int, 5),
                s(:int, 25)))))),
      s(:def, :test_freeze,
        s(:args),
        s(:begin,
          s(:lvasgn, :d,
            s(:send,
              s(:const, nil, :Date), :new)),
          s(:send,
            s(:lvar, :d), :freeze),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :d), :frozen?)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Fixnum),
            s(:send,
              s(:lvar, :d), :yday)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:lvar, :d), :to_s)))),
      s(:def, :test_submillisecond_comparison,
        s(:args),
        s(:begin,
          s(:lvasgn, :d1,
            s(:send,
              s(:const, nil, :DateTime), :new,
              s(:int, 2013),
              s(:int, 12),
              s(:int, 6),
              s(:int, 0),
              s(:int, 0),
              s(:send, nil, :Rational,
                s(:int, 1),
                s(:int, 10000)))),
          s(:lvasgn, :d2,
            s(:send,
              s(:const, nil, :DateTime), :new,
              s(:int, 2013),
              s(:int, 12),
              s(:int, 6),
              s(:int, 0),
              s(:int, 0),
              s(:send, nil, :Rational,
                s(:int, 2),
                s(:int, 10000)))),
          s(:send, nil, :assert_equal,
            s(:int, -1),
            s(:send,
              s(:lvar, :d1), :<=>,
              s(:lvar, :d2))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:lvar, :d1), :<=>,
              s(:lvar, :d1))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:lvar, :d2), :<=>,
              s(:lvar, :d1))))))))
