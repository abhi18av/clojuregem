s(:begin,
  s(:send, nil, :require,
    s(:str, "test/unit")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:module,
    s(:const, nil, :TestParallel),
    s(:begin,
      s(:casgn, nil, :PARALLEL_RB,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:str, "(string)"))),
          s(:str, "/../lib/test/unit/parallel.rb"))),
      s(:casgn, nil, :TESTS,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:str, "(string)"))),
          s(:str, "/tests_for_parallel"))),
      s(:class,
        s(:const, nil, :TestParallelWorker),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :setup,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :i),
                  s(:ivasgn, :@worker_in)),
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@worker_out),
                  s(:lvasgn, :o)),
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:ivasgn, :@worker_pid,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :ruby))),
                  s(:const, nil, :PARALLEL_RB),
                  s(:str, "--ruby"),
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :ruby)), :join,
                    s(:str, " ")),
                  s(:str, "-j"),
                  s(:str, "t1"),
                  s(:str, "-v"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :out),
                      s(:lvar, :o)),
                    s(:pair,
                      s(:sym, :in),
                      s(:lvar, :i))))),
              s(:send,
                s(:array,
                  s(:lvar, :i),
                  s(:lvar, :o)), :each,
                s(:block_pass,
                  s(:sym, :close))))),
          s(:def, :teardown,
            s(:args),
            s(:ensure,
              s(:if,
                s(:and,
                  s(:ivar, :@worker_pid),
                  s(:ivar, :@worker_in)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:kwbegin,
                        s(:rescue,
                          s(:send,
                            s(:ivar, :@worker_in), :puts,
                            s(:str, "quit")),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :IOError),
                              s(:const,
                                s(:const, nil, :Errno), :EPIPE)), nil, nil), nil)),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Timeout), :timeout,
                          s(:int, 2)),
                        s(:args),
                        s(:send,
                          s(:const, nil, :Process), :waitpid,
                          s(:ivar, :@worker_pid)))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Timeout), :Error)), nil,
                      s(:kwbegin,
                        s(:rescue,
                          s(:send,
                            s(:const, nil, :Process), :kill,
                            s(:sym, :KILL),
                            s(:ivar, :@worker_pid)),
                          s(:resbody,
                            s(:array,
                              s(:const,
                                s(:const, nil, :Errno), :ESRCH)), nil, nil), nil))), nil)), nil),
              s(:begin,
                s(:send,
                  s(:ivar, :@worker_in), :close),
                s(:send,
                  s(:ivar, :@worker_out), :close)))),
          s(:def, :test_run,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 10)),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^ready"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send,
                  s(:ivar, :@worker_in), :puts,
                  s(:dstr,
                    s(:str, "run "),
                    s(:begin,
                      s(:const, nil, :TESTS)),
                    s(:str, "/ptest_first.rb test"))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^okay"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^p"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^done"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^ready"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets))))),
          s(:def, :test_run_multiple_testcase_in_one_file,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 10)),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^ready"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send,
                  s(:ivar, :@worker_in), :puts,
                  s(:dstr,
                    s(:str, "run "),
                    s(:begin,
                      s(:const, nil, :TESTS)),
                    s(:str, "/ptest_second.rb test"))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^okay"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^p"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^done"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^p"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^done"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^ready"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets))))),
          s(:def, :test_accept_run_command_multiple_times,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 10)),
              s(:args),
              s(:begin,
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^ready"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send,
                  s(:ivar, :@worker_in), :puts,
                  s(:dstr,
                    s(:str, "run "),
                    s(:begin,
                      s(:const, nil, :TESTS)),
                    s(:str, "/ptest_first.rb test"))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^okay"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^p"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^done"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^ready"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send,
                  s(:ivar, :@worker_in), :puts,
                  s(:dstr,
                    s(:str, "run "),
                    s(:begin,
                      s(:const, nil, :TESTS)),
                    s(:str, "/ptest_second.rb test"))),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^okay"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^p"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^done"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^p"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^done"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^ready"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@worker_out), :gets))))),
          s(:def, :test_p,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 10)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@worker_in), :puts,
                  s(:dstr,
                    s(:str, "run "),
                    s(:begin,
                      s(:const, nil, :TESTS)),
                    s(:str, "/ptest_first.rb test"))),
                s(:while,
                  s(:lvasgn, :buf,
                    s(:send,
                      s(:ivar, :@worker_out), :gets)),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^p (.+?)$"),
                        s(:regopt)),
                      s(:lvar, :buf)),
                    s(:break), nil)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "TestA#test_nothing_test = \\d+\\.\\d+ s = \\.\\n"),
                    s(:regopt)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:nth_ref, 1), :chomp), :unpack,
                      s(:str, "m")), :[],
                    s(:int, 0)))))),
          s(:def, :test_done,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 10)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@worker_in), :puts,
                  s(:dstr,
                    s(:str, "run "),
                    s(:begin,
                      s(:const, nil, :TESTS)),
                    s(:str, "/ptest_forth.rb test"))),
                s(:block,
                  s(:send,
                    s(:int, 7), :times),
                  s(:args),
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:lvasgn, :buf,
                  s(:send,
                    s(:ivar, :@worker_out), :gets)),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^done (.+?)$"),
                    s(:regopt)),
                  s(:lvar, :buf)),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^done (.+?)$"),
                    s(:regopt)),
                  s(:lvar, :buf)),
                s(:lvasgn, :result,
                  s(:send,
                    s(:const, nil, :Marshal), :load,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :chomp), :unpack,
                        s(:str, "m")), :[],
                      s(:int, 0)))),
                s(:send, nil, :assert_equal,
                  s(:int, 5),
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 0))),
                s(:send, nil, :assert_equal,
                  s(:int, 2),
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 1))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Array),
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 2))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Array),
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 3))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Array),
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 4))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Array),
                  s(:send,
                    s(:send,
                      s(:lvar, :result), :[],
                      s(:int, 2)), :[],
                    s(:int, 1))),
                s(:send, nil, :assert_kind_of,
                  s(:const,
                    s(:const, nil, :MiniTest), :Assertion),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :result), :[],
                        s(:int, 2)), :[],
                      s(:int, 0)), :[],
                    s(:int, 2))),
                s(:send, nil, :assert_kind_of,
                  s(:const,
                    s(:const, nil, :MiniTest), :Skip),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :result), :[],
                        s(:int, 2)), :[],
                      s(:int, 1)), :[],
                    s(:int, 2))),
                s(:send, nil, :assert_kind_of,
                  s(:const,
                    s(:const, nil, :MiniTest), :Skip),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :result), :[],
                        s(:int, 2)), :[],
                      s(:int, 2)), :[],
                    s(:int, 2))),
                s(:send, nil, :assert_kind_of,
                  s(:const, nil, :Exception),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :result), :[],
                        s(:int, 2)), :[],
                      s(:int, 3)), :[],
                    s(:int, 2))),
                s(:send, nil, :assert_equal,
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 5)),
                  s(:str, "TestE"))))),
          s(:def, :test_quit,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Timeout), :timeout,
                s(:int, 10)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@worker_in), :puts,
                  s(:str, "quit")),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "^bye$"),
                    s(:regopt, :m)),
                  s(:send,
                    s(:ivar, :@worker_out), :read))))))),
      s(:class,
        s(:const, nil, :TestParallel),
        s(:const,
          s(:const,
            s(:const, nil, :Test), :Unit), :TestCase),
        s(:begin,
          s(:def, :spawn_runner,
            s(:args,
              s(:restarg, :opt_args)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@test_out),
                  s(:lvasgn, :o)),
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:ivasgn, :@test_pid,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :ruby))),
                  s(:send,
                    s(:const, nil, :TESTS), :+,
                    s(:str, "/runner.rb")),
                  s(:str, "--ruby"),
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :ruby)), :join,
                    s(:str, " ")),
                  s(:str, "-j"),
                  s(:str, "t1"),
                  s(:splat,
                    s(:lvar, :opt_args)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :out),
                      s(:lvar, :o)),
                    s(:pair,
                      s(:sym, :err),
                      s(:lvar, :o))))),
              s(:send,
                s(:lvar, :o), :close))),
          s(:def, :teardown,
            s(:args),
            s(:kwbegin,
              s(:ensure,
                s(:rescue,
                  s(:if,
                    s(:ivar, :@test_pid),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Timeout), :timeout,
                        s(:int, 2)),
                      s(:args),
                      s(:send,
                        s(:const, nil, :Process), :waitpid,
                        s(:ivar, :@test_pid))), nil),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Timeout), :Error)), nil,
                    s(:if,
                      s(:ivar, :@test_pid),
                      s(:send,
                        s(:const, nil, :Process), :kill,
                        s(:sym, :KILL),
                        s(:ivar, :@test_pid)), nil)), nil),
                s(:if,
                  s(:ivar, :@test_out),
                  s(:send,
                    s(:ivar, :@test_out), :close), nil)))),
          s(:def, :test_ignore_jzero,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@test_out),
                  s(:lvasgn, :o)),
                s(:send,
                  s(:const, nil, :IO), :pipe)),
              s(:ivasgn, :@test_pid,
                s(:send, nil, :spawn,
                  s(:splat,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :ruby))),
                  s(:send,
                    s(:const, nil, :TESTS), :+,
                    s(:str, "/runner.rb")),
                  s(:str, "--ruby"),
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :[],
                      s(:sym, :ruby)), :join,
                    s(:str, " ")),
                  s(:str, "-j"),
                  s(:str, "0"),
                  s(:hash,
                    s(:pair,
                      s(:sym, :out),
                      s(:const,
                        s(:const, nil, :File), :NULL)),
                    s(:pair,
                      s(:sym, :err),
                      s(:lvar, :o))))),
              s(:send,
                s(:lvar, :o), :close),
              s(:block,
                s(:send,
                  s(:const, nil, :Timeout), :timeout,
                  s(:int, 10)),
                s(:args),
                s(:send, nil, :assert_match,
                  s(:regexp,
                    s(:str, "Error: parameter of -j option should be greater than 0"),
                    s(:regopt)),
                  s(:send,
                    s(:ivar, :@test_out), :read))))),
          s(:def, :test_should_run_all_without_any_leaks,
            s(:args),
            s(:begin,
              s(:send, nil, :spawn_runner),
              s(:lvasgn, :buf,
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 10)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@test_out), :read))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^[SFE\\.]{9}$"),
                  s(:regopt)),
                s(:lvar, :buf)))),
          s(:def, :test_should_retry_failed_on_workers,
            s(:args),
            s(:begin,
              s(:send, nil, :spawn_runner),
              s(:lvasgn, :buf,
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 10)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@test_out), :read))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^Retrying\\.+$"),
                  s(:regopt)),
                s(:lvar, :buf)))),
          s(:def, :test_no_retry_option,
            s(:args),
            s(:begin,
              s(:send, nil, :spawn_runner,
                s(:str, "--no-retry")),
              s(:lvasgn, :buf,
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 10)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@test_out), :read))),
              s(:send, nil, :refute_match,
                s(:regexp,
                  s(:str, "^Retrying\\.+$"),
                  s(:regopt)),
                s(:lvar, :buf)),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "^ +\\d+\\) Failure:\\nTestD#test_fail_at_worker"),
                  s(:regopt)),
                s(:lvar, :buf)))),
          s(:def, :test_jobs_status,
            s(:args),
            s(:begin,
              s(:send, nil, :spawn_runner,
                s(:str, "--jobs-status")),
              s(:lvasgn, :buf,
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 10)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@test_out), :read))),
              s(:send, nil, :assert_match,
                s(:regexp,
                  s(:str, "\\d+=ptest_(first|second|third|forth) *"),
                  s(:regopt)),
                s(:lvar, :buf)))),
          s(:def, :test_separate,
            s(:args),
            s(:begin,
              s(:send, nil, :spawn_runner,
                s(:str, "--jobs-status"),
                s(:str, "--separate")),
              s(:lvasgn, :buf,
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:int, 10)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@test_out), :read))),
              s(:send, nil, :assert,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :buf), :scan,
                          s(:regexp,
                            s(:str, "(\\d+?)[:=]"),
                            s(:regopt))), :flatten), :uniq), :size), :>,
                  s(:int, 1))))))))))
