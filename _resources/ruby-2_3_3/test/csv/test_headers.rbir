s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:class,
    s(:const,
      s(:const, nil, :TestCSV), :Headers),
    s(:const, nil, :TestCSV),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :DifferentOFS)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@data,
            s(:send,
              s(:dstr,
                s(:str, "    first,second,third\n"),
                s(:str, "    A,B,C\n"),
                s(:str, "    1,2,3\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, ""))))),
      s(:def, :test_first_row,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:sym, :first_row),
              s(:true)), :each),
          s(:args,
            s(:arg, :setting)),
          s(:begin,
            s(:lvasgn, :csv,
              s(:nil)),
            s(:block,
              s(:send, nil, :assert_nothing_raised,
                s(:const, nil, :Exception)),
              s(:args),
              s(:lvasgn, :csv,
                s(:send,
                  s(:const, nil, :CSV), :parse,
                  s(:ivar, :@data),
                  s(:hash,
                    s(:pair,
                      s(:sym, :headers),
                      s(:lvar, :setting)))))),
            s(:lvasgn, :row,
              s(:send,
                s(:lvar, :csv), :[],
                s(:int, 0))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :row)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :CSV), :Row),
              s(:lvar, :row)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:str, "first"),
                  s(:str, "A")),
                s(:array,
                  s(:str, "second"),
                  s(:str, "B")),
                s(:array,
                  s(:str, "third"),
                  s(:str, "C"))),
              s(:send,
                s(:lvar, :row), :to_a)),
            s(:lvasgn, :row,
              s(:send,
                s(:lvar, :csv), :[],
                s(:int, 1))),
            s(:send, nil, :assert_not_nil,
              s(:lvar, :row)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :CSV), :Row),
              s(:lvar, :row)),
            s(:send, nil, :assert_equal,
              s(:array,
                s(:array,
                  s(:str, "first"),
                  s(:str, "1")),
                s(:array,
                  s(:str, "second"),
                  s(:str, "2")),
                s(:array,
                  s(:str, "third"),
                  s(:str, "3"))),
              s(:send,
                s(:lvar, :row), :to_a)),
            s(:send, nil, :assert_nil,
              s(:send,
                s(:lvar, :csv), :[],
                s(:int, 2)))))),
      s(:def, :test_array_of_headers,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:ivar, :@data),
                s(:hash,
                  s(:pair,
                    s(:sym, :headers),
                    s(:array,
                      s(:sym, :my),
                      s(:sym, :new),
                      s(:sym, :headers))))))),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 0))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :my),
                s(:str, "first")),
              s(:array,
                s(:sym, :new),
                s(:str, "second")),
              s(:array,
                s(:sym, :headers),
                s(:str, "third"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 1))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :my),
                s(:str, "A")),
              s(:array,
                s(:sym, :new),
                s(:str, "B")),
              s(:array,
                s(:sym, :headers),
                s(:str, "C"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 2))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :my),
                s(:str, "1")),
              s(:array,
                s(:sym, :new),
                s(:str, "2")),
              s(:array,
                s(:sym, :headers),
                s(:str, "3"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:ivar, :@data),
                s(:hash,
                  s(:pair,
                    s(:sym, :headers),
                    s(:array,
                      s(:sym, :my),
                      s(:sym, :new),
                      s(:sym, :headers))),
                  s(:pair,
                    s(:sym, :return_headers),
                    s(:true)),
                  s(:pair,
                    s(:sym, :header_converters),
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args,
                        s(:arg, :h)),
                      s(:send,
                        s(:lvar, :h), :to_s))))))),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 0))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "my"),
                s(:sym, :my)),
              s(:array,
                s(:str, "new"),
                s(:sym, :new)),
              s(:array,
                s(:str, "headers"),
                s(:sym, :headers))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)))),
      s(:def, :test_csv_header_string,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:ivar, :@data),
                s(:hash,
                  s(:pair,
                    s(:sym, :headers),
                    s(:str, "my,new,headers")))))),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 0))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "my"),
                s(:str, "first")),
              s(:array,
                s(:str, "new"),
                s(:str, "second")),
              s(:array,
                s(:str, "headers"),
                s(:str, "third"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 1))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "my"),
                s(:str, "A")),
              s(:array,
                s(:str, "new"),
                s(:str, "B")),
              s(:array,
                s(:str, "headers"),
                s(:str, "C"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 2))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "my"),
                s(:str, "1")),
              s(:array,
                s(:str, "new"),
                s(:str, "2")),
              s(:array,
                s(:str, "headers"),
                s(:str, "3"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 3))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:ivar, :@data),
                s(:hash,
                  s(:pair,
                    s(:sym, :headers),
                    s(:str, "my,new,headers")),
                  s(:pair,
                    s(:sym, :return_headers),
                    s(:true)),
                  s(:pair,
                    s(:sym, :header_converters),
                    s(:sym, :symbol)))))),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 0))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :my),
                s(:str, "my")),
              s(:array,
                s(:sym, :new),
                s(:str, "new")),
              s(:array,
                s(:sym, :headers),
                s(:str, "headers"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)))),
      s(:def, :test_csv_header_string_inherits_separators,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:send,
                  s(:ivar, :@data), :tr,
                  s(:str, ","),
                  s(:str, "|")),
                s(:hash,
                  s(:pair,
                    s(:sym, :col_sep),
                    s(:str, "|")),
                  s(:pair,
                    s(:sym, :headers),
                    s(:str, "my|new|headers")))))),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 0))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "my"),
                s(:str, "first")),
              s(:array,
                s(:str, "new"),
                s(:str, "second")),
              s(:array,
                s(:str, "headers"),
                s(:str, "third"))),
            s(:send,
              s(:lvar, :row), :to_a)))),
      s(:def, :test_return_headers,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:ivar, :@data),
                s(:hash,
                  s(:pair,
                    s(:sym, :headers),
                    s(:true)),
                  s(:pair,
                    s(:sym, :return_headers),
                    s(:true)))))),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 0))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "first"),
                s(:str, "first")),
              s(:array,
                s(:str, "second"),
                s(:str, "second")),
              s(:array,
                s(:str, "third"),
                s(:str, "third"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 1))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "first"),
                s(:str, "A")),
              s(:array,
                s(:str, "second"),
                s(:str, "B")),
              s(:array,
                s(:str, "third"),
                s(:str, "C"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)),
          s(:lvasgn, :row,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 2))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "first"),
                s(:str, "1")),
              s(:array,
                s(:str, "second"),
                s(:str, "2")),
              s(:array,
                s(:str, "third"),
                s(:str, "3"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 3))))),
      s(:def, :test_converters,
        s(:args),
        s(:begin,
          s(:lvasgn, :data,
            s(:send,
              s(:dstr,
                s(:str, "    1,2,3\n"),
                s(:str, "    1,2,3\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:lvar, :data),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :return_headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :converters),
                  s(:sym, :numeric))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "1"),
                s(:str, "1")),
              s(:array,
                s(:str, "2"),
                s(:str, "2")),
              s(:array,
                s(:str, "3"),
                s(:str, "3"))),
            s(:send,
              s(:send,
                s(:lvar, :csv), :[],
                s(:int, 0)), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "1"),
                s(:int, 1)),
              s(:array,
                s(:str, "2"),
                s(:int, 2)),
              s(:array,
                s(:str, "3"),
                s(:int, 3))),
            s(:send,
              s(:send,
                s(:lvar, :csv), :[],
                s(:int, 1)), :to_a)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:lvar, :data),
                s(:hash,
                  s(:pair,
                    s(:sym, :headers),
                    s(:true)),
                  s(:pair,
                    s(:sym, :return_headers),
                    s(:true)),
                  s(:pair,
                    s(:sym, :converters),
                    s(:sym, :numeric)),
                  s(:pair,
                    s(:sym, :header_converters),
                    s(:sym, :symbol)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :"1"),
                s(:str, "1")),
              s(:array,
                s(:sym, :"2"),
                s(:str, "2")),
              s(:array,
                s(:sym, :"3"),
                s(:str, "3"))),
            s(:send,
              s(:send,
                s(:lvar, :csv), :[],
                s(:int, 0)), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :"1"),
                s(:int, 1)),
              s(:array,
                s(:sym, :"2"),
                s(:int, 2)),
              s(:array,
                s(:sym, :"3"),
                s(:int, 3))),
            s(:send,
              s(:send,
                s(:lvar, :csv), :[],
                s(:int, 1)), :to_a)),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :csv), :[],
              s(:int, 2))))),
      s(:def, :test_builtin_downcase_converter,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:str, "One,TWO Three"),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :return_headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :header_converters),
                  s(:sym, :downcase))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "one"),
              s(:str, "two three")),
            s(:send,
              s(:lvar, :csv), :headers)))),
      s(:def, :test_builtin_symbol_converter,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:str, "One,TWO Three "),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :return_headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :header_converters),
                  s(:sym, :symbol))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :one),
              s(:sym, :two_three)),
            s(:send,
              s(:lvar, :csv), :headers)))),
      s(:def, :test_builtin_converters_with_blank_header,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:str, "one,,three"),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :return_headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :header_converters),
                  s(:array,
                    s(:sym, :downcase),
                    s(:sym, :symbol)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :one),
              s(:nil),
              s(:sym, :three)),
            s(:send,
              s(:lvar, :csv), :headers)))),
      s(:def, :test_custom_converter,
        s(:args),
        s(:begin,
          s(:lvasgn, :converter,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :header)),
              s(:send,
                s(:lvar, :header), :tr,
                s(:str, " "),
                s(:str, "_")))),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:str, "One,TWO Three"),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :return_headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :header_converters),
                  s(:lvar, :converter))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "One"),
              s(:str, "TWO_Three")),
            s(:send,
              s(:lvar, :csv), :headers)))),
      s(:def, :test_table_support,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:ivar, :@data),
                s(:hash,
                  s(:pair,
                    s(:sym, :headers),
                    s(:true)))))),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Table),
            s(:lvar, :csv)))),
      s(:def, :test_skip_blanks,
        s(:args),
        s(:begin,
          s(:ivasgn, :@data,
            s(:send,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "    A,B,C\n"),
                s(:str, "\n"),
                s(:str, "    1,2,3\n"),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "\n")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:str, "1"),
                s(:str, "2"),
                s(:str, "3")))),
          s(:block,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :skip_blanks),
                  s(:true)))),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :expected), :shift),
              s(:send,
                s(:lvar, :row), :fields))),
          s(:lvasgn, :expected,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:str, "1"),
                s(:str, "2"),
                s(:str, "3")))),
          s(:block,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :return_headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :skip_blanks),
                  s(:true)))),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :expected), :shift),
              s(:send,
                s(:lvar, :row), :fields))))),
      s(:def, :test_headers_reader,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_nil,
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:ivar, :@data)), :headers)),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:lvar, :csv), :headers)),
          s(:send,
            s(:lvar, :csv), :shift),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "first"),
              s(:str, "second"),
              s(:str, "third")),
            s(:send,
              s(:lvar, :csv), :headers)))),
      s(:def, :test_blank_row_bug_fix,
        s(:args),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@data), :+,
            s(:dstr,
              s(:str, "\n"),
              s(:begin,
                s(:ivar, :@data)))),
          s(:block,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)))),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :CSV), :Row),
              s(:lvar, :row))))))))
