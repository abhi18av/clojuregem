s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:class,
    s(:const,
      s(:const, nil, :TestCSV), :Row),
    s(:const, nil, :TestCSV),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :DifferentOFS)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@row,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C"),
                s(:str, "A"),
                s(:str, "A")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4)))))),
      s(:def, :test_initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :row,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:lvasgn, :row,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:nil),
                s(:int, 2)),
              s(:array,
                s(:nil),
                s(:int, 3))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:lvasgn, :row,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Row),
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:nil))),
            s(:send,
              s(:lvar, :row), :to_a)))),
      s(:def, :test_row_type,
        s(:args),
        s(:begin,
          s(:lvasgn, :row,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)),
          s(:lvasgn, :row,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:false))),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)),
          s(:lvasgn, :row,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:true))),
          s(:send, nil, :assert_predicate,
            s(:lvar, :row),
            s(:sym, :header_row?)),
          s(:send, nil, :assert_not_predicate,
            s(:lvar, :row),
            s(:sym, :field_row?)))),
      s(:def, :test_headers,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:array,
            s(:str, "A"),
            s(:str, "B"),
            s(:str, "C"),
            s(:str, "A"),
            s(:str, "A")),
          s(:send,
            s(:ivar, :@row), :headers))),
      s(:def, :test_field,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "B"))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@row), :[],
              s(:str, "B"))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@row), :field,
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@row), :field,
              s(:irange,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "Missing"))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@row), :field,
              s(:int, 10))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "A"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "A"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "A"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "A"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "A"),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "A"),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@row), :field,
              s(:str, "A"),
              s(:int, 5))))),
      s(:def, :test_fetch,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@row), :fetch,
              s(:str, "B"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :KeyError)),
            s(:args),
            s(:send,
              s(:ivar, :@row), :fetch,
              s(:str, "foo"))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:block,
              s(:send,
                s(:ivar, :@row), :fetch,
                s(:str, "foo")),
              s(:args,
                s(:arg, :header)),
              s(:if,
                s(:send,
                  s(:lvar, :header), :==,
                  s(:str, "foo")),
                s(:str, "bar"),
                s(:false)))),
          s(:send, nil, :assert_equal,
            s(:str, "bar"),
            s(:send,
              s(:ivar, :@row), :fetch,
              s(:str, "foo"),
              s(:str, "bar"))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :ArgumentError)),
            s(:args),
            s(:send,
              s(:ivar, :@row), :fetch,
              s(:str, "foo"),
              s(:str, "bar"),
              s(:str, "baz"))))),
      s(:def, :test_has_key?,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:true),
            s(:send,
              s(:ivar, :@row), :has_key?,
              s(:str, "B"))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:send,
              s(:ivar, :@row), :has_key?,
              s(:str, "foo"))))),
      s(:def, :test_set_field,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 100),
            s(:send,
              s(:ivar, :@row), :[]=,
              s(:str, "A"),
              s(:int, 100))),
          s(:send, nil, :assert_equal,
            s(:int, 300),
            s(:send,
              s(:ivar, :@row), :[]=,
              s(:int, 3),
              s(:int, 300))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :a),
              s(:sym, :b),
              s(:sym, :c)),
            s(:send,
              s(:ivar, :@row), :[]=,
              s(:str, "A"),
              s(:int, 4),
              s(:array,
                s(:sym, :a),
                s(:sym, :b),
                s(:sym, :c)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 100)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3)),
              s(:array,
                s(:str, "A"),
                s(:int, 300)),
              s(:array,
                s(:str, "A"),
                s(:array,
                  s(:sym, :a),
                  s(:sym, :b),
                  s(:sym, :c)))),
            s(:send,
              s(:ivar, :@row), :to_a)),
          s(:send, nil, :assert_equal,
            s(:str, "End"),
            s(:send,
              s(:ivar, :@row), :[]=,
              s(:int, 10),
              s(:str, "End"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 100)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3)),
              s(:array,
                s(:str, "A"),
                s(:int, 300)),
              s(:array,
                s(:str, "A"),
                s(:array,
                  s(:sym, :a),
                  s(:sym, :b),
                  s(:sym, :c))),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:str, "End"))),
            s(:send,
              s(:ivar, :@row), :to_a)),
          s(:send, nil, :assert_equal,
            s(:str, "New"),
            s(:send,
              s(:ivar, :@row), :[]=,
              s(:sym, :new),
              s(:str, "New"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 100)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3)),
              s(:array,
                s(:str, "A"),
                s(:int, 300)),
              s(:array,
                s(:str, "A"),
                s(:array,
                  s(:sym, :a),
                  s(:sym, :b),
                  s(:sym, :c))),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:str, "End")),
              s(:array,
                s(:sym, :new),
                s(:str, "New"))),
            s(:send,
              s(:ivar, :@row), :to_a)))),
      s(:def, :test_append,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@row),
            s(:send,
              s(:ivar, :@row), :<<,
              s(:str, "Value"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3)),
              s(:array,
                s(:str, "A"),
                s(:int, 4)),
              s(:array,
                s(:str, "A"),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:str, "Value"))),
            s(:send,
              s(:ivar, :@row), :to_a)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@row),
            s(:send,
              s(:ivar, :@row), :<<,
              s(:array,
                s(:str, "Header"),
                s(:str, "Field")))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3)),
              s(:array,
                s(:str, "A"),
                s(:int, 4)),
              s(:array,
                s(:str, "A"),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:str, "Value")),
              s(:array,
                s(:str, "Header"),
                s(:str, "Field"))),
            s(:send,
              s(:ivar, :@row), :to_a)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@row),
            s(:send,
              s(:ivar, :@row), :<<,
              s(:hash,
                s(:pair,
                  s(:sym, :key),
                  s(:sym, :value))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3)),
              s(:array,
                s(:str, "A"),
                s(:int, 4)),
              s(:array,
                s(:str, "A"),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:str, "Value")),
              s(:array,
                s(:str, "Header"),
                s(:str, "Field")),
              s(:array,
                s(:sym, :key),
                s(:sym, :value))),
            s(:send,
              s(:ivar, :@row), :to_a)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@row),
            s(:send,
              s(:ivar, :@row), :push,
              s(:int, 100),
              s(:int, 200),
              s(:array,
                s(:sym, :last),
                s(:int, 300)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3)),
              s(:array,
                s(:str, "A"),
                s(:int, 4)),
              s(:array,
                s(:str, "A"),
                s(:nil)),
              s(:array,
                s(:nil),
                s(:str, "Value")),
              s(:array,
                s(:str, "Header"),
                s(:str, "Field")),
              s(:array,
                s(:sym, :key),
                s(:sym, :value)),
              s(:array,
                s(:nil),
                s(:int, 100)),
              s(:array,
                s(:nil),
                s(:int, 200)),
              s(:array,
                s(:sym, :last),
                s(:int, 300))),
            s(:send,
              s(:ivar, :@row), :to_a)))),
      s(:def, :test_delete,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "B"),
              s(:int, 2)),
            s(:send,
              s(:ivar, :@row), :delete,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "C"),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@row), :delete,
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@row),
            s(:block,
              s(:send,
                s(:ivar, :@row), :delete_if),
              s(:args,
                s(:arg, :h),
                s(:arg, :f)),
              s(:and,
                s(:send,
                  s(:lvar, :h), :==,
                  s(:str, "A")),
                s(:send,
                  s(:send,
                    s(:lvar, :f), :nil?), :!)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:nil))),
            s(:send,
              s(:ivar, :@row), :to_a)))),
      s(:def, :test_fields,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3),
              s(:int, 4),
              s(:nil)),
            s(:send,
              s(:ivar, :@row), :fields)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 1),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@row), :fields,
              s(:str, "A"),
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3),
              s(:nil)),
            s(:send,
              s(:ivar, :@row), :fields,
              s(:int, 1),
              s(:int, 2),
              s(:int, 10))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:ivar, :@row), :fields,
              s(:str, "B"),
              s(:str, "C"),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3),
              s(:int, 4)),
            s(:send,
              s(:ivar, :@row), :fields,
              s(:str, "B"),
              s(:str, "C"),
              s(:array,
                s(:str, "A"),
                s(:int, 3)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@row), :values_at,
              s(:irange,
                s(:str, "B"),
                s(:str, "C")))))),
      s(:def, :test_index,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"))),
          s(:send, nil, :assert_equal,
            s(:int, 1),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "B"))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "Z"))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"))),
          s(:send, nil, :assert_equal,
            s(:int, 0),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"),
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"),
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"),
              s(:int, 4))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@row), :index,
              s(:str, "A"),
              s(:int, 5))))),
      s(:def, :test_queries,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@row),
              s(:sym, :header?),
              s(:str, "A"))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@row),
              s(:sym, :header?),
              s(:str, "C"))),
          s(:send, nil, :assert_not_send,
            s(:array,
              s(:ivar, :@row),
              s(:sym, :header?),
              s(:str, "Z"))),
          s(:send, nil, :assert_send,
            s(:array,
              s(:ivar, :@row),
              s(:sym, :include?),
              s(:str, "A"))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@row), :field?,
              s(:int, 4))),
          s(:send, nil, :assert,
            s(:send,
              s(:ivar, :@row), :field?,
              s(:nil))),
          s(:send, nil, :assert,
            s(:send,
              s(:send,
                s(:ivar, :@row), :field?,
                s(:int, 10)), :!)))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:send,
              s(:ivar, :@row), :to_a)),
          s(:block,
            s(:send,
              s(:ivar, :@row), :each),
            s(:args,
              s(:arg, :pair)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :first), :first),
                s(:send,
                  s(:lvar, :pair), :first)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :shift), :last),
                s(:send,
                  s(:lvar, :pair), :last)))),
          s(:lvasgn, :ary,
            s(:send,
              s(:ivar, :@row), :to_a)),
          s(:block,
            s(:send,
              s(:ivar, :@row), :each),
            s(:args,
              s(:arg, :header),
              s(:arg, :field)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :first), :first),
                s(:lvar, :header)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :shift), :last),
                s(:lvar, :field)))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@row),
            s(:block,
              s(:send,
                s(:ivar, :@row), :each),
              s(:args), nil)))),
      s(:def, :test_enumerable,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "A"),
                s(:int, 4)),
              s(:array,
                s(:str, "A"),
                s(:nil))),
            s(:block,
              s(:send,
                s(:ivar, :@row), :select),
              s(:args,
                s(:arg, :pair)),
              s(:send,
                s(:send,
                  s(:lvar, :pair), :first), :==,
                s(:str, "A")))),
          s(:send, nil, :assert_equal,
            s(:int, 10),
            s(:block,
              s(:send,
                s(:ivar, :@row), :inject,
                s(:int, 0)),
              s(:args,
                s(:arg, :sum),
                s(:mlhs,
                  s(:arg, :_),
                  s(:arg, :n))),
              s(:send,
                s(:lvar, :sum), :+,
                s(:begin,
                  s(:or,
                    s(:lvar, :n),
                    s(:int, 0)))))))),
      s(:def, :test_to_a,
        s(:args),
        s(:begin,
          s(:lvasgn, :row,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Row), :new,
                s(:array,
                  s(:str, "A"),
                  s(:str, "B"),
                  s(:str, "C")),
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))), :to_a)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Array),
            s(:lvar, :row)),
          s(:block,
            s(:send,
              s(:lvar, :row), :each),
            s(:args,
              s(:arg, :pair)),
            s(:begin,
              s(:send, nil, :assert_instance_of,
                s(:const, nil, :Array),
                s(:lvar, :pair)),
              s(:send, nil, :assert_equal,
                s(:int, 2),
                s(:send,
                  s(:lvar, :pair), :size)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:int, 1)),
              s(:array,
                s(:str, "B"),
                s(:int, 2)),
              s(:array,
                s(:str, "C"),
                s(:int, 3))),
            s(:lvar, :row)))),
      s(:def, :test_to_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :hash,
            s(:send,
              s(:ivar, :@row), :to_hash)),
          s(:send, nil, :assert_equal,
            s(:hash,
              s(:pair,
                s(:str, "A"),
                s(:nil)),
              s(:pair,
                s(:str, "B"),
                s(:int, 2)),
              s(:pair,
                s(:str, "C"),
                s(:int, 3))),
            s(:lvar, :hash)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :hash), :keys), :each_with_index),
            s(:args,
              s(:arg, :string_key),
              s(:arg, :h)),
            s(:begin,
              s(:send, nil, :assert_predicate,
                s(:lvar, :string_key),
                s(:sym, :frozen?)),
              s(:send, nil, :assert_same,
                s(:lvar, :string_key),
                s(:send,
                  s(:send,
                    s(:ivar, :@row), :headers), :[],
                  s(:lvar, :h))))))),
      s(:def, :test_to_csv,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:str, "1,2,3,4,\n"),
            s(:send,
              s(:ivar, :@row), :to_csv)),
          s(:send, nil, :assert_equal,
            s(:str, "1,2,3,4,\n"),
            s(:send,
              s(:ivar, :@row), :to_s)),
          s(:send, nil, :assert_equal,
            s(:str, "1|2|3|4|\r\n"),
            s(:send,
              s(:ivar, :@row), :to_csv,
              s(:hash,
                s(:pair,
                  s(:sym, :col_sep),
                  s(:str, "|")),
                s(:pair,
                  s(:sym, :row_sep),
                  s(:str, "\r\n"))))))),
      s(:def, :test_array_delegation,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_empty,
            s(:ivar, :@row),
            s(:str, "Row was empty.")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:send,
                  s(:send,
                    s(:ivar, :@row), :headers), :size),
                s(:send,
                  s(:send,
                    s(:ivar, :@row), :fields), :size)), :max),
            s(:send,
              s(:ivar, :@row), :size)))),
      s(:def, :test_inspect_shows_header_field_pairs,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:send,
              s(:ivar, :@row), :inspect)),
          s(:block,
            s(:send,
              s(:ivar, :@row), :each),
            s(:args,
              s(:arg, :header),
              s(:arg, :field)),
            s(:send, nil, :assert_include,
              s(:lvar, :str),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :header), :inspect)),
                s(:str, ":"),
                s(:begin,
                  s(:send,
                    s(:lvar, :field), :inspect))),
              s(:str, "Header field pair not found."))))),
      s(:def, :test_inspect_encoding_is_ascii_compatible,
        s(:args),
        s(:send, nil, :assert_send,
          s(:array,
            s(:const, nil, :Encoding),
            s(:sym, :compatible?),
            s(:send,
              s(:const, nil, :Encoding), :find,
              s(:str, "US-ASCII")),
            s(:send,
              s(:send,
                s(:ivar, :@row), :inspect), :encoding)),
          s(:str, "inspect() was not ASCII compatible."))),
      s(:def, :test_inspect_shows_symbol_headers_as_bare_attributes,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Row), :new,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@row), :headers), :map),
                  s(:args,
                    s(:arg, :h)),
                  s(:send,
                    s(:lvar, :h), :to_sym)),
                s(:send,
                  s(:ivar, :@row), :fields)), :inspect)),
          s(:block,
            s(:send,
              s(:ivar, :@row), :each),
            s(:args,
              s(:arg, :header),
              s(:arg, :field)),
            s(:send, nil, :assert_include,
              s(:lvar, :str),
              s(:dstr,
                s(:begin,
                  s(:lvar, :header)),
                s(:str, ":"),
                s(:begin,
                  s(:send,
                    s(:lvar, :field), :inspect))),
              s(:str, "Header field pair not found."))))),
      s(:def, :test_can_be_compared_with_other_classes,
        s(:args),
        s(:send, nil, :assert_not_nil,
          s(:send,
            s(:const,
              s(:const, nil, :CSV), :Row), :new,
            s(:array),
            s(:array)),
          s(:str, "The row was nil"))),
      s(:def, :test_can_be_compared_when_not_a_row,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:send,
              s(:ivar, :@row), :==,
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:false),
            s(:lvar, :r)))))))
