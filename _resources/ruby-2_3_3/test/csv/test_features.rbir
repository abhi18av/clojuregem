s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "zlib")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:class,
    s(:const,
      s(:const, nil, :TestCSV), :Features),
    s(:const, nil, :TestCSV),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :DifferentOFS)),
      s(:casgn, nil, :TEST_CASES,
        s(:array,
          s(:array,
            s(:str, "a,b"),
            s(:array,
              s(:str, "a"),
              s(:str, "b"))),
          s(:array,
            s(:str, "a,\"\"\"b\"\"\""),
            s(:array,
              s(:str, "a"),
              s(:str, "\"b\""))),
          s(:array,
            s(:str, "a,\"\"\"b\""),
            s(:array,
              s(:str, "a"),
              s(:str, "\"b"))),
          s(:array,
            s(:str, "a,\"b\"\"\""),
            s(:array,
              s(:str, "a"),
              s(:str, "b\""))),
          s(:array,
            s(:str, "a,\"\nb\"\"\""),
            s(:array,
              s(:str, "a"),
              s(:str, "\nb\""))),
          s(:array,
            s(:str, "a,\"\"\"\nb\""),
            s(:array,
              s(:str, "a"),
              s(:str, "\"\nb"))),
          s(:array,
            s(:str, "a,\"\"\"\nb\n\"\"\""),
            s(:array,
              s(:str, "a"),
              s(:str, "\"\nb\n\""))),
          s(:array,
            s(:str, "a,\"\"\"\nb\n\"\"\",\nc"),
            s(:array,
              s(:str, "a"),
              s(:str, "\"\nb\n\""),
              s(:nil))),
          s(:array,
            s(:str, "a,,,"),
            s(:array,
              s(:str, "a"),
              s(:nil),
              s(:nil),
              s(:nil))),
          s(:array,
            s(:str, ","),
            s(:array,
              s(:nil),
              s(:nil))),
          s(:array,
            s(:str, "\"\",\"\""),
            s(:array,
              s(:str, ""),
              s(:str, ""))),
          s(:array,
            s(:str, "\"\"\"\""),
            s(:array,
              s(:str, "\""))),
          s(:array,
            s(:str, "\"\"\"\",\"\""),
            s(:array,
              s(:str, "\""),
              s(:str, ""))),
          s(:array,
            s(:str, ",\"\""),
            s(:array,
              s(:nil),
              s(:str, ""))),
          s(:array,
            s(:str, ",\"\r\""),
            s(:array,
              s(:nil),
              s(:str, "\r"))),
          s(:array,
            s(:str, "\"\r\n,\""),
            s(:array,
              s(:str, "\r\n,"))),
          s(:array,
            s(:str, "\"\r\n,\","),
            s(:array,
              s(:str, "\r\n,"),
              s(:nil))))),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@sample_data,
            s(:send,
              s(:dstr,
                s(:str, "    line,1,abc\n"),
                s(:str, "    line,2,\"def\nghi\"\n"),
                s(:str, "\n"),
                s(:str, "    line,4,jkl\n")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:ivasgn, :@csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@sample_data))))),
      s(:def, :test_col_sep,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:str, ";"),
                s(:str, "\t")), :each),
            s(:args,
              s(:arg, :sep)),
            s(:block,
              s(:send,
                s(:const, nil, :TEST_CASES), :each),
              s(:args,
                s(:arg, :test_case)),
              s(:send, nil, :assert_equal,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :test_case), :last), :map),
                  s(:args,
                    s(:arg, :t)),
                  s(:if,
                    s(:send,
                      s(:lvar, :t), :nil?), nil,
                    s(:send,
                      s(:lvar, :t), :tr,
                      s(:str, ","),
                      s(:lvar, :sep)))),
                s(:send,
                  s(:const, nil, :CSV), :parse_line,
                  s(:send,
                    s(:send,
                      s(:lvar, :test_case), :first), :tr,
                    s(:str, ","),
                    s(:lvar, :sep)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :col_sep),
                      s(:lvar, :sep))))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, ",,,"),
              s(:nil)),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, ",,,;"),
              s(:hash,
                s(:pair,
                  s(:sym, :col_sep),
                  s(:str, ";"))))))),
      s(:def, :test_row_sep,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :CSV), :MalformedCSVError)),
            s(:args),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, "1,2,3\n,4,5\r\n"),
              s(:hash,
                s(:pair,
                  s(:sym, :row_sep),
                  s(:str, "\r\n"))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3\n"),
              s(:str, "4"),
              s(:str, "5")),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, "1,2,\"3\n\",4,5\r\n"),
              s(:hash,
                s(:pair,
                  s(:sym, :row_sep),
                  s(:str, "\r\n"))))))),
      s(:def, :test_quote_char,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :TEST_CASES), :each),
          s(:args,
            s(:arg, :test_case)),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :test_case), :last), :map),
              s(:args,
                s(:arg, :t)),
              s(:if,
                s(:send,
                  s(:lvar, :t), :nil?), nil,
                s(:send,
                  s(:lvar, :t), :tr,
                  s(:str, "\""),
                  s(:str, "'")))),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:send,
                s(:send,
                  s(:lvar, :test_case), :first), :tr,
                s(:str, "\""),
                s(:str, "'")),
              s(:hash,
                s(:pair,
                  s(:sym, :quote_char),
                  s(:str, "'"))))))),
      s(:def, :test_bug_8405,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :TEST_CASES), :each),
          s(:args,
            s(:arg, :test_case)),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :test_case), :last), :map),
              s(:args,
                s(:arg, :t)),
              s(:if,
                s(:send,
                  s(:lvar, :t), :nil?), nil,
                s(:send,
                  s(:lvar, :t), :tr,
                  s(:str, "\""),
                  s(:str, "|")))),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:send,
                s(:send,
                  s(:lvar, :test_case), :first), :tr,
                s(:str, "\""),
                s(:str, "|")),
              s(:hash,
                s(:pair,
                  s(:sym, :quote_char),
                  s(:str, "|"))))))),
      s(:def, :test_csv_char_readers,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "col_sep"),
              s(:str, "row_sep"),
              s(:str, "quote_char")), :each),
          s(:args,
            s(:arg, :reader)),
          s(:begin,
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def"),
                s(:hash,
                  s(:pair,
                    s(:send,
                      s(:lvar, :reader), :to_sym),
                    s(:str, "|"))))),
            s(:send, nil, :assert_equal,
              s(:str, "|"),
              s(:send,
                s(:lvar, :csv), :send,
                s(:lvar, :reader)))))),
      s(:def, :test_row_sep_auto_discovery,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:str, "\r\n"),
                s(:str, "\n"),
                s(:str, "\r")), :each),
            s(:args,
              s(:arg, :line_end)),
            s(:begin,
              s(:lvasgn, :data,
                s(:dstr,
                  s(:str, "1,2,3"),
                  s(:begin,
                    s(:lvar, :line_end)),
                  s(:str, "4,5"),
                  s(:begin,
                    s(:lvar, :line_end)))),
              s(:lvasgn, :discovered,
                s(:send,
                  s(:send,
                    s(:const, nil, :CSV), :new,
                    s(:lvar, :data)), :row_sep)),
              s(:send, nil, :assert_equal,
                s(:lvar, :line_end),
                s(:lvar, :discovered)))),
          s(:send, nil, :assert_equal,
            s(:str, "\n"),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "\n\r\n\r")), :row_sep)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$/),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "")), :row_sep)),
          s(:send, nil, :assert_equal,
            s(:gvar, :$/),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:const, nil, :STDERR)), :row_sep)))),
      s(:def, :test_lineno,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@sample_data), :lines), :to_a), :size)),
          s(:block,
            s(:send,
              s(:int, 4), :times),
            s(:args,
              s(:arg, :line_count)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:lvar, :line_count),
                s(:send,
                  s(:ivar, :@csv), :lineno)),
              s(:send, nil, :assert_not_nil,
                s(:send,
                  s(:ivar, :@csv), :shift)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :line_count), :+,
                  s(:int, 1)),
                s(:send,
                  s(:ivar, :@csv), :lineno)))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:ivar, :@csv), :shift)))),
      s(:def, :test_readline,
        s(:args),
        s(:begin,
          s(:send, nil, :test_lineno),
          s(:send,
            s(:ivar, :@csv), :rewind),
          s(:send, nil, :test_lineno))),
      s(:def, :test_unknown_options,
        s(:args),
        s(:block,
          s(:send, nil, :assert_raise_with_message,
            s(:const, nil, :ArgumentError),
            s(:regexp,
              s(:str, "unknown"),
              s(:regopt))),
          s(:args),
          s(:send,
            s(:const, nil, :CSV), :new,
            s(:ivar, :@sample_data),
            s(:hash,
              s(:pair,
                s(:sym, :unknown),
                s(:sym, :error)))))),
      s(:def, :test_skip_blanks,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:int, 4),
            s(:send,
              s(:send,
                s(:ivar, :@csv), :to_a), :size)),
          s(:ivasgn, :@csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@sample_data),
              s(:hash,
                s(:pair,
                  s(:sym, :skip_blanks),
                  s(:true))))),
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:ivar, :@csv), :each),
            s(:args,
              s(:arg, :row)),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :count), :+,
                s(:int, 1)),
              s(:send, nil, :assert_equal,
                s(:str, "line"),
                s(:send,
                  s(:lvar, :row), :first)))),
          s(:send, nil, :assert_equal,
            s(:int, 3),
            s(:lvar, :count)))),
      s(:def, :test_csv_behavior_readers,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "unconverted_fields"),
              s(:str, "return_headers"),
              s(:str, "write_headers"),
              s(:str, "skip_blanks"),
              s(:str, "force_quotes")), :each),
          s(:args,
            s(:arg, :behavior)),
          s(:begin,
            s(:send, nil, :assert_not_predicate,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def")),
              s(:dstr,
                s(:begin,
                  s(:lvar, :behavior)),
                s(:str, "?")),
              s(:str, "Behavior defaulted to on.")),
            s(:lvasgn, :csv,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def"),
                s(:hash,
                  s(:pair,
                    s(:send,
                      s(:lvar, :behavior), :to_sym),
                    s(:true))))),
            s(:send, nil, :assert_predicate,
              s(:lvar, :csv),
              s(:dstr,
                s(:begin,
                  s(:lvar, :behavior)),
                s(:str, "?")),
              s(:str, "Behavior change now registered."))))),
      s(:def, :test_converters_reader,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :integer)),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def"),
                s(:hash,
                  s(:pair,
                    s(:sym, :converters),
                    s(:array,
                      s(:sym, :integer))))), :converters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :integer)),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def"),
                s(:hash,
                  s(:pair,
                    s(:sym, :converters),
                    s(:sym, :integer)))), :converters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :integer),
              s(:sym, :float)),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def"),
                s(:hash,
                  s(:pair,
                    s(:sym, :converters),
                    s(:sym, :numeric)))), :converters)),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:str, "abc,def"),
              s(:hash,
                s(:pair,
                  s(:sym, :converters),
                  s(:array,
                    s(:sym, :integer),
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args), nil)))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:lvar, :csv), :converters), :size)),
          s(:send, nil, :assert_equal,
            s(:sym, :integer),
            s(:send,
              s(:send,
                s(:lvar, :csv), :converters), :first)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:send,
              s(:send,
                s(:lvar, :csv), :converters), :last)))),
      s(:def, :test_header_converters_reader,
        s(:args),
        s(:begin,
          s(:lvasgn, :hc,
            s(:sym, :header_converters)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :downcase)),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def"),
                s(:hash,
                  s(:pair,
                    s(:lvar, :hc),
                    s(:array,
                      s(:sym, :downcase))))), :send,
              s(:lvar, :hc))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:sym, :downcase)),
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "abc,def"),
                s(:hash,
                  s(:pair,
                    s(:lvar, :hc),
                    s(:sym, :downcase)))), :send,
              s(:lvar, :hc))),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:str, "abc,def"),
              s(:hash,
                s(:pair,
                  s(:lvar, :hc),
                  s(:array,
                    s(:sym, :symbol),
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args), nil)))))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:lvar, :csv), :send,
                s(:lvar, :hc)), :size)),
          s(:send, nil, :assert_equal,
            s(:sym, :symbol),
            s(:send,
              s(:send,
                s(:lvar, :csv), :send,
                s(:lvar, :hc)), :first)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Proc),
            s(:send,
              s(:send,
                s(:lvar, :csv), :send,
                s(:lvar, :hc)), :last)))),
      s(:def, :test_failing_to_escape_col_sep_bug_fix,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:const, nil, :Exception)),
          s(:args),
          s(:send,
            s(:const, nil, :CSV), :new,
            s(:send,
              s(:const, nil, :String), :new),
            s(:hash,
              s(:pair,
                s(:sym, :col_sep),
                s(:str, "|")))))),
      s(:def, :test_failing_to_reset_headers_in_rewind_bug_fix,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:str, "forename,surname"),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true)),
                s(:pair,
                  s(:sym, :return_headers),
                  s(:true))))),
          s(:block,
            s(:send,
              s(:lvar, :csv), :each),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :row),
              s(:sym, :header_row?))),
          s(:send,
            s(:lvar, :csv), :rewind),
          s(:block,
            s(:send,
              s(:lvar, :csv), :each),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :assert_predicate,
              s(:lvar, :row),
              s(:sym, :header_row?))))),
      s(:def, :test_leading_empty_fields_with_multibyte_col_sep_bug_fix,
        s(:args),
        s(:begin,
          s(:lvasgn, :data,
            s(:send,
              s(:dstr,
                s(:str, "    <=><=>A<=>B<=>C\n"),
                s(:str, "    1<=>2<=>3\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :parsed,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:lvar, :data),
              s(:hash,
                s(:pair,
                  s(:sym, :col_sep),
                  s(:str, "<=>"))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:nil),
                s(:nil),
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:str, "1"),
                s(:str, "2"),
                s(:str, "3"))),
            s(:lvar, :parsed)))),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Zlib), :GzipReader)),
        s(:def, :test_gzip_reader_bug_fix,
          s(:args),
          s(:ensure,
            s(:begin,
              s(:lvasgn, :zipped,
                s(:nil)),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:const, nil, :NoMethodError)),
                s(:args),
                s(:lvasgn, :zipped,
                  s(:send,
                    s(:const, nil, :CSV), :new,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Zlib), :GzipReader), :open,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:send,
                          s(:const, nil, :File), :dirname,
                          s(:str, "(string)")),
                        s(:str, "line_endings.gz")))))),
              s(:send, nil, :assert_equal,
                s(:str, "\r\n"),
                s(:send,
                  s(:lvar, :zipped), :row_sep))),
            s(:send,
              s(:lvar, :zipped), :close))), nil),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Zlib), :GzipWriter)),
        s(:def, :test_gzip_writer_bug_fix,
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "temp"),
                s(:str, ".gz"))),
            s(:args,
              s(:arg, :tempfile)),
            s(:begin,
              s(:send,
                s(:lvar, :tempfile), :close),
              s(:lvasgn, :file,
                s(:send,
                  s(:lvar, :tempfile), :path)),
              s(:lvasgn, :zipped,
                s(:nil)),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:const, nil, :NoMethodError)),
                s(:args),
                s(:lvasgn, :zipped,
                  s(:send,
                    s(:const, nil, :CSV), :new,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Zlib), :GzipWriter), :open,
                      s(:lvar, :file))))),
              s(:send,
                s(:lvar, :zipped), :<<,
                s(:array,
                  s(:str, "one"),
                  s(:str, "two"),
                  s(:str, "three"))),
              s(:send,
                s(:lvar, :zipped), :<<,
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))),
              s(:send,
                s(:lvar, :zipped), :close),
              s(:send, nil, :assert_include,
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Zlib), :GzipReader), :open,
                    s(:lvar, :file)),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:lvar, :f), :read)),
                s(:gvar, :$INPUT_RECORD_SEPARATOR),
                s(:str, "@row_sep did not default"))))), nil),
      s(:def, :test_inspect_is_smart_about_io_types,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:str, "string,data")), :inspect)),
          s(:send, nil, :assert_include,
            s(:lvar, :str),
            s(:str, "io_type:StringIO"),
            s(:str, "IO type not detected.")),
          s(:lvasgn, :str,
            s(:send,
              s(:send,
                s(:const, nil, :CSV), :new,
                s(:gvar, :$stderr)), :inspect)),
          s(:send, nil, :assert_include,
            s(:lvar, :str),
            s(:str, "io_type:$stderr"),
            s(:str, "IO type not detected.")),
          s(:block,
            s(:send,
              s(:const, nil, :Tempfile), :create,
              s(:array,
                s(:str, "temp"),
                s(:str, ".csv"))),
            s(:args,
              s(:arg, :tempfile)),
            s(:begin,
              s(:send,
                s(:lvar, :tempfile), :close),
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :tempfile), :path)),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :path),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :csv)),
                s(:send,
                  s(:lvar, :csv), :<<,
                  s(:str, "one,two,three\n1,2,3\n"))),
              s(:lvasgn, :str,
                s(:block,
                  s(:send,
                    s(:const, nil, :CSV), :open,
                    s(:lvar, :path)),
                  s(:args,
                    s(:arg, :csv)),
                  s(:send,
                    s(:lvar, :csv), :inspect))),
              s(:send, nil, :assert_include,
                s(:lvar, :str),
                s(:str, "io_type:File"),
                s(:str, "IO type not detected.")))))),
      s(:def, :test_inspect_shows_key_attributes,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:send,
              s(:ivar, :@csv), :inspect)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "lineno"),
                s(:str, "col_sep"),
                s(:str, "row_sep"),
                s(:str, "quote_char")), :each),
            s(:args,
              s(:arg, :attr_name)),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "\\b"),
                s(:begin,
                  s(:lvar, :attr_name)),
                s(:str, ":[^\\s>]+"),
                s(:regopt)),
              s(:lvar, :str))))),
      s(:def, :test_inspect_shows_headers_when_available,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :CSV), :new,
            s(:str, "one,two,three\n1,2,3\n"),
            s(:hash,
              s(:pair,
                s(:sym, :headers),
                s(:true)))),
          s(:args,
            s(:arg, :csv)),
          s(:begin,
            s(:send, nil, :assert_include,
              s(:send,
                s(:lvar, :csv), :inspect),
              s(:str, "headers:true"),
              s(:str, "Header hint not shown.")),
            s(:send,
              s(:lvar, :csv), :shift),
            s(:send, nil, :assert_match,
              s(:regexp,
                s(:str, "headers:\\[[^\\]]+\\]"),
                s(:regopt)),
              s(:send,
                s(:lvar, :csv), :inspect))))),
      s(:def, :test_inspect_encoding_is_ascii_compatible,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :CSV), :new,
            s(:send,
              s(:str, "one,two,three\n1,2,3\n"), :encode,
              s(:str, "UTF-16BE"))),
          s(:args,
            s(:arg, :csv)),
          s(:send, nil, :assert_send,
            s(:array,
              s(:const, nil, :Encoding),
              s(:sym, :compatible?),
              s(:send,
                s(:const, nil, :Encoding), :find,
                s(:str, "US-ASCII")),
              s(:send,
                s(:send,
                  s(:lvar, :csv), :inspect), :encoding)),
            s(:str, "inspect() was not ASCII compatible.")))),
      s(:def, :test_version,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_nil,
            s(:const,
              s(:const, nil, :CSV), :VERSION)),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:const,
              s(:const, nil, :CSV), :VERSION)),
          s(:send, nil, :assert_predicate,
            s(:const,
              s(:const, nil, :CSV), :VERSION),
            s(:sym, :frozen?)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\A\\d\\.\\d\\.\\d\\Z"),
              s(:regopt)),
            s(:const,
              s(:const, nil, :CSV), :VERSION)))),
      s(:def, :test_accepts_comment_skip_lines_option,
        s(:args),
        s(:block,
          s(:send, nil, :assert_nothing_raised,
            s(:const, nil, :ArgumentError)),
          s(:args),
          s(:send,
            s(:const, nil, :CSV), :new,
            s(:ivar, :@sample_data),
            s(:hash,
              s(:pair,
                s(:sym, :skip_lines),
                s(:regexp,
                  s(:str, "\\A\\s*#"),
                  s(:regopt))))))),
      s(:def, :test_accepts_comment_defaults_to_nil,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@sample_data))),
          s(:send, nil, :assert_nil,
            s(:send,
              s(:lvar, :c), :skip_lines)))),
      s(:class,
        s(:const, nil, :RegexStub), nil, nil),
      s(:def, :test_requires_skip_lines_to_call_match,
        s(:args),
        s(:begin,
          s(:lvasgn, :regex_stub,
            s(:send,
              s(:const, nil, :RegexStub), :new)),
          s(:block,
            s(:send, nil, :assert_raise_with_message,
              s(:const, nil, :ArgumentError),
              s(:regexp,
                s(:str, "skip_lines"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@sample_data),
              s(:hash,
                s(:pair,
                  s(:sym, :skip_lines),
                  s(:lvar, :regex_stub))))))),
      s(:def, :test_comment_rows_are_ignored,
        s(:args),
        s(:begin,
          s(:lvasgn, :sample_data,
            s(:str, "line,1,a\n#not,a,line\nline,2,b\n   #also,no,line")),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:lvar, :sample_data),
              s(:hash,
                s(:pair,
                  s(:sym, :skip_lines),
                  s(:regexp,
                    s(:str, "\\A\\s*#"),
                    s(:regopt)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "line"),
                s(:str, "1"),
                s(:str, "a")),
              s(:array,
                s(:str, "line"),
                s(:str, "2"),
                s(:str, "b"))),
            s(:send,
              s(:send,
                s(:lvar, :c), :each), :to_a)))),
      s(:def, :test_quoted_skip_line_markers_are_ignored,
        s(:args),
        s(:begin,
          s(:lvasgn, :sample_data,
            s(:str, "line,1,a\n\"#not\",a,line\nline,2,b")),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:lvar, :sample_data),
              s(:hash,
                s(:pair,
                  s(:sym, :skip_lines),
                  s(:regexp,
                    s(:str, "\\A\\s*#"),
                    s(:regopt)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "line"),
                s(:str, "1"),
                s(:str, "a")),
              s(:array,
                s(:str, "#not"),
                s(:str, "a"),
                s(:str, "line")),
              s(:array,
                s(:str, "line"),
                s(:str, "2"),
                s(:str, "b"))),
            s(:send,
              s(:send,
                s(:lvar, :c), :each), :to_a)))),
      s(:def, :test_string_works_like_a_regexp,
        s(:args),
        s(:begin,
          s(:lvasgn, :sample_data,
            s(:str, "line,1,a\n#(not,a,line\nline,2,b\n   also,#no,line")),
          s(:lvasgn, :c,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:lvar, :sample_data),
              s(:hash,
                s(:pair,
                  s(:sym, :skip_lines),
                  s(:str, "#"))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "line"),
                s(:str, "1"),
                s(:str, "a")),
              s(:array,
                s(:str, "line"),
                s(:str, "2"),
                s(:str, "b"))),
            s(:send,
              s(:send,
                s(:lvar, :c), :each), :to_a)))))))
