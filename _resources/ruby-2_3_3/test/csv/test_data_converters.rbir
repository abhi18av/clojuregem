s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:class,
    s(:const,
      s(:const, nil, :TestCSV), :DataConverters),
    s(:const, nil, :TestCSV),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :DifferentOFS)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@data,
            s(:str, "Numbers,:integer,1,:float,3.015")),
          s(:ivasgn, :@parser,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@data))),
          s(:ivasgn, :@custom,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :field)),
              s(:if,
                s(:send,
                  s(:lvar, :field), :=~,
                  s(:regexp,
                    s(:str, "\\A:(\\S.*?)\\s*\\Z"),
                    s(:regopt))),
                s(:send,
                  s(:nth_ref, 1), :to_sym),
                s(:lvar, :field)))),
          s(:ivasgn, :@win_safe_time_str,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :strftime,
              s(:str, "%a %b %d %H:%M:%S %Y"))))),
      s(:def, :test_builtin_integer_converter,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:int, -5),
                s(:int, 1),
                s(:int, 10000000000)), :each),
            s(:args,
              s(:arg, :n)),
            s(:send, nil, :assert_equal,
              s(:lvar, :n),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :CSV), :Converters), :[],
                  s(:sym, :integer)), :[],
                s(:send,
                  s(:lvar, :n), :to_s)))),
          s(:block,
            s(:send,
              s(:begin,
                s(:send,
                  s(:array,
                    s(:str, "junk"),
                    s(:str, "1.0")), :+,
                  s(:array,
                    s(:str, "")))), :each),
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :assert_equal,
              s(:lvar, :str),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :CSV), :Converters), :[],
                  s(:sym, :integer)), :[],
                s(:lvar, :str)))))),
      s(:def, :test_builtin_float_converter,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:float, -5.1234),
                s(:int, 0),
                s(:float, 2.3e-11)), :each),
            s(:args,
              s(:arg, :n)),
            s(:send, nil, :assert_equal,
              s(:lvar, :n),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :CSV), :Converters), :[],
                  s(:sym, :float)), :[],
                s(:send,
                  s(:lvar, :n), :to_s)))),
          s(:block,
            s(:send,
              s(:begin,
                s(:send,
                  s(:array,
                    s(:str, "junk"),
                    s(:str, "1..0"),
                    s(:str, ".015F")), :+,
                  s(:array,
                    s(:str, "")))), :each),
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :assert_equal,
              s(:lvar, :str),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :CSV), :Converters), :[],
                  s(:sym, :float)), :[],
                s(:lvar, :str)))))),
      s(:def, :test_builtin_date_converter,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :Date),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Converters), :[],
                s(:sym, :date)), :[],
              s(:send,
                s(:ivar, :@win_safe_time_str), :sub,
                s(:regexp,
                  s(:str, "\\d+:\\d+:\\d+ "),
                  s(:regopt)),
                s(:str, "")))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Converters), :[],
                s(:sym, :date)), :[],
              s(:str, "junk"))))),
      s(:def, :test_builtin_date_time_converter,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :DateTime),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Converters), :[],
                s(:sym, :date_time)), :[],
              s(:ivar, :@win_safe_time_str))),
          s(:send, nil, :assert_instance_of,
            s(:const, nil, :String),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Converters), :[],
                s(:sym, :date_time)), :[],
              s(:str, "junk"))))),
      s(:def, :test_convert_with_builtin_integer,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_respond_to,
            s(:ivar, :@parser),
            s(:sym, :convert)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :convert,
              s(:sym, :integer))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:str, ":integer"),
              s(:int, 1),
              s(:str, ":float"),
              s(:str, "3.015")),
            s(:send,
              s(:ivar, :@parser), :shift)))),
      s(:def, :test_convert_with_builtin_float,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_respond_to,
            s(:ivar, :@parser),
            s(:sym, :convert)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :convert,
              s(:sym, :float))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:str, ":integer"),
              s(:float, 1.0),
              s(:str, ":float"),
              s(:float, 3.015)),
            s(:send,
              s(:ivar, :@parser), :shift)))),
      s(:def, :test_convert_order_float_integer,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@parser), :convert,
                s(:sym, :float)),
              s(:send,
                s(:ivar, :@parser), :convert,
                s(:sym, :integer)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :String),
              s(:const, nil, :Float),
              s(:const, nil, :String),
              s(:const, nil, :Float)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :shift), :map),
              s(:args,
                s(:arg, :field)),
              s(:send,
                s(:lvar, :field), :class))))),
      s(:def, :test_convert_order_integer_float,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@parser), :convert,
                s(:sym, :integer)),
              s(:send,
                s(:ivar, :@parser), :convert,
                s(:sym, :float)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :String),
              s(:const, nil, :Fixnum),
              s(:const, nil, :String),
              s(:const, nil, :Float)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :shift), :map),
              s(:args,
                s(:arg, :field)),
              s(:send,
                s(:lvar, :field), :class))))),
      s(:def, :test_builtin_numeric_combo_converter,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :convert,
              s(:sym, :numeric))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :String),
              s(:const, nil, :Fixnum),
              s(:const, nil, :String),
              s(:const, nil, :Float)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :shift), :map),
              s(:args,
                s(:arg, :field)),
              s(:send,
                s(:lvar, :field), :class))))),
      s(:def, :test_builtin_all_nested_combo_converter,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@data), :<<,
            s(:dstr,
              s(:str, ","),
              s(:begin,
                s(:ivar, :@win_safe_time_str)))),
          s(:ivasgn, :@parser,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@data))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :convert,
              s(:sym, :all))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:const, nil, :String),
              s(:const, nil, :String),
              s(:const, nil, :Fixnum),
              s(:const, nil, :String),
              s(:const, nil, :Float),
              s(:const, nil, :DateTime)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@parser), :shift), :map),
              s(:args,
                s(:arg, :field)),
              s(:send,
                s(:lvar, :field), :class))))),
      s(:def, :test_convert_with_custom_code,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@parser), :convert),
              s(:args,
                s(:arg, :field)),
              s(:if,
                s(:send,
                  s(:lvar, :field), :=~,
                  s(:regexp,
                    s(:str, "\\A:(\\S.*?)\\s*\\Z"),
                    s(:regopt))),
                s(:send,
                  s(:nth_ref, 1), :to_sym),
                s(:lvar, :field)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:sym, :integer),
              s(:str, "1"),
              s(:sym, :float),
              s(:str, "3.015")),
            s(:send,
              s(:ivar, :@parser), :shift)))),
      s(:def, :test_convert_with_custom_code_mix,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :convert,
              s(:sym, :numeric))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:send,
              s(:ivar, :@parser), :convert,
              s(:block_pass,
                s(:ivar, :@custom)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:sym, :integer),
              s(:int, 1),
              s(:sym, :float),
              s(:float, 3.015)),
            s(:send,
              s(:ivar, :@parser), :shift)))),
      s(:def, :test_convert_with_custom_code_using_field_info,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@parser), :convert),
              s(:args,
                s(:arg, :field),
                s(:arg, :info)),
              s(:begin,
                s(:send, nil, :assert_equal,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :info), :line)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :info), :index), :==,
                    s(:int, 4)),
                  s(:send,
                    s(:send, nil, :Float,
                      s(:lvar, :field)), :floor),
                  s(:lvar, :field))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:str, ":integer"),
              s(:str, "1"),
              s(:str, ":float"),
              s(:int, 3)),
            s(:send,
              s(:ivar, :@parser), :shift)))),
      s(:def, :test_convert_with_custom_code_using_field_info_header,
        s(:args),
        s(:begin,
          s(:ivasgn, :@parser,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:array,
                    s(:str, "one"),
                    s(:str, "two"),
                    s(:str, "three"),
                    s(:str, "four"),
                    s(:str, "five")))))),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@parser), :convert),
              s(:args,
                s(:arg, :field),
                s(:arg, :info)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :info), :header), :==,
                  s(:str, "three")),
                s(:send,
                  s(:send, nil, :Integer,
                    s(:lvar, :field)), :*,
                  s(:int, 100)),
                s(:lvar, :field)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:str, ":integer"),
              s(:int, 100),
              s(:str, ":float"),
              s(:str, "3.015")),
            s(:send,
              s(:send,
                s(:ivar, :@parser), :shift), :fields)))),
      s(:def, :test_shortcut_interface,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:str, ":integer"),
              s(:int, 1),
              s(:str, ":float"),
              s(:float, 3.015)),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :converters),
                  s(:sym, :numeric))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:str, ":integer"),
              s(:int, 1),
              s(:str, ":float"),
              s(:float, 3.015)),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :converters),
                  s(:array,
                    s(:sym, :integer),
                    s(:sym, :float)))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Numbers"),
              s(:sym, :integer),
              s(:int, 1),
              s(:sym, :float),
              s(:float, 3.015)),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:ivar, :@data),
              s(:hash,
                s(:pair,
                  s(:sym, :converters),
                  s(:array,
                    s(:sym, :numeric),
                    s(:ivar, :@custom)))))))),
      s(:def, :test_unconverted_fields,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:ivar, :@data),
                  s(:array,
                    s(:str, "Numbers"),
                    s(:sym, :integer),
                    s(:int, 1),
                    s(:sym, :float),
                    s(:float, 3.015)),
                  s(:array,
                    s(:str, "Numbers"),
                    s(:str, ":integer"),
                    s(:str, "1"),
                    s(:str, ":float"),
                    s(:str, "3.015"))),
                s(:array,
                  s(:str, "\n"),
                  s(:send,
                    s(:const, nil, :Array), :new),
                  s(:send,
                    s(:const, nil, :Array), :new))), :each),
            s(:args,
              s(:arg, :test),
              s(:arg, :fields),
              s(:arg, :unconverted)),
            s(:begin,
              s(:lvasgn, :row,
                s(:nil)),
              s(:block,
                s(:send, nil, :assert_nothing_raised,
                  s(:const, nil, :Exception)),
                s(:args),
                s(:lvasgn, :row,
                  s(:send,
                    s(:const, nil, :CSV), :parse_line,
                    s(:lvar, :test),
                    s(:hash,
                      s(:pair,
                        s(:sym, :converters),
                        s(:array,
                          s(:sym, :numeric),
                          s(:ivar, :@custom))),
                      s(:pair,
                        s(:sym, :unconverted_fields),
                        s(:true)))))),
              s(:send, nil, :assert_not_nil,
                s(:lvar, :row)),
              s(:send, nil, :assert_equal,
                s(:lvar, :fields),
                s(:lvar, :row)),
              s(:send, nil, :assert_respond_to,
                s(:lvar, :row),
                s(:sym, :unconverted_fields)),
              s(:send, nil, :assert_equal,
                s(:lvar, :unconverted),
                s(:send,
                  s(:lvar, :row), :unconverted_fields)))),
          s(:lvasgn, :data,
            s(:send,
              s(:dstr,
                s(:str, "    first,second,third\n"),
                s(:str, "    1,2,3\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :row,
            s(:nil)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :row,
              s(:send,
                s(:const, nil, :CSV), :parse_line,
                s(:lvar, :data),
                s(:hash,
                  s(:pair,
                    s(:sym, :converters),
                    s(:sym, :numeric)),
                  s(:pair,
                    s(:sym, :unconverted_fields),
                    s(:true)),
                  s(:pair,
                    s(:sym, :headers),
                    s(:sym, :first_row)))))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "first"),
                s(:int, 1)),
              s(:array,
                s(:str, "second"),
                s(:int, 2)),
              s(:array,
                s(:str, "third"),
                s(:int, 3))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :row),
            s(:sym, :unconverted_fields)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "1"),
              s(:str, "2"),
              s(:str, "3")),
            s(:send,
              s(:lvar, :row), :unconverted_fields)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :row,
              s(:send,
                s(:const, nil, :CSV), :parse_line,
                s(:lvar, :data),
                s(:hash,
                  s(:pair,
                    s(:sym, :converters),
                    s(:sym, :numeric)),
                  s(:pair,
                    s(:sym, :unconverted_fields),
                    s(:true)),
                  s(:pair,
                    s(:sym, :headers),
                    s(:sym, :first_row)),
                  s(:pair,
                    s(:sym, :return_headers),
                    s(:true)))))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "first"),
                s(:str, "first")),
              s(:array,
                s(:str, "second"),
                s(:str, "second")),
              s(:array,
                s(:str, "third"),
                s(:str, "third"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :row),
            s(:sym, :unconverted_fields)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "first"),
              s(:str, "second"),
              s(:str, "third")),
            s(:send,
              s(:lvar, :row), :unconverted_fields)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :row,
              s(:send,
                s(:const, nil, :CSV), :parse_line,
                s(:lvar, :data),
                s(:hash,
                  s(:pair,
                    s(:sym, :converters),
                    s(:sym, :numeric)),
                  s(:pair,
                    s(:sym, :unconverted_fields),
                    s(:true)),
                  s(:pair,
                    s(:sym, :headers),
                    s(:sym, :first_row)),
                  s(:pair,
                    s(:sym, :return_headers),
                    s(:true)),
                  s(:pair,
                    s(:sym, :header_converters),
                    s(:sym, :symbol)))))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :first),
                s(:str, "first")),
              s(:array,
                s(:sym, :second),
                s(:str, "second")),
              s(:array,
                s(:sym, :third),
                s(:str, "third"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :row),
            s(:sym, :unconverted_fields)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "first"),
              s(:str, "second"),
              s(:str, "third")),
            s(:send,
              s(:lvar, :row), :unconverted_fields)),
          s(:block,
            s(:send, nil, :assert_nothing_raised,
              s(:const, nil, :Exception)),
            s(:args),
            s(:lvasgn, :row,
              s(:send,
                s(:const, nil, :CSV), :parse_line,
                s(:lvar, :data),
                s(:hash,
                  s(:pair,
                    s(:sym, :converters),
                    s(:sym, :numeric)),
                  s(:pair,
                    s(:sym, :unconverted_fields),
                    s(:true)),
                  s(:pair,
                    s(:sym, :headers),
                    s(:array,
                      s(:str, "my"),
                      s(:str, "new"),
                      s(:str, "headers"))),
                  s(:pair,
                    s(:sym, :return_headers),
                    s(:true)),
                  s(:pair,
                    s(:sym, :header_converters),
                    s(:sym, :symbol)))))),
          s(:send, nil, :assert_not_nil,
            s(:lvar, :row)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:sym, :my),
                s(:str, "my")),
              s(:array,
                s(:sym, :new),
                s(:str, "new")),
              s(:array,
                s(:sym, :headers),
                s(:str, "headers"))),
            s(:send,
              s(:lvar, :row), :to_a)),
          s(:send, nil, :assert_respond_to,
            s(:lvar, :row),
            s(:sym, :unconverted_fields)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Array), :new),
            s(:send,
              s(:lvar, :row), :unconverted_fields)))))))
