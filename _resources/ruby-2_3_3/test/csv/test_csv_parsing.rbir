s(:begin,
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:class,
    s(:const,
      s(:const, nil, :TestCSV), :Parsing),
    s(:const, nil, :TestCSV),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :DifferentOFS)),
      s(:casgn, nil, :BIG_DATA,
        s(:send,
          s(:str, "123456789\n"), :*,
          s(:int, 1024))),
      s(:def, :test_mastering_regex_example,
        s(:args),
        s(:begin,
          s(:lvasgn, :ex,
            s(:str, "Ten Thousand,10000, 2710 ,,\"10,000\",\"It's \"\"10 Grand\"\", baby\",10K")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Ten Thousand"),
              s(:str, "10000"),
              s(:str, " 2710 "),
              s(:nil),
              s(:str, "10,000"),
              s(:str, "It's \"10 Grand\", baby"),
              s(:str, "10K")),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:lvar, :ex))))),
      s(:def, :test_std_lib_csv,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "\t"),
                  s(:array,
                    s(:str, "\t"))),
                s(:array,
                  s(:str, "foo,\"\"\"\"\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\"\""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\"\"bar\"\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\"bar\""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "\"\"\"\n\",\"\"\"\n\""),
                  s(:array,
                    s(:str, "\"\n"),
                    s(:str, "\"\n"))),
                s(:array,
                  s(:str, "foo,\"\r\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "\"\""),
                  s(:array,
                    s(:str, ""))),
                s(:array,
                  s(:str, "foo,\"\"\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\r.\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r.\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\r\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, ""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "\",\""),
                  s(:array,
                    s(:str, ","))),
                s(:array,
                  s(:str, "foo"),
                  s(:array,
                    s(:str, "foo"))),
                s(:array,
                  s(:str, ",,"),
                  s(:array,
                    s(:nil),
                    s(:nil),
                    s(:nil))),
                s(:array,
                  s(:str, ","),
                  s(:array,
                    s(:nil),
                    s(:nil))),
                s(:array,
                  s(:str, "foo,\"\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,,baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:nil),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "\"\"\"\r\",\"\"\"\r\""),
                  s(:array,
                    s(:str, "\"\r"),
                    s(:str, "\"\r"))),
                s(:array,
                  s(:str, "\",\",\",\""),
                  s(:array,
                    s(:str, ","),
                    s(:str, ","))),
                s(:array,
                  s(:str, "foo,bar,"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "bar"),
                    s(:nil))),
                s(:array,
                  s(:str, ",foo,bar"),
                  s(:array,
                    s(:nil),
                    s(:str, "foo"),
                    s(:str, "bar"))),
                s(:array,
                  s(:str, "foo,bar"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "bar"))),
                s(:array,
                  s(:str, ";"),
                  s(:array,
                    s(:str, ";"))),
                s(:array,
                  s(:str, "\t,\t"),
                  s(:array,
                    s(:str, "\t"),
                    s(:str, "\t"))),
                s(:array,
                  s(:str, "foo,\"\r\n\r\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r\n\r"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\r\n\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r\n\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"foo,bar\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "foo,bar"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, ";,;"),
                  s(:array,
                    s(:str, ";"),
                    s(:str, ";")))), :each),
            s(:args,
              s(:arg, :csv_test)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :csv_test), :last),
              s(:send,
                s(:const, nil, :CSV), :parse_line,
                s(:send,
                  s(:lvar, :csv_test), :first)))),
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "foo,\"\"\"\"\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\"\""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\"\"bar\"\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\"bar\""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\r\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "\"\""),
                  s(:array,
                    s(:str, ""))),
                s(:array,
                  s(:str, "foo,\"\"\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\r.\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r.\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\r\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, ""),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo"),
                  s(:array,
                    s(:str, "foo"))),
                s(:array,
                  s(:str, ",,"),
                  s(:array,
                    s(:nil),
                    s(:nil),
                    s(:nil))),
                s(:array,
                  s(:str, ","),
                  s(:array,
                    s(:nil),
                    s(:nil))),
                s(:array,
                  s(:str, "foo,\"\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,,baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:nil),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,bar"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "bar"))),
                s(:array,
                  s(:str, "foo,\"\r\n\n\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "\r\n\n"),
                    s(:str, "baz"))),
                s(:array,
                  s(:str, "foo,\"foo,bar\",baz"),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "foo,bar"),
                    s(:str, "baz")))), :each),
            s(:args,
              s(:arg, :csv_test)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :csv_test), :last),
              s(:send,
                s(:const, nil, :CSV), :parse_line,
                s(:send,
                  s(:lvar, :csv_test), :first)))))),
      s(:def, :test_aras_edge_cases,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:array,
                s(:str, "a,b"),
                s(:array,
                  s(:str, "a"),
                  s(:str, "b"))),
              s(:array,
                s(:str, "a,\"\"\"b\"\"\""),
                s(:array,
                  s(:str, "a"),
                  s(:str, "\"b\""))),
              s(:array,
                s(:str, "a,\"\"\"b\""),
                s(:array,
                  s(:str, "a"),
                  s(:str, "\"b"))),
              s(:array,
                s(:str, "a,\"b\"\"\""),
                s(:array,
                  s(:str, "a"),
                  s(:str, "b\""))),
              s(:array,
                s(:str, "a,\"\nb\"\"\""),
                s(:array,
                  s(:str, "a"),
                  s(:str, "\nb\""))),
              s(:array,
                s(:str, "a,\"\"\"\nb\""),
                s(:array,
                  s(:str, "a"),
                  s(:str, "\"\nb"))),
              s(:array,
                s(:str, "a,\"\"\"\nb\n\"\"\""),
                s(:array,
                  s(:str, "a"),
                  s(:str, "\"\nb\n\""))),
              s(:array,
                s(:str, "a,\"\"\"\nb\n\"\"\",\nc"),
                s(:array,
                  s(:str, "a"),
                  s(:str, "\"\nb\n\""),
                  s(:nil))),
              s(:array,
                s(:str, "a,,,"),
                s(:array,
                  s(:str, "a"),
                  s(:nil),
                  s(:nil),
                  s(:nil))),
              s(:array,
                s(:str, ","),
                s(:array,
                  s(:nil),
                  s(:nil))),
              s(:array,
                s(:str, "\"\",\"\""),
                s(:array,
                  s(:str, ""),
                  s(:str, ""))),
              s(:array,
                s(:str, "\"\"\"\""),
                s(:array,
                  s(:str, "\""))),
              s(:array,
                s(:str, "\"\"\"\",\"\""),
                s(:array,
                  s(:str, "\""),
                  s(:str, ""))),
              s(:array,
                s(:str, ",\"\""),
                s(:array,
                  s(:nil),
                  s(:str, ""))),
              s(:array,
                s(:str, ",\"\r\""),
                s(:array,
                  s(:nil),
                  s(:str, "\r"))),
              s(:array,
                s(:str, "\"\r\n,\""),
                s(:array,
                  s(:str, "\r\n,"))),
              s(:array,
                s(:str, "\"\r\n,\","),
                s(:array,
                  s(:str, "\r\n,"),
                  s(:nil)))), :each),
          s(:args,
            s(:arg, :edge_case)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :edge_case), :last),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:send,
                s(:lvar, :edge_case), :first))))),
      s(:def, :test_james_edge_cases,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Array), :new),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, "\n1,2,3\n"))))),
      s(:def, :test_rob_edge_cases,
        s(:args),
        s(:block,
          s(:send,
            s(:array,
              s(:array,
                s(:str, "\"a\nb\""),
                s(:array,
                  s(:str, "a\nb"))),
              s(:array,
                s(:str, "\"\n\n\n\""),
                s(:array,
                  s(:str, "\n\n\n"))),
              s(:array,
                s(:str, "a,\"b\n\nc\""),
                s(:array,
                  s(:str, "a"),
                  s(:str, "b\n\nc"))),
              s(:array,
                s(:str, ",\"\r\n\""),
                s(:array,
                  s(:nil),
                  s(:str, "\r\n"))),
              s(:array,
                s(:str, ",\"\r\n.\""),
                s(:array,
                  s(:nil),
                  s(:str, "\r\n."))),
              s(:array,
                s(:str, "\"a\na\",\"one newline\""),
                s(:array,
                  s(:str, "a\na"),
                  s(:str, "one newline"))),
              s(:array,
                s(:str, "\"a\n\na\",\"two newlines\""),
                s(:array,
                  s(:str, "a\n\na"),
                  s(:str, "two newlines"))),
              s(:array,
                s(:str, "\"a\r\na\",\"one CRLF\""),
                s(:array,
                  s(:str, "a\r\na"),
                  s(:str, "one CRLF"))),
              s(:array,
                s(:str, "\"a\r\n\r\na\",\"two CRLFs\""),
                s(:array,
                  s(:str, "a\r\n\r\na"),
                  s(:str, "two CRLFs"))),
              s(:array,
                s(:str, "with blank,\"start\n\nfinish\"\n"),
                s(:array,
                  s(:str, "with blank"),
                  s(:str, "start\n\nfinish")))), :each),
          s(:args,
            s(:arg, :edge_case)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:lvar, :edge_case), :last),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:send,
                s(:lvar, :edge_case), :first))))),
      s(:def, :test_non_regex_edge_cases,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "foo,\"foo,bar,baz,foo\",\"foo\""),
                  s(:array,
                    s(:str, "foo"),
                    s(:str, "foo,bar,baz,foo"),
                    s(:str, "foo")))), :each),
            s(:args,
              s(:arg, :edge_case)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :edge_case), :last),
              s(:send,
                s(:const, nil, :CSV), :parse_line,
                s(:send,
                  s(:lvar, :edge_case), :first)))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :CSV), :MalformedCSVError)),
            s(:args),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, "1,\"23\"4\"5\", 6"))))),
      s(:def, :test_malformed_csv,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :CSV), :MalformedCSVError)),
            s(:args),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, "1,2\r,3"),
              s(:hash,
                s(:pair,
                  s(:sym, :row_sep),
                  s(:str, "\n"))))),
          s(:lvasgn, :bad_data,
            s(:send,
              s(:dstr,
                s(:str, "    line,1,abc\n"),
                s(:str, "    line,2,\"def\nghi\"\n"),
                s(:str, "\n"),
                s(:str, "    line,4,some\rjunk\n"),
                s(:str, "    line,5,jkl\n")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :lines,
            s(:send,
              s(:send,
                s(:lvar, :bad_data), :lines), :to_a)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :lines), :size)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\Aline,4"),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :lines), :find),
              s(:args,
                s(:arg, :l)),
              s(:send,
                s(:lvar, :l), :=~,
                s(:regexp,
                  s(:str, "some\\rjunk"),
                  s(:regopt))))),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:lvar, :bad_data))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:send,
                      s(:lvar, :csv), :shift)),
                  s(:send, nil, :assert_send,
                    s(:array,
                      s(:send,
                        s(:lvar, :csv), :lineno),
                      s(:sym, :<),
                      s(:int, 4))))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :CSV), :MalformedCSVError)), nil,
                s(:send, nil, :assert_equal,
                  s(:str, "Unquoted fields do not allow \\r or \\n (line 4)."),
                  s(:send,
                    s(:gvar, :$!), :message))), nil)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const,
                s(:const, nil, :CSV), :MalformedCSVError)),
            s(:args),
            s(:send,
              s(:const, nil, :CSV), :parse_line,
              s(:str, "1,2,\"3..."))),
          s(:lvasgn, :bad_data,
            s(:send,
              s(:dstr,
                s(:str, "    line,1,abc\n"),
                s(:str, "    line,2,\"def\nghi\"\n"),
                s(:str, "\n"),
                s(:str, "    line,4,8'10\"\n"),
                s(:str, "    line,5,jkl\n")), :gsub,
              s(:regexp,
                s(:str, "^ +"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :lines,
            s(:send,
              s(:send,
                s(:lvar, :bad_data), :lines), :to_a)),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:lvar, :lines), :size)),
          s(:send, nil, :assert_match,
            s(:regexp,
              s(:str, "\\Aline,4"),
              s(:regopt)),
            s(:block,
              s(:send,
                s(:lvar, :lines), :find),
              s(:args,
                s(:arg, :l)),
              s(:send,
                s(:lvar, :l), :=~,
                s(:regexp,
                  s(:str, "8'10\""),
                  s(:regopt))))),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :CSV), :new,
              s(:lvar, :bad_data))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:begin,
                  s(:send, nil, :assert_not_nil,
                    s(:send,
                      s(:lvar, :csv), :shift)),
                  s(:send, nil, :assert_send,
                    s(:array,
                      s(:send,
                        s(:lvar, :csv), :lineno),
                      s(:sym, :<),
                      s(:int, 4))))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :CSV), :MalformedCSVError)), nil,
                s(:send, nil, :assert_equal,
                  s(:str, "Illegal quoting in line 4."),
                  s(:send,
                    s(:gvar, :$!), :message))), nil)))),
      s(:def, :test_the_parse_fails_fast_when_it_can_for_unquoted_fields,
        s(:args),
        s(:send, nil, :assert_parse_errors_out,
          s(:send,
            s(:str, "valid,fields,bad start\""), :+,
            s(:const, nil, :BIG_DATA)))),
      s(:def, :test_the_parse_fails_fast_when_it_can_for_unescaped_quotes,
        s(:args),
        s(:send, nil, :assert_parse_errors_out,
          s(:send,
            s(:str, "valid,fields,\"bad start\"unescaped"), :+,
            s(:const, nil, :BIG_DATA)))),
      s(:def, :test_field_size_limit_controls_lookahead,
        s(:args),
        s(:send, nil, :assert_parse_errors_out,
          s(:send,
            s(:send,
              s(:str, "valid,fields,\""), :+,
              s(:const, nil, :BIG_DATA)), :+,
            s(:str, "\"")),
          s(:hash,
            s(:pair,
              s(:sym, :field_size_limit),
              s(:int, 2048))))),
      s(:send, nil, :private),
      s(:def, :assert_parse_errors_out,
        s(:args,
          s(:restarg, :args)),
        s(:block,
          s(:send, nil, :assert_raise,
            s(:const,
              s(:const, nil, :CSV), :MalformedCSVError)),
          s(:args),
          s(:block,
            s(:send,
              s(:const, nil, :Timeout), :timeout,
              s(:float, 0.2)),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :CSV), :parse,
                s(:splat,
                  s(:lvar, :args))),
              s(:send, nil, :fail,
                s(:str, "Parse didn't error out")))))))))
