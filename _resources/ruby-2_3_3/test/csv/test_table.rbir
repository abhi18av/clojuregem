s(:begin,
  s(:send, nil, :require_relative,
    s(:str, "base")),
  s(:class,
    s(:const,
      s(:const, nil, :TestCSV), :Table),
    s(:const, nil, :TestCSV),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :DifferentOFS)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@rows,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Row), :new,
                s(:array,
                  s(:str, "A"),
                  s(:str, "B"),
                  s(:str, "C")),
                s(:array,
                  s(:int, 1),
                  s(:int, 2),
                  s(:int, 3))),
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Row), :new,
                s(:array,
                  s(:str, "A"),
                  s(:str, "B"),
                  s(:str, "C")),
                s(:array,
                  s(:int, 4),
                  s(:int, 5),
                  s(:int, 6))),
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Row), :new,
                s(:array,
                  s(:str, "A"),
                  s(:str, "B"),
                  s(:str, "C")),
                s(:array,
                  s(:int, 7),
                  s(:int, 8),
                  s(:int, 9))))),
          s(:ivasgn, :@table,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Table), :new,
              s(:ivar, :@rows))),
          s(:ivasgn, :@header_table,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Table), :new,
              s(:send,
                s(:array,
                  s(:send,
                    s(:const,
                      s(:const, nil, :CSV), :Row), :new,
                    s(:array,
                      s(:str, "A"),
                      s(:str, "B"),
                      s(:str, "C")),
                    s(:array,
                      s(:str, "A"),
                      s(:str, "B"),
                      s(:str, "C")),
                    s(:true))), :+,
                s(:ivar, :@rows)))))),
      s(:def, :test_initialze,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_nil,
            s(:ivar, :@table)),
          s(:send, nil, :assert_instance_of,
            s(:const,
              s(:const, nil, :CSV), :Table),
            s(:ivar, :@table)))),
      s(:def, :test_modes,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:sym, :col_or_row),
            s(:send,
              s(:ivar, :@table), :mode)),
          s(:lvasgn, :cols,
            s(:send,
              s(:ivar, :@table), :by_col)),
          s(:send, nil, :assert_equal,
            s(:sym, :col_or_row),
            s(:send,
              s(:ivar, :@table), :mode)),
          s(:send, nil, :assert_equal,
            s(:sym, :col),
            s(:send,
              s(:lvar, :cols), :mode)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:lvar, :cols)),
          s(:lvasgn, :rows,
            s(:send,
              s(:ivar, :@table), :by_row)),
          s(:send, nil, :assert_equal,
            s(:sym, :col_or_row),
            s(:send,
              s(:ivar, :@table), :mode)),
          s(:send, nil, :assert_equal,
            s(:sym, :row),
            s(:send,
              s(:lvar, :rows), :mode)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:lvar, :rows)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:send,
              s(:ivar, :@table), :by_row!)),
          s(:send, nil, :assert_equal,
            s(:sym, :row),
            s(:send,
              s(:ivar, :@table), :mode)),
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:send,
              s(:ivar, :@table), :by_col_or_row!)),
          s(:send, nil, :assert_equal,
            s(:sym, :col_or_row),
            s(:send,
              s(:ivar, :@table), :mode)))),
      s(:def, :test_headers,
        s(:args),
        s(:send, nil, :assert_equal,
          s(:send,
            s(:send,
              s(:ivar, :@rows), :first), :headers),
          s(:send,
            s(:ivar, :@table), :headers))),
      s(:def, :test_headers_empty,
        s(:args),
        s(:begin,
          s(:lvasgn, :t,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Table), :new,
              s(:array))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const, nil, :Array), :new),
            s(:send,
              s(:lvar, :t), :headers)))),
      s(:def, :test_index,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@rows), :each_index),
            s(:args,
              s(:arg, :i)),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:ivar, :@rows), :[],
                s(:lvar, :i)),
              s(:send,
                s(:ivar, :@table), :[],
                s(:lvar, :i)))),
          s(:send, nil, :assert_equal,
            s(:nil),
            s(:send,
              s(:ivar, :@table), :[],
              s(:int, 100))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:send,
                s(:ivar, :@table), :[],
                s(:int, 1)),
              s(:send,
                s(:ivar, :@table), :[],
                s(:int, 2))),
            s(:send,
              s(:ivar, :@table), :[],
              s(:irange,
                s(:int, 1),
                s(:int, 2)))),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@rows), :first), :headers), :each),
            s(:args,
              s(:arg, :header)),
            s(:send, nil, :assert_equal,
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :map),
                s(:args,
                  s(:arg, :row)),
                s(:send,
                  s(:lvar, :row), :[],
                  s(:lvar, :header))),
              s(:send,
                s(:ivar, :@table), :[],
                s(:lvar, :header)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:array,
                s(:nil)), :*,
              s(:send,
                s(:ivar, :@rows), :size)),
            s(:send,
              s(:ivar, :@table), :[],
              s(:str, "Z"))),
          s(:send, nil, :assert_equal,
            s(:int, 2),
            s(:send,
              s(:send,
                s(:ivar, :@table), :[],
                s(:int, 0)), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 6),
            s(:send,
              s(:send,
                s(:ivar, :@table), :[],
                s(:int, 1)), :[],
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:int, 5),
            s(:send,
              s(:send,
                s(:ivar, :@table), :[],
                s(:str, "B")), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:int, 9),
            s(:send,
              s(:send,
                s(:ivar, :@table), :[],
                s(:str, "C")), :[],
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "B"),
              s(:int, 2),
              s(:int, 5),
              s(:int, 8)),
            s(:send,
              s(:ivar, :@header_table), :[],
              s(:str, "B"))),
          s(:send,
            s(:ivar, :@table), :by_col!),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 5),
              s(:int, 8)),
            s(:send,
              s(:ivar, :@table), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 5),
              s(:int, 8)),
            s(:send,
              s(:ivar, :@table), :[],
              s(:str, "B"))),
          s(:send,
            s(:ivar, :@table), :by_row!),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :[],
              s(:int, 1)),
            s(:send,
              s(:ivar, :@table), :[],
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:ivar, :@table), :[],
              s(:str, "B"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :[],
              s(:int, 1)),
            s(:send,
              s(:ivar, :@table), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:int, 2),
              s(:int, 5),
              s(:int, 8)),
            s(:send,
              s(:send,
                s(:ivar, :@table), :by_col), :[],
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :[],
              s(:int, 1)),
            s(:send,
              s(:ivar, :@table), :[],
              s(:int, 1))))),
      s(:def, :test_set_row_or_column,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:int, 2),
            s(:array,
              s(:int, 10),
              s(:int, 11),
              s(:int, 12))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:int, 3),
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12)),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:str, "Type"),
            s(:str, "data")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C"),
                s(:str, "Type")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:str, "data")),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6),
                s(:str, "data")),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12),
                s(:str, "data")),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15),
                s(:str, "data"))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:str, "Index"),
            s(:array,
              s(:int, 1),
              s(:int, 2),
              s(:int, 3))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C"),
                s(:str, "Type"),
                s(:str, "Index")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:str, "data"),
                s(:int, 1)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6),
                s(:str, "data"),
                s(:int, 2)),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12),
                s(:str, "data"),
                s(:int, 3)),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15),
                s(:str, "data"),
                s(:nil))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:str, "B"),
            s(:array,
              s(:int, 100),
              s(:int, 200))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C"),
                s(:str, "Type"),
                s(:str, "Index")),
              s(:array,
                s(:int, 1),
                s(:int, 100),
                s(:int, 3),
                s(:str, "data"),
                s(:int, 1)),
              s(:array,
                s(:int, 4),
                s(:int, 200),
                s(:int, 6),
                s(:str, "data"),
                s(:int, 2)),
              s(:array,
                s(:int, 10),
                s(:nil),
                s(:int, 12),
                s(:str, "data"),
                s(:int, 3)),
              s(:array,
                s(:int, 13),
                s(:nil),
                s(:int, 15),
                s(:str, "data"),
                s(:nil))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "    A,B,C,Type,Index\n"),
                s(:str, "    1,100,3,data,1\n"),
                s(:str, "    4,200,6,data,2\n"),
                s(:str, "    10,,12,data,3\n"),
                s(:str, "    13,,15,data,\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, "")),
            s(:send,
              s(:ivar, :@table), :to_csv)),
          s(:send,
            s(:ivar, :@header_table), :[]=,
            s(:str, "Type"),
            s(:str, "data")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "Type"),
              s(:str, "data"),
              s(:str, "data"),
              s(:str, "data")),
            s(:send,
              s(:ivar, :@header_table), :[],
              s(:str, "Type"))),
          s(:send,
            s(:ivar, :@table), :by_col!),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:int, 1),
            s(:array,
              s(:int, 2),
              s(:int, 5),
              s(:int, 11),
              s(:int, 14))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C"),
                s(:str, "Type"),
                s(:str, "Index")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:str, "data"),
                s(:int, 1)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6),
                s(:str, "data"),
                s(:int, 2)),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12),
                s(:str, "data"),
                s(:int, 3)),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15),
                s(:str, "data"),
                s(:nil))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:str, "Extra"),
            s(:str, "new stuff")),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C"),
                s(:str, "Type"),
                s(:str, "Index"),
                s(:str, "Extra")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:str, "data"),
                s(:int, 1),
                s(:str, "new stuff")),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6),
                s(:str, "data"),
                s(:int, 2),
                s(:str, "new stuff")),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12),
                s(:str, "data"),
                s(:int, 3),
                s(:str, "new stuff")),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15),
                s(:str, "data"),
                s(:nil),
                s(:str, "new stuff"))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send,
            s(:ivar, :@table), :by_row!),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:int, 1),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 1),
                  s(:int, 6))), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C"),
                s(:str, "Type"),
                s(:str, "Index"),
                s(:str, "Extra")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:str, "data"),
                s(:int, 1),
                s(:str, "new stuff")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3),
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12),
                s(:str, "data"),
                s(:int, 3),
                s(:str, "new stuff")),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15),
                s(:str, "data"),
                s(:nil),
                s(:str, "new stuff"))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:ivar, :@table), :[]=,
              s(:str, "Extra"),
              s(:nil))))),
      s(:def, :test_set_by_col_with_header_row,
        s(:args),
        s(:begin,
          s(:lvasgn, :r,
            s(:array,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Row), :new,
                s(:array,
                  s(:str, "X"),
                  s(:str, "Y"),
                  s(:str, "Z")),
                s(:array,
                  s(:int, 97),
                  s(:int, 98),
                  s(:int, 99)),
                s(:true)))),
          s(:lvasgn, :t,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Table), :new,
              s(:lvar, :r))),
          s(:send,
            s(:lvar, :t), :by_col!),
          s(:send,
            s(:lvar, :t), :[]=,
            s(:str, "A"),
            s(:array,
              s(:int, 42))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "A")),
            s(:send,
              s(:lvar, :t), :[],
              s(:str, "A"))))),
      s(:def, :test_each,
        s(:args),
        s(:begin,
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:ivar, :@table), :each),
            s(:args,
              s(:arg, :row)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@rows), :[],
                  s(:lvar, :i)),
                s(:lvar, :row)),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:int, 1)))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:block,
              s(:send,
                s(:ivar, :@table), :each),
              s(:args), nil)),
          s(:send,
            s(:ivar, :@table), :by_col!),
          s(:lvasgn, :headers,
            s(:send,
              s(:ivar, :@table), :headers)),
          s(:block,
            s(:send,
              s(:ivar, :@table), :each),
            s(:args,
              s(:arg, :header),
              s(:arg, :column)),
            s(:begin,
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:lvar, :headers), :shift),
                s(:lvar, :header)),
              s(:send, nil, :assert_equal,
                s(:send,
                  s(:ivar, :@table), :[],
                  s(:lvar, :header)),
                s(:lvar, :column)))),
          s(:send,
            s(:ivar, :@table), :by_col_or_row!),
          s(:block,
            s(:send,
              s(:ivar, :@table), :each),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :CSV), :Row),
              s(:lvar, :row))),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@table), :by_col), :each),
            s(:args,
              s(:arg, :tuple)),
            s(:send, nil, :assert_instance_of,
              s(:const, nil, :Array),
              s(:lvar, :tuple))),
          s(:block,
            s(:send,
              s(:ivar, :@table), :each),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :assert_instance_of,
              s(:const,
                s(:const, nil, :CSV), :Row),
              s(:lvar, :row))))),
      s(:def, :test_enumerable,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :values_at,
              s(:int, 0),
              s(:int, 2)),
            s(:block,
              s(:send,
                s(:ivar, :@table), :select),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:str, "B")), :%,
                    s(:int, 2))), :zero?))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :[],
              s(:int, 1)),
            s(:block,
              s(:send,
                s(:ivar, :@table), :find),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:send,
                  s(:lvar, :row), :[],
                  s(:str, "C")), :>,
                s(:int, 5)))))),
      s(:def, :test_to_a,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 8),
                s(:int, 9))),
            s(:send,
              s(:ivar, :@table), :to_a)),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 1),
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 8),
                s(:int, 9))),
            s(:send,
              s(:ivar, :@header_table), :to_a)))),
      s(:def, :test_to_csv,
        s(:args),
        s(:begin,
          s(:lvasgn, :csv,
            s(:send,
              s(:dstr,
                s(:str, "    A,B,C\n"),
                s(:str, "    1,2,3\n"),
                s(:str, "    4,5,6\n"),
                s(:str, "    7,8,9\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, ""))),
          s(:send, nil, :assert_equal,
            s(:lvar, :csv),
            s(:send,
              s(:ivar, :@table), :to_csv)),
          s(:send, nil, :assert_equal,
            s(:lvar, :csv),
            s(:send,
              s(:ivar, :@table), :to_s)),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:lvar, :csv), :gsub,
                s(:str, ","),
                s(:str, "|")), :gsub,
              s(:str, "\n"),
              s(:str, "\r\n")),
            s(:send,
              s(:ivar, :@table), :to_csv,
              s(:hash,
                s(:pair,
                  s(:sym, :col_sep),
                  s(:str, "|")),
                s(:pair,
                  s(:sym, :row_sep),
                  s(:str, "\r\n"))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :csv), :lines), :to_a), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1))), :join,
              s(:str, "")),
            s(:send,
              s(:ivar, :@table), :to_csv,
              s(:hash,
                s(:pair,
                  s(:sym, :write_headers),
                  s(:false))))),
          s(:send, nil, :assert_equal,
            s(:lvar, :csv),
            s(:send,
              s(:ivar, :@header_table), :to_csv)))),
      s(:def, :test_append,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:send,
              s(:ivar, :@table), :<<,
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12)))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 10),
                s(:int, 11),
                s(:int, 12))),
            s(:send,
              s(:ivar, :@table), :[],
              s(:int, -1))),
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:send,
              s(:ivar, :@table), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :CSV), :Row), :new,
                s(:array,
                  s(:str, "A"),
                  s(:str, "B"),
                  s(:str, "C")),
                s(:array,
                  s(:int, 13),
                  s(:int, 14),
                  s(:int, 15))))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:const,
                s(:const, nil, :CSV), :Row), :new,
              s(:array,
                s(:str, "A"),
                s(:str, "B"),
                s(:str, "C")),
              s(:array,
                s(:int, 13),
                s(:int, 14),
                s(:int, 15))),
            s(:send,
              s(:ivar, :@table), :[],
              s(:int, -1))))),
      s(:def, :test_delete_mixed,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :[],
              s(:int, 1)),
            s(:send,
              s(:ivar, :@table), :delete,
              s(:int, 1))),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:ivar, :@rows), :map),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:lvar, :row), :[],
                s(:str, "A"))),
            s(:send,
              s(:ivar, :@table), :delete,
              s(:str, "A"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "    B,C\n"),
                s(:str, "    2,3\n"),
                s(:str, "    8,9\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, "")),
            s(:send,
              s(:ivar, :@table), :to_csv)))),
      s(:def, :test_delete_column,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@table), :by_col!),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:ivar, :@rows), :map),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:lvar, :row), :[],
                s(:int, 0))),
            s(:send,
              s(:ivar, :@table), :delete,
              s(:int, 0))),
          s(:send, nil, :assert_equal,
            s(:block,
              s(:send,
                s(:ivar, :@rows), :map),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:lvar, :row), :[],
                s(:str, "C"))),
            s(:send,
              s(:ivar, :@table), :delete,
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "    B\n"),
                s(:str, "    2\n"),
                s(:str, "    5\n"),
                s(:str, "    8\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, "")),
            s(:send,
              s(:ivar, :@table), :to_csv)))),
      s(:def, :test_delete_row,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@table), :by_row!),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :[],
              s(:int, 1)),
            s(:send,
              s(:ivar, :@table), :delete,
              s(:int, 1))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:ivar, :@table), :delete,
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "    A,B,C\n"),
                s(:str, "    1,2,3\n"),
                s(:str, "    7,8,9\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, "")),
            s(:send,
              s(:ivar, :@table), :to_csv)))),
      s(:def, :test_delete_with_blank_rows,
        s(:args),
        s(:begin,
          s(:lvasgn, :data,
            s(:str, "col1,col2\nra1,ra2\n\nrb1,rb2")),
          s(:lvasgn, :table,
            s(:send,
              s(:const, nil, :CSV), :parse,
              s(:lvar, :data),
              s(:hash,
                s(:pair,
                  s(:sym, :headers),
                  s(:true))))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:str, "ra2"),
              s(:nil),
              s(:str, "rb2")),
            s(:send,
              s(:lvar, :table), :delete,
              s(:str, "col2"))))),
      s(:def, :test_delete_if_row,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:block,
              s(:send,
                s(:ivar, :@table), :delete_if),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:str, "B")), :%,
                    s(:int, 2))), :zero?))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "    A,B,C\n"),
                s(:str, "    4,5,6\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, "")),
            s(:send,
              s(:ivar, :@table), :to_csv)))),
      s(:def, :test_delete_if_column,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@table), :by_col!),
          s(:send, nil, :assert_equal,
            s(:ivar, :@table),
            s(:block,
              s(:send,
                s(:ivar, :@table), :delete_if),
              s(:args,
                s(:arg, :h),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :h), :>,
                s(:str, "A")))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:dstr,
                s(:str, "    A\n"),
                s(:str, "    1\n"),
                s(:str, "    4\n"),
                s(:str, "    7\n")), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, "")),
            s(:send,
              s(:ivar, :@table), :to_csv)))),
      s(:def, :test_values_at,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :values_at,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :values_at,
              s(:irange,
                s(:int, 1),
                s(:int, 2))),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:irange,
                s(:int, 1),
                s(:int, 2)))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 9))),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:str, "A"),
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 2),
                s(:int, 3)),
              s(:array,
                s(:int, 5),
                s(:int, 6)),
              s(:array,
                s(:int, 8),
                s(:int, 9))),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:irange,
                s(:str, "B"),
                s(:str, "C")))),
          s(:send,
            s(:ivar, :@table), :by_col!),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 9))),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 9))),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:str, "A"),
              s(:str, "C"))),
          s(:send,
            s(:ivar, :@table), :by_row!),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :values_at,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:int, 0),
              s(:int, 2))),
          s(:block,
            s(:send, nil, :assert_raise,
              s(:const, nil, :TypeError)),
            s(:args),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:str, "A"),
              s(:str, "C"))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :values_at,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:array,
              s(:array,
                s(:int, 1),
                s(:int, 3)),
              s(:array,
                s(:int, 4),
                s(:int, 6)),
              s(:array,
                s(:int, 7),
                s(:int, 9))),
            s(:send,
              s(:send,
                s(:ivar, :@table), :by_col), :values_at,
              s(:int, 0),
              s(:int, 2))),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :values_at,
              s(:int, 0),
              s(:int, 2)),
            s(:send,
              s(:ivar, :@table), :values_at,
              s(:int, 0),
              s(:int, 2))))),
      s(:def, :test_array_delegation,
        s(:args),
        s(:begin,
          s(:send, nil, :assert_not_empty,
            s(:ivar, :@table),
            s(:str, "Table was empty.")),
          s(:send, nil, :assert_equal,
            s(:send,
              s(:ivar, :@rows), :size),
            s(:send,
              s(:ivar, :@table), :size)))),
      s(:def, :test_inspect_shows_current_mode,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:send,
              s(:ivar, :@table), :inspect)),
          s(:send, nil, :assert_include,
            s(:lvar, :str),
            s(:dstr,
              s(:str, "mode:"),
              s(:begin,
                s(:send,
                  s(:ivar, :@table), :mode))),
            s(:str, "Mode not shown.")),
          s(:send,
            s(:ivar, :@table), :by_col!),
          s(:lvasgn, :str,
            s(:send,
              s(:ivar, :@table), :inspect)),
          s(:send, nil, :assert_include,
            s(:lvar, :str),
            s(:dstr,
              s(:str, "mode:"),
              s(:begin,
                s(:send,
                  s(:ivar, :@table), :mode))),
            s(:str, "Mode not shown.")))),
      s(:def, :test_inspect_encoding_is_ascii_compatible,
        s(:args),
        s(:send, nil, :assert_send,
          s(:array,
            s(:const, nil, :Encoding),
            s(:sym, :compatible?),
            s(:send,
              s(:const, nil, :Encoding), :find,
              s(:str, "US-ASCII")),
            s(:send,
              s(:send,
                s(:ivar, :@table), :inspect), :encoding)),
          s(:str, "inspect() was not ASCII compatible."))))))
