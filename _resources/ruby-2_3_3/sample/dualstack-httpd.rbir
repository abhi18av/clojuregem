s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:lvasgn, :port,
    s(:int, 8888)),
  s(:lvasgn, :res,
    s(:send,
      s(:const, nil, :Socket), :getaddrinfo,
      s(:nil),
      s(:lvar, :port),
      s(:nil),
      s(:const,
        s(:const, nil, :Socket), :SOCK_STREAM),
      s(:nil),
      s(:const,
        s(:const, nil, :Socket), :AI_PASSIVE))),
  s(:lvasgn, :sockpool,
    s(:array)),
  s(:lvasgn, :names,
    s(:array)),
  s(:lvasgn, :threads,
    s(:array)),
  s(:block,
    s(:send,
      s(:lvar, :res), :each),
    s(:args,
      s(:arg, :i)),
    s(:begin,
      s(:lvasgn, :s,
        s(:send,
          s(:const, nil, :TCPServer), :new,
          s(:send,
            s(:lvar, :i), :[],
            s(:int, 3)),
          s(:send,
            s(:lvar, :i), :[],
            s(:int, 1)))),
      s(:lvasgn, :n,
        s(:send,
          s(:send,
            s(:const, nil, :Socket), :getnameinfo,
            s(:send,
              s(:lvar, :s), :getsockname),
            s(:send,
              s(:const,
                s(:const, nil, :Socket), :NI_NUMERICHOST), :|,
              s(:const,
                s(:const, nil, :Socket), :NI_NUMERICSERV))), :join,
          s(:str, " port "))),
      s(:send,
        s(:lvar, :sockpool), :push,
        s(:lvar, :s)),
      s(:send,
        s(:lvar, :names), :push,
        s(:lvar, :n)))),
  s(:block,
    s(:send,
      s(:begin,
        s(:irange,
          s(:int, 0),
          s(:send,
            s(:send,
              s(:lvar, :sockpool), :size), :-,
            s(:int, 1)))), :each),
    s(:args,
      s(:arg, :i)),
    s(:begin,
      s(:lvasgn, :mysock,
        s(:send,
          s(:lvar, :sockpool), :[],
          s(:lvar, :i))),
      s(:lvasgn, :myname,
        s(:send,
          s(:lvar, :names), :[],
          s(:lvar, :i))),
      s(:send,
        s(:const, nil, :STDERR), :print,
        s(:dstr,
          s(:str, "socket "),
          s(:begin,
            s(:lvar, :mysock)),
          s(:str, " started, address "),
          s(:begin,
            s(:lvar, :myname)),
          s(:str, "\n"))),
      s(:send,
        s(:lvar, :threads), :[]=,
        s(:lvar, :i),
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :start),
          s(:args),
          s(:begin,
            s(:lvasgn, :ls,
              s(:lvar, :mysock)),
            s(:lvasgn, :t,
              s(:send,
                s(:const, nil, :Thread), :current)),
            s(:send,
              s(:const, nil, :STDERR), :print,
              s(:dstr,
                s(:str, "socket "),
                s(:begin,
                  s(:lvar, :myname)),
                s(:str, " listener started, pid "),
                s(:begin,
                  s(:gvar, :$$)),
                s(:str, " thread "),
                s(:begin,
                  s(:lvar, :t)),
                s(:str, "\n"))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :as,
                  s(:send,
                    s(:lvar, :ls), :accept)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :start),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :STDERR), :print,
                      s(:dstr,
                        s(:str, "socket "),
                        s(:begin,
                          s(:lvar, :myname)),
                        s(:str, " accepted, thread ")),
                      s(:send,
                        s(:const, nil, :Thread), :current),
                      s(:str, "\n")),
                    s(:lvasgn, :s,
                      s(:lvar, :as)),
                    s(:lvasgn, :str,
                      s(:str, "")),
                    s(:while,
                      s(:lvasgn, :line,
                        s(:send,
                          s(:lvar, :s), :gets)),
                      s(:begin,
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:lvar, :line), :==,
                              s(:str, "\r\n")),
                            s(:send,
                              s(:lvar, :line), :==,
                              s(:str, "\n"))),
                          s(:break), nil),
                        s(:send,
                          s(:lvar, :str), :<<,
                          s(:lvar, :line)))),
                    s(:send,
                      s(:const, nil, :STDERR), :print,
                      s(:dstr,
                        s(:str, "socket "),
                        s(:begin,
                          s(:lvar, :myname)),
                        s(:str, " got string\n"))),
                    s(:send,
                      s(:lvar, :s), :write,
                      s(:str, "HTTP/1.0 200 OK\n")),
                    s(:send,
                      s(:lvar, :s), :write,
                      s(:str, "Content-type: text/plain\n\n")),
                    s(:send,
                      s(:lvar, :s), :write,
                      s(:dstr,
                        s(:str, "this is test: my name is "),
                        s(:begin,
                          s(:lvar, :myname)),
                        s(:str, ", you sent:\n"))),
                    s(:send,
                      s(:lvar, :s), :write,
                      s(:str, "---start\n")),
                    s(:send,
                      s(:lvar, :s), :write,
                      s(:lvar, :str)),
                    s(:send,
                      s(:lvar, :s), :write,
                      s(:str, "---end\n")),
                    s(:send,
                      s(:lvar, :s), :close),
                    s(:send,
                      s(:const, nil, :STDERR), :print,
                      s(:dstr,
                        s(:str, "socket "),
                        s(:begin,
                          s(:lvar, :myname)),
                        s(:str, " processed, thread ")),
                      s(:send,
                        s(:const, nil, :Thread), :current),
                      s(:str, " terminating\n"))))))))))),
  s(:for,
    s(:lvasgn, :t),
    s(:lvar, :threads),
    s(:send,
      s(:lvar, :t), :join)))
