s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "openssl")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:lvasgn, :options,
    s(:send,
      s(:const, nil, :ARGV), :getopts,
      s(:str, "p:c:k:C:"))),
  s(:lvasgn, :port,
    s(:or,
      s(:send,
        s(:lvar, :options), :[],
        s(:str, "p")),
      s(:str, "2000"))),
  s(:lvasgn, :cert_file,
    s(:send,
      s(:lvar, :options), :[],
      s(:str, "c"))),
  s(:lvasgn, :key_file,
    s(:send,
      s(:lvar, :options), :[],
      s(:str, "k"))),
  s(:lvasgn, :ca_path,
    s(:send,
      s(:lvar, :options), :[],
      s(:str, "C"))),
  s(:if,
    s(:and,
      s(:lvar, :cert_file),
      s(:lvar, :key_file)),
    s(:begin,
      s(:lvasgn, :cert,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
          s(:send,
            s(:const, nil, :File), :read,
            s(:lvar, :cert_file)))),
      s(:lvasgn, :key,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
          s(:send,
            s(:const, nil, :File), :read,
            s(:lvar, :key_file))))),
    s(:begin,
      s(:lvasgn, :key,
        s(:block,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
            s(:int, 512)),
          s(:args),
          s(:send, nil, :print,
            s(:str, ".")))),
      s(:send, nil, :puts),
      s(:lvasgn, :cert,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
      s(:send,
        s(:lvar, :cert), :version=,
        s(:int, 2)),
      s(:send,
        s(:lvar, :cert), :serial=,
        s(:int, 0)),
      s(:lvasgn, :name,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :X509), :Name), :new,
          s(:array,
            s(:array,
              s(:str, "C"),
              s(:str, "JP")),
            s(:array,
              s(:str, "O"),
              s(:str, "TEST")),
            s(:array,
              s(:str, "CN"),
              s(:str, "localhost"))))),
      s(:send,
        s(:lvar, :cert), :subject=,
        s(:lvar, :name)),
      s(:send,
        s(:lvar, :cert), :issuer=,
        s(:lvar, :name)),
      s(:send,
        s(:lvar, :cert), :not_before=,
        s(:send,
          s(:const, nil, :Time), :now)),
      s(:send,
        s(:lvar, :cert), :not_after=,
        s(:send,
          s(:send,
            s(:const, nil, :Time), :now), :+,
          s(:int, 3600))),
      s(:send,
        s(:lvar, :cert), :public_key=,
        s(:send,
          s(:lvar, :key), :public_key)),
      s(:lvasgn, :ef,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new,
          s(:nil),
          s(:lvar, :cert))),
      s(:send,
        s(:lvar, :cert), :extensions=,
        s(:array,
          s(:send,
            s(:lvar, :ef), :create_extension,
            s(:str, "basicConstraints"),
            s(:str, "CA:FALSE")),
          s(:send,
            s(:lvar, :ef), :create_extension,
            s(:str, "subjectKeyIdentifier"),
            s(:str, "hash")),
          s(:send,
            s(:lvar, :ef), :create_extension,
            s(:str, "extendedKeyUsage"),
            s(:str, "serverAuth")),
          s(:send,
            s(:lvar, :ef), :create_extension,
            s(:str, "keyUsage"),
            s(:str, "keyEncipherment,dataEncipherment,digitalSignature")))),
      s(:send,
        s(:lvar, :ef), :issuer_certificate=,
        s(:lvar, :cert)),
      s(:send,
        s(:lvar, :cert), :add_extension,
        s(:send,
          s(:lvar, :ef), :create_extension,
          s(:str, "authorityKeyIdentifier"),
          s(:str, "keyid:always,issuer:always"))),
      s(:send,
        s(:lvar, :cert), :sign,
        s(:lvar, :key),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)))),
  s(:lvasgn, :ctx,
    s(:send,
      s(:const,
        s(:const,
          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
  s(:send,
    s(:lvar, :ctx), :key=,
    s(:lvar, :key)),
  s(:send,
    s(:lvar, :ctx), :cert=,
    s(:lvar, :cert)),
  s(:if,
    s(:lvar, :ca_path),
    s(:begin,
      s(:send,
        s(:lvar, :ctx), :verify_mode=,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER), :|,
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :SSL), :VERIFY_FAIL_IF_NO_PEER_CERT))),
      s(:send,
        s(:lvar, :ctx), :ca_path=,
        s(:lvar, :ca_path))),
    s(:send,
      s(:gvar, :$stderr), :puts,
      s(:str, "!!! WARNING: PEER CERTIFICATE WON'T BE VERIFIED !!!"))),
  s(:lvasgn, :tcps,
    s(:send,
      s(:const, nil, :TCPServer), :new,
      s(:lvar, :port))),
  s(:lvasgn, :ssls,
    s(:send,
      s(:const,
        s(:const,
          s(:const, nil, :OpenSSL), :SSL), :SSLServer), :new,
      s(:lvar, :tcps),
      s(:lvar, :ctx))),
  s(:block,
    s(:send, nil, :loop),
    s(:args),
    s(:begin,
      s(:lvasgn, :ns,
        s(:send,
          s(:lvar, :ssls), :accept)),
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "connected from "),
          s(:begin,
            s(:send,
              s(:lvar, :ns), :peeraddr)))),
      s(:while,
        s(:lvasgn, :line,
          s(:send,
            s(:lvar, :ns), :gets)),
        s(:begin,
          s(:send, nil, :puts,
            s(:send,
              s(:lvar, :line), :inspect)),
          s(:send,
            s(:lvar, :ns), :write,
            s(:lvar, :line)))),
      s(:send, nil, :puts,
        s(:str, "connection closed")),
      s(:send,
        s(:lvar, :ns), :close))))
