s(:begin,
  s(:send, nil, :require,
    s(:str, "benchmark")),
  s(:def, :foo0,
    s(:args), nil),
  s(:def, :foo3,
    s(:args,
      s(:arg, :a),
      s(:arg, :b),
      s(:arg, :c)), nil),
  s(:def, :foo6,
    s(:args,
      s(:arg, :a),
      s(:arg, :b),
      s(:arg, :c),
      s(:arg, :d),
      s(:arg, :e),
      s(:arg, :f)), nil),
  s(:def, :iter0,
    s(:args),
    s(:yield)),
  s(:def, :iter1,
    s(:args),
    s(:yield,
      s(:int, 1))),
  s(:def, :iter3,
    s(:args),
    s(:yield,
      s(:int, 1),
      s(:int, 2),
      s(:int, 3))),
  s(:def, :iter6,
    s(:args),
    s(:yield,
      s(:int, 1),
      s(:int, 2),
      s(:int, 3),
      s(:int, 4),
      s(:int, 5),
      s(:int, 6))),
  s(:block,
    s(:send,
      s(:begin,
        s(:irange,
          s(:int, 1),
          s(:int, 6))), :each),
    s(:args,
      s(:arg, :i)),
    s(:begin,
      s(:lvasgn, :kws,
        s(:block,
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:lvar, :i))), :map),
          s(:args,
            s(:arg, :e)),
          s(:dstr,
            s(:str, "k"),
            s(:begin,
              s(:lvar, :e)),
            s(:str, ": "),
            s(:begin,
              s(:lvar, :e))))),
      s(:send, nil, :eval,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "    def foo_kw"),
          s(:begin,
            s(:lvar, :i)),
          s(:str, "("),
          s(:begin,
            s(:send,
              s(:lvar, :kws), :join,
              s(:str, ", "))),
          s(:str, ")\n"),
          s(:str, "    end\n"),
          s(:str, "  "))),
      s(:lvasgn, :kws,
        s(:block,
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:lvar, :i))), :map),
          s(:args,
            s(:arg, :e)),
          s(:dstr,
            s(:str, "k"),
            s(:begin,
              s(:lvar, :e)),
            s(:str, ":")))),
      s(:send, nil, :eval,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "    def foo_required_kw"),
          s(:begin,
            s(:lvar, :i)),
          s(:str, "("),
          s(:begin,
            s(:send,
              s(:lvar, :kws), :join,
              s(:str, ", "))),
          s(:str, ")\n"),
          s(:str, "    end\n"),
          s(:str, "  "))))),
  s(:block,
    s(:send,
      s(:begin,
        s(:irange,
          s(:int, 1),
          s(:int, 6))), :each),
    s(:args,
      s(:arg, :i)),
    s(:begin,
      s(:lvasgn, :kws,
        s(:block,
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:lvar, :i))), :map),
          s(:args,
            s(:arg, :e)),
          s(:dstr,
            s(:str, "k"),
            s(:begin,
              s(:lvar, :e)),
            s(:str, ": "),
            s(:begin,
              s(:lvar, :e)),
            s(:str, " + 1")))),
      s(:send, nil, :eval,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "    def foo_complex_kw"),
          s(:begin,
            s(:lvar, :i)),
          s(:str, "("),
          s(:begin,
            s(:send,
              s(:lvar, :kws), :join,
              s(:str, ", "))),
          s(:str, ")\n"),
          s(:str, "    end\n"),
          s(:str, "  "))))),
  s(:block,
    s(:send,
      s(:begin,
        s(:irange,
          s(:int, 1),
          s(:int, 6))), :each),
    s(:args,
      s(:arg, :i)),
    s(:begin,
      s(:lvasgn, :kws,
        s(:block,
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 1),
                s(:lvar, :i))), :map),
          s(:args,
            s(:arg, :e)),
          s(:dstr,
            s(:str, "k"),
            s(:begin,
              s(:lvar, :e)),
            s(:str, ": "),
            s(:begin,
              s(:lvar, :e))))),
      s(:send, nil, :eval,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "    def iter_kw"),
          s(:begin,
            s(:lvar, :i)),
          s(:str, "\n"),
          s(:str, "      yield "),
          s(:begin,
            s(:send,
              s(:lvar, :kws), :join,
              s(:str, ", "))),
          s(:str, "\n"),
          s(:str, "    end\n"),
          s(:str, "  "))))),
  s(:lvasgn, :ary1,
    s(:array,
      s(:int, 1))),
  s(:lvasgn, :ary2,
    s(:array,
      s(:array,
        s(:int, 1),
        s(:int, 2),
        s(:int, 3),
        s(:int, 4),
        s(:int, 5)))),
  s(:lvasgn, :test_methods,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  # empty 1\n"),
      s(:str, "  # empty 2\n"),
      s(:str, "  foo0\n"),
      s(:str, "  foo3 1, 2, 3\n"),
      s(:str, "  foo6 1, 2, 3, 4, 5, 6\n"),
      s(:str, "  foo_kw1\n"),
      s(:str, "  foo_kw2\n"),
      s(:str, "  foo_kw3\n"),
      s(:str, "  foo_kw4\n"),
      s(:str, "  foo_kw5\n"),
      s(:str, "  foo_kw6\n"),
      s(:str, "  foo_kw6 k1: 1\n"),
      s(:str, "  foo_kw6 k1: 1, k2: 2\n"),
      s(:str, "  foo_kw6 k1: 1, k2: 2, k3: 3\n"),
      s(:str, "  foo_kw6 k1: 1, k2: 2, k3: 3, k4: 4\n"),
      s(:str, "  foo_kw6 k1: 1, k2: 2, k3: 3, k4: 4, k5: 5\n"),
      s(:str, "  foo_kw6 k1: 1, k2: 2, k3: 3, k4: 4, k5: 5, k6: 6\n"),
      s(:str, "  foo_required_kw1 k1: 1\n"),
      s(:str, "  foo_required_kw2 k1: 1, k2: 2\n"),
      s(:str, "  foo_required_kw3 k1: 1, k2: 2, k3: 3\n"),
      s(:str, "  foo_required_kw4 k1: 1, k2: 2, k3: 3, k4: 4\n"),
      s(:str, "  foo_required_kw5 k1: 1, k2: 2, k3: 3, k4: 4, k5: 5\n"),
      s(:str, "  foo_required_kw6 k1: 1, k2: 2, k3: 3, k4: 4, k5: 5, k6: 6\n"),
      s(:str, "  foo_complex_kw1\n"),
      s(:str, "  foo_complex_kw2\n"),
      s(:str, "  foo_complex_kw3\n"),
      s(:str, "  foo_complex_kw4\n"),
      s(:str, "  foo_complex_kw5\n"),
      s(:str, "  foo_complex_kw6\n"),
      s(:str, "  foo_complex_kw6 k1: 1\n"),
      s(:str, "  foo_complex_kw6 k1: 1, k2: 2\n"),
      s(:str, "  foo_complex_kw6 k1: 1, k2: 2, k3: 3\n"),
      s(:str, "  foo_complex_kw6 k1: 1, k2: 2, k3: 3, k4: 4\n"),
      s(:str, "  foo_complex_kw6 k1: 1, k2: 2, k3: 3, k4: 4, k5: 5\n"),
      s(:str, "  foo_complex_kw6 k1: 1, k2: 2, k3: 3, k4: 4, k5: 5, k6: 6\n"),
      s(:str, "  iter0{}\n"),
      s(:str, "  iter1{}\n"),
      s(:str, "  iter1{|a|}\n"),
      s(:str, "  iter3{}\n"),
      s(:str, "  iter3{|a|}\n"),
      s(:str, "  iter3{|a, b, c|}\n"),
      s(:str, "  iter6{}\n"),
      s(:str, "  iter6{|a|}\n"),
      s(:str, "  iter6{|a, b, c, d, e, f, g|}\n"),
      s(:str, "  iter0{|k1: nil, k2: nil, k3: nil, k4: nil, k5: nil, k6: nil|}\n"),
      s(:str, "  iter_kw1{|k1: nil, k2: nil, k3: nil, k4: nil, k5: nil, k6: nil|}\n"),
      s(:str, "  iter_kw2{|k1: nil, k2: nil, k3: nil, k4: nil, k5: nil, k6: nil|}\n"),
      s(:str, "  iter_kw3{|k1: nil, k2: nil, k3: nil, k4: nil, k5: nil, k6: nil|}\n"),
      s(:str, "  iter_kw4{|k1: nil, k2: nil, k3: nil, k4: nil, k5: nil, k6: nil|}\n"),
      s(:str, "  iter_kw5{|k1: nil, k2: nil, k3: nil, k4: nil, k5: nil, k6: nil|}\n"),
      s(:str, "  iter_kw6{|k1: nil, k2: nil, k3: nil, k4: nil, k5: nil, k6: nil|}\n"),
      s(:str, "  ary1.each{|e|}\n"),
      s(:str, "  ary1.each{|e,|}\n"),
      s(:str, "  ary1.each{|a, b, c, d, e|}\n"),
      s(:str, "  ary2.each{|e|}\n"),
      s(:str, "  ary2.each{|e,|}\n"),
      s(:str, "  ary2.each{|a, b, c, d, e|}\n"))),
  s(:casgn, nil, :N,
    s(:int, 10000000)),
  s(:lvasgn, :max_line,
    s(:block,
      s(:send,
        s(:send,
          s(:lvar, :test_methods), :each_line), :max_by),
      s(:args,
        s(:arg, :line)),
      s(:send,
        s(:send,
          s(:lvar, :line), :strip), :size))),
  s(:lvasgn, :max_size,
    s(:send,
      s(:send,
        s(:lvar, :max_line), :strip), :size)),
  s(:block,
    s(:send,
      s(:const, nil, :Benchmark), :bm,
      s(:lvar, :max_size)),
    s(:args,
      s(:arg, :x)),
    s(:begin,
      s(:lvasgn, :str,
        s(:send,
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :test_methods), :each_line), :map),
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:send,
                s(:lvar, :line), :strip!),
              s(:if,
                s(:send,
                  s(:lvar, :line), :empty?),
                s(:next), nil),
              s(:dstr,
                s(:str, "\n"),
                s(:str, "      x.report("),
                s(:begin,
                  s(:send,
                    s(:lvar, :line), :dump)),
                s(:str, "){\n"),
                s(:str, "        i = 0\n"),
                s(:str, "        while i<"),
                s(:begin,
                  s(:const, nil, :N)),
                s(:str, "\n"),
                s(:str, "          "),
                s(:begin,
                  s(:lvar, :line)),
                s(:str, "\n"),
                s(:str, "          i+=1\n"),
                s(:str, "        end\n"),
                s(:str, "      }\n"),
                s(:str, "    ")))), :join,
          s(:str, "\n"))),
      s(:send, nil, :eval,
        s(:lvar, :str)))))
