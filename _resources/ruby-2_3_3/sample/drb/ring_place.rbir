s(:begin,
  s(:send, nil, :require,
    s(:str, "drb/drb")),
  s(:send, nil, :require,
    s(:str, "rinda/ring")),
  s(:send, nil, :require,
    s(:str, "rinda/tuplespace")),
  s(:if,
    s(:gvar, :$DEBUG), nil,
    s(:begin,
      s(:if,
        s(:send, nil, :fork),
        s(:send, nil, :exit!,
          s(:int, 0)), nil),
      s(:send,
        s(:const, nil, :Process), :setsid),
      s(:if,
        s(:send, nil, :fork),
        s(:send, nil, :exit!,
          s(:int, 0)), nil))),
  s(:send,
    s(:const, nil, :DRb), :start_service,
    s(:send,
      s(:const, nil, :ARGV), :shift)),
  s(:lvasgn, :ts,
    s(:send,
      s(:const,
        s(:const, nil, :Rinda), :TupleSpace), :new)),
  s(:lvasgn, :place,
    s(:send,
      s(:const,
        s(:const, nil, :Rinda), :RingServer), :new,
      s(:lvar, :ts))),
  s(:if,
    s(:gvar, :$DEBUG),
    s(:begin,
      s(:send, nil, :puts,
        s(:send,
          s(:const, nil, :DRb), :uri)),
      s(:send,
        s(:send,
          s(:const, nil, :DRb), :thread), :join)),
    s(:begin,
      s(:send,
        s(:const, nil, :STDIN), :reopen,
        s(:const,
          s(:const, nil, :IO), :NULL)),
      s(:send,
        s(:const, nil, :STDOUT), :reopen,
        s(:const,
          s(:const, nil, :IO), :NULL),
        s(:str, "w")),
      s(:send,
        s(:const, nil, :STDERR), :reopen,
        s(:const,
          s(:const, nil, :IO), :NULL),
        s(:str, "w")),
      s(:send,
        s(:send,
          s(:const, nil, :DRb), :thread), :join))))
