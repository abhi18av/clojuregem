s(:begin,
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:class,
    s(:const, nil, :TupleSpace), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :Template), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :list)),
            s(:begin,
              s(:ivasgn, :@list,
                s(:lvar, :list)),
              s(:ivasgn, :@check_idx,
                s(:array)),
              s(:block,
                s(:send,
                  s(:ivar, :@list), :each_with_index),
                s(:args,
                  s(:arg, :x),
                  s(:arg, :i)),
                s(:if,
                  s(:lvar, :x),
                  s(:send,
                    s(:ivar, :@check_idx), :push,
                    s(:lvar, :i)), nil)),
              s(:ivasgn, :@size,
                s(:send,
                  s(:ivar, :@list), :size)))),
          s(:send, nil, :attr,
            s(:sym, :size)),
          s(:alias,
            s(:sym, :length),
            s(:sym, :size)),
          s(:def, :match,
            s(:args,
              s(:arg, :tuple)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :tuple), :size), :!=,
                  s(:send,
                    s(:self), :size)),
                s(:return,
                  s(:nil)), nil),
              s(:block,
                s(:send,
                  s(:ivar, :@check_idx), :each),
                s(:args,
                  s(:arg, :i)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@list), :[],
                      s(:lvar, :i)), :===,
                    s(:send,
                      s(:lvar, :tuple), :[],
                      s(:lvar, :i))), nil,
                  s(:return,
                    s(:false)))),
              s(:return,
                s(:true)))))),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@que,
            s(:hash)),
          s(:ivasgn, :@waiting,
            s(:hash)),
          s(:send,
            s(:ivar, :@que), :taint),
          s(:send,
            s(:ivar, :@waiting), :taint),
          s(:send,
            s(:self), :taint))),
      s(:def, :wakeup_waiting,
        s(:args,
          s(:arg, :tuple)),
        s(:begin,
          s(:lvasgn, :sz,
            s(:send,
              s(:lvar, :tuple), :length)),
          s(:if,
            s(:send,
              s(:ivar, :@waiting), :[],
              s(:lvar, :sz)), nil,
            s(:return,
              s(:nil))),
          s(:lvasgn, :x,
            s(:nil)),
          s(:lvasgn, :i,
            s(:int, -1)),
          s(:lvasgn, :found,
            s(:false)),
          s(:send,
            s(:ivar, :@waiting), :[]=,
            s(:lvar, :sz),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@waiting), :[],
                  s(:lvar, :sz)), :find_all),
              s(:args,
                s(:arg, :x)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:int, 0)), :match,
                  s(:lvar, :tuple)),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:int, 1)), :wakeup),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ThreadError)), nil, nil), nil)),
                  s(:false)),
                s(:true)))))),
      s(:def, :put_waiting,
        s(:args,
          s(:arg, :template),
          s(:arg, :thread)),
        s(:begin,
          s(:lvasgn, :sz,
            s(:send,
              s(:lvar, :template), :length)),
          s(:if,
            s(:send,
              s(:ivar, :@waiting), :[],
              s(:lvar, :sz)), nil,
            s(:send,
              s(:ivar, :@waiting), :[]=,
              s(:lvar, :sz),
              s(:array))),
          s(:send,
            s(:send,
              s(:ivar, :@waiting), :[],
              s(:lvar, :sz)), :push,
            s(:array,
              s(:send,
                s(:const, nil, :Template), :new,
                s(:lvar, :template)),
              s(:lvar, :thread))))),
      s(:send, nil, :private,
        s(:sym, :wakeup_waiting)),
      s(:send, nil, :private,
        s(:sym, :put_waiting)),
      s(:def, :get_que,
        s(:args,
          s(:arg, :template)),
        s(:begin,
          s(:lvasgn, :sz,
            s(:send,
              s(:lvar, :template), :length)),
          s(:if,
            s(:send,
              s(:ivar, :@que), :[],
              s(:lvar, :sz)), nil,
            s(:return,
              s(:nil))),
          s(:lvasgn, :template,
            s(:send,
              s(:const, nil, :Template), :new,
              s(:lvar, :template))),
          s(:lvasgn, :x,
            s(:nil)),
          s(:lvasgn, :i,
            s(:int, -1)),
          s(:lvasgn, :found,
            s(:false)),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@que), :[],
                s(:lvar, :sz)), :each_with_index),
            s(:args,
              s(:arg, :x),
              s(:arg, :i)),
            s(:if,
              s(:send,
                s(:lvar, :template), :match,
                s(:lvar, :x)),
              s(:begin,
                s(:lvasgn, :found,
                  s(:true)),
                s(:break)), nil)),
          s(:if,
            s(:lvar, :found), nil,
            s(:return,
              s(:nil))),
          s(:send,
            s(:send,
              s(:ivar, :@que), :[],
              s(:lvar, :sz)), :delete_at,
            s(:lvar, :i)),
          s(:return,
            s(:lvar, :x)))),
      s(:def, :put_que,
        s(:args,
          s(:arg, :tuple)),
        s(:begin,
          s(:lvasgn, :sz,
            s(:send,
              s(:lvar, :tuple), :length)),
          s(:if,
            s(:send,
              s(:ivar, :@que), :[],
              s(:lvar, :sz)), nil,
            s(:send,
              s(:ivar, :@que), :[]=,
              s(:lvar, :sz),
              s(:array))),
          s(:send,
            s(:send,
              s(:ivar, :@que), :[],
              s(:lvar, :sz)), :push,
            s(:lvar, :tuple)))),
      s(:send, nil, :private,
        s(:sym, :get_que)),
      s(:send, nil, :private,
        s(:sym, :put_que)),
      s(:def, :out,
        s(:args,
          s(:restarg, :tuples)),
        s(:block,
          s(:send,
            s(:lvar, :tuples), :each),
          s(:args,
            s(:arg, :tuple)),
          s(:begin,
            s(:send,
              s(:const, nil, :Thread), :critical=,
              s(:true)),
            s(:send, nil, :put_que,
              s(:lvar, :tuple)),
            s(:send, nil, :wakeup_waiting,
              s(:lvar, :tuple)),
            s(:send,
              s(:const, nil, :Thread), :critical=,
              s(:false))))),
      s(:alias,
        s(:sym, :put),
        s(:sym, :out)),
      s(:alias,
        s(:sym, :write),
        s(:sym, :out)),
      s(:def, :in,
        s(:args,
          s(:arg, :template),
          s(:optarg, :non_block,
            s(:false))),
        s(:kwbegin,
          s(:ensure,
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:begin,
                s(:send,
                  s(:const, nil, :Thread), :critical=,
                  s(:true)),
                s(:lvasgn, :tuple,
                  s(:send, nil, :get_que,
                    s(:lvar, :template))),
                s(:if,
                  s(:lvar, :tuple),
                  s(:return,
                    s(:lvar, :tuple)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :non_block),
                      s(:send, nil, :raise,
                        s(:const, nil, :ThreadError),
                        s(:str, "queue empty")), nil),
                    s(:send, nil, :put_waiting,
                      s(:lvar, :template),
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:send,
                      s(:const, nil, :Thread), :stop))))),
            s(:send,
              s(:const, nil, :Thread), :critical=,
              s(:false))))),
      s(:alias,
        s(:sym, :get),
        s(:sym, :in)),
      s(:alias,
        s(:sym, :take),
        s(:sym, :in)),
      s(:def, :rd,
        s(:args,
          s(:arg, :template),
          s(:optarg, :non_block,
            s(:false))),
        s(:begin,
          s(:lvasgn, :tuple,
            s(:send,
              s(:self), :in,
              s(:lvar, :template),
              s(:lvar, :non_block))),
          s(:send, nil, :out,
            s(:lvar, :tuple)),
          s(:lvar, :tuple))),
      s(:alias,
        s(:sym, :read),
        s(:sym, :rd)),
      s(:def, :mv,
        s(:args,
          s(:arg, :dest),
          s(:arg, :template),
          s(:optarg, :non_block,
            s(:false))),
        s(:begin,
          s(:lvasgn, :tuple,
            s(:send,
              s(:self), :in,
              s(:lvar, :template),
              s(:lvar, :non_block))),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :dest), :out,
                s(:lvar, :tuple)),
              s(:resbody, nil, nil,
                s(:send,
                  s(:self), :out,
                  s(:lvar, :tuple))), nil)))),
      s(:alias,
        s(:sym, :move),
        s(:sym, :mv)))),
  s(:if,
    s(:send,
      s(:str, "(string)"), :==,
      s(:gvar, :$0)),
    s(:begin,
      s(:lvasgn, :ts,
        s(:send,
          s(:const, nil, :TupleSpace), :new)),
      s(:lvasgn, :clients,
        s(:array)),
      s(:lvasgn, :servers,
        s(:array)),
      s(:def, :server,
        s(:args,
          s(:arg, :ts),
          s(:arg, :id)),
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :start),
          s(:args),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:lvasgn, :req,
                s(:send,
                  s(:lvar, :ts), :in,
                  s(:array,
                    s(:str, "req"),
                    s(:nil),
                    s(:nil)))),
              s(:lvasgn, :ac,
                s(:send,
                  s(:lvar, :req), :[],
                  s(:int, 1))),
              s(:lvasgn, :num,
                s(:send,
                  s(:lvar, :req), :[],
                  s(:int, 2))),
              s(:send, nil, :sleep,
                s(:lvar, :id)),
              s(:send,
                s(:lvar, :ts), :out,
                s(:array,
                  s(:lvar, :ac),
                  s(:lvar, :id),
                  s(:lvar, :num),
                  s(:send,
                    s(:lvar, :num), :*,
                    s(:lvar, :num)))))))),
      s(:def, :client,
        s(:args,
          s(:arg, :ts),
          s(:arg, :n)),
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :start),
          s(:args),
          s(:begin,
            s(:lvasgn, :ac,
              s(:send,
                s(:const, nil, :Object), :new)),
            s(:lvasgn, :tuples,
              s(:block,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:int, 1),
                      s(:int, 10))), :collect),
                s(:args,
                  s(:arg, :i)),
                s(:array,
                  s(:str, "req"),
                  s(:lvar, :ac),
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :*,
                      s(:int, 10)), :+,
                    s(:lvar, :n))))),
            s(:send,
              s(:lvar, :ts), :out,
              s(:splat,
                s(:lvar, :tuples))),
            s(:send,
              s(:lvar, :ts), :out,
              s(:send,
                s(:lvar, :tuples), :[],
                s(:int, 0))),
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "out: "),
                s(:begin,
                  s(:lvar, :n)))),
            s(:block,
              s(:send,
                s(:int, 11), :times),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :ans,
                  s(:send,
                    s(:lvar, :ts), :in,
                    s(:array,
                      s(:lvar, :ac),
                      s(:nil),
                      s(:nil),
                      s(:nil)))),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "client("),
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, ") server("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ans), :[],
                        s(:int, 1))),
                    s(:str, ") "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ans), :[],
                        s(:int, 2))),
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ans), :[],
                        s(:int, 3)))))))))),
      s(:def, :watcher,
        s(:args,
          s(:arg, :ts)),
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :start),
          s(:args),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:send, nil, :sleep,
                    s(:int, 1)),
                  s(:send, nil, :p,
                    s(:send,
                      s(:lvar, :ts), :rd,
                      s(:array,
                        s(:str, "req"),
                        s(:nil),
                        s(:nil)),
                      s(:true)))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :ThreadError)), nil,
                  s(:send, nil, :puts,
                    s(:str, "'req' not found."))), nil))))),
      s(:block,
        s(:send,
          s(:begin,
            s(:irange,
              s(:int, 0),
              s(:int, 3))), :each),
        s(:args,
          s(:arg, :n)),
        s(:send,
          s(:lvar, :servers), :push,
          s(:send, nil, :server,
            s(:lvar, :ts),
            s(:lvar, :n)))),
      s(:block,
        s(:send,
          s(:begin,
            s(:irange,
              s(:int, 1),
              s(:int, 6))), :each),
        s(:args,
          s(:arg, :n)),
        s(:send,
          s(:lvar, :clients), :push,
          s(:send, nil, :client,
            s(:lvar, :ts),
            s(:lvar, :n)))),
      s(:block,
        s(:send,
          s(:begin,
            s(:irange,
              s(:int, 1),
              s(:int, 3))), :each),
        s(:args),
        s(:send, nil, :watcher,
          s(:lvar, :ts))),
      s(:block,
        s(:send,
          s(:lvar, :clients), :each),
        s(:args,
          s(:arg, :t)),
        s(:send,
          s(:lvar, :t), :join))), nil))
