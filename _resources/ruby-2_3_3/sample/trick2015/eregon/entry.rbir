s(:begin,
  s(:class,
    s(:const, nil, :String), nil,
    s(:def, :[],
      s(:args,
        s(:restarg, :a)),
      s(:begin,
        s(:send,
          s(:gvar, :$*), :<<,
          s(:lvar, :a)),
        s(:send, nil, :b)))),
  s(:lvasgn, :_,
    s(:int, 0)),
  s(:lvasgn, :z,
    s(:send,
      s(:send,
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:dstr,
                          s(:str, "C=Fiber;s=$*;a=*0..8;l=C.new{e\n"),
                          s(:str, "xit},*a.product(a).select{|r,c|s[r][c\n"),
                          s(:str, "]==0}.")), :[],
                        s(:int, 1),
                        s(:int, 9),
                        s(:lvar, :_),
                        s(:lvar, :_),
                        s(:lvar, :_),
                        s(:int, 8),
                        s(:lvar, :_),
                        s(:lvar, :_),
                        s(:int, 5)), :+,
                      s(:send,
                        s(:dstr,
                          s(:str, "map{|r,\n"),
                          s(:str, "c|C.ne")), :[],
                        s(:lvar, :_),
                        s(:lvar, :_),
                        s(:int, 2),
                        s(:lvar, :_),
                        s(:int, 5),
                        s(:lvar, :_),
                        s(:lvar, :_),
                        s(:int, 8),
                        s(:int, 9))), :+,
                    s(:send,
                      s(:dstr,
                        s(:str, "w{o=s[r\n"),
                        s(:str, "][c];l")), :[],
                      s(:int, 8),
                      s(:lvar, :_),
                      s(:int, 6),
                      s(:int, 7),
                      s(:int, 4),
                      s(:lvar, :_),
                      s(:lvar, :_),
                      s(:lvar, :_),
                      s(:lvar, :_))), :+,
                  s(:send,
                    s(:dstr,
                      s(:str, "oop{(1.\n"),
                      s(:str, ".9).map{|n|C.yield(s[r][c]=n)if a.non\n"),
                      s(:str, "e?{|k|")), :[],
                    s(:lvar, :_),
                    s(:lvar, :_),
                    s(:lvar, :_),
                    s(:lvar, :_),
                    s(:lvar, :_),
                    s(:int, 4),
                    s(:lvar, :_),
                    s(:int, 9),
                    s(:int, 2))), :+,
                s(:send,
                  s(:dstr,
                    s(:str, "s[r][k]\n"),
                    s(:str, "==n||s")), :[],
                  s(:lvar, :_),
                  s(:int, 2),
                  s(:int, 3),
                  s(:lvar, :_),
                  s(:int, 7),
                  s(:lvar, :_),
                  s(:int, 8),
                  s(:int, 1),
                  s(:lvar, :_))), :+,
              s(:send,
                s(:dstr,
                  s(:str, "[k][c]=\n"),
                  s(:str, "=n||s[")), :[],
                s(:int, 5),
                s(:int, 6),
                s(:lvar, :_),
                s(:int, 8),
                s(:lvar, :_),
                s(:lvar, :_),
                s(:lvar, :_),
                s(:lvar, :_),
                s(:lvar, :_))), :+,
            s(:send,
              s(:dstr,
                s(:str, "r-r%3+k\n"),
                s(:str, "%3][c-c%3+k/3]==n}};s[r][c]=o;C.yield\n"),
                s(:str, "}}},C.")), :[],
              s(:lvar, :_),
              s(:lvar, :_),
              s(:lvar, :_),
              s(:lvar, :_),
              s(:int, 2),
              s(:int, 7),
              s(:int, 9),
              s(:lvar, :_),
              s(:int, 3))), :+,
          s(:send,
            s(:dstr,
              s(:str, "new{loo\n"),
              s(:str, "p{puts")), :[],
            s(:int, 9),
            s(:int, 3),
            s(:lvar, :_),
            s(:lvar, :_),
            s(:int, 8),
            s(:lvar, :_),
            s(:int, 1),
            s(:lvar, :_),
            s(:lvar, :_))), :+,
        s(:send,
          s(:dstr,
            s(:str, " s.map{\n"),
            s(:str, "|r|r*'")), :[],
          s(:int, 2),
          s(:lvar, :_),
          s(:lvar, :_),
          s(:int, 5),
          s(:lvar, :_),
          s(:lvar, :_),
          s(:lvar, :_),
          s(:int, 4),
          s(:int, 8))), :+,
      s(:dstr,
        s(:str, " '}<<''\n"),
        s(:str, ";C.yield}};c=l[i=1];loop{c=l[i+=c.res\n"),
        s(:str, "ume ? 1:-1]}")))),
  s(:send, nil, :eval,
    s(:send,
      s(:lvar, :z), :tr,
      s(:str, "\n"),
      s(:str, ""))))
