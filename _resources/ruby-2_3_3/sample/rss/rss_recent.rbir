s(:begin,
  s(:send, nil, :require,
    s(:str, "nkf")),
  s(:class,
    s(:const, nil, :String), nil,
    s(:def, :shorten,
      s(:args,
        s(:optarg, :len,
          s(:int, 120))),
      s(:begin,
        s(:lvasgn, :lines,
          s(:send,
            s(:send,
              s(:const, nil, :NKF), :nkf,
              s(:dstr,
                s(:str, "-t -m0 -f"),
                s(:begin,
                  s(:lvar, :len))),
              s(:send,
                s(:self), :gsub,
                s(:regexp,
                  s(:str, "\\n"),
                  s(:regopt)),
                s(:str, " "))), :split,
            s(:regexp,
              s(:str, "\\n"),
              s(:regopt)))),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :lines), :[],
              s(:int, 0)),
            s(:send,
              s(:lvar, :lines), :[],
              s(:int, 1))),
          s(:send,
            s(:send,
              s(:lvar, :lines), :[],
              s(:int, 0)), :concat,
            s(:str, "...")), nil),
        s(:send,
          s(:lvar, :lines), :[],
          s(:int, 0))))),
  s(:send, nil, :require,
    s(:str, "rss")),
  s(:lvasgn, :items,
    s(:array)),
  s(:lvasgn, :verbose,
    s(:false)),
  s(:def, :error,
    s(:args,
      s(:arg, :exception)),
    s(:begin,
      s(:lvasgn, :mark,
        s(:send,
          s(:str, "="), :*,
          s(:int, 20))),
      s(:lvasgn, :mark,
        s(:dstr,
          s(:begin,
            s(:lvar, :mark)),
          s(:str, " error "),
          s(:begin,
            s(:lvar, :mark)))),
      s(:send, nil, :puts,
        s(:lvar, :mark)),
      s(:send, nil, :puts,
        s(:send,
          s(:lvar, :exception), :class)),
      s(:send, nil, :puts,
        s(:send,
          s(:lvar, :exception), :message)),
      s(:send, nil, :puts,
        s(:send,
          s(:lvar, :exception), :backtrace)),
      s(:send, nil, :puts,
        s(:lvar, :mark)))),
  s(:lvasgn, :before_time,
    s(:send,
      s(:const, nil, :Time), :now)),
  s(:block,
    s(:send,
      s(:const, nil, :ARGV), :each),
    s(:args,
      s(:arg, :fname)),
    s(:begin,
      s(:if,
        s(:send,
          s(:lvar, :fname), :==,
          s(:str, "-v")),
        s(:begin,
          s(:lvasgn, :verbose,
            s(:true)),
          s(:next)), nil),
      s(:lvasgn, :rss,
        s(:nil)),
      s(:lvasgn, :f,
        s(:send,
          s(:send,
            s(:const, nil, :File), :new,
            s(:lvar, :fname)), :read)),
      s(:kwbegin,
        s(:rescue,
          s(:lvasgn, :rss,
            s(:send,
              s(:const,
                s(:const, nil, :RSS), :Parser), :parse,
              s(:lvar, :f))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :RSS), :InvalidRSSError)), nil,
            s(:begin,
              s(:if,
                s(:lvar, :verbose),
                s(:send, nil, :error,
                  s(:gvar, :$!)), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :rss,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RSS), :Parser), :parse,
                      s(:lvar, :f),
                      s(:false))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :RSS), :Error)), nil,
                    s(:if,
                      s(:lvar, :verbose),
                      s(:send, nil, :error,
                        s(:gvar, :$!)), nil)), nil)))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :RSS), :Error)), nil,
            s(:if,
              s(:lvar, :verbose),
              s(:send, nil, :error,
                s(:gvar, :$!)), nil)), nil)),
      s(:if,
        s(:send,
          s(:lvar, :rss), :nil?),
        s(:send, nil, :puts,
          s(:dstr,
            s(:begin,
              s(:lvar, :fname)),
            s(:str, " does not include RSS 1.0 or 0.9x/2.0"))),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :rss), :output_encoding=,
                s(:str, "utf-8")),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :RSS), :UnknownConversionMethodError)), nil,
                s(:if,
                  s(:lvar, :verbose),
                  s(:send, nil, :error,
                    s(:gvar, :$!)), nil)), nil)),
          s(:lvasgn, :rss,
            s(:block,
              s(:send,
                s(:lvar, :rss), :to_rss,
                s(:str, "1.0")),
              s(:args,
                s(:arg, :maker)),
              s(:begin,
                s(:or_asgn,
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :about),
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :link)),
                s(:or_asgn,
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :channel), :description),
                  s(:str, "No description")),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :maker), :items), :each),
                  s(:args,
                    s(:arg, :item)),
                  s(:begin,
                    s(:or_asgn,
                      s(:send,
                        s(:lvar, :item), :title),
                      s(:str, "UNKNOWN")),
                    s(:or_asgn,
                      s(:send,
                        s(:lvar, :item), :link),
                      s(:str, "UNKNOWN"))))))),
          s(:if,
            s(:send,
              s(:lvar, :rss), :nil?),
            s(:next), nil),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :rss), :items), :each),
            s(:args,
              s(:arg, :item)),
            s(:if,
              s(:send,
                s(:lvar, :item), :dc_date),
              s(:send,
                s(:lvar, :items), :<<,
                s(:array,
                  s(:send,
                    s(:lvar, :rss), :channel),
                  s(:lvar, :item))), nil)))))),
  s(:lvasgn, :processing_time,
    s(:send,
      s(:send,
        s(:const, nil, :Time), :now), :-,
      s(:lvar, :before_time))),
  s(:block,
    s(:send,
      s(:send,
        s(:block,
          s(:send,
            s(:lvar, :items), :sort),
          s(:args,
            s(:arg, :x),
            s(:arg, :y)),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :y), :[],
                s(:int, 1)), :dc_date), :<=>,
            s(:send,
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 1)), :dc_date))), :[],
        s(:irange,
          s(:int, 0),
          s(:int, 20))), :each),
    s(:args,
      s(:arg, :channel),
      s(:arg, :item)),
    s(:begin,
      s(:send, nil, :puts,
        s(:send,
          s(:dstr,
            s(:begin,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :item), :dc_date), :localtime), :iso8601)),
            s(:str, ": ")), :<<,
          s(:dstr,
            s(:begin,
              s(:send,
                s(:lvar, :channel), :title)),
            s(:str, ": "),
            s(:begin,
              s(:send,
                s(:lvar, :item), :title))))),
      s(:if,
        s(:send,
          s(:lvar, :item), :description),
        s(:send, nil, :puts,
          s(:dstr,
            s(:str, " Description: "),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :item), :description), :shorten,
                s(:int, 50))))), nil))),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "Used XML parser: "),
      s(:begin,
        s(:send,
          s(:const,
            s(:const, nil, :RSS), :Parser), :default_parser)))),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "Processing time: "),
      s(:begin,
        s(:lvar, :processing_time)),
      s(:str, "s"))))
