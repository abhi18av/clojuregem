s(:begin,
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:send, nil, :require,
    s(:str, "optparse/time")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:casgn, nil, :CODES,
    s(:array,
      s(:str, "iso-2022-jp"),
      s(:str, "shift_jis"),
      s(:str, "euc-jp"),
      s(:str, "utf8"),
      s(:str, "binary"))),
  s(:casgn, nil, :CODE_ALIASES,
    s(:hash,
      s(:pair,
        s(:str, "jis"),
        s(:str, "iso-2022-jp")),
      s(:pair,
        s(:str, "sjis"),
        s(:str, "shift_jis")))),
  s(:casgn, nil, :POSSIBLE_CODES,
    s(:dstr,
      s(:str, "("),
      s(:begin,
        s(:send,
          s(:begin,
            s(:send,
              s(:const, nil, :CODES), :+,
              s(:send,
                s(:const, nil, :CODE_ALIASES), :keys))), :join,
          s(:str, ","))),
      s(:str, ")"))),
  s(:block,
    s(:send,
      s(:const, nil, :ARGV), :options),
    s(:args,
      s(:arg, :opts)),
    s(:begin,
      s(:send,
        s(:send,
          s(:lvar, :opts), :banner), :<<,
        s(:str, " argv...")),
      s(:send,
        s(:lvar, :opts), :on_tail),
      s(:send,
        s(:lvar, :opts), :on_tail,
        s(:str, "common options:")),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on_tail,
          s(:str, "--help"),
          s(:str, "show this message")),
        s(:args),
        s(:begin,
          s(:send, nil, :puts,
            s(:lvar, :opts)),
          s(:send, nil, :exit))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-r"),
          s(:str, "--require=LIBRARY"),
          s(:const, nil, :String),
          s(:str, "require the LIBRARY, before"),
          s(:str, "executing your script")),
        s(:args,
          s(:arg, :lib)),
        s(:ivasgn, :@library,
          s(:lvar, :lib))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-i"),
          s(:str, "--inplace=[EXTENSION]"),
          s(:str, "edit ARGV files in place"),
          s(:str, "(make backup if EXTENSION supplied)")),
        s(:args,
          s(:arg, :inplace)),
        s(:ivasgn, :@inplace,
          s(:or,
            s(:lvar, :inplace),
            s(:str, "")))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-N=[NUM]"),
          s(:const, nil, :Integer)),
        s(:args,
          s(:arg, :num)),
        s(:ivasgn, :@number,
          s(:lvar, :num))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-t"),
          s(:str, "--[no-]time[=TIME]"),
          s(:const, nil, :Time),
          s(:str, "it's the time")),
        s(:args,
          s(:arg, :time)),
        s(:ivasgn, :@time,
          s(:lvar, :time))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-[0-7]"),
          s(:str, "-F"),
          s(:str, "--irs=[OCTAL]"),
          s(:const,
            s(:const, nil, :OptionParser), :OctalInteger),
          s(:str, "specify record separator"),
          s(:str, "(\\0, if no argument)")),
        s(:args,
          s(:arg, :irs)),
        s(:ivasgn, :@irs,
          s(:lvar, :irs))),
      s(:ivasgn, :@exec,
        s(:true)),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-n"),
          s(:str, "--no-exec[=FLAG]"),
          s(:const, nil, :TrueClass),
          s(:str, "not really execute")),
        s(:args,
          s(:arg, :exec)),
        s(:ivasgn, :@exec,
          s(:lvar, :exec))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-a"),
          s(:str, "--list[=LIST,LIST]"),
          s(:const, nil, :Array),
          s(:str, "list")),
        s(:args,
          s(:arg, :list)),
        s(:ivasgn, :@list,
          s(:lvar, :list))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "--pair[=car,cdr]"),
          s(:const, nil, :Array),
          s(:str, "pair")),
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:ivasgn, :@x,
            s(:lvar, :x)),
          s(:ivasgn, :@y,
            s(:lvar, :y)))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "--code=CODE"),
          s(:const, nil, :CODES),
          s(:const, nil, :CODE_ALIASES),
          s(:str, "select coding system"),
          s(:send,
            s(:send,
              s(:str, "("), :+,
              s(:send,
                s(:const, nil, :CODES), :join,
                s(:str, ","))), :+,
            s(:str, ",")),
          s(:send,
            s(:send,
              s(:str, " "), :+,
              s(:send,
                s(:send,
                  s(:const, nil, :CODE_ALIASES), :keys), :join,
                s(:str, ","))), :+,
            s(:str, ")"))),
        s(:args,
          s(:arg, :c)),
        s(:ivasgn, :@code,
          s(:lvar, :c))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "--type[=TYPE]"),
          s(:array,
            s(:sym, :text),
            s(:sym, :binary)),
          s(:str, "select type(text, binary)")),
        s(:args,
          s(:arg, :t)),
        s(:ivasgn, :@type,
          s(:lvar, :t))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-v"),
          s(:str, "--[no-]verbose=[FLAG]"),
          s(:str, "run verbosely")),
        s(:args,
          s(:arg, :v)),
        s(:ivasgn, :@verbose,
          s(:lvar, :v))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "-q"),
          s(:str, "--quit"),
          s(:str, "quit when ARGV is empty")),
        s(:args,
          s(:arg, :q)),
        s(:ivasgn, :@quit,
          s(:lvar, :q))),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on,
          s(:str, "--add=SWITCH=[ARG]"),
          s(:str, "add option on the fly"),
          s(:regexp,
            s(:str, "\\A(\\w+)(?:=.+)?\\Z"),
            s(:regopt))),
        s(:args,
          s(:arg, :opt),
          s(:arg, :var)),
        s(:send,
          s(:lvar, :opts), :on,
          s(:dstr,
            s(:str, "--"),
            s(:begin,
              s(:lvar, :opt))),
          s(:str, "added in runtime"),
          s(:block_pass,
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "proc {|x|@"),
                s(:begin,
                  s(:lvar, :var)),
                s(:str, "=x}")))))),
      s(:send,
        s(:lvar, :opts), :on_head,
        s(:str, "specific options:")),
      s(:block,
        s(:send,
          s(:lvar, :opts), :on_tail,
          s(:str, "--version"),
          s(:str, "show version")),
        s(:args),
        s(:begin,
          s(:send, nil, :puts,
            s(:send,
              s(:const,
                s(:const, nil, :OptionParser), :Version), :join,
              s(:str, "."))),
          s(:send, nil, :exit))),
      s(:send,
        s(:lvar, :opts), :parse!))),
  s(:send, nil, :pp,
    s(:self)),
  s(:if,
    s(:ivar, :@quit),
    s(:kwbegin,
      s(:send, nil, :print,
        s(:send,
          s(:const, nil, :ARGV), :options)),
      s(:send, nil, :exit)), nil),
  s(:send,
    s(:const, nil, :ARGV), :options=,
    s(:nil)),
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :ARGV), :empty?), :!),
    s(:send, nil, :puts,
      s(:dstr,
        s(:str, "ARGV = "),
        s(:begin,
          s(:send,
            s(:const, nil, :ARGV), :join,
            s(:str, " "))))), nil))
